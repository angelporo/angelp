{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/angelp_avatar.jpeg","path":"images/angelp_avatar.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"bf6965f447ba4fee791ca2123c53b963786244e3","modified":1497228926000},{"_id":"source/CNAME","hash":"72057f81e19837a8e48bd5899d3dcde9b44d6609","modified":1497230883000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1497098050000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1497098050000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1497098050000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1497098050000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1497098050000},{"_id":"themes/next/.gitignore","hash":"32ea93f21d8693d5d8fa4eef1c51a21ad0670047","modified":1497098050000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1497098050000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1497098050000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1497098050000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1497098050000},{"_id":"themes/next/_config.yml","hash":"3ff728839aa5815f63dba55fa1d3239108b4d360","modified":1497237039000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1497098050000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1497098050000},{"_id":"themes/next/bower.json","hash":"be0a430362cb73a7e3cf9ecf51a67edf8214b637","modified":1497098050000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1497098050000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1497098050000},{"_id":"source/_posts/#react使用感受.md#","hash":"7c4ad0279f4a545dc24e53b6ace752b491b56df5","modified":1497405132000},{"_id":"source/_posts/JSON数据规范.md","hash":"ca27c4e96f0c9bab5d057c802d944c455748a73e","modified":1498726873000},{"_id":"source/_posts/.DS_Store","hash":"6df3a7539afadfa5032294a35edd0fb84331b8c4","modified":1499667792000},{"_id":"source/_posts/Immutable-js意义以及使用场所.md","hash":"3b8bf969d22c7d4dfe54c7526829496e32f06e5b","modified":1500626045000},{"_id":"source/_posts/emacs使用笔记.md","hash":"4d4153041c7ea15e4cc055cd610b3444a1bd02fd","modified":1500687770000},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑.md","hash":"d7ca867e482afbebc0aed915154911b700bc08aa","modified":1497949195000},{"_id":"source/_posts/js移触屏滑动事件.md","hash":"2a2f8662087b46418c5aa0f7aec22af497fff2cb","modified":1497094838000},{"_id":"source/_posts/react-native中android环境问题.md","hash":"6196942458d114f8f354674c91d759fa1d1a2234","modified":1497333882000},{"_id":"source/_posts/react-native地区选择器.md","hash":"a85607725bf4438891206060a194ecbaf0f5030a","modified":1498102456000},{"_id":"source/_posts/hexo添加自己域名.md","hash":"17066744ae3a214c5a39cf6522b39ebebc62ee36","modified":1497235337000},{"_id":"source/_posts/react-native开发中常见的坑.md","hash":"b96fe93e2b793f7992c79890d035af9a1ad932ec","modified":1498704356000},{"_id":"source/_posts/react-redux小型项目感受.md","hash":"0d3accd87092459394f657dc06d911a04e6a52f1","modified":1497094838000},{"_id":"source/_posts/react-native构建踩坑.md","hash":"26f3965d2f04749c25ae04ca6cfbc666cfaf3d88","modified":1497259689000},{"_id":"source/_posts/react中setState的使用.md","hash":"556ab48bcc5fb51aa157a920c1be32012df1d922","modified":1499669831000},{"_id":"source/_posts/react使用感受.md","hash":"c8c90ab04989f38ea2ef3ea4a2b721dd65ad3961","modified":1497403844000},{"_id":"source/_posts/react系列使用redux.md","hash":"3a2725e21300a70d899829bb6ea5ac21238bb66c","modified":1497424235000},{"_id":"source/_posts/vim转移emacs的艰辛路程.md","hash":"8dd116fcbcba5658f4e5568a382fec35247ccfd9","modified":1499419211000},{"_id":"source/_posts/web前端mac下常用软件.md","hash":"9c775a28ec7d18f0fb365b5a37b592ee2b7a93e5","modified":1497094838000},{"_id":"source/_posts/优雅的设计redux中的store的state树.md","hash":"995a9c8f70f8b315ec386f8836bbd70fb5cba853","modified":1497834971000},{"_id":"source/_posts/体验es7中的Async-Await来处理异步.md","hash":"502391d5d9f4533e54459e68f73f0e79c5ae802f","modified":1499760117000},{"_id":"source/_posts/开发环境介绍以及博客搭建.md","hash":"901370f68ad61b5dddb3ce08a9752b9bacd7ad61","modified":1497094838000},{"_id":"source/categories/index.md","hash":"e60e9161b01694d1c721410c6bfaf9b792982b8f","modified":1497094838000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496646356000},{"_id":"source/写过的一些项目/index.md","hash":"e68e7c65e0c36fdbcb73b5560406d82f7438fa0e","modified":1497094838000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1497098050000},{"_id":"source/tags/index.md","hash":"6321e9094b7442680ce78872f74fb7719b161415","modified":1497094838000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1497098050000},{"_id":"source/日记/index.md","hash":"56b4058c217178ff8f3f8d962c5df9cab6d2554e","modified":1497094838000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1497097699000},{"_id":"themes/next/.git/packed-refs","hash":"6705dec1efe015bd8f76d53b3711ff40f89dbda7","modified":1497098050000},{"_id":"themes/next/.git/index","hash":"fa563c2088d112dc17d5686fbd87ffec3c2ed901","modified":1497098142000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1497098050000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1497098050000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1497098050000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1497098050000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1497098050000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1497098050000},{"_id":"themes/next/layout/_layout.swig","hash":"98910163f4bb2856692fdbb55d6e82233fb0c24e","modified":1497098050000},{"_id":"themes/next/layout/category.swig","hash":"82e7bc278559b4335ad974659104eaaf04863032","modified":1497098050000},{"_id":"themes/next/layout/archive.swig","hash":"5de4dca06b05d99e4f6bad617a4b8f4f3592fb01","modified":1497098050000},{"_id":"themes/next/layout/index.swig","hash":"03e8a2cda03bad42ac0cb827025eb81f95d496a2","modified":1497098050000},{"_id":"themes/next/layout/post.swig","hash":"2d5f8d7f0a96b611e2d5a5e4d111fc17726a990f","modified":1497098050000},{"_id":"themes/next/layout/tag.swig","hash":"2e73ee478e981092ea9a5d10dd472a9461db395b","modified":1497098050000},{"_id":"themes/next/layout/schedule.swig","hash":"f93c53f6fd5c712584f6efba6f770c30fa8a3e80","modified":1497098050000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1497098050000},{"_id":"themes/next/layout/page.swig","hash":"baa667bc801349d5c4984c0f172973d3780400df","modified":1497098050000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1497098050000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1497098050000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1497098050000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1497098050000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1497098050000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1497098050000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1497098050000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1497098050000},{"_id":"themes/next/languages/ru.yml","hash":"1549a7c2fe23caa7cbedcd0aa2b77c46e57caf27","modified":1497098050000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1497098050000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1497098050000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1497098050000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1497098050000},{"_id":"source/images/angelp_avatar.jpeg","hash":"9ec573303de3142e85edc864c52508fbd448b59d","modified":1497094838000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"source/_posts/hexo添加自己域名/admin.png","hash":"57afd2230dc5a35fff079c028163feeb02b944ce","modified":1497234547000},{"_id":"source/_posts/Immutable-js意义以及使用场所/immutable2.jpg","hash":"86988e0621758220c14f48afffb5448138c8b150","modified":1500624443000},{"_id":"source/_posts/js移触屏滑动事件/touchstart_demo.png","hash":"33318f5460706cf7bd874b297e82725283256b99","modified":1497094838000},{"_id":"source/_posts/web前端mac下常用软件/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496645108000},{"_id":"source/_posts/开发环境介绍以及博客搭建/.DS_Store","hash":"1fbf5355cb0967c1965730111405a3aaddfb4165","modified":1497077653000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1497097699000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1497097699000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1497097699000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1497097699000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1497097699000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1497097699000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1497097699000},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1497097699000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1497097699000},{"_id":"themes/next/.git/logs/HEAD","hash":"71ffda16dc283911dcd95ec334330e17c6a6a816","modified":1497098050000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1497097699000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1497098050000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1497098050000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1497098050000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1497098050000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1497098050000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1497098050000},{"_id":"themes/next/scripts/tags/note.js","hash":"21b102db8a01c7b15ae2c0ea3ef3d4cf807ec6ed","modified":1497098050000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1497098050000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1497098050000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1497098050000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1497098050000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1497098050000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1497098050000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1497098050000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1497098050000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1497098050000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497098050000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1497098050000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1497098050000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1497098050000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1497098050000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1497098050000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1497098050000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1497098050000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9baf90f7c40b3b10f288e9268c3191e895890cea","modified":1497098050000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1497098050000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1497098050000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1497098050000},{"_id":"themes/next/layout/_macro/post.swig","hash":"9481f43ed356e00df7b519e92ad0becebc9e1505","modified":1497098050000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"a2b213c1a7c37cd6e4749f2018371f4c1f4f0d23","modified":1497098050000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1497098050000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1497098050000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1497098050000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1497098050000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1497098050000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1497098050000},{"_id":"themes/next/layout/_partials/head.swig","hash":"6a7eb93d8aa7d4baa472890bd666b921f449d8af","modified":1497098050000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1497098050000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1497098050000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1497098050000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1497098050000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1497098050000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1497098050000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1497098050000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1497098050000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1497098050000},{"_id":"source/_posts/react中setState的使用/this.setState.png","hash":"27974f93740ca4eb5c9d1554b2d2b9b6984c45a4","modified":1499502837000},{"_id":"source/_posts/web前端mac下常用软件/dash-seach.png","hash":"74059b55bdfc9185c3846b4d5e32a67ac7824c0d","modified":1497094838000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1497098050000},{"_id":"source/_posts/react使用感受/react.png","hash":"f19ac1e7241b9866970c8b0c387a5f3369f58ffc","modified":1497094838000},{"_id":"source/_posts/react系列使用redux/redux-thing-image2.png","hash":"d268066fd336fbac5c0b8a8915a3a853d9b8d839","modified":1497412178000},{"_id":"themes/next/.git/refs/heads/master","hash":"5adf12fc29bb4176af9fd5ef350a9238dd08497d","modified":1497098050000},{"_id":"source/_posts/开发环境介绍以及博客搭建/hexo-info.png","hash":"0298084aad94297e7f5a1352d21cd4730fe9298e","modified":1497094838000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1497098050000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1497098050000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"d6a793bcada68d4b6c58392546bc48a482e4a7d3","modified":1497098050000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1497098050000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1497098050000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1497098050000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1497098050000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1497098050000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1497098050000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1497098050000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1497098050000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1497098050000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1497098050000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1497098050000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1497098050000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1497098050000},{"_id":"themes/next/source/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1497098050000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1497098050000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1497098050000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1497098050000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1497098050000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1497098050000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1497098050000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1497098050000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1497098050000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1497098050000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1497098050000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1497098050000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1497098050000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1497098050000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1497098050000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1497098050000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1497098050000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1497098050000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1497098050000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1497098050000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1497098050000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1497098050000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1497098050000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1497098050000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1497098050000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1497098050000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1497098050000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1497098050000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1497098050000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1497098050000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1497098050000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1497098050000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1497098050000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1497098050000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1497098050000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1d0d01aaeb7bcde3671263d736718f8837c20182","modified":1497098050000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1497098050000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1497098050000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1497098050000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"1f349aa30dd1f7022f7d07a1f085eea5ace3f26d","modified":1497098050000},{"_id":"source/_posts/react系列使用redux/redux-thing-image1.png","hash":"74ec09b58cc5132aa0f23d0d5ca6d219ef5f99f9","modified":1497410921000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1497098050000},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","hash":"442d137ca0e56d61c9dc4b13ec679eca77d18a52","modified":1497927665000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1497098050000},{"_id":"source/_posts/Immutable-js意义以及使用场所/immuable.gif","hash":"93c37a476770bf80f4debd367237f8ef0280643c","modified":1499666293000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1497098050000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"71ffda16dc283911dcd95ec334330e17c6a6a816","modified":1497098050000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1497098050000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1497098050000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1497098050000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1497098050000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1497098050000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1497098050000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1497098050000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1497098050000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1497098050000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1497098050000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1497098050000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1497098050000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1497098050000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1497098050000},{"_id":"source/_posts/web前端mac下常用软件/emacs-example.png","hash":"59f909fb8042b3da0ec9b2667d25e50b9b0db1a4","modified":1497094838000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1497098050000},{"_id":"themes/next/.git/objects/pack/pack-5d767bd005c8770f50ff74055874661415bac124.idx","hash":"86bc943721a265dd5e0fd1bbbaa9a37833598bb5","modified":1497098050000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"71ffda16dc283911dcd95ec334330e17c6a6a816","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1497098050000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1497098050000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"88c7d75646b66b168213190ee4cd874609afd5e3","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ed88c8b51d0517759c777e71a6bfbe2907bcd994","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"468bc734f47209096588ef1a8e55e60a3b12aa63","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"08a500b2984f109b751f3697ca33172d1340591a","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"4fda5d38c6c8d910e3bf5c74a48a8d4a3f3dc73d","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"bb3be8374c31c372ed0995bd8030d2b920d581de","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"dfc86d37f5b580977d82af6ef835082d09a0c499","modified":1497098050000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1497098050000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1497098050000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1497098050000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1497098050000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1497098050000},{"_id":"source/_posts/web前端mac下常用软件/mac-down.png","hash":"957654bb33880a91d8e817c8284b1ebb233dec41","modified":1497094838000},{"_id":"source/_posts/vim转移emacs的艰辛路程/vim_key_help.png","hash":"847b6d5c2e01351a7118a01aed86eae232e74ed3","modified":1498807850000},{"_id":"themes/next/.git/objects/pack/pack-5d767bd005c8770f50ff74055874661415bac124.pack","hash":"ab8b0bba796dbb31b265fc2bbb5bead90e69287e","modified":1497098050000},{"_id":"public/categories/index.html","hash":"0bcc652972a61f898cc01ec46bb8d35c08858062","modified":1500687782223},{"_id":"public/写过的一些项目/index.html","hash":"f5dd478ad4af480384c34aeb1e5018d28e2533a3","modified":1500687782234},{"_id":"public/tags/index.html","hash":"4c6f2e0e4c05199eb464fc4b4230eb087626035c","modified":1500687782235},{"_id":"public/日记/index.html","hash":"ccb4ac3ab6d74c3cc63a28d6c02988adac6ad831","modified":1500687782235},{"_id":"public/2017/07/04/emacs使用笔记/index.html","hash":"0b4ac7ced8aa889c56bd7fe81eb1981220da23ae","modified":1500687782235},{"_id":"public/2017/06/29/JSON数据规范/index.html","hash":"8f7a2dc4a1773578258d903bb0543c31fca1c601","modified":1500687782235},{"_id":"public/2017/06/29/react-native开发中常见的坑/index.html","hash":"2f4df07c6379be38e84af3b3c28030eba2683d57","modified":1500687782235},{"_id":"public/2017/06/22/react-native地区选择器/index.html","hash":"a52f8a342b8726c5a87256a86ba06b779ed2f7f9","modified":1500687782235},{"_id":"public/2017/06/06/react-redux小型项目感受/index.html","hash":"741560df5cbb94ad9c612080571dfe5c96063041","modified":1500687782235},{"_id":"public/archives/page/2/index.html","hash":"bc9499ccb3836fb15251c33c64c45e4ac117fd93","modified":1500687782235},{"_id":"public/archives/2017/page/2/index.html","hash":"06e677fa82f60e321d947cfea3d935369c4c974c","modified":1500687782235},{"_id":"public/archives/2017/06/page/2/index.html","hash":"029a85bfd0540b588f16511c3f1869f5824daf5a","modified":1500687782235},{"_id":"public/archives/2017/07/index.html","hash":"28841c16417672f9cc15c9a7689cdc435ca872cc","modified":1500687782235},{"_id":"public/categories/emacs使用记/index.html","hash":"7432e9b0c8823ba3ac467fca3150ef9663a57e39","modified":1500687782235},{"_id":"public/categories/web前端/index.html","hash":"356db7309708e50ec2b3997e532edd83f9596566","modified":1500687782235},{"_id":"public/categories/react-native踩坑记/index.html","hash":"82eb0e2d92c89d858dae3aa838c5e1ac6e5c81cc","modified":1500687782235},{"_id":"public/categories/hexo/index.html","hash":"9baf05b1ff886859b751240dc0c12798f32664f1","modified":1500687782236},{"_id":"public/2017/07/08/react中setState的使用/index.html","hash":"8f6c4d10cb3f45feaf2f785c4fbd7404781c5e2d","modified":1500687782236},{"_id":"public/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/index.html","hash":"55244deb75c0e1b4ba9ba0fcca9e092123135654","modified":1500687782236},{"_id":"public/2017/06/15/Immutable-js意义以及使用场所/index.html","hash":"844fdffc5959c7f04f2d8087087640a52cb009b8","modified":1500687782236},{"_id":"public/2017/06/15/优雅的设计redux中的store的state树/index.html","hash":"5ff1bfb4b1bfba2419e990a5d83f42f92f725b12","modified":1500687782236},{"_id":"public/2017/06/14/体验es7中的Async-Await来处理异步/index.html","hash":"cae307831fcd3ba2996b84576a6abbca02506d8a","modified":1500687782236},{"_id":"public/2017/06/14/react系列使用redux/index.html","hash":"8db1bf1c98d45ea5c0370b73d84175fe0b2eb393","modified":1500687782236},{"_id":"public/2017/06/13/react-native中android环境问题/index.html","hash":"2866b2adf3973d83b69c4857cf58e047d50388d5","modified":1500687782236},{"_id":"public/2017/06/12/hexo添加自己域名/index.html","hash":"6206c7bfd4cf421a152c614c6425370a566c5a35","modified":1500687782236},{"_id":"public/2017/06/10/开发环境介绍以及博客搭建/index.html","hash":"4fb395f866b7320decc14d69b14ae4a6ba7ec163","modified":1500687782236},{"_id":"public/2017/06/10/react使用感受/index.html","hash":"08d3e21d122850a0699cde39d72ede4a07cd7655","modified":1500687782236},{"_id":"public/2017/06/09/react-native构建踩坑/index.html","hash":"3aa7c015b86d5d00f5e4ef62d88b16bcb92baabf","modified":1500687782236},{"_id":"public/2017/06/07/js移触屏滑动事件/index.html","hash":"f5afe13f6ecfa6c1dc397dece3715da1ff3b6882","modified":1500687782236},{"_id":"public/2017/06/05/web前端mac下常用软件/index.html","hash":"160e090a8e14c3120fa94c22037501a202670846","modified":1500687782237},{"_id":"public/2017/06/04/vim转移emacs的艰辛路程/index.html","hash":"c2aa500aafabe9d8fe03bc22daa9895f14b44032","modified":1500687782237},{"_id":"public/archives/index.html","hash":"f31c133295cdc7cf16d67a3dd2f73b52118a1a4b","modified":1500687782237},{"_id":"public/archives/2017/index.html","hash":"c80f094764207bdaa475feb9a0314acd480ac1d7","modified":1500687782237},{"_id":"public/archives/2017/06/index.html","hash":"94c1bc406793824089a5aad2cd9da666bd87ee92","modified":1500687782237},{"_id":"public/categories/react-native/index.html","hash":"d02e5639596f10056055c4f9eead567b4d2de2e6","modified":1500687782254},{"_id":"public/categories/blog/index.html","hash":"969e2709d6faad3d7e21f9a06f3875fffa44b391","modified":1500687782254},{"_id":"public/categories/react/index.html","hash":"fcd6daaa4f3fc19ecf35283f3fbb31202d4eef86","modified":1500687782254},{"_id":"public/categories/emacs/index.html","hash":"0642a8c00713a5e230d1973e34255f921269540c","modified":1500687782254},{"_id":"public/categories/mac/index.html","hash":"6b4072b22aa2e017abe8ed669a40fc0b1df0a721","modified":1500687782255},{"_id":"public/categories/redux/index.html","hash":"e120e3072a3b0e4ebf6847b58667b41206eeb589","modified":1500687782255},{"_id":"public/categories/javascript/index.html","hash":"5ddad2657d04d9740e535cefb1fb6ca7cc0af550","modified":1500687782255},{"_id":"public/tags/react/index.html","hash":"123acb28dd16b63af9fa1722187fa40886f877b3","modified":1500687782255},{"_id":"public/tags/react-native/index.html","hash":"b1ff68361876544dc10d9ca6631ee3d5c28fa886","modified":1500687782255},{"_id":"public/tags/immutable/index.html","hash":"1a6a0f711f33e45227d8ca6cb2fc1a0dc9b1ff5a","modified":1500687782255},{"_id":"public/tags/emacs/index.html","hash":"1bdca514c1b2772a91c89274aa3671dec807fbdc","modified":1500687782255},{"_id":"public/tags/emacs-API/index.html","hash":"9be8b073f5c0c2b1c54c843c684fdc754555c72b","modified":1500687782256},{"_id":"public/tags/emacs自动补全/index.html","hash":"0976c8910ea7797bb93ffb23436727d6ab173377","modified":1500687782256},{"_id":"public/tags/ycmd/index.html","hash":"2eb9789ecc0c95119fb3381fc5c81dab72e42bf5","modified":1500687782256},{"_id":"public/tags/company-mode/index.html","hash":"9f3eeee7880ddeec0d653ed36c8aabe83fd11fb8","modified":1500687782256},{"_id":"public/tags/hippie/index.html","hash":"ae6b892e95df8b4783888f4e5df2e4d26df992b7","modified":1500687782256},{"_id":"public/tags/h5/index.html","hash":"133a828f2bc4643778756849dda4594ef9d37a9e","modified":1500687782256},{"_id":"public/tags/RN-android/index.html","hash":"f4cb3dbf61a6eea1df2312405126fef23ec2b685","modified":1500687782256},{"_id":"public/tags/hexo/index.html","hash":"0bb2a41ea3c33a6b985fd16cb66896d5a4737a68","modified":1500687782256},{"_id":"public/tags/next主题/index.html","hash":"32d2311dfff491d6d4b90b93a35fdde9cbde852e","modified":1500687782256},{"_id":"public/tags/redux/index.html","hash":"f3ca07f7f3040c095fa0704ed0e78ab02c717e6b","modified":1500687782256},{"_id":"public/tags/setState/index.html","hash":"29f4522b398671db34bebc02a5ddce20bb81a6dc","modified":1500687782256},{"_id":"public/tags/vim/index.html","hash":"d2b53f25ef2744ed17ca80ef5d185e6a8fb348fe","modified":1500687782256},{"_id":"public/tags/mac/index.html","hash":"e39bec73526e89346ac7f16e0315235cc95dee69","modified":1500687782256},{"_id":"public/tags/react-nativem/index.html","hash":"9f6bd743ccd5e04dcb929c78c87a88264627b14c","modified":1500687782257},{"_id":"public/tags/es7/index.html","hash":"83f877c55abca2e434476c8008e44110b663b8bc","modified":1500687782257},{"_id":"public/tags/javascript/index.html","hash":"6cb805812803d71d88da51ce183641828e0d2b3f","modified":1500687782257},{"_id":"public/tags/blog/index.html","hash":"6078736a680edc2fe379c6058b28fd75ddfc997c","modified":1500687782257},{"_id":"public/index.html","hash":"2b488881f6b29279a182dd4e35e59d550457e049","modified":1500687782257},{"_id":"public/page/2/index.html","hash":"1c20160a3d9ce5d872e551ff026e21732fc2d8f2","modified":1500687782257},{"_id":"public/CNAME","hash":"72057f81e19837a8e48bd5899d3dcde9b44d6609","modified":1500687782257},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1500687782257},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1500687782257},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1500687782257},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1500687782257},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1500687782257},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1500687782257},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1500687782257},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500687782257},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1500687782257},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1500687782257},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1500687782257},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1500687782257},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1500687782257},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1500687782257},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1500687782257},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1500687782257},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1500687782257},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1500687782257},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1500687782258},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1500687782258},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1500687782258},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1500687782258},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1500687782258},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1500687782258},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1500687782258},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1500687782258},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1500687782258},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1500687782258},{"_id":"public/2017/06/07/js移触屏滑动事件/touchstart_demo.png","hash":"33318f5460706cf7bd874b297e82725283256b99","modified":1500687782258},{"_id":"public/2017/06/12/hexo添加自己域名/admin.png","hash":"57afd2230dc5a35fff079c028163feeb02b944ce","modified":1500687782258},{"_id":"public/2017/06/15/Immutable-js意义以及使用场所/immutable2.jpg","hash":"86988e0621758220c14f48afffb5448138c8b150","modified":1500687782258},{"_id":"public/images/angelp_avatar.jpeg","hash":"9ec573303de3142e85edc864c52508fbd448b59d","modified":1500687783655},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1500687783657},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1500687783673},{"_id":"public/2017/07/08/react中setState的使用/this.setState.png","hash":"27974f93740ca4eb5c9d1554b2d2b9b6984c45a4","modified":1500687783673},{"_id":"public/2017/06/05/web前端mac下常用软件/dash-seach.png","hash":"74059b55bdfc9185c3846b4d5e32a67ac7824c0d","modified":1500687783674},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1500687783688},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1500687783688},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1500687783688},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1500687783688},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1500687783688},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1500687783688},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1500687783688},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1500687783688},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1500687783688},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1500687783688},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"3587602ad777b031628bb5944864d1a4fcfea4ac","modified":1500687783689},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1500687783689},{"_id":"public/js/src/utils.js","hash":"b2ea56de27fddc6d9118051da384f781cd93951d","modified":1500687783689},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1500687783689},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1500687783689},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1500687783689},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1500687783689},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1500687783689},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1500687783689},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1500687783689},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1500687783689},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1500687783689},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1500687783690},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1500687783692},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1500687783694},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1500687783694},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1500687783694},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1500687783694},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1500687783694},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1500687783694},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1500687783695},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1500687783695},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1500687783695},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1500687783695},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1500687783695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1500687783695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1500687783695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1500687783695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1500687783695},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1500687783695},{"_id":"public/css/main.css","hash":"3fa2bd673d4498b2f035d517e79119a90f787ff3","modified":1500687783695},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1500687783695},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1500687783696},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1500687783696},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1500687783696},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1500687783696},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1500687783696},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1500687783696},{"_id":"public/lib/Han/dist/han.min.css","hash":"d9c0b3dc9158e717fde36f554709e6c3a22b5f85","modified":1500687783696},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1500687783696},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1500687783696},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1500687783696},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1500687783696},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1500687783696},{"_id":"public/lib/Han/dist/han.css","hash":"38e48f275ad00daa9dcdcb8d9b44e576acda4707","modified":1500687783696},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1500687783696},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1500687783696},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1500687783697},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1500687783697},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1500687783697},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1500687783698},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1500687783698},{"_id":"public/2017/06/10/开发环境介绍以及博客搭建/hexo-info.png","hash":"0298084aad94297e7f5a1352d21cd4730fe9298e","modified":1500687783698},{"_id":"public/2017/06/10/react使用感受/react.png","hash":"f19ac1e7241b9866970c8b0c387a5f3369f58ffc","modified":1500687783698},{"_id":"public/2017/06/14/react系列使用redux/redux-thing-image2.png","hash":"d268066fd336fbac5c0b8a8915a3a853d9b8d839","modified":1500687783698},{"_id":"public/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","hash":"442d137ca0e56d61c9dc4b13ec679eca77d18a52","modified":1500687783710},{"_id":"public/2017/06/14/react系列使用redux/redux-thing-image1.png","hash":"74ec09b58cc5132aa0f23d0d5ca6d219ef5f99f9","modified":1500687783711},{"_id":"public/2017/06/15/Immutable-js意义以及使用场所/immuable.gif","hash":"93c37a476770bf80f4debd367237f8ef0280643c","modified":1500687783722},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1500687783737},{"_id":"public/2017/06/05/web前端mac下常用软件/emacs-example.png","hash":"59f909fb8042b3da0ec9b2667d25e50b9b0db1a4","modified":1500687783737},{"_id":"public/2017/06/05/web前端mac下常用软件/mac-down.png","hash":"957654bb33880a91d8e817c8284b1ebb233dec41","modified":1500687783775},{"_id":"public/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png","hash":"847b6d5c2e01351a7118a01aed86eae232e74ed3","modified":1500687783786}],"Category":[{"name":"emacs使用记","_id":"cj5emr7e2000b6j83z93xregt"},{"name":"web前端","_id":"cj5emr7eb000g6j837b12nofw"},{"name":"react-native踩坑记","_id":"cj5emr7ej000l6j83vqa5x97q"},{"name":"hexo","_id":"cj5emr7f8000t6j83g4ml594m"},{"name":"react-native","_id":"cj5emr7fk000z6j83efdleu1j"},{"name":"blog","_id":"cj5emr7fo00176j832ayqm94u"},{"name":"react","_id":"cj5emr7fr001c6j83klmwvvsm"},{"name":"emacs","_id":"cj5emr7fs001f6j83ait4xusw"},{"name":"mac","_id":"cj5emr7fs001j6j83v4691ei0"},{"name":"redux","_id":"cj5emr7fv001n6j83j6hbq0zb"},{"name":"javascript","_id":"cj5emr7fy001s6j83a3nluq8b"}],"Data":[],"Page":[{"title":"categories","date":"2017-06-10T03:24:18.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-10 11:24:18\ntype: \"categories\"\n---\n","updated":"2017-06-10T11:40:38.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj5emr7de00016j839wt3c7jl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"写过的一些项目","date":"2017-06-04T07:03:02.000Z","_content":"## 记载一些项目上的坑\n","source":"写过的一些项目/index.md","raw":"---\ntitle: 写过的一些项目\ndate: 2017-06-04 15:03:02\n---\n## 记载一些项目上的坑\n","updated":"2017-06-10T11:40:38.000Z","path":"写过的一些项目/index.html","comments":1,"layout":"page","_id":"cj5emr7dk00036j83hjx8480s","content":"<h2 id=\"记载一些项目上的坑\"><a href=\"#记载一些项目上的坑\" class=\"headerlink\" title=\"记载一些项目上的坑\"></a>记载一些项目上的坑</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记载一些项目上的坑\"><a href=\"#记载一些项目上的坑\" class=\"headerlink\" title=\"记载一些项目上的坑\"></a>记载一些项目上的坑</h2>"},{"title":"tags","date":"2017-06-05T03:42:40.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-05 11:42:40\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-06-10T11:40:38.000Z","path":"tags/index.html","layout":"page","_id":"cj5emr7dv00066j83o0flnna3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"日记","date":"2017-06-10T03:25:12.000Z","_content":"","source":"日记/index.md","raw":"---\ntitle: 日记\ndate: 2017-06-10 11:25:12\n---\n","updated":"2017-06-10T11:40:38.000Z","path":"日记/index.html","comments":1,"layout":"page","_id":"cj5emr7dx00086j83dxpq77ev","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Immutable.js意义以及使用场所","date":"2017-06-15T09:19:56.000Z","_content":"\n### [学习资料地址](https://juejin.im/post/5948985ea0bb9f006bed7472)\n\n> Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n\n<!-- more -->\n\n安装: `npm install immutable`\n\n{% asset_img immuable.gif Immuable  %}\n\n```\nlet foo = {a: {b: 1}};\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b);  // 打印 2\nconsole.log(foo === bar);  //  打印 true\n\n// 使用 immutable.js 后\nimport Immutable from 'immutable';\nfoo = Immutable.fromJS({a: {b: 1}});\nbar = foo.setIn(['a', 'b'], 2);   // 使用 setIn 赋值\nconsole.log(foo.getIn(['a', 'b']));  // 使用 getIn 取值，打印 1\n\nconsole.log(foo === bar);  //  打印 false\n```\n\n先放上官方`README`要解决的  (共享的可变状态是万恶之源)\n\n上面的例子中已经看出来了, , , 着不是react设计初衷,\n\n## Immutable 优点\n1. Immutable 降低了 Mutable 带来的复杂度\n\n\t> 可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯\n\n2. 节省内存\n\n\t> Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。\n\n```\nimport { Map} from 'immutable';\nlet a = Map({\n  select: 'users',\n  filter: Map({ name: 'Cam' })\n})\nlet b = a.set('select', 'people');\n\na === b; // false\n\na.get('filter') === b.get('filter'); // true\n\n```\n\n3. Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟\n\n    > 因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。\n\n4. 并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？\n\n常用api示例:\n\n```\n//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)\nimmutable.Map({name:'danny', age:18})\n\n//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)\nimmutable.List([1,2,3,4,5])\n\n//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)\nimmutable.fromJS([1,2,3,4,5])    //将原生array  --> List\nimmutable.fromJS({name:'danny', age:18})   //将原生object  --> Map\n\n//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)\nimmutableData.toJS();\n\n//查看List或者map大小\nimmutableData.size  或者 immutableData.count()\n\n// is()   判断两个immutable对象是否相等\nimmutable.is(imA, imB);\n\n//merge()  对象合并\nvar imA = immutable.fromJS({a:1,b:2});\nvar imA = immutable.fromJS({c:3});\nvar imC = imA.merge(imB);\nconsole.log(imC.toJS())  //{a:1,b:2,c:3}\n\n//增删改查（所有操作都会返回新的值，不会修改原来值）\nvar immutableData = immutable.fromJS({\n    a:1,\n    b:2，\n    c:{\n        d:3\n    }\n});\nvar data1 = immutableData.get('a') //  data1 = 1\nvar data2 = immutableData.getIn(['c', 'd']) // data2 = 3   getIn用于深层结构访问\nvar data3 = immutableData.set('a' , 2);   // data3中的 a = 2\nvar data4 = immutableData.setIn(['c', 'd'], 4);   //data4中的 d = 4\nvar data5 = immutableData.update('a',function(x){return x+4})   //data5中的 a = 5\nvar data6 = immutableData.updateIn(['c', 'd'],function(x){return x+4})   //data6中的 d = 7\nvar data7 = immutableData.delete('a')   //data7中的 a 不存在\nvar data8 = immutableData.deleteIn(['c', 'd'])   //data8中的 d 不存在\n```\n### 我认为最大的缺点就是容易和原生对象混淆\n\n> 就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动`return`新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换\n\n```\nmap.get('key') // Immuable对象取值\nmay.key  //原生对象取值\n```\n\n### 周边信息\n\n两个 immutable 对象可以使用 `===` 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 `false`：\n\n```\nlet map1 = Immutable.Map({a:1, b:1, c:1});\nlet map2 = Immutable.Map({a:1, b:1, c:1});\nmap1 === map2;             // false\n```\n为了直接比较对象的值，immutable.js 提供了 `Immutable.is` 来做『值比较』，结果如下：\n```\nImmutable.is(map1, map2);  // true\n```\n`Immutable.is` 比较的是两个对象的 `hashCode` 或 `valueOf`（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 `hashCode` 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用 `Immutable.is` 来减少 React 重复渲染，提高性能。\n\n与 Object.freeze、const 区别\n\n`Object.freeze` 和 ES6 中新加入的 `const` 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。\n\nCursor 的概念\n\n这个 Cursor 和数据库中的游标是完全不同的概念。\n\n由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。\n\n```\nimport Immutable from 'immutable';\nimport Cursor from 'immutable/contrib/cursor';\n\nlet data = Immutable.fromJS({ a: { b: { c: 1 } } });\n// 让 cursor 指向 { c: 1 }\nlet cursor = Cursor.from(data, ['a', 'b'], newData => {\n  // 当 cursor 或其子 cursor 执行 update 时调用\n  console.log(newData);\n});\n\ncursor.get('c'); // 1\ncursor = cursor.update('c', x => x + 1);\ncursor.get('c'); // 2\n```\n\n### 实践\n\n1. 与 React 搭配使用，Pure Render\n\n熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 `shouldComponentUpdate()`，但它默认返回 `true`，即始终会执行 `render()` 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在 `shouldComponentUpdate()` 中使用使用 deepCopy 和 deepCompare 来避免无必要的 `render()`，但 deepCopy 和 deepCompare 一般都是非常耗性能的。\n\nImmutable 则提供了简洁高效的判断数据是否变化的方法，只需 `===` 和 `is` 比较就能知道是否需要执行 `render()`，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 `shouldComponentUpdate` 是这样的：\n\n前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是\n\n```\nimport { is } from 'immutable';\n\nshouldComponentUpdate: (nextProps = {}, nextState = {}) => {\n  const thisProps = this.props || {}, thisState = this.state || {};\n\n  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||\n      Object.keys(thisState).length !== Object.keys(nextState).length) {\n    return true;\n  }\n\n  for (const key in nextProps) {\n    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) {\n      return true;\n    }\n  }\n\n  for (const key in nextState) {\n    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n> 使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:\n{% asset_img immuable2.gif 使用后效果图  %}\n你也可以借助 `React.addons.PureRenderMixin` 或支持 class 语法的[pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator]() 来实现。\n\nsetState 的一个技巧\n\nReact 建议把 `this.state` 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：\n```\nimport '_' from 'lodash';\n\nconst Component = React.createClass({\n  getInitialState() {\n    return {\n      data: { times: 0 }\n    }\n  },\n  handleAdd() {\n    let data = _.cloneDeep(this.state.data);\n    data.times = data.times + 1;\n    this.setState({ data: data });\n    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。\n    console.log(this.state.data.times);\n  }\n}\n```\n使用 Immutable 后：\n```javaScript\ngetInitialState() {\n    return {\n      data: Map({ times: 0 })\n    }\n  },\n  handleAdd() {\n    this.setState({ data: this.state.data.update('times', v => v + 1) });\n    // 这时的 times 并不会改变\n    console.log(this.state.data.get('times'));\n  }\n```\n上面的 `handleAdd` 可以简写成：\n\n```javaScript\nhandleAdd() {\n    this.setState(({data}) => ({\n      data: data.update('times', v => v + 1) })\n    });\n  }\n```\n\n### 与`Redux`配合使用遇到的坑\n> 先说下`redux`中的单向数据流（View -> Action -> Middleware -> Reducer）, 项目中使用的redux,\n>由于redux中内置的`combineReducers`和reducer中的`initialState`都会返回一个原生的Object对象, 所以配合`Imuutable`之后就会和原生Object搭配使用,  开发起来很不爽.\n>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写`combineReducers`或使用[ redux-immutablejs](https://github.com/indexiatech/redux-immutablejs)来提供支持\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n> [写的很不错,  原文地址](https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender)\n","source":"_posts/Immutable-js意义以及使用场所.md","raw":"---\ntitle: Immutable.js意义以及使用场所\ndate: 2017-06-15 17:19:56\ntags:\n    - react\n    - react-native\n    - immutable\n---\n\n### [学习资料地址](https://juejin.im/post/5948985ea0bb9f006bed7472)\n\n> Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n\n<!-- more -->\n\n安装: `npm install immutable`\n\n{% asset_img immuable.gif Immuable  %}\n\n```\nlet foo = {a: {b: 1}};\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b);  // 打印 2\nconsole.log(foo === bar);  //  打印 true\n\n// 使用 immutable.js 后\nimport Immutable from 'immutable';\nfoo = Immutable.fromJS({a: {b: 1}});\nbar = foo.setIn(['a', 'b'], 2);   // 使用 setIn 赋值\nconsole.log(foo.getIn(['a', 'b']));  // 使用 getIn 取值，打印 1\n\nconsole.log(foo === bar);  //  打印 false\n```\n\n先放上官方`README`要解决的  (共享的可变状态是万恶之源)\n\n上面的例子中已经看出来了, , , 着不是react设计初衷,\n\n## Immutable 优点\n1. Immutable 降低了 Mutable 带来的复杂度\n\n\t> 可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯\n\n2. 节省内存\n\n\t> Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。\n\n```\nimport { Map} from 'immutable';\nlet a = Map({\n  select: 'users',\n  filter: Map({ name: 'Cam' })\n})\nlet b = a.set('select', 'people');\n\na === b; // false\n\na.get('filter') === b.get('filter'); // true\n\n```\n\n3. Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟\n\n    > 因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。\n\n4. 并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？\n\n常用api示例:\n\n```\n//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)\nimmutable.Map({name:'danny', age:18})\n\n//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)\nimmutable.List([1,2,3,4,5])\n\n//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)\nimmutable.fromJS([1,2,3,4,5])    //将原生array  --> List\nimmutable.fromJS({name:'danny', age:18})   //将原生object  --> Map\n\n//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)\nimmutableData.toJS();\n\n//查看List或者map大小\nimmutableData.size  或者 immutableData.count()\n\n// is()   判断两个immutable对象是否相等\nimmutable.is(imA, imB);\n\n//merge()  对象合并\nvar imA = immutable.fromJS({a:1,b:2});\nvar imA = immutable.fromJS({c:3});\nvar imC = imA.merge(imB);\nconsole.log(imC.toJS())  //{a:1,b:2,c:3}\n\n//增删改查（所有操作都会返回新的值，不会修改原来值）\nvar immutableData = immutable.fromJS({\n    a:1,\n    b:2，\n    c:{\n        d:3\n    }\n});\nvar data1 = immutableData.get('a') //  data1 = 1\nvar data2 = immutableData.getIn(['c', 'd']) // data2 = 3   getIn用于深层结构访问\nvar data3 = immutableData.set('a' , 2);   // data3中的 a = 2\nvar data4 = immutableData.setIn(['c', 'd'], 4);   //data4中的 d = 4\nvar data5 = immutableData.update('a',function(x){return x+4})   //data5中的 a = 5\nvar data6 = immutableData.updateIn(['c', 'd'],function(x){return x+4})   //data6中的 d = 7\nvar data7 = immutableData.delete('a')   //data7中的 a 不存在\nvar data8 = immutableData.deleteIn(['c', 'd'])   //data8中的 d 不存在\n```\n### 我认为最大的缺点就是容易和原生对象混淆\n\n> 就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动`return`新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换\n\n```\nmap.get('key') // Immuable对象取值\nmay.key  //原生对象取值\n```\n\n### 周边信息\n\n两个 immutable 对象可以使用 `===` 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 `false`：\n\n```\nlet map1 = Immutable.Map({a:1, b:1, c:1});\nlet map2 = Immutable.Map({a:1, b:1, c:1});\nmap1 === map2;             // false\n```\n为了直接比较对象的值，immutable.js 提供了 `Immutable.is` 来做『值比较』，结果如下：\n```\nImmutable.is(map1, map2);  // true\n```\n`Immutable.is` 比较的是两个对象的 `hashCode` 或 `valueOf`（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 `hashCode` 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用 `Immutable.is` 来减少 React 重复渲染，提高性能。\n\n与 Object.freeze、const 区别\n\n`Object.freeze` 和 ES6 中新加入的 `const` 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。\n\nCursor 的概念\n\n这个 Cursor 和数据库中的游标是完全不同的概念。\n\n由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。\n\n```\nimport Immutable from 'immutable';\nimport Cursor from 'immutable/contrib/cursor';\n\nlet data = Immutable.fromJS({ a: { b: { c: 1 } } });\n// 让 cursor 指向 { c: 1 }\nlet cursor = Cursor.from(data, ['a', 'b'], newData => {\n  // 当 cursor 或其子 cursor 执行 update 时调用\n  console.log(newData);\n});\n\ncursor.get('c'); // 1\ncursor = cursor.update('c', x => x + 1);\ncursor.get('c'); // 2\n```\n\n### 实践\n\n1. 与 React 搭配使用，Pure Render\n\n熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 `shouldComponentUpdate()`，但它默认返回 `true`，即始终会执行 `render()` 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在 `shouldComponentUpdate()` 中使用使用 deepCopy 和 deepCompare 来避免无必要的 `render()`，但 deepCopy 和 deepCompare 一般都是非常耗性能的。\n\nImmutable 则提供了简洁高效的判断数据是否变化的方法，只需 `===` 和 `is` 比较就能知道是否需要执行 `render()`，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 `shouldComponentUpdate` 是这样的：\n\n前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是\n\n```\nimport { is } from 'immutable';\n\nshouldComponentUpdate: (nextProps = {}, nextState = {}) => {\n  const thisProps = this.props || {}, thisState = this.state || {};\n\n  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||\n      Object.keys(thisState).length !== Object.keys(nextState).length) {\n    return true;\n  }\n\n  for (const key in nextProps) {\n    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) {\n      return true;\n    }\n  }\n\n  for (const key in nextState) {\n    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n> 使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:\n{% asset_img immuable2.gif 使用后效果图  %}\n你也可以借助 `React.addons.PureRenderMixin` 或支持 class 语法的[pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator]() 来实现。\n\nsetState 的一个技巧\n\nReact 建议把 `this.state` 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：\n```\nimport '_' from 'lodash';\n\nconst Component = React.createClass({\n  getInitialState() {\n    return {\n      data: { times: 0 }\n    }\n  },\n  handleAdd() {\n    let data = _.cloneDeep(this.state.data);\n    data.times = data.times + 1;\n    this.setState({ data: data });\n    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。\n    console.log(this.state.data.times);\n  }\n}\n```\n使用 Immutable 后：\n```javaScript\ngetInitialState() {\n    return {\n      data: Map({ times: 0 })\n    }\n  },\n  handleAdd() {\n    this.setState({ data: this.state.data.update('times', v => v + 1) });\n    // 这时的 times 并不会改变\n    console.log(this.state.data.get('times'));\n  }\n```\n上面的 `handleAdd` 可以简写成：\n\n```javaScript\nhandleAdd() {\n    this.setState(({data}) => ({\n      data: data.update('times', v => v + 1) })\n    });\n  }\n```\n\n### 与`Redux`配合使用遇到的坑\n> 先说下`redux`中的单向数据流（View -> Action -> Middleware -> Reducer）, 项目中使用的redux,\n>由于redux中内置的`combineReducers`和reducer中的`initialState`都会返回一个原生的Object对象, 所以配合`Imuutable`之后就会和原生Object搭配使用,  开发起来很不爽.\n>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写`combineReducers`或使用[ redux-immutablejs](https://github.com/indexiatech/redux-immutablejs)来提供支持\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n> [写的很不错,  原文地址](https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender)\n","slug":"Immutable-js意义以及使用场所","published":1,"updated":"2017-07-21T08:34:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7d700006j83ow99wn4g","content":"<h3 id=\"学习资料地址\"><a href=\"#学习资料地址\" class=\"headerlink\" title=\"学习资料地址\"></a><a href=\"https://juejin.im/post/5948985ea0bb9f006bed7472\" target=\"_blank\" rel=\"external\">学习资料地址</a></h3><blockquote>\n<p>Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>安装: <code>npm install immutable</code></p>\n<img src=\"/2017/06/15/Immutable-js意义以及使用场所/immuable.gif\" alt=\"Immuable\" title=\"Immuable\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">let foo = &#123;a: &#123;b: 1&#125;&#125;;</div><div class=\"line\">let bar = foo;</div><div class=\"line\">bar.a.b = 2;</div><div class=\"line\">console.log(foo.a.b);  // 打印 2</div><div class=\"line\">console.log(foo === bar);  //  打印 true</div><div class=\"line\"></div><div class=\"line\">// 使用 immutable.js 后</div><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">foo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);</div><div class=\"line\">bar = foo.setIn([&apos;a&apos;, &apos;b&apos;], 2);   // 使用 setIn 赋值</div><div class=\"line\">console.log(foo.getIn([&apos;a&apos;, &apos;b&apos;]));  // 使用 getIn 取值，打印 1</div><div class=\"line\"></div><div class=\"line\">console.log(foo === bar);  //  打印 false</div></pre></td></tr></table></figure>\n<p>先放上官方<code>README</code>要解决的  (共享的可变状态是万恶之源)</p>\n<p>上面的例子中已经看出来了, , , 着不是react设计初衷,</p>\n<h2 id=\"Immutable-优点\"><a href=\"#Immutable-优点\" class=\"headerlink\" title=\"Immutable 优点\"></a>Immutable 优点</h2><ol>\n<li><p>Immutable 降低了 Mutable 带来的复杂度</p>\n<blockquote>\n<p>可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯</p>\n</blockquote>\n</li>\n<li><p>节省内存</p>\n<blockquote>\n<p>Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Map&#125; from &apos;immutable&apos;;</div><div class=\"line\">let a = Map(&#123;</div><div class=\"line\">  select: &apos;users&apos;,</div><div class=\"line\">  filter: Map(&#123; name: &apos;Cam&apos; &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">let b = a.set(&apos;select&apos;, &apos;people&apos;);</div><div class=\"line\"></div><div class=\"line\">a === b; // false</div><div class=\"line\"></div><div class=\"line\">a.get(&apos;filter&apos;) === b.get(&apos;filter&apos;); // true</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</p>\n<blockquote>\n<p>因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。</p>\n</blockquote>\n</li>\n<li><p>并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？</p>\n<p>常用api示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.Map(&#123;name:&apos;danny&apos;, age:18&#125;)</div><div class=\"line\"></div><div class=\"line\">//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.List([1,2,3,4,5])</div><div class=\"line\"></div><div class=\"line\">//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)</div><div class=\"line\">immutable.fromJS([1,2,3,4,5])    //将原生array  --&gt; List</div><div class=\"line\">immutable.fromJS(&#123;name:&apos;danny&apos;, age:18&#125;)   //将原生object  --&gt; Map</div><div class=\"line\"></div><div class=\"line\">//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)</div><div class=\"line\">immutableData.toJS();</div><div class=\"line\"></div><div class=\"line\">//查看List或者map大小</div><div class=\"line\">immutableData.size  或者 immutableData.count()</div><div class=\"line\"></div><div class=\"line\">// is()   判断两个immutable对象是否相等</div><div class=\"line\">immutable.is(imA, imB);</div><div class=\"line\"></div><div class=\"line\">//merge()  对象合并</div><div class=\"line\">var imA = immutable.fromJS(&#123;a:1,b:2&#125;);</div><div class=\"line\">var imA = immutable.fromJS(&#123;c:3&#125;);</div><div class=\"line\">var imC = imA.merge(imB);</div><div class=\"line\">console.log(imC.toJS())  //&#123;a:1,b:2,c:3&#125;</div><div class=\"line\"></div><div class=\"line\">//增删改查（所有操作都会返回新的值，不会修改原来值）</div><div class=\"line\">var immutableData = immutable.fromJS(&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2，</div><div class=\"line\">    c:&#123;</div><div class=\"line\">        d:3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">var data1 = immutableData.get(&apos;a&apos;) //  data1 = 1</div><div class=\"line\">var data2 = immutableData.getIn([&apos;c&apos;, &apos;d&apos;]) // data2 = 3   getIn用于深层结构访问</div><div class=\"line\">var data3 = immutableData.set(&apos;a&apos; , 2);   // data3中的 a = 2</div><div class=\"line\">var data4 = immutableData.setIn([&apos;c&apos;, &apos;d&apos;], 4);   //data4中的 d = 4</div><div class=\"line\">var data5 = immutableData.update(&apos;a&apos;,function(x)&#123;return x+4&#125;)   //data5中的 a = 5</div><div class=\"line\">var data6 = immutableData.updateIn([&apos;c&apos;, &apos;d&apos;],function(x)&#123;return x+4&#125;)   //data6中的 d = 7</div><div class=\"line\">var data7 = immutableData.delete(&apos;a&apos;)   //data7中的 a 不存在</div><div class=\"line\">var data8 = immutableData.deleteIn([&apos;c&apos;, &apos;d&apos;])   //data8中的 d 不存在</div></pre></td></tr></table></figure>\n<h3 id=\"我认为最大的缺点就是容易和原生对象混淆\"><a href=\"#我认为最大的缺点就是容易和原生对象混淆\" class=\"headerlink\" title=\"我认为最大的缺点就是容易和原生对象混淆\"></a>我认为最大的缺点就是容易和原生对象混淆</h3><blockquote>\n<p>就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动<code>return</code>新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.get(&apos;key&apos;) // Immuable对象取值</div><div class=\"line\">may.key  //原生对象取值</div></pre></td></tr></table></figure>\n<h3 id=\"周边信息\"><a href=\"#周边信息\" class=\"headerlink\" title=\"周边信息\"></a>周边信息</h3><p>两个 immutable 对象可以使用 <code>===</code> 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 <code>false</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let map1 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">let map2 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">map1 === map2;             // false</div></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js 提供了 <code>Immutable.is</code> 来做『值比较』，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Immutable.is(map1, map2);  // true</div></pre></td></tr></table></figure></p>\n<p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code>（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用 <code>Immutable.is</code> 来减少 React 重复渲染，提高性能。</p>\n<p>与 Object.freeze、const 区别</p>\n<p><code>Object.freeze</code> 和 ES6 中新加入的 <code>const</code> 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p>\n<p>Cursor 的概念</p>\n<p>这个 Cursor 和数据库中的游标是完全不同的概念。</p>\n<p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">import Cursor from &apos;immutable/contrib/cursor&apos;;</div><div class=\"line\"></div><div class=\"line\">let data = Immutable.fromJS(&#123; a: &#123; b: &#123; c: 1 &#125; &#125; &#125;);</div><div class=\"line\">// 让 cursor 指向 &#123; c: 1 &#125;</div><div class=\"line\">let cursor = Cursor.from(data, [&apos;a&apos;, &apos;b&apos;], newData =&gt; &#123;</div><div class=\"line\">  // 当 cursor 或其子 cursor 执行 update 时调用</div><div class=\"line\">  console.log(newData);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">cursor.get(&apos;c&apos;); // 1</div><div class=\"line\">cursor = cursor.update(&apos;c&apos;, x =&gt; x + 1);</div><div class=\"line\">cursor.get(&apos;c&apos;); // 2</div></pre></td></tr></table></figure>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><ol>\n<li>与 React 搭配使用，Pure Render</li>\n</ol>\n<p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code>，但它默认返回 <code>true</code>，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code>，但 deepCopy 和 deepCompare 一般都是非常耗性能的。</p>\n<p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render()</code>，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：</p>\n<p>前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; is &#125; from &apos;immutable&apos;;</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate: (nextProps = &#123;&#125;, nextState = &#123;&#125;) =&gt; &#123;</div><div class=\"line\">  const thisProps = this.props || &#123;&#125;, thisState = this.state || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||</div><div class=\"line\">      Object.keys(thisState).length !== Object.keys(nextState).length) &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextProps) &#123;</div><div class=\"line\">    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextState) &#123;</div><div class=\"line\">    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:<br><br>你也可以借助 <code>React.addons.PureRenderMixin</code> 或支持 class 语法的<a href=\"\">pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator</a> 来实现。</p>\n</blockquote>\n<p>setState 的一个技巧</p>\n<p>React 建议把 <code>this.state</code> 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &apos;_&apos; from &apos;lodash&apos;;</div><div class=\"line\"></div><div class=\"line\">const Component = React.createClass(&#123;</div><div class=\"line\">  getInitialState() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      data: &#123; times: 0 &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    let data = _.cloneDeep(this.state.data);</div><div class=\"line\">    data.times = data.times + 1;</div><div class=\"line\">    this.setState(&#123; data: data &#125;);</div><div class=\"line\">    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。</div><div class=\"line\">    console.log(this.state.data.times);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 Immutable 后：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: <span class=\"built_in\">Map</span>(&#123; <span class=\"attr\">times</span>: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;);</div><div class=\"line\">    <span class=\"comment\">// 这时的 times 并不会改变</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的 <code>handleAdd</code> 可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"与Redux配合使用遇到的坑\"><a href=\"#与Redux配合使用遇到的坑\" class=\"headerlink\" title=\"与Redux配合使用遇到的坑\"></a>与<code>Redux</code>配合使用遇到的坑</h3><blockquote>\n<p>先说下<code>redux</code>中的单向数据流（View -&gt; Action -&gt; Middleware -&gt; Reducer）, 项目中使用的redux,<br>由于redux中内置的<code>combineReducers</code>和reducer中的<code>initialState</code>都会返回一个原生的Object对象, 所以配合<code>Imuutable</code>之后就会和原生Object搭配使用,  开发起来很不爽.<br>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写<code>combineReducers</code>或使用<a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"> redux-immutablejs</a>来提供支持</p>\n</blockquote>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\" target=\"_blank\" rel=\"external\">写的很不错,  原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"学习资料地址\"><a href=\"#学习资料地址\" class=\"headerlink\" title=\"学习资料地址\"></a><a href=\"https://juejin.im/post/5948985ea0bb9f006bed7472\" target=\"_blank\" rel=\"external\">学习资料地址</a></h3><blockquote>\n<p>Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,</p>\n</blockquote>","more":"<p>安装: <code>npm install immutable</code></p>\n<img src=\"/2017/06/15/Immutable-js意义以及使用场所/immuable.gif\" alt=\"Immuable\" title=\"Immuable\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">let foo = &#123;a: &#123;b: 1&#125;&#125;;</div><div class=\"line\">let bar = foo;</div><div class=\"line\">bar.a.b = 2;</div><div class=\"line\">console.log(foo.a.b);  // 打印 2</div><div class=\"line\">console.log(foo === bar);  //  打印 true</div><div class=\"line\"></div><div class=\"line\">// 使用 immutable.js 后</div><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">foo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);</div><div class=\"line\">bar = foo.setIn([&apos;a&apos;, &apos;b&apos;], 2);   // 使用 setIn 赋值</div><div class=\"line\">console.log(foo.getIn([&apos;a&apos;, &apos;b&apos;]));  // 使用 getIn 取值，打印 1</div><div class=\"line\"></div><div class=\"line\">console.log(foo === bar);  //  打印 false</div></pre></td></tr></table></figure>\n<p>先放上官方<code>README</code>要解决的  (共享的可变状态是万恶之源)</p>\n<p>上面的例子中已经看出来了, , , 着不是react设计初衷,</p>\n<h2 id=\"Immutable-优点\"><a href=\"#Immutable-优点\" class=\"headerlink\" title=\"Immutable 优点\"></a>Immutable 优点</h2><ol>\n<li><p>Immutable 降低了 Mutable 带来的复杂度</p>\n<blockquote>\n<p>可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯</p>\n</blockquote>\n</li>\n<li><p>节省内存</p>\n<blockquote>\n<p>Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Map&#125; from &apos;immutable&apos;;</div><div class=\"line\">let a = Map(&#123;</div><div class=\"line\">  select: &apos;users&apos;,</div><div class=\"line\">  filter: Map(&#123; name: &apos;Cam&apos; &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">let b = a.set(&apos;select&apos;, &apos;people&apos;);</div><div class=\"line\"></div><div class=\"line\">a === b; // false</div><div class=\"line\"></div><div class=\"line\">a.get(&apos;filter&apos;) === b.get(&apos;filter&apos;); // true</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</p>\n<blockquote>\n<p>因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。</p>\n</blockquote>\n</li>\n<li><p>并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？</p>\n<p>常用api示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.Map(&#123;name:&apos;danny&apos;, age:18&#125;)</div><div class=\"line\"></div><div class=\"line\">//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.List([1,2,3,4,5])</div><div class=\"line\"></div><div class=\"line\">//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)</div><div class=\"line\">immutable.fromJS([1,2,3,4,5])    //将原生array  --&gt; List</div><div class=\"line\">immutable.fromJS(&#123;name:&apos;danny&apos;, age:18&#125;)   //将原生object  --&gt; Map</div><div class=\"line\"></div><div class=\"line\">//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)</div><div class=\"line\">immutableData.toJS();</div><div class=\"line\"></div><div class=\"line\">//查看List或者map大小</div><div class=\"line\">immutableData.size  或者 immutableData.count()</div><div class=\"line\"></div><div class=\"line\">// is()   判断两个immutable对象是否相等</div><div class=\"line\">immutable.is(imA, imB);</div><div class=\"line\"></div><div class=\"line\">//merge()  对象合并</div><div class=\"line\">var imA = immutable.fromJS(&#123;a:1,b:2&#125;);</div><div class=\"line\">var imA = immutable.fromJS(&#123;c:3&#125;);</div><div class=\"line\">var imC = imA.merge(imB);</div><div class=\"line\">console.log(imC.toJS())  //&#123;a:1,b:2,c:3&#125;</div><div class=\"line\"></div><div class=\"line\">//增删改查（所有操作都会返回新的值，不会修改原来值）</div><div class=\"line\">var immutableData = immutable.fromJS(&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2，</div><div class=\"line\">    c:&#123;</div><div class=\"line\">        d:3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">var data1 = immutableData.get(&apos;a&apos;) //  data1 = 1</div><div class=\"line\">var data2 = immutableData.getIn([&apos;c&apos;, &apos;d&apos;]) // data2 = 3   getIn用于深层结构访问</div><div class=\"line\">var data3 = immutableData.set(&apos;a&apos; , 2);   // data3中的 a = 2</div><div class=\"line\">var data4 = immutableData.setIn([&apos;c&apos;, &apos;d&apos;], 4);   //data4中的 d = 4</div><div class=\"line\">var data5 = immutableData.update(&apos;a&apos;,function(x)&#123;return x+4&#125;)   //data5中的 a = 5</div><div class=\"line\">var data6 = immutableData.updateIn([&apos;c&apos;, &apos;d&apos;],function(x)&#123;return x+4&#125;)   //data6中的 d = 7</div><div class=\"line\">var data7 = immutableData.delete(&apos;a&apos;)   //data7中的 a 不存在</div><div class=\"line\">var data8 = immutableData.deleteIn([&apos;c&apos;, &apos;d&apos;])   //data8中的 d 不存在</div></pre></td></tr></table></figure>\n<h3 id=\"我认为最大的缺点就是容易和原生对象混淆\"><a href=\"#我认为最大的缺点就是容易和原生对象混淆\" class=\"headerlink\" title=\"我认为最大的缺点就是容易和原生对象混淆\"></a>我认为最大的缺点就是容易和原生对象混淆</h3><blockquote>\n<p>就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动<code>return</code>新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.get(&apos;key&apos;) // Immuable对象取值</div><div class=\"line\">may.key  //原生对象取值</div></pre></td></tr></table></figure>\n<h3 id=\"周边信息\"><a href=\"#周边信息\" class=\"headerlink\" title=\"周边信息\"></a>周边信息</h3><p>两个 immutable 对象可以使用 <code>===</code> 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 <code>false</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let map1 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">let map2 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">map1 === map2;             // false</div></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js 提供了 <code>Immutable.is</code> 来做『值比较』，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Immutable.is(map1, map2);  // true</div></pre></td></tr></table></figure></p>\n<p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code>（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用 <code>Immutable.is</code> 来减少 React 重复渲染，提高性能。</p>\n<p>与 Object.freeze、const 区别</p>\n<p><code>Object.freeze</code> 和 ES6 中新加入的 <code>const</code> 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p>\n<p>Cursor 的概念</p>\n<p>这个 Cursor 和数据库中的游标是完全不同的概念。</p>\n<p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">import Cursor from &apos;immutable/contrib/cursor&apos;;</div><div class=\"line\"></div><div class=\"line\">let data = Immutable.fromJS(&#123; a: &#123; b: &#123; c: 1 &#125; &#125; &#125;);</div><div class=\"line\">// 让 cursor 指向 &#123; c: 1 &#125;</div><div class=\"line\">let cursor = Cursor.from(data, [&apos;a&apos;, &apos;b&apos;], newData =&gt; &#123;</div><div class=\"line\">  // 当 cursor 或其子 cursor 执行 update 时调用</div><div class=\"line\">  console.log(newData);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">cursor.get(&apos;c&apos;); // 1</div><div class=\"line\">cursor = cursor.update(&apos;c&apos;, x =&gt; x + 1);</div><div class=\"line\">cursor.get(&apos;c&apos;); // 2</div></pre></td></tr></table></figure>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><ol>\n<li>与 React 搭配使用，Pure Render</li>\n</ol>\n<p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code>，但它默认返回 <code>true</code>，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code>，但 deepCopy 和 deepCompare 一般都是非常耗性能的。</p>\n<p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render()</code>，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：</p>\n<p>前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; is &#125; from &apos;immutable&apos;;</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate: (nextProps = &#123;&#125;, nextState = &#123;&#125;) =&gt; &#123;</div><div class=\"line\">  const thisProps = this.props || &#123;&#125;, thisState = this.state || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||</div><div class=\"line\">      Object.keys(thisState).length !== Object.keys(nextState).length) &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextProps) &#123;</div><div class=\"line\">    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextState) &#123;</div><div class=\"line\">    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:<br><br>你也可以借助 <code>React.addons.PureRenderMixin</code> 或支持 class 语法的<a href=\"\">pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator</a> 来实现。</p>\n</blockquote>\n<p>setState 的一个技巧</p>\n<p>React 建议把 <code>this.state</code> 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &apos;_&apos; from &apos;lodash&apos;;</div><div class=\"line\"></div><div class=\"line\">const Component = React.createClass(&#123;</div><div class=\"line\">  getInitialState() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      data: &#123; times: 0 &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    let data = _.cloneDeep(this.state.data);</div><div class=\"line\">    data.times = data.times + 1;</div><div class=\"line\">    this.setState(&#123; data: data &#125;);</div><div class=\"line\">    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。</div><div class=\"line\">    console.log(this.state.data.times);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 Immutable 后：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: <span class=\"built_in\">Map</span>(&#123; <span class=\"attr\">times</span>: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;);</div><div class=\"line\">    <span class=\"comment\">// 这时的 times 并不会改变</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的 <code>handleAdd</code> 可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"与Redux配合使用遇到的坑\"><a href=\"#与Redux配合使用遇到的坑\" class=\"headerlink\" title=\"与Redux配合使用遇到的坑\"></a>与<code>Redux</code>配合使用遇到的坑</h3><blockquote>\n<p>先说下<code>redux</code>中的单向数据流（View -&gt; Action -&gt; Middleware -&gt; Reducer）, 项目中使用的redux,<br>由于redux中内置的<code>combineReducers</code>和reducer中的<code>initialState</code>都会返回一个原生的Object对象, 所以配合<code>Imuutable</code>之后就会和原生Object搭配使用,  开发起来很不爽.<br>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写<code>combineReducers</code>或使用<a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"> redux-immutablejs</a>来提供支持</p>\n</blockquote>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\" target=\"_blank\" rel=\"external\">写的很不错,  原文地址</a></p>\n</blockquote>"},{"title":"JSON数据规范","date":"2017-06-29T09:01:13.000Z","_content":"","source":"_posts/JSON数据规范.md","raw":"---\ntitle: JSON数据规范\ndate: 2017-06-29 17:01:13\ntags:\n---\n","slug":"JSON数据规范","published":1,"updated":"2017-06-29T09:01:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7di00026j83a02z72z2","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"emacs使用笔记","date":"2017-07-04T01:48:00.000Z","_content":"\n> 记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西\n\n- M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；\n- M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；\n- M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；\n- M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。\n\n### emacs 编辑时好用的会快捷键\n\n- `C-t` 命令用来交换两个字母的位置\n- `C-x C-t`这个命令进行交换2行。\n- 使单词首字母大写 `M-c` 来将光标所指向的字母首字母大写\n- 使用命令`M-u` 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)\n\n","source":"_posts/emacs使用笔记.md","raw":"---\ntitle: emacs使用笔记\ndate: 2017-07-04 09:48:00\ntags:\n    - emacs\n    - emacs API\n---\n\n> 记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西\n\n- M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；\n- M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；\n- M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；\n- M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。\n\n### emacs 编辑时好用的会快捷键\n\n- `C-t` 命令用来交换两个字母的位置\n- `C-x C-t`这个命令进行交换2行。\n- 使单词首字母大写 `M-c` 来将光标所指向的字母首字母大写\n- 使用命令`M-u` 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)\n\n","slug":"emacs使用笔记","published":1,"updated":"2017-07-22T01:42:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7ds00056j83uf1ptvqn","content":"<blockquote>\n<p>记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西</p>\n</blockquote>\n<ul>\n<li>M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；</li>\n<li>M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；</li>\n<li>M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；</li>\n<li>M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。</li>\n</ul>\n<h3 id=\"emacs-编辑时好用的会快捷键\"><a href=\"#emacs-编辑时好用的会快捷键\" class=\"headerlink\" title=\"emacs 编辑时好用的会快捷键\"></a>emacs 编辑时好用的会快捷键</h3><ul>\n<li><code>C-t</code> 命令用来交换两个字母的位置</li>\n<li><code>C-x C-t</code>这个命令进行交换2行。</li>\n<li>使单词首字母大写 <code>M-c</code> 来将光标所指向的字母首字母大写</li>\n<li>使用命令<code>M-u</code> 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西</p>\n</blockquote>\n<ul>\n<li>M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；</li>\n<li>M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；</li>\n<li>M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；</li>\n<li>M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。</li>\n</ul>\n<h3 id=\"emacs-编辑时好用的会快捷键\"><a href=\"#emacs-编辑时好用的会快捷键\" class=\"headerlink\" title=\"emacs 编辑时好用的会快捷键\"></a>emacs 编辑时好用的会快捷键</h3><ul>\n<li><code>C-t</code> 命令用来交换两个字母的位置</li>\n<li><code>C-x C-t</code>这个命令进行交换2行。</li>\n<li>使单词首字母大写 <code>M-c</code> 来将光标所指向的字母首字母大写</li>\n<li>使用命令<code>M-u</code> 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)</li>\n</ul>\n"},{"title":"emacs使用company-mode,ycmd,hippie,来完善你的补全功能,以及遇到的坑","date":"2017-06-16T02:57:50.000Z","comments":0,"_content":"\n{% asset_img emacs-ycmd.png my emacs image %}\n\n<!-- more -->\n> 先说一下使用emacs的历程\n\n之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.\n但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换\n毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置[fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)](https://github.com/angelporo/emacs.d)\n\n\n之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,\n你会发现, 自己写的完全没有必要, 因为`github`上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.\n\n对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern\n\n## 框框框的安装\n前提自行安装git, python和以来包 , mac `birew install git build-essential cmake python-dev`\n\n\n`npm install tern -g`\n\n### 安装ycmd server\n\n `git clone https://github.com/Valloric/ycmd`\n \n 下载完整的submodule(时间比较久)\n `git submodule update --init --recursive`\n \n 下载完后进入`ycmd`文件夹编译\n \n ```base\n $ cd ~/ycmd\n $ ./build.py --tern-completer\n ```\n \n### 2. 安装 ycmd client，还有必要的工具\n\n打开Emacs , 命令`M-x list-packages`分别安装 `ycmd, company-ycmd, flycheck-ycmd company-mode`\n\n\n### 配置\n\n```elisp\n;;设置ycmd补全插件\n(set-variable 'ycmd-server-command '(\"python\" \"/Users/angel/ycmd/ycmd\"))\n(setq company-tooltip-limit 8)\n(setq company-idle-delay 0.2)\n(setq company-echo-delay 0)\n(setq company-begin-commands '(self-insert-command))\n(setq company-require-match nil)\n(company-ycmd-setup)\n(add-hook 'after-init-hook 'global-company-mode)\n```\n\n讲上面代码添加到配置文件中...\n\n\t注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n\n### 添加`hippie-extend`\n\nhippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置\n\n安装: `package-install hippie-extend`\n\n```elisp\n(global-set-key (kbd \"M-/\") 'hippie-expand)\n\n(setq hippie-expand-try-functions-list\n      '(try-expand-debbrev\n        try-expand-debbrev-all-buffers\n        try-expand-debbrev-from-kill\n        try-complete-file-name-partially\n        try-complete-file-name\n        try-expand-all-abbrevs\n        try-expand-list\n        try-expand-line\n        try-complete-lisp-symbol-partially\n        try-complete-lisp-symbol))\n```\n上面是我的配置,如果不习惯, 可以自己配置\n\n更换上面`hippie-expand-try-functions-list` 参数就可以\n\n```elisp\ntry-expand-dabbrev                 ; 搜索当前 buffer\ntry-expand-dabbrev-visible         ; 搜索当前可见窗口\ntry-expand-dabbrev-all-buffers     ; 搜索所有 buffer\ntry-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索\ntry-complete-file-name-partially   ; 文件名部分匹配\ntry-complete-file-name             ; 文件名匹配\ntry-expand-all-abbrevs             ; 匹配所有缩写词\ntry-expand-list                    ; 补全一个列表\ntry-expand-line                    ; 补全当前行\ntry-complete-lisp-symbol-partially ; 部分补全 elisp symbol\ntry-complete-lisp-symbol           ; 补全 lisp symbol\n```\n\n\n## 遇到的问题处理对策\n> tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动\n\n- tern 启动之后会在项目目录下创建一个 `.tern-port`文件, 里面的端口和emacs中\n`M-x describe-variabble tern-known-port` 看到的一致.\n\n- `tern-mode`是否启动?\n  `M-x describe-variabel tern-mode`结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)\n\n```base\n$ cd /path/to/project\n$ tern\nListening on port 63935\n```\n\n记住这个端口号，回到 Emacs，手动 `M-x tern-use-server RET 63953` 第二个server可以不填 默认是`127.0.0.1`\n当然最终还是要解决配置问题, 想tern自动启动.\n\n把下面代码放到配置文件中就可以自启动了.\n\n```elisp\n(add-hook 'js-mode-hook\n          '(lambda ()\n             (company-mode 1)\n             (tern-mode 1)\n             (setq company-tooltip-align-annotations t)\n             (add-to-list 'company-backends 'company-tern)))\n```\n\n如果不出现js补全dom的提示 可能是因为跟目录没有 `.tern-project`文件\n然后添加下面代码到`~/.tern-project`\n\n```json\n{\n  \"libs\": [\n    \"browser\",\n    \"jquery\"\n  ],\n  \"plugins\": {\n    \"node\": {}\n  }\n}\n```\n\n所以即使项目目录没有任何配置,  根目录`.tern-project`也会起作用!\n","source":"_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑.md","raw":"---\ntitle: 'emacs使用company-mode,ycmd,hippie,来完善你的补全功能,以及遇到的坑'\ndate: 2017-06-16 10:57:50\ntags:\n    - emacs\n    - emacs自动补全\n    - ycmd\n    - company-mode\n    - hippie\ncategories: \"emacs使用记\"\ncomments: false\n---\n\n{% asset_img emacs-ycmd.png my emacs image %}\n\n<!-- more -->\n> 先说一下使用emacs的历程\n\n之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.\n但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换\n毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置[fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)](https://github.com/angelporo/emacs.d)\n\n\n之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,\n你会发现, 自己写的完全没有必要, 因为`github`上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.\n\n对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern\n\n## 框框框的安装\n前提自行安装git, python和以来包 , mac `birew install git build-essential cmake python-dev`\n\n\n`npm install tern -g`\n\n### 安装ycmd server\n\n `git clone https://github.com/Valloric/ycmd`\n \n 下载完整的submodule(时间比较久)\n `git submodule update --init --recursive`\n \n 下载完后进入`ycmd`文件夹编译\n \n ```base\n $ cd ~/ycmd\n $ ./build.py --tern-completer\n ```\n \n### 2. 安装 ycmd client，还有必要的工具\n\n打开Emacs , 命令`M-x list-packages`分别安装 `ycmd, company-ycmd, flycheck-ycmd company-mode`\n\n\n### 配置\n\n```elisp\n;;设置ycmd补全插件\n(set-variable 'ycmd-server-command '(\"python\" \"/Users/angel/ycmd/ycmd\"))\n(setq company-tooltip-limit 8)\n(setq company-idle-delay 0.2)\n(setq company-echo-delay 0)\n(setq company-begin-commands '(self-insert-command))\n(setq company-require-match nil)\n(company-ycmd-setup)\n(add-hook 'after-init-hook 'global-company-mode)\n```\n\n讲上面代码添加到配置文件中...\n\n\t注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n\n### 添加`hippie-extend`\n\nhippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置\n\n安装: `package-install hippie-extend`\n\n```elisp\n(global-set-key (kbd \"M-/\") 'hippie-expand)\n\n(setq hippie-expand-try-functions-list\n      '(try-expand-debbrev\n        try-expand-debbrev-all-buffers\n        try-expand-debbrev-from-kill\n        try-complete-file-name-partially\n        try-complete-file-name\n        try-expand-all-abbrevs\n        try-expand-list\n        try-expand-line\n        try-complete-lisp-symbol-partially\n        try-complete-lisp-symbol))\n```\n上面是我的配置,如果不习惯, 可以自己配置\n\n更换上面`hippie-expand-try-functions-list` 参数就可以\n\n```elisp\ntry-expand-dabbrev                 ; 搜索当前 buffer\ntry-expand-dabbrev-visible         ; 搜索当前可见窗口\ntry-expand-dabbrev-all-buffers     ; 搜索所有 buffer\ntry-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索\ntry-complete-file-name-partially   ; 文件名部分匹配\ntry-complete-file-name             ; 文件名匹配\ntry-expand-all-abbrevs             ; 匹配所有缩写词\ntry-expand-list                    ; 补全一个列表\ntry-expand-line                    ; 补全当前行\ntry-complete-lisp-symbol-partially ; 部分补全 elisp symbol\ntry-complete-lisp-symbol           ; 补全 lisp symbol\n```\n\n\n## 遇到的问题处理对策\n> tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动\n\n- tern 启动之后会在项目目录下创建一个 `.tern-port`文件, 里面的端口和emacs中\n`M-x describe-variabble tern-known-port` 看到的一致.\n\n- `tern-mode`是否启动?\n  `M-x describe-variabel tern-mode`结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)\n\n```base\n$ cd /path/to/project\n$ tern\nListening on port 63935\n```\n\n记住这个端口号，回到 Emacs，手动 `M-x tern-use-server RET 63953` 第二个server可以不填 默认是`127.0.0.1`\n当然最终还是要解决配置问题, 想tern自动启动.\n\n把下面代码放到配置文件中就可以自启动了.\n\n```elisp\n(add-hook 'js-mode-hook\n          '(lambda ()\n             (company-mode 1)\n             (tern-mode 1)\n             (setq company-tooltip-align-annotations t)\n             (add-to-list 'company-backends 'company-tern)))\n```\n\n如果不出现js补全dom的提示 可能是因为跟目录没有 `.tern-project`文件\n然后添加下面代码到`~/.tern-project`\n\n```json\n{\n  \"libs\": [\n    \"browser\",\n    \"jquery\"\n  ],\n  \"plugins\": {\n    \"node\": {}\n  }\n}\n```\n\n所以即使项目目录没有任何配置,  根目录`.tern-project`也会起作用!\n","slug":"emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑","published":1,"updated":"2017-06-20T08:59:55.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7dw00076j83p9bal8r5","content":"<img src=\"/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png\" alt=\"my emacs image\" title=\"my emacs image\">\n<a id=\"more\"></a>\n<blockquote>\n<p>先说一下使用emacs的历程</p>\n</blockquote>\n<p>之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.<br>但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换<br>毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置<a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)</a></p>\n<p>之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,<br>你会发现, 自己写的完全没有必要, 因为<code>github</code>上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.</p>\n<p>对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern</p>\n<h2 id=\"框框框的安装\"><a href=\"#框框框的安装\" class=\"headerlink\" title=\"框框框的安装\"></a>框框框的安装</h2><p>前提自行安装git, python和以来包 , mac <code>birew install git build-essential cmake python-dev</code></p>\n<p><code>npm install tern -g</code></p>\n<h3 id=\"安装ycmd-server\"><a href=\"#安装ycmd-server\" class=\"headerlink\" title=\"安装ycmd server\"></a>安装ycmd server</h3><p> <code>git clone https://github.com/Valloric/ycmd</code></p>\n<p> 下载完整的submodule(时间比较久)<br> <code>git submodule update --init --recursive</code></p>\n<p> 下载完后进入<code>ycmd</code>文件夹编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/ycmd</div><div class=\"line\">$ ./build.py --tern-completer</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-ycmd-client，还有必要的工具\"><a href=\"#2-安装-ycmd-client，还有必要的工具\" class=\"headerlink\" title=\"2. 安装 ycmd client，还有必要的工具\"></a>2. 安装 ycmd client，还有必要的工具</h3><p>打开Emacs , 命令<code>M-x list-packages</code>分别安装 <code>ycmd, company-ycmd, flycheck-ycmd company-mode</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;;设置ycmd补全插件</div><div class=\"line\">(set-variable &apos;ycmd-server-command &apos;(&quot;python&quot; &quot;/Users/angel/ycmd/ycmd&quot;))</div><div class=\"line\">(setq company-tooltip-limit 8)</div><div class=\"line\">(setq company-idle-delay 0.2)</div><div class=\"line\">(setq company-echo-delay 0)</div><div class=\"line\">(setq company-begin-commands &apos;(self-insert-command))</div><div class=\"line\">(setq company-require-match nil)</div><div class=\"line\">(company-ycmd-setup)</div><div class=\"line\">(add-hook &apos;after-init-hook &apos;global-company-mode)</div></pre></td></tr></table></figure>\n<p>讲上面代码添加到配置文件中…</p>\n<pre><code>注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n</code></pre><h3 id=\"添加hippie-extend\"><a href=\"#添加hippie-extend\" class=\"headerlink\" title=\"添加hippie-extend\"></a>添加<code>hippie-extend</code></h3><p>hippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置</p>\n<p>安装: <code>package-install hippie-extend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(global-set-key (kbd &quot;M-/&quot;) &apos;hippie-expand)</div><div class=\"line\"></div><div class=\"line\">(setq hippie-expand-try-functions-list</div><div class=\"line\">      &apos;(try-expand-debbrev</div><div class=\"line\">        try-expand-debbrev-all-buffers</div><div class=\"line\">        try-expand-debbrev-from-kill</div><div class=\"line\">        try-complete-file-name-partially</div><div class=\"line\">        try-complete-file-name</div><div class=\"line\">        try-expand-all-abbrevs</div><div class=\"line\">        try-expand-list</div><div class=\"line\">        try-expand-line</div><div class=\"line\">        try-complete-lisp-symbol-partially</div><div class=\"line\">        try-complete-lisp-symbol))</div></pre></td></tr></table></figure>\n<p>上面是我的配置,如果不习惯, 可以自己配置</p>\n<p>更换上面<code>hippie-expand-try-functions-list</code> 参数就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">try-expand-dabbrev                 ; 搜索当前 buffer</div><div class=\"line\">try-expand-dabbrev-visible         ; 搜索当前可见窗口</div><div class=\"line\">try-expand-dabbrev-all-buffers     ; 搜索所有 buffer</div><div class=\"line\">try-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索</div><div class=\"line\">try-complete-file-name-partially   ; 文件名部分匹配</div><div class=\"line\">try-complete-file-name             ; 文件名匹配</div><div class=\"line\">try-expand-all-abbrevs             ; 匹配所有缩写词</div><div class=\"line\">try-expand-list                    ; 补全一个列表</div><div class=\"line\">try-expand-line                    ; 补全当前行</div><div class=\"line\">try-complete-lisp-symbol-partially ; 部分补全 elisp symbol</div><div class=\"line\">try-complete-lisp-symbol           ; 补全 lisp symbol</div></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题处理对策\"><a href=\"#遇到的问题处理对策\" class=\"headerlink\" title=\"遇到的问题处理对策\"></a>遇到的问题处理对策</h2><blockquote>\n<p>tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动</p>\n</blockquote>\n<ul>\n<li><p>tern 启动之后会在项目目录下创建一个 <code>.tern-port</code>文件, 里面的端口和emacs中<br><code>M-x describe-variabble tern-known-port</code> 看到的一致.</p>\n</li>\n<li><p><code>tern-mode</code>是否启动?<br><code>M-x describe-variabel tern-mode</code>结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /path/to/project</div><div class=\"line\">$ tern</div><div class=\"line\">Listening on port 63935</div></pre></td></tr></table></figure>\n<p>记住这个端口号，回到 Emacs，手动 <code>M-x tern-use-server RET 63953</code> 第二个server可以不填 默认是<code>127.0.0.1</code><br>当然最终还是要解决配置问题, 想tern自动启动.</p>\n<p>把下面代码放到配置文件中就可以自启动了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(add-hook &apos;js-mode-hook</div><div class=\"line\">          &apos;(lambda ()</div><div class=\"line\">             (company-mode 1)</div><div class=\"line\">             (tern-mode 1)</div><div class=\"line\">             (setq company-tooltip-align-annotations t)</div><div class=\"line\">             (add-to-list &apos;company-backends &apos;company-tern)))</div></pre></td></tr></table></figure>\n<p>如果不出现js补全dom的提示 可能是因为跟目录没有 <code>.tern-project</code>文件<br>然后添加下面代码到<code>~/.tern-project</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"libs\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"browser\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以即使项目目录没有任何配置,  根目录<code>.tern-project</code>也会起作用!</p>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png\" alt=\"my emacs image\" title=\"my emacs image\">","more":"<blockquote>\n<p>先说一下使用emacs的历程</p>\n</blockquote>\n<p>之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.<br>但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换<br>毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置<a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)</a></p>\n<p>之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,<br>你会发现, 自己写的完全没有必要, 因为<code>github</code>上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.</p>\n<p>对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern</p>\n<h2 id=\"框框框的安装\"><a href=\"#框框框的安装\" class=\"headerlink\" title=\"框框框的安装\"></a>框框框的安装</h2><p>前提自行安装git, python和以来包 , mac <code>birew install git build-essential cmake python-dev</code></p>\n<p><code>npm install tern -g</code></p>\n<h3 id=\"安装ycmd-server\"><a href=\"#安装ycmd-server\" class=\"headerlink\" title=\"安装ycmd server\"></a>安装ycmd server</h3><p> <code>git clone https://github.com/Valloric/ycmd</code></p>\n<p> 下载完整的submodule(时间比较久)<br> <code>git submodule update --init --recursive</code></p>\n<p> 下载完后进入<code>ycmd</code>文件夹编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/ycmd</div><div class=\"line\">$ ./build.py --tern-completer</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-ycmd-client，还有必要的工具\"><a href=\"#2-安装-ycmd-client，还有必要的工具\" class=\"headerlink\" title=\"2. 安装 ycmd client，还有必要的工具\"></a>2. 安装 ycmd client，还有必要的工具</h3><p>打开Emacs , 命令<code>M-x list-packages</code>分别安装 <code>ycmd, company-ycmd, flycheck-ycmd company-mode</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;;设置ycmd补全插件</div><div class=\"line\">(set-variable &apos;ycmd-server-command &apos;(&quot;python&quot; &quot;/Users/angel/ycmd/ycmd&quot;))</div><div class=\"line\">(setq company-tooltip-limit 8)</div><div class=\"line\">(setq company-idle-delay 0.2)</div><div class=\"line\">(setq company-echo-delay 0)</div><div class=\"line\">(setq company-begin-commands &apos;(self-insert-command))</div><div class=\"line\">(setq company-require-match nil)</div><div class=\"line\">(company-ycmd-setup)</div><div class=\"line\">(add-hook &apos;after-init-hook &apos;global-company-mode)</div></pre></td></tr></table></figure>\n<p>讲上面代码添加到配置文件中…</p>\n<pre><code>注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n</code></pre><h3 id=\"添加hippie-extend\"><a href=\"#添加hippie-extend\" class=\"headerlink\" title=\"添加hippie-extend\"></a>添加<code>hippie-extend</code></h3><p>hippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置</p>\n<p>安装: <code>package-install hippie-extend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(global-set-key (kbd &quot;M-/&quot;) &apos;hippie-expand)</div><div class=\"line\"></div><div class=\"line\">(setq hippie-expand-try-functions-list</div><div class=\"line\">      &apos;(try-expand-debbrev</div><div class=\"line\">        try-expand-debbrev-all-buffers</div><div class=\"line\">        try-expand-debbrev-from-kill</div><div class=\"line\">        try-complete-file-name-partially</div><div class=\"line\">        try-complete-file-name</div><div class=\"line\">        try-expand-all-abbrevs</div><div class=\"line\">        try-expand-list</div><div class=\"line\">        try-expand-line</div><div class=\"line\">        try-complete-lisp-symbol-partially</div><div class=\"line\">        try-complete-lisp-symbol))</div></pre></td></tr></table></figure>\n<p>上面是我的配置,如果不习惯, 可以自己配置</p>\n<p>更换上面<code>hippie-expand-try-functions-list</code> 参数就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">try-expand-dabbrev                 ; 搜索当前 buffer</div><div class=\"line\">try-expand-dabbrev-visible         ; 搜索当前可见窗口</div><div class=\"line\">try-expand-dabbrev-all-buffers     ; 搜索所有 buffer</div><div class=\"line\">try-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索</div><div class=\"line\">try-complete-file-name-partially   ; 文件名部分匹配</div><div class=\"line\">try-complete-file-name             ; 文件名匹配</div><div class=\"line\">try-expand-all-abbrevs             ; 匹配所有缩写词</div><div class=\"line\">try-expand-list                    ; 补全一个列表</div><div class=\"line\">try-expand-line                    ; 补全当前行</div><div class=\"line\">try-complete-lisp-symbol-partially ; 部分补全 elisp symbol</div><div class=\"line\">try-complete-lisp-symbol           ; 补全 lisp symbol</div></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题处理对策\"><a href=\"#遇到的问题处理对策\" class=\"headerlink\" title=\"遇到的问题处理对策\"></a>遇到的问题处理对策</h2><blockquote>\n<p>tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动</p>\n</blockquote>\n<ul>\n<li><p>tern 启动之后会在项目目录下创建一个 <code>.tern-port</code>文件, 里面的端口和emacs中<br><code>M-x describe-variabble tern-known-port</code> 看到的一致.</p>\n</li>\n<li><p><code>tern-mode</code>是否启动?<br><code>M-x describe-variabel tern-mode</code>结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /path/to/project</div><div class=\"line\">$ tern</div><div class=\"line\">Listening on port 63935</div></pre></td></tr></table></figure>\n<p>记住这个端口号，回到 Emacs，手动 <code>M-x tern-use-server RET 63953</code> 第二个server可以不填 默认是<code>127.0.0.1</code><br>当然最终还是要解决配置问题, 想tern自动启动.</p>\n<p>把下面代码放到配置文件中就可以自启动了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(add-hook &apos;js-mode-hook</div><div class=\"line\">          &apos;(lambda ()</div><div class=\"line\">             (company-mode 1)</div><div class=\"line\">             (tern-mode 1)</div><div class=\"line\">             (setq company-tooltip-align-annotations t)</div><div class=\"line\">             (add-to-list &apos;company-backends &apos;company-tern)))</div></pre></td></tr></table></figure>\n<p>如果不出现js补全dom的提示 可能是因为跟目录没有 <code>.tern-project</code>文件<br>然后添加下面代码到<code>~/.tern-project</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"libs\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"browser\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以即使项目目录没有任何配置,  根目录<code>.tern-project</code>也会起作用!</p>"},{"title":"js移触屏滑动事件","date":"2017-06-07T01:22:00.000Z","type":"categories","_content":"\n> 主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件\n\n## 介绍\n\n- touchstart: 手指放到屏幕上时触发\n- touchmove: 手指在屏幕上滑动式触发\n- touchend: 手指离开屏幕时触发\n- touchcancel: 系统取消touch事件的时候粗发\n\n> 如果有偏差请到 这里查看详细[javascritp mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches)\n\n<!-- more -->\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // Invoke the appropriate handler depending on thew\n  // number of touch points.\n  switch (e.touches.length) {\n    case 1: handle_one_touch(e); break;\n    case 2: handle_two_touches(e); break;\n    case 3: handle_three_touches(e); break;\n    default: console.log(\"Not supported\"); break;\n  }\n},\nfalse);\n```\n\n### 具体说一下触发后生成的event事件 通过回调传递过去\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // e.touches 当前屏幕上所有手指的列表\n  // e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches\n  // e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches\n  // 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：\n  // clientX / clientY:      触摸点相对浏览器窗口的位置\n  // pageX / pageY:       触摸点相对于页面的位置\n  // screenX  /  screenY:    触摸点相对于屏幕的位置\n  // identifier:        touch对象的ID\n}\n }, false);\n```\n\n> 具体事件看来下, 接下来就做一个小小的demo来加深下理解\n\n### html结构\n\n```html\n<div id=\"common_wrap\" class=\"common-wrap\">\n    <h4 class=\"common-kit__h4\">在区域内向左右滑动</h4>\n        <!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 -->\n        <ul class=\"common-kit__list\" id=\"mask\" style=\"left:0px\">\n            <li><a href=\"javascript:;\">111</a></li>\n            <li><a href=\"javascript:;\">222</a></li>\n            <li><a href=\"javascript:;\">333</a></li>\n            <li><a href=\"javascript:;\">444</a></li>\n            <li><a href=\"javascript:;\">555</a></li>\n            <li><a href=\"javascript:;\">666</a></li>\n        </ul>\n</div>\n```\n\n### 具体样式实现代码\n\n```css\n.common-wrap{\n    width: 100%;\n    height: 105px;\n    border-bottom: 8px solid #eee;\n}\n.common-kit__h4{\n    font-size: 14px;\n    margin-top: 17px;\n    margin-left: 8px;\n    letter-spacing: 0.2px;\n}\n.common-kit{\n    width: 100%;\n    position: relative;\n}\n.common-kit__list{\n    width: 558px;\n    position: absolute;\n    margin-top: 10px;\n    height: 80px;\n}\n.common-kit__list li{\n    position: relative;\n    list-style: none;\n    width: 80px;\n    height: 80px;\n    background-color: #eee;\n    float: left;\n    margin-left: 13px;\n}\n.common-kit__list li a{\n    text-decoration: none;\n    font-size: 12px;\n    position: absolute;\n    top:50%;\n    transform:translateY(-50%);\n    text-align: center;\n    padding: 0px 12px;\n}\n.common-kit__list li:first-child{\n    margin-left: 8px;\n}\n```\n\n### js代码实现以及注释原理\n\n```javascript\nfunction slidecommonkit(){\n\n    const mask = document.getElementById('mask');\n    const common_kit__list=document.querySelector('.common-kit__list');\n    const startPosition, endPosition, deltaX, deltaY, moveLength;\n    let commonkitLeft;\n\n    /*手指按下瞬间触发touchstart事件*/\n    mask.addEventListener('touchstart', e => {\n        commonkitLeft=parseInt(common_kit__list.style.left);\n        const touch = e.targetTouches[0];  //targetTouches位于当前DOM元素上的手指动作的列表\n        startPosition = {   //取屏幕上第一个手指相对于页面的坐标\n            x: touch.pageX,\n            y: touch.pageY\n        }\n    });\n\n    /*手指移动触发touchmove事件*/\n    mask.addEventListener('touchmove', function (e) {\n        var touch = e.targetTouches[0];\n        endPosition = {\n            x: touch.pageX,\n            y: touch.pageY\n        }\n\n        deltaX = endPosition.x - startPosition.x;   //移动到最后的坐标x - 开始时的坐标x\n        moveLength = Math.abs(deltaX);   //获得移动的x方向的距离\n\n        /*向左移动的函数*/\n        var swipeLeft=function(){\n            if( deltaX<(-30) ){   //这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动\n\n                if(Math.abs(commonkitLeft)+moveLength > ( common_kit__list.offsetWidth-window.innerWidth ) ){   //判断临界值\n                    common_kit__list.style.left=window.innerWidth-common_kit__list.offsetWidth+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft-moveLength+'px';  //上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）\n                }\n            }\n        }\n        swipeLeft();   //执行该函数\n\n        /*向右移动的函数*/\n        var swipeRight=function(){\n            if( deltaX>30 ){\n                /*主要是逻辑*/\n                if( commonkitLeft + moveLength > 0  ){\n                    common_kit__list.style.left=0+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft+moveLength+'px';\n                }\n            }\n        }\n        swipeRight();\n\n    });\n\n};\n\nslidecommonkit();\n```\n","source":"_posts/js移触屏滑动事件.md","raw":"---\ntitle: js移触屏滑动事件\ndate: 2017-06-07 09:22:00\ncategories: web前端\ntags:\n  - h5\ntype: \"categories\"\n---\n\n> 主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件\n\n## 介绍\n\n- touchstart: 手指放到屏幕上时触发\n- touchmove: 手指在屏幕上滑动式触发\n- touchend: 手指离开屏幕时触发\n- touchcancel: 系统取消touch事件的时候粗发\n\n> 如果有偏差请到 这里查看详细[javascritp mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches)\n\n<!-- more -->\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // Invoke the appropriate handler depending on thew\n  // number of touch points.\n  switch (e.touches.length) {\n    case 1: handle_one_touch(e); break;\n    case 2: handle_two_touches(e); break;\n    case 3: handle_three_touches(e); break;\n    default: console.log(\"Not supported\"); break;\n  }\n},\nfalse);\n```\n\n### 具体说一下触发后生成的event事件 通过回调传递过去\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // e.touches 当前屏幕上所有手指的列表\n  // e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches\n  // e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches\n  // 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：\n  // clientX / clientY:      触摸点相对浏览器窗口的位置\n  // pageX / pageY:       触摸点相对于页面的位置\n  // screenX  /  screenY:    触摸点相对于屏幕的位置\n  // identifier:        touch对象的ID\n}\n }, false);\n```\n\n> 具体事件看来下, 接下来就做一个小小的demo来加深下理解\n\n### html结构\n\n```html\n<div id=\"common_wrap\" class=\"common-wrap\">\n    <h4 class=\"common-kit__h4\">在区域内向左右滑动</h4>\n        <!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 -->\n        <ul class=\"common-kit__list\" id=\"mask\" style=\"left:0px\">\n            <li><a href=\"javascript:;\">111</a></li>\n            <li><a href=\"javascript:;\">222</a></li>\n            <li><a href=\"javascript:;\">333</a></li>\n            <li><a href=\"javascript:;\">444</a></li>\n            <li><a href=\"javascript:;\">555</a></li>\n            <li><a href=\"javascript:;\">666</a></li>\n        </ul>\n</div>\n```\n\n### 具体样式实现代码\n\n```css\n.common-wrap{\n    width: 100%;\n    height: 105px;\n    border-bottom: 8px solid #eee;\n}\n.common-kit__h4{\n    font-size: 14px;\n    margin-top: 17px;\n    margin-left: 8px;\n    letter-spacing: 0.2px;\n}\n.common-kit{\n    width: 100%;\n    position: relative;\n}\n.common-kit__list{\n    width: 558px;\n    position: absolute;\n    margin-top: 10px;\n    height: 80px;\n}\n.common-kit__list li{\n    position: relative;\n    list-style: none;\n    width: 80px;\n    height: 80px;\n    background-color: #eee;\n    float: left;\n    margin-left: 13px;\n}\n.common-kit__list li a{\n    text-decoration: none;\n    font-size: 12px;\n    position: absolute;\n    top:50%;\n    transform:translateY(-50%);\n    text-align: center;\n    padding: 0px 12px;\n}\n.common-kit__list li:first-child{\n    margin-left: 8px;\n}\n```\n\n### js代码实现以及注释原理\n\n```javascript\nfunction slidecommonkit(){\n\n    const mask = document.getElementById('mask');\n    const common_kit__list=document.querySelector('.common-kit__list');\n    const startPosition, endPosition, deltaX, deltaY, moveLength;\n    let commonkitLeft;\n\n    /*手指按下瞬间触发touchstart事件*/\n    mask.addEventListener('touchstart', e => {\n        commonkitLeft=parseInt(common_kit__list.style.left);\n        const touch = e.targetTouches[0];  //targetTouches位于当前DOM元素上的手指动作的列表\n        startPosition = {   //取屏幕上第一个手指相对于页面的坐标\n            x: touch.pageX,\n            y: touch.pageY\n        }\n    });\n\n    /*手指移动触发touchmove事件*/\n    mask.addEventListener('touchmove', function (e) {\n        var touch = e.targetTouches[0];\n        endPosition = {\n            x: touch.pageX,\n            y: touch.pageY\n        }\n\n        deltaX = endPosition.x - startPosition.x;   //移动到最后的坐标x - 开始时的坐标x\n        moveLength = Math.abs(deltaX);   //获得移动的x方向的距离\n\n        /*向左移动的函数*/\n        var swipeLeft=function(){\n            if( deltaX<(-30) ){   //这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动\n\n                if(Math.abs(commonkitLeft)+moveLength > ( common_kit__list.offsetWidth-window.innerWidth ) ){   //判断临界值\n                    common_kit__list.style.left=window.innerWidth-common_kit__list.offsetWidth+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft-moveLength+'px';  //上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）\n                }\n            }\n        }\n        swipeLeft();   //执行该函数\n\n        /*向右移动的函数*/\n        var swipeRight=function(){\n            if( deltaX>30 ){\n                /*主要是逻辑*/\n                if( commonkitLeft + moveLength > 0  ){\n                    common_kit__list.style.left=0+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft+moveLength+'px';\n                }\n            }\n        }\n        swipeRight();\n\n    });\n\n};\n\nslidecommonkit();\n```\n","slug":"js移触屏滑动事件","published":1,"updated":"2017-06-10T11:40:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7e000096j838gybs7yc","content":"<blockquote>\n<p>主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件</p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>touchstart: 手指放到屏幕上时触发</li>\n<li>touchmove: 手指在屏幕上滑动式触发</li>\n<li>touchend: 手指离开屏幕时触发</li>\n<li>touchcancel: 系统取消touch事件的时候粗发</li>\n</ul>\n<blockquote>\n<p>如果有偏差请到 这里查看详细<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches\" target=\"_blank\" rel=\"external\">javascritp mdn</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Invoke the appropriate handler depending on thew</span></div><div class=\"line\">  <span class=\"comment\">// number of touch points.</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (e.touches.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: handle_one_touch(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: handle_two_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: handle_three_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not supported\"</span>); <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"具体说一下触发后生成的event事件-通过回调传递过去\"><a href=\"#具体说一下触发后生成的event事件-通过回调传递过去\" class=\"headerlink\" title=\"具体说一下触发后生成的event事件 通过回调传递过去\"></a>具体说一下触发后生成的event事件 通过回调传递过去</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// e.touches 当前屏幕上所有手指的列表</span></div><div class=\"line\">  <span class=\"comment\">// e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：</span></div><div class=\"line\">  <span class=\"comment\">// clientX / clientY:      触摸点相对浏览器窗口的位置</span></div><div class=\"line\">  <span class=\"comment\">// pageX / pageY:       触摸点相对于页面的位置</span></div><div class=\"line\">  <span class=\"comment\">// screenX  /  screenY:    触摸点相对于屏幕的位置</span></div><div class=\"line\">  <span class=\"comment\">// identifier:        touch对象的ID</span></div><div class=\"line\">&#125;</div><div class=\"line\"> &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>具体事件看来下, 接下来就做一个小小的demo来加深下理解</p>\n</blockquote>\n<h3 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"common_wrap\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__h4\"</span>&gt;</span>在区域内向左右滑动<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__list\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mask\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"left:0px\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>555<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"具体样式实现代码\"><a href=\"#具体样式实现代码\" class=\"headerlink\" title=\"具体样式实现代码\"></a>具体样式实现代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.common-wrap</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">105px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">8px</span> solid <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__h4</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">17px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">558px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"js代码实现以及注释原理\"><a href=\"#js代码实现以及注释原理\" class=\"headerlink\" title=\"js代码实现以及注释原理\"></a>js代码实现以及注释原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slidecommonkit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> mask = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mask'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> common_kit__list=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.common-kit__list'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> startPosition, endPosition, deltaX, deltaY, moveLength;</div><div class=\"line\">    <span class=\"keyword\">let</span> commonkitLeft;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指按下瞬间触发touchstart事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">        commonkitLeft=<span class=\"built_in\">parseInt</span>(common_kit__list.style.left);</div><div class=\"line\">        <span class=\"keyword\">const</span> touch = e.targetTouches[<span class=\"number\">0</span>];  <span class=\"comment\">//targetTouches位于当前DOM元素上的手指动作的列表</span></div><div class=\"line\">        startPosition = &#123;   <span class=\"comment\">//取屏幕上第一个手指相对于页面的坐标</span></div><div class=\"line\">            x: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指移动触发touchmove事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touch = e.targetTouches[<span class=\"number\">0</span>];</div><div class=\"line\">        endPosition = &#123;</div><div class=\"line\">            <span class=\"attr\">x</span>: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        deltaX = endPosition.x - startPosition.x;   <span class=\"comment\">//移动到最后的坐标x - 开始时的坐标x</span></div><div class=\"line\">        moveLength = <span class=\"built_in\">Math</span>.abs(deltaX);   <span class=\"comment\">//获得移动的x方向的距离</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向左移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeLeft=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&lt;(<span class=\"number\">-30</span>) )&#123;   <span class=\"comment\">//这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(commonkitLeft)+moveLength &gt; ( common_kit__list.offsetWidth-<span class=\"built_in\">window</span>.innerWidth ) )&#123;   <span class=\"comment\">//判断临界值</span></div><div class=\"line\">                    common_kit__list.style.left=<span class=\"built_in\">window</span>.innerWidth-common_kit__list.offsetWidth+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft-moveLength+<span class=\"string\">'px'</span>;  <span class=\"comment\">//上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeLeft();   <span class=\"comment\">//执行该函数</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向右移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeRight=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&gt;<span class=\"number\">30</span> )&#123;</div><div class=\"line\">                <span class=\"comment\">/*主要是逻辑*/</span></div><div class=\"line\">                <span class=\"keyword\">if</span>( commonkitLeft + moveLength &gt; <span class=\"number\">0</span>  )&#123;</div><div class=\"line\">                    common_kit__list.style.left=<span class=\"number\">0</span>+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft+moveLength+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeRight();</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">slidecommonkit();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件</p>\n</blockquote>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>touchstart: 手指放到屏幕上时触发</li>\n<li>touchmove: 手指在屏幕上滑动式触发</li>\n<li>touchend: 手指离开屏幕时触发</li>\n<li>touchcancel: 系统取消touch事件的时候粗发</li>\n</ul>\n<blockquote>\n<p>如果有偏差请到 这里查看详细<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches\" target=\"_blank\" rel=\"external\">javascritp mdn</a></p>\n</blockquote>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Invoke the appropriate handler depending on thew</span></div><div class=\"line\">  <span class=\"comment\">// number of touch points.</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (e.touches.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: handle_one_touch(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: handle_two_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: handle_three_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not supported\"</span>); <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"具体说一下触发后生成的event事件-通过回调传递过去\"><a href=\"#具体说一下触发后生成的event事件-通过回调传递过去\" class=\"headerlink\" title=\"具体说一下触发后生成的event事件 通过回调传递过去\"></a>具体说一下触发后生成的event事件 通过回调传递过去</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// e.touches 当前屏幕上所有手指的列表</span></div><div class=\"line\">  <span class=\"comment\">// e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：</span></div><div class=\"line\">  <span class=\"comment\">// clientX / clientY:      触摸点相对浏览器窗口的位置</span></div><div class=\"line\">  <span class=\"comment\">// pageX / pageY:       触摸点相对于页面的位置</span></div><div class=\"line\">  <span class=\"comment\">// screenX  /  screenY:    触摸点相对于屏幕的位置</span></div><div class=\"line\">  <span class=\"comment\">// identifier:        touch对象的ID</span></div><div class=\"line\">&#125;</div><div class=\"line\"> &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>具体事件看来下, 接下来就做一个小小的demo来加深下理解</p>\n</blockquote>\n<h3 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"common_wrap\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__h4\"</span>&gt;</span>在区域内向左右滑动<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__list\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mask\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"left:0px\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>555<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"具体样式实现代码\"><a href=\"#具体样式实现代码\" class=\"headerlink\" title=\"具体样式实现代码\"></a>具体样式实现代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.common-wrap</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">105px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">8px</span> solid <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__h4</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">17px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">558px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"js代码实现以及注释原理\"><a href=\"#js代码实现以及注释原理\" class=\"headerlink\" title=\"js代码实现以及注释原理\"></a>js代码实现以及注释原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slidecommonkit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> mask = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mask'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> common_kit__list=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.common-kit__list'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> startPosition, endPosition, deltaX, deltaY, moveLength;</div><div class=\"line\">    <span class=\"keyword\">let</span> commonkitLeft;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指按下瞬间触发touchstart事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">        commonkitLeft=<span class=\"built_in\">parseInt</span>(common_kit__list.style.left);</div><div class=\"line\">        <span class=\"keyword\">const</span> touch = e.targetTouches[<span class=\"number\">0</span>];  <span class=\"comment\">//targetTouches位于当前DOM元素上的手指动作的列表</span></div><div class=\"line\">        startPosition = &#123;   <span class=\"comment\">//取屏幕上第一个手指相对于页面的坐标</span></div><div class=\"line\">            x: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指移动触发touchmove事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touch = e.targetTouches[<span class=\"number\">0</span>];</div><div class=\"line\">        endPosition = &#123;</div><div class=\"line\">            <span class=\"attr\">x</span>: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        deltaX = endPosition.x - startPosition.x;   <span class=\"comment\">//移动到最后的坐标x - 开始时的坐标x</span></div><div class=\"line\">        moveLength = <span class=\"built_in\">Math</span>.abs(deltaX);   <span class=\"comment\">//获得移动的x方向的距离</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向左移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeLeft=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&lt;(<span class=\"number\">-30</span>) )&#123;   <span class=\"comment\">//这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(commonkitLeft)+moveLength &gt; ( common_kit__list.offsetWidth-<span class=\"built_in\">window</span>.innerWidth ) )&#123;   <span class=\"comment\">//判断临界值</span></div><div class=\"line\">                    common_kit__list.style.left=<span class=\"built_in\">window</span>.innerWidth-common_kit__list.offsetWidth+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft-moveLength+<span class=\"string\">'px'</span>;  <span class=\"comment\">//上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeLeft();   <span class=\"comment\">//执行该函数</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向右移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeRight=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&gt;<span class=\"number\">30</span> )&#123;</div><div class=\"line\">                <span class=\"comment\">/*主要是逻辑*/</span></div><div class=\"line\">                <span class=\"keyword\">if</span>( commonkitLeft + moveLength &gt; <span class=\"number\">0</span>  )&#123;</div><div class=\"line\">                    common_kit__list.style.left=<span class=\"number\">0</span>+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft+moveLength+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeRight();</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">slidecommonkit();</div></pre></td></tr></table></figure>"},{"title":"react-native中android环境问题","date":"2017-06-13T02:37:51.000Z","comments":0,"_content":"\n### react-native 中android环境总是报错\n\n> 记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制\n> 具体问题之后解释\n\n```base\n* What went wrong:\nA problem occurred evaluating project ':app'.\n> java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 11.564 secs\nCould not install the app on the device, read the error above for details.\nMake sure you have an Android emulator running or a device connected and have\nset up your Android development environment:\nhttps://facebook.github.io/react-native/docs/android-setup.html\n```\n\n<!-- more -->\n\n### 解决办法\n\n> 项目主要针对自己环境解决对应bug, 如果不知道, 请run `react-native run-android debug`来查看具体出错原因\n> 由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了\n\n\n```javascritp\nandroid: {\n    compileSdkVersion 23\n    buildToolsVersion \"25.0.0\"\n    ...\n}\n```\n","source":"_posts/react-native中android环境问题.md","raw":"---\ntitle: react-native中android环境问题\ndate: 2017-06-13 10:37:51\ntags:\n  - react-native\n  - RN-android\ncategories: \"react-native踩坑记\"\ncomments: false\n---\n\n### react-native 中android环境总是报错\n\n> 记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制\n> 具体问题之后解释\n\n```base\n* What went wrong:\nA problem occurred evaluating project ':app'.\n> java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 11.564 secs\nCould not install the app on the device, read the error above for details.\nMake sure you have an Android emulator running or a device connected and have\nset up your Android development environment:\nhttps://facebook.github.io/react-native/docs/android-setup.html\n```\n\n<!-- more -->\n\n### 解决办法\n\n> 项目主要针对自己环境解决对应bug, 如果不知道, 请run `react-native run-android debug`来查看具体出错原因\n> 由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了\n\n\n```javascritp\nandroid: {\n    compileSdkVersion 23\n    buildToolsVersion \"25.0.0\"\n    ...\n}\n```\n","slug":"react-native中android环境问题","published":1,"updated":"2017-06-13T06:04:42.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7e3000c6j83kr06q0um","content":"<h3 id=\"react-native-中android环境总是报错\"><a href=\"#react-native-中android环境总是报错\" class=\"headerlink\" title=\"react-native 中android环境总是报错\"></a>react-native 中android环境总是报错</h3><blockquote>\n<p>记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制<br>具体问题之后解释</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* What went wrong:</div><div class=\"line\">A problem occurred evaluating project &apos;:app&apos;.</div><div class=\"line\">&gt; java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0</div><div class=\"line\"></div><div class=\"line\">* Try:</div><div class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class=\"line\"></div><div class=\"line\">BUILD FAILED</div><div class=\"line\"></div><div class=\"line\">Total time: 11.564 secs</div><div class=\"line\">Could not install the app on the device, read the error above for details.</div><div class=\"line\">Make sure you have an Android emulator running or a device connected and have</div><div class=\"line\">set up your Android development environment:</div><div class=\"line\">https://facebook.github.io/react-native/docs/android-setup.html</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><blockquote>\n<p>项目主要针对自己环境解决对应bug, 如果不知道, 请run <code>react-native run-android debug</code>来查看具体出错原因<br>由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android: &#123;</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    buildToolsVersion &quot;25.0.0&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"react-native-中android环境总是报错\"><a href=\"#react-native-中android环境总是报错\" class=\"headerlink\" title=\"react-native 中android环境总是报错\"></a>react-native 中android环境总是报错</h3><blockquote>\n<p>记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制<br>具体问题之后解释</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* What went wrong:</div><div class=\"line\">A problem occurred evaluating project &apos;:app&apos;.</div><div class=\"line\">&gt; java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0</div><div class=\"line\"></div><div class=\"line\">* Try:</div><div class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class=\"line\"></div><div class=\"line\">BUILD FAILED</div><div class=\"line\"></div><div class=\"line\">Total time: 11.564 secs</div><div class=\"line\">Could not install the app on the device, read the error above for details.</div><div class=\"line\">Make sure you have an Android emulator running or a device connected and have</div><div class=\"line\">set up your Android development environment:</div><div class=\"line\">https://facebook.github.io/react-native/docs/android-setup.html</div></pre></td></tr></table></figure>","more":"<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><blockquote>\n<p>项目主要针对自己环境解决对应bug, 如果不知道, 请run <code>react-native run-android debug</code>来查看具体出错原因<br>由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android: &#123;</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    buildToolsVersion &quot;25.0.0&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"react-native地区选择器","date":"2017-06-22T03:34:16.000Z","_content":"","source":"_posts/react-native地区选择器.md","raw":"---\ntitle: react-native地区选择器\ndate: 2017-06-22 11:34:16\ntags:\n---\n","slug":"react-native地区选择器","published":1,"updated":"2017-06-22T03:34:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7e5000d6j83nhd2qwdd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react-native开发中常见的坑","date":"2017-06-29T02:45:26.000Z","_content":"\n\n### [前人总结](http://www.jianshu.com/p/98c8f2a970eb)\n","source":"_posts/react-native开发中常见的坑.md","raw":"---\ntitle: react-native开发中常见的坑\ndate: 2017-06-29 10:45:26\ntags:\n---\n\n\n### [前人总结](http://www.jianshu.com/p/98c8f2a970eb)\n","slug":"react-native开发中常见的坑","published":1,"updated":"2017-06-29T02:45:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7e9000f6j83b0sqd4lj","content":"<h3 id=\"前人总结\"><a href=\"#前人总结\" class=\"headerlink\" title=\"前人总结\"></a><a href=\"http://www.jianshu.com/p/98c8f2a970eb\" target=\"_blank\" rel=\"external\">前人总结</a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前人总结\"><a href=\"#前人总结\" class=\"headerlink\" title=\"前人总结\"></a><a href=\"http://www.jianshu.com/p/98c8f2a970eb\" target=\"_blank\" rel=\"external\">前人总结</a></h3>"},{"title":"hexo添加自己域名","date":"2017-06-12T02:09:35.000Z","comments":0,"_content":"\n### 折腾由来:\n> 前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.\n> 进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了[angely.me](angely.me)恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB\n\n<!-- more -->\n\n## 然后解析域名, 地址`userName.github.io`, 通过CNAME方式解析, 看起来是这样的\n{% asset_img admin.png 解析之后图解 %}\n\n## 自己域名有了, 开始配置\n\n直接修改config\n\n```coffeescript\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://angely.me/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\nroot字段配置不正确会导致blog静态文件download 404\n\n\n\n> 给项目 github pages 添加CNAME文件, 内容就是自己域名,`angely.me`\n> 因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后`hexo d -g`到github项目内\n\n```base\n➜ touch CNAME\n➜ vim CNAME\n➜ ga .\n➜ gcm '提交commint 备注'\n➜ git push origin master\n```\n\nga -> git add\ngcm -> git commint -m\n","source":"_posts/hexo添加自己域名.md","raw":"---\ntitle: hexo添加自己域名\ndate: 2017-06-12 10:09:35\ncategories: \"hexo\"\ntags:\n    - hexo\n    - next主题\ncomments: false\n---\n\n### 折腾由来:\n> 前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.\n> 进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了[angely.me](angely.me)恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB\n\n<!-- more -->\n\n## 然后解析域名, 地址`userName.github.io`, 通过CNAME方式解析, 看起来是这样的\n{% asset_img admin.png 解析之后图解 %}\n\n## 自己域名有了, 开始配置\n\n直接修改config\n\n```coffeescript\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://angely.me/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\nroot字段配置不正确会导致blog静态文件download 404\n\n\n\n> 给项目 github pages 添加CNAME文件, 内容就是自己域名,`angely.me`\n> 因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后`hexo d -g`到github项目内\n\n```base\n➜ touch CNAME\n➜ vim CNAME\n➜ ga .\n➜ gcm '提交commint 备注'\n➜ git push origin master\n```\n\nga -> git add\ngcm -> git commint -m\n","slug":"hexo添加自己域名","published":1,"updated":"2017-06-12T02:42:17.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7ee000h6j83l2ko6dxk","content":"<h3 id=\"折腾由来\"><a href=\"#折腾由来\" class=\"headerlink\" title=\"折腾由来:\"></a>折腾由来:</h3><blockquote>\n<p>前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.<br>进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了<a href=\"angely.me\">angely.me</a>恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\"><a href=\"#然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\" class=\"headerlink\" title=\"然后解析域名, 地址userName.github.io, 通过CNAME方式解析, 看起来是这样的\"></a>然后解析域名, 地址<code>userName.github.io</code>, 通过CNAME方式解析, 看起来是这样的</h2><img src=\"/2017/06/12/hexo添加自己域名/admin.png\" alt=\"解析之后图解\" title=\"解析之后图解\">\n<h2 id=\"自己域名有了-开始配置\"><a href=\"#自己域名有了-开始配置\" class=\"headerlink\" title=\"自己域名有了, 开始配置\"></a>自己域名有了, 开始配置</h2><p>直接修改config</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http:<span class=\"regexp\">//</span>angely.me/</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year<span class=\"regexp\">/:month/</span>:day<span class=\"regexp\">/:title/</span></div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n<p>root字段配置不正确会导致blog静态文件download 404</p>\n<blockquote>\n<p>给项目 github pages 添加CNAME文件, 内容就是自己域名,<code>angely.me</code><br>因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后<code>hexo d -g</code>到github项目内</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ touch CNAME</div><div class=\"line\">➜ vim CNAME</div><div class=\"line\">➜ ga .</div><div class=\"line\">➜ gcm &apos;提交commint 备注&apos;</div><div class=\"line\">➜ git push origin master</div></pre></td></tr></table></figure>\n<p>ga -&gt; git add<br>gcm -&gt; git commint -m</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"折腾由来\"><a href=\"#折腾由来\" class=\"headerlink\" title=\"折腾由来:\"></a>折腾由来:</h3><blockquote>\n<p>前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.<br>进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了<a href=\"angely.me\">angely.me</a>恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB</p>\n</blockquote>","more":"<h2 id=\"然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\"><a href=\"#然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\" class=\"headerlink\" title=\"然后解析域名, 地址userName.github.io, 通过CNAME方式解析, 看起来是这样的\"></a>然后解析域名, 地址<code>userName.github.io</code>, 通过CNAME方式解析, 看起来是这样的</h2><img src=\"/2017/06/12/hexo添加自己域名/admin.png\" alt=\"解析之后图解\" title=\"解析之后图解\">\n<h2 id=\"自己域名有了-开始配置\"><a href=\"#自己域名有了-开始配置\" class=\"headerlink\" title=\"自己域名有了, 开始配置\"></a>自己域名有了, 开始配置</h2><p>直接修改config</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http:<span class=\"regexp\">//</span>angely.me/</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year<span class=\"regexp\">/:month/</span>:day<span class=\"regexp\">/:title/</span></div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n<p>root字段配置不正确会导致blog静态文件download 404</p>\n<blockquote>\n<p>给项目 github pages 添加CNAME文件, 内容就是自己域名,<code>angely.me</code><br>因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后<code>hexo d -g</code>到github项目内</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ touch CNAME</div><div class=\"line\">➜ vim CNAME</div><div class=\"line\">➜ ga .</div><div class=\"line\">➜ gcm &apos;提交commint 备注&apos;</div><div class=\"line\">➜ git push origin master</div></pre></td></tr></table></figure>\n<p>ga -&gt; git add<br>gcm -&gt; git commint -m</p>"},{"title":"react-redux小型项目感受","date":"2017-06-06T01:25:43.000Z","_content":"\n## 前言\n\n> 前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的\n> 后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的\n\n<!-- more -->\n","source":"_posts/react-redux小型项目感受.md","raw":"---\ntitle: react-redux小型项目感受\ndate: 2017-06-06 09:25:43\ntags:\n  - react\n  - redux\n---\n\n## 前言\n\n> 前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的\n> 后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的\n\n<!-- more -->\n","slug":"react-redux小型项目感受","published":1,"updated":"2017-06-10T11:40:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7ei000k6j83a6fjxmt7","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的<br>后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的</p>\n</blockquote>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的<br>后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的</p>\n</blockquote>","more":""},{"title":"react-native构建踩坑","date":"2017-06-09T06:10:59.000Z","_content":"\n## react-native run-ios 构建失败\n\n> 记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.\n> 在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题\n\n<!-- more -->\n\n构建错误信息\n\n```base\n** BUILD FAILED **\n\n\nThe following commands produced analyzer issues:\n\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c\n(2 commands with analyzer issues)\n\nThe following build commands failed:\n    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh\n(1 failure)\n\nInstalling build/Build/Products/Debug-iphonesimulator/temp.app\nAn error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):\nFailed to install the requested application\nAn application bundle was not found at the provided path.\nProvide a valid path to the desired application bundle.\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n\nCommand failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n```\n\n当前版本\n> 查看package.jsonn\n\n```json\n\"react\": \"16.0.0-alpha.12\",\n\"react-native\": \"0.45.0\"\n```\n\n> 把node-modules rm之后 把package.json改成下面版本就可以了\n\n```json\n \"dependencies\": {\n     \"react\": \"16.0.0-alpha.6\",\n     \"react-native\": \"0.44.3\"\n }\n```\n\n之后再`yarn install`\n","source":"_posts/react-native构建踩坑.md","raw":"---\ntitle: react-native构建踩坑\ndate: 2017-06-09 14:10:59\ntags:\n  - react-native\ncategories: react-native\n---\n\n## react-native run-ios 构建失败\n\n> 记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.\n> 在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题\n\n<!-- more -->\n\n构建错误信息\n\n```base\n** BUILD FAILED **\n\n\nThe following commands produced analyzer issues:\n\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c\n(2 commands with analyzer issues)\n\nThe following build commands failed:\n    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh\n(1 failure)\n\nInstalling build/Build/Products/Debug-iphonesimulator/temp.app\nAn error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):\nFailed to install the requested application\nAn application bundle was not found at the provided path.\nProvide a valid path to the desired application bundle.\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n\nCommand failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n```\n\n当前版本\n> 查看package.jsonn\n\n```json\n\"react\": \"16.0.0-alpha.12\",\n\"react-native\": \"0.45.0\"\n```\n\n> 把node-modules rm之后 把package.json改成下面版本就可以了\n\n```json\n \"dependencies\": {\n     \"react\": \"16.0.0-alpha.6\",\n     \"react-native\": \"0.44.3\"\n }\n```\n\n之后再`yarn install`\n","slug":"react-native构建踩坑","published":1,"updated":"2017-06-12T09:28:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7eo000n6j83qow50l9y","content":"<h2 id=\"react-native-run-ios-构建失败\"><a href=\"#react-native-run-ios-构建失败\" class=\"headerlink\" title=\"react-native run-ios 构建失败\"></a>react-native run-ios 构建失败</h2><blockquote>\n<p>记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.<br>在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>构建错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">** BUILD FAILED **</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">The following commands produced analyzer issues:</div><div class=\"line\"></div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c</div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c</div><div class=\"line\">(2 commands with analyzer issues)</div><div class=\"line\"></div><div class=\"line\">The following build commands failed:</div><div class=\"line\">    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh</div><div class=\"line\">(1 failure)</div><div class=\"line\"></div><div class=\"line\">Installing build/Build/Products/Debug-iphonesimulator/temp.app</div><div class=\"line\">An error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):</div><div class=\"line\">Failed to install the requested application</div><div class=\"line\">An application bundle was not found at the provided path.</div><div class=\"line\">Provide a valid path to the desired application bundle.</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div><div class=\"line\"></div><div class=\"line\">Command failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div></pre></td></tr></table></figure>\n<p>当前版本</p>\n<blockquote>\n<p>查看package.jsonn</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"react\": \"16.0.0-alpha.12\",</div><div class=\"line\">\"react-native\": \"0.45.0\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把node-modules rm之后 把package.json改成下面版本就可以了</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"react\": \"16.0.0-alpha.6\",</div><div class=\"line\">    \"react-native\": \"0.44.3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后再<code>yarn install</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"react-native-run-ios-构建失败\"><a href=\"#react-native-run-ios-构建失败\" class=\"headerlink\" title=\"react-native run-ios 构建失败\"></a>react-native run-ios 构建失败</h2><blockquote>\n<p>记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.<br>在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题</p>\n</blockquote>","more":"<p>构建错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">** BUILD FAILED **</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">The following commands produced analyzer issues:</div><div class=\"line\"></div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c</div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c</div><div class=\"line\">(2 commands with analyzer issues)</div><div class=\"line\"></div><div class=\"line\">The following build commands failed:</div><div class=\"line\">    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh</div><div class=\"line\">(1 failure)</div><div class=\"line\"></div><div class=\"line\">Installing build/Build/Products/Debug-iphonesimulator/temp.app</div><div class=\"line\">An error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):</div><div class=\"line\">Failed to install the requested application</div><div class=\"line\">An application bundle was not found at the provided path.</div><div class=\"line\">Provide a valid path to the desired application bundle.</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div><div class=\"line\"></div><div class=\"line\">Command failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div></pre></td></tr></table></figure>\n<p>当前版本</p>\n<blockquote>\n<p>查看package.jsonn</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"react\": \"16.0.0-alpha.12\",</div><div class=\"line\">\"react-native\": \"0.45.0\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把node-modules rm之后 把package.json改成下面版本就可以了</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"react\": \"16.0.0-alpha.6\",</div><div class=\"line\">    \"react-native\": \"0.44.3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后再<code>yarn install</code></p>"},{"title":"react中setState的使用","date":"2017-07-08T08:29:38.000Z","_content":"\n## 我认为`this.setState`是react中最常用的API了.\n\n如果不明白`this.setState`是什么, [请移驾官网查看具体api](https://facebook.github.io/react/)\n\n<!-- more -->\n\n```javascript\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>Seconds Elapsed: {this.state.secondsElapsed}</div>\n    );\n  }\n}\n\nReactDOM.render(<Timer />, mountNode);\n```\n\n先看看`this.setState`是干什么的\n\n{% asset_img this.setState.png setState流程图 %}\n\n这里有必要说一下, `this.setState`是异步调用,\n如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数\n\n\n\n","source":"_posts/react中setState的使用.md","raw":"---\ntitle: react中setState的使用\ndate: 2017-07-08 16:29:38\ntags:\n    - react\n    - setState\n---\n\n## 我认为`this.setState`是react中最常用的API了.\n\n如果不明白`this.setState`是什么, [请移驾官网查看具体api](https://facebook.github.io/react/)\n\n<!-- more -->\n\n```javascript\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>Seconds Elapsed: {this.state.secondsElapsed}</div>\n    );\n  }\n}\n\nReactDOM.render(<Timer />, mountNode);\n```\n\n先看看`this.setState`是干什么的\n\n{% asset_img this.setState.png setState流程图 %}\n\n这里有必要说一下, `this.setState`是异步调用,\n如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数\n\n\n\n","slug":"react中setState的使用","published":1,"updated":"2017-07-10T06:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7f7000q6j83nqct122c","content":"<h2 id=\"我认为this-setState是react中最常用的API了\"><a href=\"#我认为this-setState是react中最常用的API了\" class=\"headerlink\" title=\"我认为this.setState是react中最常用的API了.\"></a>我认为<code>this.setState</code>是react中最常用的API了.</h2><p>如果不明白<code>this.setState</code>是什么, <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">请移驾官网查看具体api</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">secondsElapsed</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  tick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">secondsElapsed</span>: prevState.secondsElapsed + <span class=\"number\">1</span></div><div class=\"line\">    &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<p>先看看<code>this.setState</code>是干什么的</p>\n<img src=\"/2017/07/08/react中setState的使用/this.setState.png\" alt=\"setState流程图\" title=\"setState流程图\">\n<p>这里有必要说一下, <code>this.setState</code>是异步调用,<br>如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"我认为this-setState是react中最常用的API了\"><a href=\"#我认为this-setState是react中最常用的API了\" class=\"headerlink\" title=\"我认为this.setState是react中最常用的API了.\"></a>我认为<code>this.setState</code>是react中最常用的API了.</h2><p>如果不明白<code>this.setState</code>是什么, <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">请移驾官网查看具体api</a></p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">secondsElapsed</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  tick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">secondsElapsed</span>: prevState.secondsElapsed + <span class=\"number\">1</span></div><div class=\"line\">    &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<p>先看看<code>this.setState</code>是干什么的</p>\n<img src=\"/2017/07/08/react中setState的使用/this.setState.png\" alt=\"setState流程图\" title=\"setState流程图\">\n<p>这里有必要说一下, <code>this.setState</code>是异步调用,<br>如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数</p>"},{"title":"react使用感受","date":"2017-06-10T08:23:21.000Z","comments":0,"_content":"\n{% asset_img react.png react 官网 %}\n\n<!-- more -->\n\n## react感受\n\n记得刚开始接触[react](https://facebook.github.io/react/)的时候还是在前年那时候react版本还在零点几,\ngithub上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下...\n现在想起来也挺庆幸能认识上个工作的同事.[送上github传送门](https://github.com/yuffiy)(也是现在的同事)\n\n> 当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习\n> qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽\n\n### webpack打包\n\n这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,\n需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多[]()webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.\n顺便插一句:\n\n> 编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.\n\nwebpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看<<慕课网>>里面的webpack视屏, 讲的很清晰\n\n### react state和props的设计\n\n#### state和props的区别\n\n下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议\n\n> 每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。\n> 所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.\n> props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量\n\nreact刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能\n父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境\n\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理。\n> 之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo\n> 好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解\n\n### 附上官网counter案例\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n> 后续 -> react配合redux开发手机端页面感受\n","source":"_posts/react使用感受.md","raw":"---\ntitle: react使用感受\ndate: 2017-06-10 16:23:21\ntags:\ncategories: \"blog\"\ncomments: false\n---\n\n{% asset_img react.png react 官网 %}\n\n<!-- more -->\n\n## react感受\n\n记得刚开始接触[react](https://facebook.github.io/react/)的时候还是在前年那时候react版本还在零点几,\ngithub上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下...\n现在想起来也挺庆幸能认识上个工作的同事.[送上github传送门](https://github.com/yuffiy)(也是现在的同事)\n\n> 当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习\n> qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽\n\n### webpack打包\n\n这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,\n需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多[]()webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.\n顺便插一句:\n\n> 编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.\n\nwebpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看<<慕课网>>里面的webpack视屏, 讲的很清晰\n\n### react state和props的设计\n\n#### state和props的区别\n\n下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议\n\n> 每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。\n> 所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.\n> props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量\n\nreact刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能\n父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境\n\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理。\n> 之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo\n> 好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解\n\n### 附上官网counter案例\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n> 后续 -> react配合redux开发手机端页面感受\n","slug":"react使用感受","published":1,"updated":"2017-06-14T01:30:44.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7f8000u6j83eflty0ma","content":"<img src=\"/2017/06/10/react使用感受/react.png\" alt=\"react 官网\" title=\"react 官网\">\n<a id=\"more\"></a>\n<h2 id=\"react感受\"><a href=\"#react感受\" class=\"headerlink\" title=\"react感受\"></a>react感受</h2><p>记得刚开始接触<a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">react</a>的时候还是在前年那时候react版本还在零点几,<br>github上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下…<br>现在想起来也挺庆幸能认识上个工作的同事.<a href=\"https://github.com/yuffiy\" target=\"_blank\" rel=\"external\">送上github传送门</a>(也是现在的同事)</p>\n<blockquote>\n<p>当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习<br>qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽</p>\n</blockquote>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,<br>需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多<a href=\"\"></a>webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.<br>顺便插一句:</p>\n<blockquote>\n<p>编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.</p>\n</blockquote>\n<p>webpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看&lt;&lt;慕课网&gt;&gt;里面的webpack视屏, 讲的很清晰</p>\n<h3 id=\"react-state和props的设计\"><a href=\"#react-state和props的设计\" class=\"headerlink\" title=\"react state和props的设计\"></a>react state和props的设计</h3><h4 id=\"state和props的区别\"><a href=\"#state和props的区别\" class=\"headerlink\" title=\"state和props的区别\"></a>state和props的区别</h4><p>下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议</p>\n<blockquote>\n<p>每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。<br>所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.<br>props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量</p>\n</blockquote>\n<p>react刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能<br>父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。<br>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解</p>\n</blockquote>\n<h3 id=\"附上官网counter案例\"><a href=\"#附上官网counter案例\" class=\"headerlink\" title=\"附上官网counter案例\"></a>附上官网counter案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>后续 -&gt; react配合redux开发手机端页面感受</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/10/react使用感受/react.png\" alt=\"react 官网\" title=\"react 官网\">","more":"<h2 id=\"react感受\"><a href=\"#react感受\" class=\"headerlink\" title=\"react感受\"></a>react感受</h2><p>记得刚开始接触<a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">react</a>的时候还是在前年那时候react版本还在零点几,<br>github上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下…<br>现在想起来也挺庆幸能认识上个工作的同事.<a href=\"https://github.com/yuffiy\" target=\"_blank\" rel=\"external\">送上github传送门</a>(也是现在的同事)</p>\n<blockquote>\n<p>当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习<br>qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽</p>\n</blockquote>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,<br>需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多<a href=\"\"></a>webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.<br>顺便插一句:</p>\n<blockquote>\n<p>编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.</p>\n</blockquote>\n<p>webpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看&lt;&lt;慕课网&gt;&gt;里面的webpack视屏, 讲的很清晰</p>\n<h3 id=\"react-state和props的设计\"><a href=\"#react-state和props的设计\" class=\"headerlink\" title=\"react state和props的设计\"></a>react state和props的设计</h3><h4 id=\"state和props的区别\"><a href=\"#state和props的区别\" class=\"headerlink\" title=\"state和props的区别\"></a>state和props的区别</h4><p>下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议</p>\n<blockquote>\n<p>每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。<br>所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.<br>props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量</p>\n</blockquote>\n<p>react刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能<br>父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。<br>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解</p>\n</blockquote>\n<h3 id=\"附上官网counter案例\"><a href=\"#附上官网counter案例\" class=\"headerlink\" title=\"附上官网counter案例\"></a>附上官网counter案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>后续 -&gt; react配合redux开发手机端页面感受</p>\n</blockquote>"},{"title":"react系列使用redux","date":"2017-06-14T01:50:15.000Z","comments":0,"_content":"\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理,\nredux 出现是时间并不长, 是有flux发展而来\n\n### 设计动机\n\n目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。\n\n<!-- more -->\n\n### 查看文档\n\n之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档\n好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.\n\n### 使用原则\n\n> Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，\n> 主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初\n> 学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。\n\n1. Single source of truth\n\n 单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.\n \n2. State is read-only\n \n 状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). \n\n3. Changes are made with pure functions\n \n 在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。\n\n> 附上官网经典案例 counter\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。\n\n\n## redux 状态管理的流程\n\n- action是用户触发或程序触发的一个普通对象\n\n- reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)\n\n- store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)\n\n{% asset_img redux-thing-image1.png redux流程 %}\n\n上图可以简单的看出redux的改变 状态 . action -> reducer -> 新store -> ui更新\n\n下面是具体的实例:\n\n{% asset_img redux-thing-image2.png redux登录具体流程 %}\n\nstore用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。\n\n> [原文地址](http://www.jianshu.com/p/2c43860b0532)\n","source":"_posts/react系列使用redux.md","raw":"---\ntitle: react系列使用redux\ndate: 2017-06-14 09:50:15\ntags:\n  - redux\n  - react\ncategories: \"react\"\ncomments: false\n---\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理,\nredux 出现是时间并不长, 是有flux发展而来\n\n### 设计动机\n\n目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。\n\n<!-- more -->\n\n### 查看文档\n\n之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档\n好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.\n\n### 使用原则\n\n> Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，\n> 主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初\n> 学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。\n\n1. Single source of truth\n\n 单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.\n \n2. State is read-only\n \n 状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). \n\n3. Changes are made with pure functions\n \n 在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。\n\n> 附上官网经典案例 counter\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。\n\n\n## redux 状态管理的流程\n\n- action是用户触发或程序触发的一个普通对象\n\n- reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)\n\n- store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)\n\n{% asset_img redux-thing-image1.png redux流程 %}\n\n上图可以简单的看出redux的改变 状态 . action -> reducer -> 新store -> ui更新\n\n下面是具体的实例:\n\n{% asset_img redux-thing-image2.png redux登录具体流程 %}\n\nstore用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。\n\n> [原文地址](http://www.jianshu.com/p/2c43860b0532)\n","slug":"react系列使用redux","published":1,"updated":"2017-06-14T07:10:35.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7fh000w6j8340rtgom2","content":"<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理,<br>redux 出现是时间并不长, 是有flux发展而来</p>\n</blockquote>\n<h3 id=\"设计动机\"><a href=\"#设计动机\" class=\"headerlink\" title=\"设计动机\"></a>设计动机</h3><p>目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。</p>\n<a id=\"more\"></a>\n<h3 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h3><p>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.</p>\n<h3 id=\"使用原则\"><a href=\"#使用原则\" class=\"headerlink\" title=\"使用原则\"></a>使用原则</h3><blockquote>\n<p>Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，<br>主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初<br>学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。</p>\n</blockquote>\n<ol>\n<li><p>Single source of truth</p>\n<p>单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.</p>\n</li>\n<li><p>State is read-only</p>\n<p>状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). </p>\n</li>\n<li><p>Changes are made with pure functions</p>\n<p>在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>附上官网经典案例 counter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。</p>\n<h2 id=\"redux-状态管理的流程\"><a href=\"#redux-状态管理的流程\" class=\"headerlink\" title=\"redux 状态管理的流程\"></a>redux 状态管理的流程</h2><ul>\n<li><p>action是用户触发或程序触发的一个普通对象</p>\n</li>\n<li><p>reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)</p>\n</li>\n<li><p>store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)</p>\n</li>\n</ul>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image1.png\" alt=\"redux流程\" title=\"redux流程\">\n<p>上图可以简单的看出redux的改变 状态 . action -&gt; reducer -&gt; 新store -&gt; ui更新</p>\n<p>下面是具体的实例:</p>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image2.png\" alt=\"redux登录具体流程\" title=\"redux登录具体流程\">\n<p>store用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/2c43860b0532\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理,<br>redux 出现是时间并不长, 是有flux发展而来</p>\n</blockquote>\n<h3 id=\"设计动机\"><a href=\"#设计动机\" class=\"headerlink\" title=\"设计动机\"></a>设计动机</h3><p>目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。</p>","more":"<h3 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h3><p>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.</p>\n<h3 id=\"使用原则\"><a href=\"#使用原则\" class=\"headerlink\" title=\"使用原则\"></a>使用原则</h3><blockquote>\n<p>Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，<br>主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初<br>学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。</p>\n</blockquote>\n<ol>\n<li><p>Single source of truth</p>\n<p>单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.</p>\n</li>\n<li><p>State is read-only</p>\n<p>状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). </p>\n</li>\n<li><p>Changes are made with pure functions</p>\n<p>在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>附上官网经典案例 counter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。</p>\n<h2 id=\"redux-状态管理的流程\"><a href=\"#redux-状态管理的流程\" class=\"headerlink\" title=\"redux 状态管理的流程\"></a>redux 状态管理的流程</h2><ul>\n<li><p>action是用户触发或程序触发的一个普通对象</p>\n</li>\n<li><p>reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)</p>\n</li>\n<li><p>store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)</p>\n</li>\n</ul>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image1.png\" alt=\"redux流程\" title=\"redux流程\">\n<p>上图可以简单的看出redux的改变 状态 . action -&gt; reducer -&gt; 新store -&gt; ui更新</p>\n<p>下面是具体的实例:</p>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image2.png\" alt=\"redux登录具体流程\" title=\"redux登录具体流程\">\n<p>store用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/2c43860b0532\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>"},{"title":"vim转移emacs的艰辛路程","date":"2017-06-04T09:54:47.000Z","_content":"# 工欲善其事, 必先利其器\n\n> 大道理不用多讲\n<!-- more -->\n\n## vim和emacs相比ide优点缺点(想对而论)\n\n> 使用之前建议把`Caps Lock`和`control`替换\n\n- 100%linux装机率,没有GUI的服务器编辑器首选\n- 学习曲线高\n- 速度快\n- 效率高\n- vimscript太蹩脚,\n- 使用python写插件,\n- 可以帮助乌干达贫困儿童\n- 长时间编写, 来回模式切换(个人不喜欢)\n\n而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)\n\n因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%\n\n## vim简单介绍\n\n> Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。\n\n## 简单使用\n\n[推荐配置](https://github.com/SpaceVim/SpaceVim)\n\nvim有3中模式,\n\n- `normal`所有快捷键发出指令需要在normal模式下, 除非自己添加`insert`模式配置\n- `inster`插入模式, 编写代码\n- `visual` 模式, 文本的选择\n\n[懒人,别人写的快捷键博客](http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html);\n{% asset_img vim_key_help.png vim键位查询 %}\n\n### vim使用`python`来写你的vim插件\n\n> 注意!!! python电脑版本一定要和vim支持的版本相同`:h python` 查看vim支持版本 `:!command` 用来执行base命令\n\nvim执行python命令直接`:python print \"这里是输入内容\"`\n\n如果在`vimrc`里面使用python来扩展功能.下面是格式\n\n```\npy[thon] << {endmarker}\n{script}\n{endmarker}\n```\n\ndemo:\n\n```python\nfunction! Foo()\npython << EOF\nclass Foo_demo:\n    def __init__(self):\n        print 'Foo_demo init'\nFoo_demo()\nEOF\nendfunction\n```\n\n想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用`:source path_to_script/script_demo.vim` 然后`:call Foo()`来执行\n\n[python扩展vim插件原文](https://segmentfault.com/a/1190000000756107)\n\n## emacs简单介绍\n\n> Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。\nEMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。\n自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。\n\nEmac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展\n\n## emacs 使用\n\n### 优缺点\n\n- 效率高\n- 社区牛人多\n- 速度快\n- 学习曲线高\n- lisp强大的语言支持\n- 不能资助乌干达贫困儿童\n- 相比vim不需要切换模式\n- 每个buffer可以选用单个mode, 互相不冲突\n\n[推荐使用配置(容易上手些)](https://github.com/syl20bnr/spacemacs)\n\n[个人使用配置](https://github.com/angelporo/emacs.d)\n\nemacs使用介绍就比vim简单多了,\n如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,\n\nemacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,\n\n具体使用查看手册`C-h k f b`\n\n[常用快捷键,](http://blog.csdn.net/CherylNatsu/article/details/6536959)\n\n内置帮助手册\n\n`Ctrl-h i m emacs`就可以调出详细的Emacs使用手册;\n`Ctrl-h i m emacs lisp intro` 可以调出Emacs Lisp入门教程；\n`Ctrl-h i m elisp` 可以调出完整的elisp编程手册。\n\n## vim和emacs使用上感受以及不同\n\n在使用vim和emacs之前一直用的`sublime text` 这里说下感受,\n相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己`sublime`配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.\n\n最终逼着自己使用vim,最终自己写过一套配置, 可是在看了`github`大神开源的配置后, 想也没想`fork`过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨`油煎粑粑`)\n\n前车之鉴: 最好使用大神开源配置, 少走弯路\n\n> vim更适合修改网管, emacs才是更适合长时间的编码\n\n所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心\n","source":"_posts/vim转移emacs的艰辛路程.md","raw":"---\ntitle: vim转移emacs的艰辛路程\ndate: 2017-06-04 17:54:47\ntags:\n    - vim\n    - emacs\ncategories: emacs\n---\n# 工欲善其事, 必先利其器\n\n> 大道理不用多讲\n<!-- more -->\n\n## vim和emacs相比ide优点缺点(想对而论)\n\n> 使用之前建议把`Caps Lock`和`control`替换\n\n- 100%linux装机率,没有GUI的服务器编辑器首选\n- 学习曲线高\n- 速度快\n- 效率高\n- vimscript太蹩脚,\n- 使用python写插件,\n- 可以帮助乌干达贫困儿童\n- 长时间编写, 来回模式切换(个人不喜欢)\n\n而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)\n\n因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%\n\n## vim简单介绍\n\n> Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。\n\n## 简单使用\n\n[推荐配置](https://github.com/SpaceVim/SpaceVim)\n\nvim有3中模式,\n\n- `normal`所有快捷键发出指令需要在normal模式下, 除非自己添加`insert`模式配置\n- `inster`插入模式, 编写代码\n- `visual` 模式, 文本的选择\n\n[懒人,别人写的快捷键博客](http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html);\n{% asset_img vim_key_help.png vim键位查询 %}\n\n### vim使用`python`来写你的vim插件\n\n> 注意!!! python电脑版本一定要和vim支持的版本相同`:h python` 查看vim支持版本 `:!command` 用来执行base命令\n\nvim执行python命令直接`:python print \"这里是输入内容\"`\n\n如果在`vimrc`里面使用python来扩展功能.下面是格式\n\n```\npy[thon] << {endmarker}\n{script}\n{endmarker}\n```\n\ndemo:\n\n```python\nfunction! Foo()\npython << EOF\nclass Foo_demo:\n    def __init__(self):\n        print 'Foo_demo init'\nFoo_demo()\nEOF\nendfunction\n```\n\n想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用`:source path_to_script/script_demo.vim` 然后`:call Foo()`来执行\n\n[python扩展vim插件原文](https://segmentfault.com/a/1190000000756107)\n\n## emacs简单介绍\n\n> Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。\nEMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。\n自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。\n\nEmac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展\n\n## emacs 使用\n\n### 优缺点\n\n- 效率高\n- 社区牛人多\n- 速度快\n- 学习曲线高\n- lisp强大的语言支持\n- 不能资助乌干达贫困儿童\n- 相比vim不需要切换模式\n- 每个buffer可以选用单个mode, 互相不冲突\n\n[推荐使用配置(容易上手些)](https://github.com/syl20bnr/spacemacs)\n\n[个人使用配置](https://github.com/angelporo/emacs.d)\n\nemacs使用介绍就比vim简单多了,\n如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,\n\nemacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,\n\n具体使用查看手册`C-h k f b`\n\n[常用快捷键,](http://blog.csdn.net/CherylNatsu/article/details/6536959)\n\n内置帮助手册\n\n`Ctrl-h i m emacs`就可以调出详细的Emacs使用手册;\n`Ctrl-h i m emacs lisp intro` 可以调出Emacs Lisp入门教程；\n`Ctrl-h i m elisp` 可以调出完整的elisp编程手册。\n\n## vim和emacs使用上感受以及不同\n\n在使用vim和emacs之前一直用的`sublime text` 这里说下感受,\n相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己`sublime`配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.\n\n最终逼着自己使用vim,最终自己写过一套配置, 可是在看了`github`大神开源的配置后, 想也没想`fork`过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨`油煎粑粑`)\n\n前车之鉴: 最好使用大神开源配置, 少走弯路\n\n> vim更适合修改网管, emacs才是更适合长时间的编码\n\n所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心\n","slug":"vim转移emacs的艰辛路程","published":1,"updated":"2017-07-07T09:20:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7fk00116j83t9z2t5y0","content":"<h1 id=\"工欲善其事-必先利其器\"><a href=\"#工欲善其事-必先利其器\" class=\"headerlink\" title=\"工欲善其事, 必先利其器\"></a>工欲善其事, 必先利其器</h1><blockquote>\n<p>大道理不用多讲<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"vim和emacs相比ide优点缺点-想对而论\"><a href=\"#vim和emacs相比ide优点缺点-想对而论\" class=\"headerlink\" title=\"vim和emacs相比ide优点缺点(想对而论)\"></a>vim和emacs相比ide优点缺点(想对而论)</h2><blockquote>\n<p>使用之前建议把<code>Caps Lock</code>和<code>control</code>替换</p>\n</blockquote>\n<ul>\n<li>100%linux装机率,没有GUI的服务器编辑器首选</li>\n<li>学习曲线高</li>\n<li>速度快</li>\n<li>效率高</li>\n<li>vimscript太蹩脚,</li>\n<li>使用python写插件,</li>\n<li>可以帮助乌干达贫困儿童</li>\n<li>长时间编写, 来回模式切换(个人不喜欢)</li>\n</ul>\n<p>而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)</p>\n<p>因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%</p>\n<h2 id=\"vim简单介绍\"><a href=\"#vim简单介绍\" class=\"headerlink\" title=\"vim简单介绍\"></a>vim简单介绍</h2><blockquote>\n<p>Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。</p>\n</blockquote>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><a href=\"https://github.com/SpaceVim/SpaceVim\" target=\"_blank\" rel=\"external\">推荐配置</a></p>\n<p>vim有3中模式,</p>\n<ul>\n<li><code>normal</code>所有快捷键发出指令需要在normal模式下, 除非自己添加<code>insert</code>模式配置</li>\n<li><code>inster</code>插入模式, 编写代码</li>\n<li><code>visual</code> 模式, 文本的选择</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html\" target=\"_blank\" rel=\"external\">懒人,别人写的快捷键博客</a>;<br><img src=\"/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png\" alt=\"vim键位查询\" title=\"vim键位查询\"></p>\n<h3 id=\"vim使用python来写你的vim插件\"><a href=\"#vim使用python来写你的vim插件\" class=\"headerlink\" title=\"vim使用python来写你的vim插件\"></a>vim使用<code>python</code>来写你的vim插件</h3><blockquote>\n<p>注意!!! python电脑版本一定要和vim支持的版本相同<code>:h python</code> 查看vim支持版本 <code>:!command</code> 用来执行base命令</p>\n</blockquote>\n<p>vim执行python命令直接<code>:python print &quot;这里是输入内容&quot;</code></p>\n<p>如果在<code>vimrc</code>里面使用python来扩展功能.下面是格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">py[thon] &lt;&lt; &#123;endmarker&#125;</div><div class=\"line\">&#123;script&#125;</div><div class=\"line\">&#123;endmarker&#125;</div></pre></td></tr></table></figure>\n<p>demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function! Foo()</div><div class=\"line\">python &lt;&lt; EOF</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo_demo</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Foo_demo init'</span></div><div class=\"line\">Foo_demo()</div><div class=\"line\">EOF</div><div class=\"line\">endfunction</div></pre></td></tr></table></figure>\n<p>想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用<code>:source path_to_script/script_demo.vim</code> 然后<code>:call Foo()</code>来执行</p>\n<p><a href=\"https://segmentfault.com/a/1190000000756107\" target=\"_blank\" rel=\"external\">python扩展vim插件原文</a></p>\n<h2 id=\"emacs简单介绍\"><a href=\"#emacs简单介绍\" class=\"headerlink\" title=\"emacs简单介绍\"></a>emacs简单介绍</h2><blockquote>\n<p>Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。<br>EMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。<br>自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。</p>\n</blockquote>\n<p>Emac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展</p>\n<h2 id=\"emacs-使用\"><a href=\"#emacs-使用\" class=\"headerlink\" title=\"emacs 使用\"></a>emacs 使用</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>效率高</li>\n<li>社区牛人多</li>\n<li>速度快</li>\n<li>学习曲线高</li>\n<li>lisp强大的语言支持</li>\n<li>不能资助乌干达贫困儿童</li>\n<li>相比vim不需要切换模式</li>\n<li>每个buffer可以选用单个mode, 互相不冲突</li>\n</ul>\n<p><a href=\"https://github.com/syl20bnr/spacemacs\" target=\"_blank\" rel=\"external\">推荐使用配置(容易上手些)</a></p>\n<p><a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">个人使用配置</a></p>\n<p>emacs使用介绍就比vim简单多了,<br>如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,</p>\n<p>emacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,</p>\n<p>具体使用查看手册<code>C-h k f b</code></p>\n<p><a href=\"http://blog.csdn.net/CherylNatsu/article/details/6536959\" target=\"_blank\" rel=\"external\">常用快捷键,</a></p>\n<p>内置帮助手册</p>\n<p><code>Ctrl-h i m emacs</code>就可以调出详细的Emacs使用手册;<br><code>Ctrl-h i m emacs lisp intro</code> 可以调出Emacs Lisp入门教程；<br><code>Ctrl-h i m elisp</code> 可以调出完整的elisp编程手册。</p>\n<h2 id=\"vim和emacs使用上感受以及不同\"><a href=\"#vim和emacs使用上感受以及不同\" class=\"headerlink\" title=\"vim和emacs使用上感受以及不同\"></a>vim和emacs使用上感受以及不同</h2><p>在使用vim和emacs之前一直用的<code>sublime text</code> 这里说下感受,<br>相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己<code>sublime</code>配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.</p>\n<p>最终逼着自己使用vim,最终自己写过一套配置, 可是在看了<code>github</code>大神开源的配置后, 想也没想<code>fork</code>过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨<code>油煎粑粑</code>)</p>\n<p>前车之鉴: 最好使用大神开源配置, 少走弯路</p>\n<blockquote>\n<p>vim更适合修改网管, emacs才是更适合长时间的编码</p>\n</blockquote>\n<p>所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"工欲善其事-必先利其器\"><a href=\"#工欲善其事-必先利其器\" class=\"headerlink\" title=\"工欲善其事, 必先利其器\"></a>工欲善其事, 必先利其器</h1><blockquote>\n<p>大道理不用多讲<br>","more":"</p>\n</blockquote>\n<h2 id=\"vim和emacs相比ide优点缺点-想对而论\"><a href=\"#vim和emacs相比ide优点缺点-想对而论\" class=\"headerlink\" title=\"vim和emacs相比ide优点缺点(想对而论)\"></a>vim和emacs相比ide优点缺点(想对而论)</h2><blockquote>\n<p>使用之前建议把<code>Caps Lock</code>和<code>control</code>替换</p>\n</blockquote>\n<ul>\n<li>100%linux装机率,没有GUI的服务器编辑器首选</li>\n<li>学习曲线高</li>\n<li>速度快</li>\n<li>效率高</li>\n<li>vimscript太蹩脚,</li>\n<li>使用python写插件,</li>\n<li>可以帮助乌干达贫困儿童</li>\n<li>长时间编写, 来回模式切换(个人不喜欢)</li>\n</ul>\n<p>而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)</p>\n<p>因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%</p>\n<h2 id=\"vim简单介绍\"><a href=\"#vim简单介绍\" class=\"headerlink\" title=\"vim简单介绍\"></a>vim简单介绍</h2><blockquote>\n<p>Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。</p>\n</blockquote>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><a href=\"https://github.com/SpaceVim/SpaceVim\" target=\"_blank\" rel=\"external\">推荐配置</a></p>\n<p>vim有3中模式,</p>\n<ul>\n<li><code>normal</code>所有快捷键发出指令需要在normal模式下, 除非自己添加<code>insert</code>模式配置</li>\n<li><code>inster</code>插入模式, 编写代码</li>\n<li><code>visual</code> 模式, 文本的选择</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html\" target=\"_blank\" rel=\"external\">懒人,别人写的快捷键博客</a>;<br><img src=\"/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png\" alt=\"vim键位查询\" title=\"vim键位查询\"></p>\n<h3 id=\"vim使用python来写你的vim插件\"><a href=\"#vim使用python来写你的vim插件\" class=\"headerlink\" title=\"vim使用python来写你的vim插件\"></a>vim使用<code>python</code>来写你的vim插件</h3><blockquote>\n<p>注意!!! python电脑版本一定要和vim支持的版本相同<code>:h python</code> 查看vim支持版本 <code>:!command</code> 用来执行base命令</p>\n</blockquote>\n<p>vim执行python命令直接<code>:python print &quot;这里是输入内容&quot;</code></p>\n<p>如果在<code>vimrc</code>里面使用python来扩展功能.下面是格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">py[thon] &lt;&lt; &#123;endmarker&#125;</div><div class=\"line\">&#123;script&#125;</div><div class=\"line\">&#123;endmarker&#125;</div></pre></td></tr></table></figure>\n<p>demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function! Foo()</div><div class=\"line\">python &lt;&lt; EOF</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo_demo</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Foo_demo init'</span></div><div class=\"line\">Foo_demo()</div><div class=\"line\">EOF</div><div class=\"line\">endfunction</div></pre></td></tr></table></figure>\n<p>想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用<code>:source path_to_script/script_demo.vim</code> 然后<code>:call Foo()</code>来执行</p>\n<p><a href=\"https://segmentfault.com/a/1190000000756107\" target=\"_blank\" rel=\"external\">python扩展vim插件原文</a></p>\n<h2 id=\"emacs简单介绍\"><a href=\"#emacs简单介绍\" class=\"headerlink\" title=\"emacs简单介绍\"></a>emacs简单介绍</h2><blockquote>\n<p>Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。<br>EMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。<br>自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。</p>\n</blockquote>\n<p>Emac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展</p>\n<h2 id=\"emacs-使用\"><a href=\"#emacs-使用\" class=\"headerlink\" title=\"emacs 使用\"></a>emacs 使用</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>效率高</li>\n<li>社区牛人多</li>\n<li>速度快</li>\n<li>学习曲线高</li>\n<li>lisp强大的语言支持</li>\n<li>不能资助乌干达贫困儿童</li>\n<li>相比vim不需要切换模式</li>\n<li>每个buffer可以选用单个mode, 互相不冲突</li>\n</ul>\n<p><a href=\"https://github.com/syl20bnr/spacemacs\" target=\"_blank\" rel=\"external\">推荐使用配置(容易上手些)</a></p>\n<p><a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">个人使用配置</a></p>\n<p>emacs使用介绍就比vim简单多了,<br>如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,</p>\n<p>emacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,</p>\n<p>具体使用查看手册<code>C-h k f b</code></p>\n<p><a href=\"http://blog.csdn.net/CherylNatsu/article/details/6536959\" target=\"_blank\" rel=\"external\">常用快捷键,</a></p>\n<p>内置帮助手册</p>\n<p><code>Ctrl-h i m emacs</code>就可以调出详细的Emacs使用手册;<br><code>Ctrl-h i m emacs lisp intro</code> 可以调出Emacs Lisp入门教程；<br><code>Ctrl-h i m elisp</code> 可以调出完整的elisp编程手册。</p>\n<h2 id=\"vim和emacs使用上感受以及不同\"><a href=\"#vim和emacs使用上感受以及不同\" class=\"headerlink\" title=\"vim和emacs使用上感受以及不同\"></a>vim和emacs使用上感受以及不同</h2><p>在使用vim和emacs之前一直用的<code>sublime text</code> 这里说下感受,<br>相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己<code>sublime</code>配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.</p>\n<p>最终逼着自己使用vim,最终自己写过一套配置, 可是在看了<code>github</code>大神开源的配置后, 想也没想<code>fork</code>过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨<code>油煎粑粑</code>)</p>\n<p>前车之鉴: 最好使用大神开源配置, 少走弯路</p>\n<blockquote>\n<p>vim更适合修改网管, emacs才是更适合长时间的编码</p>\n</blockquote>\n<p>所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心</p>"},{"title":"web前端mac下常用软件","date":"2017-06-05T06:36:50.000Z","_content":"\n{% asset_img emacs-example.png my emacs %}\n\n说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,\n然后心里想的总是在折腾工具都把时间浪费了,\n那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,\n(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro\n\n<!-- more -->\n\n## 进入正题\n\n### 所有软件都提供官网, 如果没有, 下载安装很简单\n`brew install package`或者`brew cask install package`就能download到本机, 前提条件是要安装brew包管理器\n\n### [brew](https://brew.sh) mac下的包管理器, 就如ubuntu里面的get-get\n命令行使用[itern2](https://iterm2.com)   [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示\n\n{% asset_img mac-down.png macdown %}\n\n虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,\n\n### 程序员必不可少dash\n\n> 各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api\n> 主要用法是配合alfred(小帽子)来使用,那叫一个酸爽\n\n{% asset_img dash-seach.png dash search API %}\n","source":"_posts/web前端mac下常用软件.md","raw":"---\ntitle: web前端mac下常用软件\ndate: 2017-06-05 14:36:50\ncategories: mac\ntags:\n  - mac\n---\n\n{% asset_img emacs-example.png my emacs %}\n\n说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,\n然后心里想的总是在折腾工具都把时间浪费了,\n那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,\n(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro\n\n<!-- more -->\n\n## 进入正题\n\n### 所有软件都提供官网, 如果没有, 下载安装很简单\n`brew install package`或者`brew cask install package`就能download到本机, 前提条件是要安装brew包管理器\n\n### [brew](https://brew.sh) mac下的包管理器, 就如ubuntu里面的get-get\n命令行使用[itern2](https://iterm2.com)   [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示\n\n{% asset_img mac-down.png macdown %}\n\n虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,\n\n### 程序员必不可少dash\n\n> 各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api\n> 主要用法是配合alfred(小帽子)来使用,那叫一个酸爽\n\n{% asset_img dash-seach.png dash search API %}\n","slug":"web前端mac下常用软件","published":1,"updated":"2017-06-10T11:40:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5emr7fm00136j83ebmdwrtn","content":"<img src=\"/2017/06/05/web前端mac下常用软件/emacs-example.png\" alt=\"my emacs\" title=\"my emacs\">\n<p>说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,<br>然后心里想的总是在折腾工具都把时间浪费了,<br>那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,<br>(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro</p>\n<a id=\"more\"></a>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><h3 id=\"所有软件都提供官网-如果没有-下载安装很简单\"><a href=\"#所有软件都提供官网-如果没有-下载安装很简单\" class=\"headerlink\" title=\"所有软件都提供官网, 如果没有, 下载安装很简单\"></a>所有软件都提供官网, 如果没有, 下载安装很简单</h3><p><code>brew install package</code>或者<code>brew cask install package</code>就能download到本机, 前提条件是要安装brew包管理器</p>\n<h3 id=\"brew-mac下的包管理器-就如ubuntu里面的get-get\"><a href=\"#brew-mac下的包管理器-就如ubuntu里面的get-get\" class=\"headerlink\" title=\"brew mac下的包管理器, 就如ubuntu里面的get-get\"></a><a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">brew</a> mac下的包管理器, 就如ubuntu里面的get-get</h3><p>命令行使用<a href=\"https://iterm2.com\" target=\"_blank\" rel=\"external\">itern2</a>   <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a>还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示</p>\n<img src=\"/2017/06/05/web前端mac下常用软件/mac-down.png\" alt=\"macdown\" title=\"macdown\">\n<p>虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,</p>\n<h3 id=\"程序员必不可少dash\"><a href=\"#程序员必不可少dash\" class=\"headerlink\" title=\"程序员必不可少dash\"></a>程序员必不可少dash</h3><blockquote>\n<p>各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api<br>主要用法是配合alfred(小帽子)来使用,那叫一个酸爽</p>\n</blockquote>\n<img src=\"/2017/06/05/web前端mac下常用软件/dash-seach.png\" alt=\"dash search API\" title=\"dash search API\">\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/05/web前端mac下常用软件/emacs-example.png\" alt=\"my emacs\" title=\"my emacs\">\n<p>说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,<br>然后心里想的总是在折腾工具都把时间浪费了,<br>那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,<br>(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro</p>","more":"<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><h3 id=\"所有软件都提供官网-如果没有-下载安装很简单\"><a href=\"#所有软件都提供官网-如果没有-下载安装很简单\" class=\"headerlink\" title=\"所有软件都提供官网, 如果没有, 下载安装很简单\"></a>所有软件都提供官网, 如果没有, 下载安装很简单</h3><p><code>brew install package</code>或者<code>brew cask install package</code>就能download到本机, 前提条件是要安装brew包管理器</p>\n<h3 id=\"brew-mac下的包管理器-就如ubuntu里面的get-get\"><a href=\"#brew-mac下的包管理器-就如ubuntu里面的get-get\" class=\"headerlink\" title=\"brew mac下的包管理器, 就如ubuntu里面的get-get\"></a><a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">brew</a> mac下的包管理器, 就如ubuntu里面的get-get</h3><p>命令行使用<a href=\"https://iterm2.com\" target=\"_blank\" rel=\"external\">itern2</a>   <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a>还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示</p>\n<img src=\"/2017/06/05/web前端mac下常用软件/mac-down.png\" alt=\"macdown\" title=\"macdown\">\n<p>虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,</p>\n<h3 id=\"程序员必不可少dash\"><a href=\"#程序员必不可少dash\" class=\"headerlink\" title=\"程序员必不可少dash\"></a>程序员必不可少dash</h3><blockquote>\n<p>各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api<br>主要用法是配合alfred(小帽子)来使用,那叫一个酸爽</p>\n</blockquote>\n<img src=\"/2017/06/05/web前端mac下常用软件/dash-seach.png\" alt=\"dash search API\" title=\"dash search API\">"},{"title":"优雅的设计redux中的store的state树","date":"2017-06-15T07:04:08.000Z","comments":0,"_content":"\n## 如何优雅的设计redux的store中的state树\n\n>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?\n>是这个问题估计让我思考了好就才想到问题的关键处.\n> state树按页面规划 还是按照数据库中的表划分\n\n<!-- more -->\n\n### 按照页面划分\n\n> 是吧每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　　 profile: {\n　　 },\n    list: {\n    },\n　　 edit: {\n　　 },\n    home: {\n    }\n  }\n}\n```\n- 优点\n\n\t> 模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)\n\n- 缺点\n\n\t\t但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n> 假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.\n>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。\n\n\t解决方法:\n\n\t1. 每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)\n\n\t2. 编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)\n\n\t\t具体操作:  当数据源保存成功后`发布`一个全局事件, 在依赖这个数据源的地方`订阅`这个事件, 在订阅的函数里面指定一个保存store的action\n\n\t3. 编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变\n\n    可以看看[RxJS](https://github.com/Reactive-Extensions/RxJS)\n\n\t4. 列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看[normalizr](https://github.com/paularmstrong/normalizr)\n\n#### 同时使用react组件中的state和redux中store中的state\n\n> 注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。\n\n### 按照数据库中的表划分,比如想下面这样init 你的store\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　  companies: {\n    },\n    users: {\n    },\n    events: {\n    }\n  }\n}\n```\n\n> 这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。\n\n\t所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n\n在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.\n\n如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.\n\n如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下\n\nredux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。\n\n参考:\n\n[http://www.jianshu.com/p/f3911358ebcb](http://www.jianshu.com/p/f3911358ebcb)\n\n[https://www.zhihu.com/question/47995437?sort=created](https://www.zhihu.com/question/47995437?sort=created)\n\n[https://www.zhihu.com/question/50888321](https://www.zhihu.com/question/50888321)\n","source":"_posts/优雅的设计redux中的store的state树.md","raw":"---\ntitle: 优雅的设计redux中的store的state树\ndate: 2017-06-15 15:04:08\ntags:\n  - redux\n  - react\n  - react-nativem\ncategories: \"redux\"\ncomments: false\n---\n\n## 如何优雅的设计redux的store中的state树\n\n>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?\n>是这个问题估计让我思考了好就才想到问题的关键处.\n> state树按页面规划 还是按照数据库中的表划分\n\n<!-- more -->\n\n### 按照页面划分\n\n> 是吧每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　　 profile: {\n　　 },\n    list: {\n    },\n　　 edit: {\n　　 },\n    home: {\n    }\n  }\n}\n```\n- 优点\n\n\t> 模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)\n\n- 缺点\n\n\t\t但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n> 假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.\n>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。\n\n\t解决方法:\n\n\t1. 每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)\n\n\t2. 编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)\n\n\t\t具体操作:  当数据源保存成功后`发布`一个全局事件, 在依赖这个数据源的地方`订阅`这个事件, 在订阅的函数里面指定一个保存store的action\n\n\t3. 编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变\n\n    可以看看[RxJS](https://github.com/Reactive-Extensions/RxJS)\n\n\t4. 列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看[normalizr](https://github.com/paularmstrong/normalizr)\n\n#### 同时使用react组件中的state和redux中store中的state\n\n> 注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。\n\n### 按照数据库中的表划分,比如想下面这样init 你的store\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　  companies: {\n    },\n    users: {\n    },\n    events: {\n    }\n  }\n}\n```\n\n> 这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。\n\n\t所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n\n在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.\n\n如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.\n\n如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下\n\nredux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。\n\n参考:\n\n[http://www.jianshu.com/p/f3911358ebcb](http://www.jianshu.com/p/f3911358ebcb)\n\n[https://www.zhihu.com/question/47995437?sort=created](https://www.zhihu.com/question/47995437?sort=created)\n\n[https://www.zhihu.com/question/50888321](https://www.zhihu.com/question/50888321)\n","slug":"优雅的设计redux中的store的state树","published":1,"updated":"2017-06-19T01:16:11.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7fo00166j83ygp0sxcg","content":"<h2 id=\"如何优雅的设计redux的store中的state树\"><a href=\"#如何优雅的设计redux的store中的state树\" class=\"headerlink\" title=\"如何优雅的设计redux的store中的state树\"></a>如何优雅的设计redux的store中的state树</h2><blockquote>\n<p>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?<br>是这个问题估计让我思考了好就才想到问题的关键处.<br>state树按页面规划 还是按照数据库中的表划分</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"按照页面划分\"><a href=\"#按照页面划分\" class=\"headerlink\" title=\"按照页面划分\"></a>按照页面划分</h3><blockquote>\n<p>是吧每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">profile</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">list</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">edit</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>优点</p>\n<blockquote>\n<p>模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)</p>\n</blockquote>\n</li>\n<li><p>缺点</p>\n<pre><code>但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n</code></pre><blockquote>\n<p>假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.<br>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。</p>\n</blockquote>\n<p>  解决方法:</p>\n<ol>\n<li><p>每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)</p>\n</li>\n<li><p>编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)</p>\n<p> 具体操作:  当数据源保存成功后<code>发布</code>一个全局事件, 在依赖这个数据源的地方<code>订阅</code>这个事件, 在订阅的函数里面指定一个保存store的action</p>\n</li>\n<li><p>编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变</p>\n<p>可以看看<a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a></p>\n</li>\n<li><p>列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看<a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"external\">normalizr</a></p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"同时使用react组件中的state和redux中store中的state\"><a href=\"#同时使用react组件中的state和redux中store中的state\" class=\"headerlink\" title=\"同时使用react组件中的state和redux中store中的state\"></a>同时使用react组件中的state和redux中store中的state</h4><blockquote>\n<p>注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。</p>\n</blockquote>\n<h3 id=\"按照数据库中的表划分-比如想下面这样init-你的store\"><a href=\"#按照数据库中的表划分-比如想下面这样init-你的store\" class=\"headerlink\" title=\"按照数据库中的表划分,比如想下面这样init 你的store\"></a>按照数据库中的表划分,比如想下面这样init 你的store</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　  <span class=\"attr\">companies</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">users</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。</p>\n</blockquote>\n<pre><code>所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n</code></pre><p>在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.</p>\n<p>如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.</p>\n<p>如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下</p>\n<p>redux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。</p>\n<p>参考:</p>\n<p><a href=\"http://www.jianshu.com/p/f3911358ebcb\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f3911358ebcb</a></p>\n<p><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/47995437?sort=created</a></p>\n<p><a href=\"https://www.zhihu.com/question/50888321\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/50888321</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"如何优雅的设计redux的store中的state树\"><a href=\"#如何优雅的设计redux的store中的state树\" class=\"headerlink\" title=\"如何优雅的设计redux的store中的state树\"></a>如何优雅的设计redux的store中的state树</h2><blockquote>\n<p>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?<br>是这个问题估计让我思考了好就才想到问题的关键处.<br>state树按页面规划 还是按照数据库中的表划分</p>\n</blockquote>","more":"<h3 id=\"按照页面划分\"><a href=\"#按照页面划分\" class=\"headerlink\" title=\"按照页面划分\"></a>按照页面划分</h3><blockquote>\n<p>是吧每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">profile</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">list</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">edit</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>优点</p>\n<blockquote>\n<p>模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)</p>\n</blockquote>\n</li>\n<li><p>缺点</p>\n<pre><code>但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n</code></pre><blockquote>\n<p>假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.<br>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。</p>\n</blockquote>\n<p>  解决方法:</p>\n<ol>\n<li><p>每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)</p>\n</li>\n<li><p>编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)</p>\n<p> 具体操作:  当数据源保存成功后<code>发布</code>一个全局事件, 在依赖这个数据源的地方<code>订阅</code>这个事件, 在订阅的函数里面指定一个保存store的action</p>\n</li>\n<li><p>编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变</p>\n<p>可以看看<a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a></p>\n</li>\n<li><p>列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看<a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"external\">normalizr</a></p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"同时使用react组件中的state和redux中store中的state\"><a href=\"#同时使用react组件中的state和redux中store中的state\" class=\"headerlink\" title=\"同时使用react组件中的state和redux中store中的state\"></a>同时使用react组件中的state和redux中store中的state</h4><blockquote>\n<p>注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。</p>\n</blockquote>\n<h3 id=\"按照数据库中的表划分-比如想下面这样init-你的store\"><a href=\"#按照数据库中的表划分-比如想下面这样init-你的store\" class=\"headerlink\" title=\"按照数据库中的表划分,比如想下面这样init 你的store\"></a>按照数据库中的表划分,比如想下面这样init 你的store</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　  <span class=\"attr\">companies</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">users</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。</p>\n</blockquote>\n<pre><code>所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n</code></pre><p>在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.</p>\n<p>如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.</p>\n<p>如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下</p>\n<p>redux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。</p>\n<p>参考:</p>\n<p><a href=\"http://www.jianshu.com/p/f3911358ebcb\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f3911358ebcb</a></p>\n<p><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/47995437?sort=created</a></p>\n<p><a href=\"https://www.zhihu.com/question/50888321\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/50888321</a></p>"},{"title":"体验es7中的Async / Await来处理异步","date":"2017-06-14T11:21:56.000Z","comments":0,"_content":"\n\n## 体验下es6对异步的最终解决方案\n> 阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解\n\n### 直接上例子\n\nAsync/Await 应该是目前最简单的异步方案\n下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子\n\n<!-- more -->\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            resolve()\n        }, time);\n    })\n}\n\nlet start = async function () {\n    //这里使用起来像同步代码那样直观\n    console.log('start');\n    await sleep(3000);\n    console.log('end')\n};\n\nstart();\n```\n\n控制台先输出 `start`, 等候3秒后, 输出了 `end` .\n\n## 基本规则\n\n1. async 表示 异步函数,  await只能用在异步函数里面.\n\n2. `await` 表示在这里 `等待promise返回结果` , 在继续执行下面的.\n\n3. `await` 后面跟着的 `应该是一个promise对象` (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)\n\n## 获得返回值\n\n`await`等待的虽然是promise对象, 但不必写 `.then(function() {...})`, 直接就可以得到返回值.\n\n```javascript\n\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            //  return 'ok'\n            resolve('ok');\n        }, time);\n    })\n}\n\nlet start = async function () {\n    let result = await sleep(3000);\n    console.log(result); // 'ok'\n}\n```\n\n上面是一些正确的处理逻辑\n下面接着看怎么捕捉错误\n\n## 捕捉错误\n\n既然 `.then(function () {...})`不写了,  那么 `.catch(function () {...})`也需要写,\n可以直接使用`try catch`语法来捕捉错误\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); //这里得到一个返回错误\n        //所以一下代码不会执行\n        console.log('end');\n    } catch( e ){\n        console.log(e); //这里捕捉错误 'e'\n    }\n}\n```\n\n## 循环多个`await`\n\nawait 写起来有种写同步代码, 所以可以理所当然的卸载`for`循环里面, 不必当心以往需要`闭包`才能解决的问题\n\n```javascript\n...省略以上代码\n\nlet start = async function () {\n    for(let i = 1; i <= 10; i++ ){\n        console.log(`当前是第${i}次等待...`);\n        await sleep(1000;)\n    }\n};\n```\n\n指的注意的是,  `await`必须在`async函数的上下文中, 也就是await需要在async函数环境中`.\n\n```javascript\n...省略以上代码\n\nlet oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n// 错误示范\noneToTen.forEach(function (item) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); // error!! await只能在async函数中运行\n})\n\n// 正确示范\nfor(let item of oneToten) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); //正确,  for循环的上下文还在async函数中\n}\n```\n","source":"_posts/体验es7中的Async-Await来处理异步.md","raw":"---\ntitle: 体验es7中的Async / Await来处理异步\ndate: 2017-06-14 19:21:56\ntags:\n    - es7\n    - javascript\ncategories: 'javascript'\ncomments: false\n---\n\n\n## 体验下es6对异步的最终解决方案\n> 阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解\n\n### 直接上例子\n\nAsync/Await 应该是目前最简单的异步方案\n下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子\n\n<!-- more -->\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            resolve()\n        }, time);\n    })\n}\n\nlet start = async function () {\n    //这里使用起来像同步代码那样直观\n    console.log('start');\n    await sleep(3000);\n    console.log('end')\n};\n\nstart();\n```\n\n控制台先输出 `start`, 等候3秒后, 输出了 `end` .\n\n## 基本规则\n\n1. async 表示 异步函数,  await只能用在异步函数里面.\n\n2. `await` 表示在这里 `等待promise返回结果` , 在继续执行下面的.\n\n3. `await` 后面跟着的 `应该是一个promise对象` (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)\n\n## 获得返回值\n\n`await`等待的虽然是promise对象, 但不必写 `.then(function() {...})`, 直接就可以得到返回值.\n\n```javascript\n\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            //  return 'ok'\n            resolve('ok');\n        }, time);\n    })\n}\n\nlet start = async function () {\n    let result = await sleep(3000);\n    console.log(result); // 'ok'\n}\n```\n\n上面是一些正确的处理逻辑\n下面接着看怎么捕捉错误\n\n## 捕捉错误\n\n既然 `.then(function () {...})`不写了,  那么 `.catch(function () {...})`也需要写,\n可以直接使用`try catch`语法来捕捉错误\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); //这里得到一个返回错误\n        //所以一下代码不会执行\n        console.log('end');\n    } catch( e ){\n        console.log(e); //这里捕捉错误 'e'\n    }\n}\n```\n\n## 循环多个`await`\n\nawait 写起来有种写同步代码, 所以可以理所当然的卸载`for`循环里面, 不必当心以往需要`闭包`才能解决的问题\n\n```javascript\n...省略以上代码\n\nlet start = async function () {\n    for(let i = 1; i <= 10; i++ ){\n        console.log(`当前是第${i}次等待...`);\n        await sleep(1000;)\n    }\n};\n```\n\n指的注意的是,  `await`必须在`async函数的上下文中, 也就是await需要在async函数环境中`.\n\n```javascript\n...省略以上代码\n\nlet oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n// 错误示范\noneToTen.forEach(function (item) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); // error!! await只能在async函数中运行\n})\n\n// 正确示范\nfor(let item of oneToten) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); //正确,  for循环的上下文还在async函数中\n}\n```\n","slug":"体验es7中的Async-Await来处理异步","published":1,"updated":"2017-07-11T08:01:57.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7fp00186j83ri0k5wp6","content":"<h2 id=\"体验下es6对异步的最终解决方案\"><a href=\"#体验下es6对异步的最终解决方案\" class=\"headerlink\" title=\"体验下es6对异步的最终解决方案\"></a>体验下es6对异步的最终解决方案</h2><blockquote>\n<p>阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解</p>\n</blockquote>\n<h3 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h3><p>Async/Await 应该是目前最简单的异步方案<br>下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            resolve()</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用起来像同步代码那样直观</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">start();</div></pre></td></tr></table></figure>\n<p>控制台先输出 <code>start</code>, 等候3秒后, 输出了 <code>end</code> .</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><ol>\n<li><p>async 表示 异步函数,  await只能用在异步函数里面.</p>\n</li>\n<li><p><code>await</code> 表示在这里 <code>等待promise返回结果</code> , 在继续执行下面的.</p>\n</li>\n<li><p><code>await</code> 后面跟着的 <code>应该是一个promise对象</code> (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)</p>\n</li>\n</ol>\n<h2 id=\"获得返回值\"><a href=\"#获得返回值\" class=\"headerlink\" title=\"获得返回值\"></a>获得返回值</h2><p><code>await</code>等待的虽然是promise对象, 但不必写 <code>.then(function() {...})</code>, 直接就可以得到返回值.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//  return 'ok'</span></div><div class=\"line\">            resolve(<span class=\"string\">'ok'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 'ok'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面是一些正确的处理逻辑<br>下面接着看怎么捕捉错误</p>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>既然 <code>.then(function () {...})</code>不写了,  那么 <code>.catch(function () {...})</code>也需要写,<br>可以直接使用<code>try catch</code>语法来捕捉错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 模拟出错了，返回 ‘error’</span></div><div class=\"line\">            reject(<span class=\"string\">'error'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>); <span class=\"comment\">//这里得到一个返回错误</span></div><div class=\"line\">        <span class=\"comment\">//所以一下代码不会执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span>( e )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">//这里捕捉错误 'e'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个<code>await</code></h2><p>await 写起来有种写同步代码, 所以可以理所当然的卸载<code>for</code>循环里面, 不必当心以往需要<code>闭包</code>才能解决的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;i&#125;</span>次等待...`</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>指的注意的是,  <code>await</code>必须在<code>async函数的上下文中, 也就是await需要在async函数环境中</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> oneToTen = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误示范</span></div><div class=\"line\">oneToTen.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// error!! await只能在async函数中运行</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确示范</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> oneToten) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">//正确,  for循环的上下文还在async函数中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"体验下es6对异步的最终解决方案\"><a href=\"#体验下es6对异步的最终解决方案\" class=\"headerlink\" title=\"体验下es6对异步的最终解决方案\"></a>体验下es6对异步的最终解决方案</h2><blockquote>\n<p>阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解</p>\n</blockquote>\n<h3 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h3><p>Async/Await 应该是目前最简单的异步方案<br>下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            resolve()</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用起来像同步代码那样直观</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">start();</div></pre></td></tr></table></figure>\n<p>控制台先输出 <code>start</code>, 等候3秒后, 输出了 <code>end</code> .</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><ol>\n<li><p>async 表示 异步函数,  await只能用在异步函数里面.</p>\n</li>\n<li><p><code>await</code> 表示在这里 <code>等待promise返回结果</code> , 在继续执行下面的.</p>\n</li>\n<li><p><code>await</code> 后面跟着的 <code>应该是一个promise对象</code> (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)</p>\n</li>\n</ol>\n<h2 id=\"获得返回值\"><a href=\"#获得返回值\" class=\"headerlink\" title=\"获得返回值\"></a>获得返回值</h2><p><code>await</code>等待的虽然是promise对象, 但不必写 <code>.then(function() {...})</code>, 直接就可以得到返回值.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//  return 'ok'</span></div><div class=\"line\">            resolve(<span class=\"string\">'ok'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 'ok'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面是一些正确的处理逻辑<br>下面接着看怎么捕捉错误</p>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>既然 <code>.then(function () {...})</code>不写了,  那么 <code>.catch(function () {...})</code>也需要写,<br>可以直接使用<code>try catch</code>语法来捕捉错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 模拟出错了，返回 ‘error’</span></div><div class=\"line\">            reject(<span class=\"string\">'error'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>); <span class=\"comment\">//这里得到一个返回错误</span></div><div class=\"line\">        <span class=\"comment\">//所以一下代码不会执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span>( e )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">//这里捕捉错误 'e'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个<code>await</code></h2><p>await 写起来有种写同步代码, 所以可以理所当然的卸载<code>for</code>循环里面, 不必当心以往需要<code>闭包</code>才能解决的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;i&#125;</span>次等待...`</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>指的注意的是,  <code>await</code>必须在<code>async函数的上下文中, 也就是await需要在async函数环境中</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> oneToTen = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误示范</span></div><div class=\"line\">oneToTen.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// error!! await只能在async函数中运行</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确示范</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> oneToten) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">//正确,  for循环的上下文还在async函数中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"hexo博客搭建以及个人开发环境","comments":0,"_content":"\n## hexo分分钟搭建博客\n\n### [官方传送门](https://hexo.io/zh-cn/)\n\n> 因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想\n\n{% asset_img hexo-info.png hexo intro %}\n\n<!-- more -->\n\n### 本地安装\n当然node和npm是必须的,\n\n```base\n➜ npm install hexo-cli -g\n➜ hexo init blog\n➜ cd blog\n➜ npm install\n➜ hexo server\n```\n\n本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞\n\n### 选择喜欢的主题, 个人倾向 [Hexo Next](http://theme-next.iissnan.com/)这个主题\n\n安装在`themes`文件夹内, 修改配置文件`_config.ycm`\n具体配置可以查看官网说明\n\n具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof\n\n配置github pages\n\n```coffeescript\ndeploy:\n  type: git\n  repo: 'https://github.com/username/projectName'\n  branch: [branshName]\n  message: \"{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n```\n\n上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称\n\n\n## tags类型\n\n```\ntags:\n  - tag1\n  - tag2\ncategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n### 添加标签\n\n`hexo new page tags`\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```coffeescript\ntitle: tags\ndate: 2017-06-01 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n### 添加分类\n\n`hexo new page categories`\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n\n## 部署\n配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run```hexo g -d```部署到自己的github就可以了\n\n然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok\n","source":"_posts/开发环境介绍以及博客搭建.md","raw":"---\ntitle: hexo博客搭建以及个人开发环境\ntags:\n    - blog\n    - hexo\ncategories: \"blog\"\ncomments: false\n---\n\n## hexo分分钟搭建博客\n\n### [官方传送门](https://hexo.io/zh-cn/)\n\n> 因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想\n\n{% asset_img hexo-info.png hexo intro %}\n\n<!-- more -->\n\n### 本地安装\n当然node和npm是必须的,\n\n```base\n➜ npm install hexo-cli -g\n➜ hexo init blog\n➜ cd blog\n➜ npm install\n➜ hexo server\n```\n\n本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞\n\n### 选择喜欢的主题, 个人倾向 [Hexo Next](http://theme-next.iissnan.com/)这个主题\n\n安装在`themes`文件夹内, 修改配置文件`_config.ycm`\n具体配置可以查看官网说明\n\n具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof\n\n配置github pages\n\n```coffeescript\ndeploy:\n  type: git\n  repo: 'https://github.com/username/projectName'\n  branch: [branshName]\n  message: \"{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n```\n\n上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称\n\n\n## tags类型\n\n```\ntags:\n  - tag1\n  - tag2\ncategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n### 添加标签\n\n`hexo new page tags`\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```coffeescript\ntitle: tags\ndate: 2017-06-01 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n### 添加分类\n\n`hexo new page categories`\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n\n## 部署\n配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run```hexo g -d```部署到自己的github就可以了\n\n然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok\n","slug":"开发环境介绍以及博客搭建","published":1,"date":"2017-06-10T11:40:38.000Z","updated":"2017-06-10T11:40:38.000Z","layout":"post","photos":[],"link":"","_id":"cj5emr7fq001b6j83z8751p2b","content":"<h2 id=\"hexo分分钟搭建博客\"><a href=\"#hexo分分钟搭建博客\" class=\"headerlink\" title=\"hexo分分钟搭建博客\"></a>hexo分分钟搭建博客</h2><h3 id=\"官方传送门\"><a href=\"#官方传送门\" class=\"headerlink\" title=\"官方传送门\"></a><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方传送门</a></h3><blockquote>\n<p>因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想</p>\n</blockquote>\n<img src=\"/2017/06/10/开发环境介绍以及博客搭建/hexo-info.png\" alt=\"hexo intro\" title=\"hexo intro\">\n<a id=\"more\"></a>\n<h3 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h3><p>当然node和npm是必须的,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ npm install hexo-cli -g</div><div class=\"line\">➜ hexo init blog</div><div class=\"line\">➜ cd blog</div><div class=\"line\">➜ npm install</div><div class=\"line\">➜ hexo server</div></pre></td></tr></table></figure>\n<p>本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞</p>\n<h3 id=\"选择喜欢的主题-个人倾向-Hexo-Next这个主题\"><a href=\"#选择喜欢的主题-个人倾向-Hexo-Next这个主题\" class=\"headerlink\" title=\"选择喜欢的主题, 个人倾向 Hexo Next这个主题\"></a>选择喜欢的主题, 个人倾向 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Hexo Next</a>这个主题</h3><p>安装在<code>themes</code>文件夹内, 修改配置文件<code>_config.ycm</code><br>具体配置可以查看官网说明</p>\n<p>具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof</p>\n<p>配置github pages</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: <span class=\"string\">'https://github.com/username/projectName'</span></div><div class=\"line\">  branch: [branshName]</div><div class=\"line\">  message: <span class=\"string\">\"&#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;\"</span></div></pre></td></tr></table></figure>\n<p>上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称</p>\n<h2 id=\"tags类型\"><a href=\"#tags类型\" class=\"headerlink\" title=\"tags类型\"></a>tags类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><p><code>hexo new page tags</code><br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2017-06-01 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p><code>hexo new page categories</code><br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run<code>hexo g -d</code>部署到自己的github就可以了</p>\n<p>然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"hexo分分钟搭建博客\"><a href=\"#hexo分分钟搭建博客\" class=\"headerlink\" title=\"hexo分分钟搭建博客\"></a>hexo分分钟搭建博客</h2><h3 id=\"官方传送门\"><a href=\"#官方传送门\" class=\"headerlink\" title=\"官方传送门\"></a><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方传送门</a></h3><blockquote>\n<p>因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想</p>\n</blockquote>\n<img src=\"/2017/06/10/开发环境介绍以及博客搭建/hexo-info.png\" alt=\"hexo intro\" title=\"hexo intro\">","more":"<h3 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h3><p>当然node和npm是必须的,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ npm install hexo-cli -g</div><div class=\"line\">➜ hexo init blog</div><div class=\"line\">➜ cd blog</div><div class=\"line\">➜ npm install</div><div class=\"line\">➜ hexo server</div></pre></td></tr></table></figure>\n<p>本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞</p>\n<h3 id=\"选择喜欢的主题-个人倾向-Hexo-Next这个主题\"><a href=\"#选择喜欢的主题-个人倾向-Hexo-Next这个主题\" class=\"headerlink\" title=\"选择喜欢的主题, 个人倾向 Hexo Next这个主题\"></a>选择喜欢的主题, 个人倾向 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Hexo Next</a>这个主题</h3><p>安装在<code>themes</code>文件夹内, 修改配置文件<code>_config.ycm</code><br>具体配置可以查看官网说明</p>\n<p>具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof</p>\n<p>配置github pages</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: <span class=\"string\">'https://github.com/username/projectName'</span></div><div class=\"line\">  branch: [branshName]</div><div class=\"line\">  message: <span class=\"string\">\"&#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;\"</span></div></pre></td></tr></table></figure>\n<p>上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称</p>\n<h2 id=\"tags类型\"><a href=\"#tags类型\" class=\"headerlink\" title=\"tags类型\"></a>tags类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><p><code>hexo new page tags</code><br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2017-06-01 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p><code>hexo new page categories</code><br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run<code>hexo g -d</code>部署到自己的github就可以了</p>\n<p>然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok</p>"}],"PostAsset":[{"_id":"source/_posts/react系列使用redux/redux-thing-image1.png","slug":"redux-thing-image1.png","post":"cj5emr7fh000w6j8340rtgom2","modified":1,"renderable":0},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","slug":"emacs-ycmd.png","post":"cj5emr7dw00076j83p9bal8r5","modified":1,"renderable":0},{"_id":"source/_posts/Immutable-js意义以及使用场所/immuable.gif","slug":"immuable.gif","post":"cj5emr7d700006j83ow99wn4g","modified":1,"renderable":0},{"_id":"source/_posts/js移触屏滑动事件/touchstart_demo.png","post":"cj5emr7e000096j838gybs7yc","slug":"touchstart_demo.png","modified":1,"renderable":1},{"_id":"source/_posts/hexo添加自己域名/admin.png","post":"cj5emr7ee000h6j83l2ko6dxk","slug":"admin.png","modified":1,"renderable":1},{"_id":"source/_posts/react中setState的使用/this.setState.png","post":"cj5emr7f7000q6j83nqct122c","slug":"this.setState.png","modified":1,"renderable":1},{"_id":"source/_posts/react使用感受/react.png","post":"cj5emr7f8000u6j83eflty0ma","slug":"react.png","modified":1,"renderable":1},{"_id":"source/_posts/vim转移emacs的艰辛路程/vim_key_help.png","slug":"vim_key_help.png","post":"cj5emr7fk00116j83t9z2t5y0","modified":1,"renderable":0},{"_id":"source/_posts/开发环境介绍以及博客搭建/hexo-info.png","post":"cj5emr7fq001b6j83z8751p2b","slug":"hexo-info.png","modified":1,"renderable":1},{"_id":"source/_posts/Immutable-js意义以及使用场所/immutable2.jpg","post":"cj5emr7d700006j83ow99wn4g","slug":"immutable2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/react系列使用redux/redux-thing-image2.png","post":"cj5emr7fh000w6j8340rtgom2","slug":"redux-thing-image2.png","modified":1,"renderable":1},{"_id":"source/_posts/web前端mac下常用软件/dash-seach.png","post":"cj5emr7fm00136j83ebmdwrtn","slug":"dash-seach.png","modified":1,"renderable":1},{"_id":"source/_posts/web前端mac下常用软件/emacs-example.png","slug":"emacs-example.png","post":"cj5emr7fm00136j83ebmdwrtn","modified":1,"renderable":0},{"_id":"source/_posts/web前端mac下常用软件/mac-down.png","slug":"mac-down.png","post":"cj5emr7fm00136j83ebmdwrtn","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj5emr7dw00076j83p9bal8r5","category_id":"cj5emr7e2000b6j83z93xregt","_id":"cj5emr7eh000j6j83sanbgzpb"},{"post_id":"cj5emr7e000096j838gybs7yc","category_id":"cj5emr7eb000g6j837b12nofw","_id":"cj5emr7f8000r6j83rxhfv53s"},{"post_id":"cj5emr7e3000c6j83kr06q0um","category_id":"cj5emr7ej000l6j83vqa5x97q","_id":"cj5emr7fi000y6j83xr7odlfo"},{"post_id":"cj5emr7ee000h6j83l2ko6dxk","category_id":"cj5emr7f8000t6j83g4ml594m","_id":"cj5emr7fo00156j83uu0tizci"},{"post_id":"cj5emr7eo000n6j83qow50l9y","category_id":"cj5emr7fk000z6j83efdleu1j","_id":"cj5emr7fp001a6j83pm8e3nfk"},{"post_id":"cj5emr7f8000u6j83eflty0ma","category_id":"cj5emr7fo00176j832ayqm94u","_id":"cj5emr7fr001e6j835qrqn6fu"},{"post_id":"cj5emr7fq001b6j83z8751p2b","category_id":"cj5emr7fo00176j832ayqm94u","_id":"cj5emr7fs001g6j8353si4v5i"},{"post_id":"cj5emr7fh000w6j8340rtgom2","category_id":"cj5emr7fr001c6j83klmwvvsm","_id":"cj5emr7fs001i6j83qcofupxh"},{"post_id":"cj5emr7fk00116j83t9z2t5y0","category_id":"cj5emr7fs001f6j83ait4xusw","_id":"cj5emr7fu001l6j83lei92w1q"},{"post_id":"cj5emr7fm00136j83ebmdwrtn","category_id":"cj5emr7fs001j6j83v4691ei0","_id":"cj5emr7fy001q6j83ku7dlx84"},{"post_id":"cj5emr7fo00166j83ygp0sxcg","category_id":"cj5emr7fv001n6j83j6hbq0zb","_id":"cj5emr7g2001w6j83w7up5j9r"},{"post_id":"cj5emr7fp00186j83ri0k5wp6","category_id":"cj5emr7fy001s6j83a3nluq8b","_id":"cj5emr7g200206j83z7lnpdme"}],"PostTag":[{"post_id":"cj5emr7d700006j83ow99wn4g","tag_id":"cj5emr7dm00046j833y0n1mow","_id":"cj5emr7ek000m6j83mpqh5uv6"},{"post_id":"cj5emr7d700006j83ow99wn4g","tag_id":"cj5emr7e2000a6j8387gk4wrq","_id":"cj5emr7eq000o6j83s72btb69"},{"post_id":"cj5emr7d700006j83ow99wn4g","tag_id":"cj5emr7e7000e6j83fcgt6rgu","_id":"cj5emr7f8000s6j8339mwmbue"},{"post_id":"cj5emr7eo000n6j83qow50l9y","tag_id":"cj5emr7e2000a6j8387gk4wrq","_id":"cj5emr7fa000v6j83qywka4o6"},{"post_id":"cj5emr7ds00056j83uf1ptvqn","tag_id":"cj5emr7eh000i6j83ec0zrriy","_id":"cj5emr7fk00106j83os3q1w44"},{"post_id":"cj5emr7ds00056j83uf1ptvqn","tag_id":"cj5emr7f7000p6j83i3n4cvxb","_id":"cj5emr7fm00126j83vuybbrh7"},{"post_id":"cj5emr7dw00076j83p9bal8r5","tag_id":"cj5emr7eh000i6j83ec0zrriy","_id":"cj5emr7fv001m6j8357l1nrji"},{"post_id":"cj5emr7dw00076j83p9bal8r5","tag_id":"cj5emr7fn00146j83sh3m5ge0","_id":"cj5emr7fx001o6j83nhdfsa3l"},{"post_id":"cj5emr7dw00076j83p9bal8r5","tag_id":"cj5emr7fp00196j83wt1iaiek","_id":"cj5emr7fy001r6j83tg0ynte2"},{"post_id":"cj5emr7dw00076j83p9bal8r5","tag_id":"cj5emr7fr001d6j83e4rsjf39","_id":"cj5emr7fy001t6j83lz5cjukc"},{"post_id":"cj5emr7dw00076j83p9bal8r5","tag_id":"cj5emr7fs001h6j83d61qusnk","_id":"cj5emr7g2001v6j8378j2s2xw"},{"post_id":"cj5emr7e000096j838gybs7yc","tag_id":"cj5emr7ft001k6j830i512i9l","_id":"cj5emr7g2001x6j836zkx47zo"},{"post_id":"cj5emr7e3000c6j83kr06q0um","tag_id":"cj5emr7e2000a6j8387gk4wrq","_id":"cj5emr7g2001z6j831p4wr5x3"},{"post_id":"cj5emr7e3000c6j83kr06q0um","tag_id":"cj5emr7fy001p6j8398ra59h4","_id":"cj5emr7g300216j83p88zd1wl"},{"post_id":"cj5emr7ee000h6j83l2ko6dxk","tag_id":"cj5emr7g2001u6j83gaa88urc","_id":"cj5emr7g400236j83e2tbrxlt"},{"post_id":"cj5emr7ee000h6j83l2ko6dxk","tag_id":"cj5emr7g2001y6j83a2ws6x0i","_id":"cj5emr7g400246j83990bb40k"},{"post_id":"cj5emr7ei000k6j83a6fjxmt7","tag_id":"cj5emr7dm00046j833y0n1mow","_id":"cj5emr7g500266j83pqowxf0h"},{"post_id":"cj5emr7ei000k6j83a6fjxmt7","tag_id":"cj5emr7g300226j83z4hrd8t1","_id":"cj5emr7g700276j83oplae5rt"},{"post_id":"cj5emr7f7000q6j83nqct122c","tag_id":"cj5emr7dm00046j833y0n1mow","_id":"cj5emr7g900296j830vquv71p"},{"post_id":"cj5emr7f7000q6j83nqct122c","tag_id":"cj5emr7g500256j836ml7nofi","_id":"cj5emr7ga002a6j83cs54ibxi"},{"post_id":"cj5emr7fh000w6j8340rtgom2","tag_id":"cj5emr7g300226j83z4hrd8t1","_id":"cj5emr7gb002c6j834iie73sg"},{"post_id":"cj5emr7fh000w6j8340rtgom2","tag_id":"cj5emr7dm00046j833y0n1mow","_id":"cj5emr7ge002d6j8381bjfwja"},{"post_id":"cj5emr7fk00116j83t9z2t5y0","tag_id":"cj5emr7ga002b6j83rsq3avvs","_id":"cj5emr7gg002f6j83voiayfv6"},{"post_id":"cj5emr7fk00116j83t9z2t5y0","tag_id":"cj5emr7eh000i6j83ec0zrriy","_id":"cj5emr7gg002g6j83xcmcsmgm"},{"post_id":"cj5emr7fm00136j83ebmdwrtn","tag_id":"cj5emr7gf002e6j832jtgbos8","_id":"cj5emr7gr002i6j83fsq0w44i"},{"post_id":"cj5emr7fo00166j83ygp0sxcg","tag_id":"cj5emr7g300226j83z4hrd8t1","_id":"cj5emr7gw002l6j83pbh4zj1s"},{"post_id":"cj5emr7fo00166j83ygp0sxcg","tag_id":"cj5emr7dm00046j833y0n1mow","_id":"cj5emr7gw002m6j83rgp6jhmz"},{"post_id":"cj5emr7fo00166j83ygp0sxcg","tag_id":"cj5emr7gr002j6j83dj19oaks","_id":"cj5emr7gw002o6j83f76qc80z"},{"post_id":"cj5emr7fp00186j83ri0k5wp6","tag_id":"cj5emr7gu002k6j8333m02hid","_id":"cj5emr7gy002q6j83k5mntep3"},{"post_id":"cj5emr7fp00186j83ri0k5wp6","tag_id":"cj5emr7gw002n6j83epndclvk","_id":"cj5emr7gy002r6j83mk675nfk"},{"post_id":"cj5emr7fq001b6j83z8751p2b","tag_id":"cj5emr7gx002p6j83ddtf0pen","_id":"cj5emr7h0002t6j83b235an23"},{"post_id":"cj5emr7fq001b6j83z8751p2b","tag_id":"cj5emr7g2001u6j83gaa88urc","_id":"cj5emr7h0002u6j838ks9vhgv"}],"Tag":[{"name":"react","_id":"cj5emr7dm00046j833y0n1mow"},{"name":"react-native","_id":"cj5emr7e2000a6j8387gk4wrq"},{"name":"immutable","_id":"cj5emr7e7000e6j83fcgt6rgu"},{"name":"emacs","_id":"cj5emr7eh000i6j83ec0zrriy"},{"name":"emacs API","_id":"cj5emr7f7000p6j83i3n4cvxb"},{"name":"emacs自动补全","_id":"cj5emr7fn00146j83sh3m5ge0"},{"name":"ycmd","_id":"cj5emr7fp00196j83wt1iaiek"},{"name":"company-mode","_id":"cj5emr7fr001d6j83e4rsjf39"},{"name":"hippie","_id":"cj5emr7fs001h6j83d61qusnk"},{"name":"h5","_id":"cj5emr7ft001k6j830i512i9l"},{"name":"RN-android","_id":"cj5emr7fy001p6j8398ra59h4"},{"name":"hexo","_id":"cj5emr7g2001u6j83gaa88urc"},{"name":"next主题","_id":"cj5emr7g2001y6j83a2ws6x0i"},{"name":"redux","_id":"cj5emr7g300226j83z4hrd8t1"},{"name":"setState","_id":"cj5emr7g500256j836ml7nofi"},{"name":"vim","_id":"cj5emr7ga002b6j83rsq3avvs"},{"name":"mac","_id":"cj5emr7gf002e6j832jtgbos8"},{"name":"react-nativem","_id":"cj5emr7gr002j6j83dj19oaks"},{"name":"es7","_id":"cj5emr7gu002k6j8333m02hid"},{"name":"javascript","_id":"cj5emr7gw002n6j83epndclvk"},{"name":"blog","_id":"cj5emr7gx002p6j83ddtf0pen"}]}}