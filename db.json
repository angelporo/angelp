{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/angelp_avatar.jpeg","path":"images/angelp_avatar.jpeg","modified":0,"renderable":0},{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"72057f81e19837a8e48bd5899d3dcde9b44d6609","modified":1557719763224},{"_id":"source/categories/index.md","hash":"e60e9161b01694d1c721410c6bfaf9b792982b8f","modified":1557719763316},{"_id":"source/_posts/#react使用感受.md#","hash":"7c4ad0279f4a545dc24e53b6ace752b491b56df5","modified":1557719763224},{"_id":"source/_posts/5分钟入门golang.md","hash":"acd3ee9282e3db82ae96f9ec16ff351dcf6328b5","modified":1557719763224},{"_id":"source/_posts/Golang中defer的关键字.md","hash":"fc03ddd1d90defe74be440a8295bd2cfdad316d8","modified":1557719763225},{"_id":"source/_posts/Immutable-js意义以及使用场所.md","hash":"bde35cfdea4cb5348dc25c649f539ace3b184ca6","modified":1557719763228},{"_id":"source/_posts/JSON数据规范.md","hash":"ca27c4e96f0c9bab5d057c802d944c455748a73e","modified":1557719763231},{"_id":"source/_posts/Map详解.md","hash":"420118a72ad78d9e5b42f9dfc76de1d99bbe0b97","modified":1557719763231},{"_id":"source/_posts/Redux-devTools简单的使用.md","hash":"367bf59d6a7d53c24eaed7cf4ebfd5d184501f80","modified":1557719763232},{"_id":"source/_posts/console-log在终端输出漂亮的颜色.md","hash":"2e29b710ab9caaef99c16c4c0f1987e5bb3c8667","modified":1557719763232},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑.md","hash":"d7ca867e482afbebc0aed915154911b700bc08aa","modified":1557719763232},{"_id":"source/_posts/Nginx反向代理配置字段接受.md","hash":"063e9cb18c93725019963a70e32fdf71e1d0ff1d","modified":1557719763231},{"_id":"source/_posts/emacs使用笔记.md","hash":"617aa8a08ef37ebafb41fa10a6a108b75b2a4dd0","modified":1557719763234},{"_id":"source/_posts/es6中yield关键字的理解.md","hash":"5ff1cce34e3839066921d9ab112af80b61b3fbf0","modified":1557719763234},{"_id":"source/_posts/es6总的6个优雅的技巧.md","hash":"c33869e0032ace85ebee60a54ba8649148d3b781","modified":1557719763235},{"_id":"source/_posts/golang中interface作为函数参数.md","hash":"1482b67b996f99a3dec41c50cd789cfd28a957d3","modified":1557719763235},{"_id":"source/_posts/golang中sync的介绍以及使用.md","hash":"8eac70f89a7f9b34f754572e6f6535a6fbdcfdbd","modified":1557719763235},{"_id":"source/_posts/git常用的命令.md","hash":"cfd0618884b847ce86af1642517d18d0ddf9d48b","modified":1557719763235},{"_id":"source/_posts/golang中并发执行和通道传参以及并发中错误处理.md","hash":"dbb00e2fda8542d1a5feee214de45f77e550b135","modified":1557719763236},{"_id":"source/_posts/golang编辑器emacs.md","hash":"a9110770ed96c53b035ff6a7598ab39e96799a1b","modified":1557719763237},{"_id":"source/_posts/golang中操作json的感想.md","hash":"c637459bb2637b3c7759a1a3a936cd64e94d425c","modified":1557719763236},{"_id":"source/_posts/golang中的writer和reader.md","hash":"f97a0937e09b03a9ff650c345a6ee27d9e4f4669","modified":1557719763236},{"_id":"source/_posts/go中的interface理解.md","hash":"6748f6d62b829d3764c9e68e1f3daa90281625c0","modified":1557719763237},{"_id":"source/_posts/hexo添加自己域名.md","hash":"17066744ae3a214c5a39cf6522b39ebebc62ee36","modified":1557719763237},{"_id":"source/_posts/iphone和safari浏览器中关于Date对象的兼容.md","hash":"894b1fa76db2dfbc4972cfe3a1812c111605c46a","modified":1557719763240},{"_id":"source/_posts/httpie技巧.md","hash":"95939aaeece48e934b6cc7d086ca82f3f8eee2e5","modified":1557719763238},{"_id":"source/_posts/javascript中正则的直白理解.md","hash":"73c15de2ce5fe6bd85bdb388b25700dbbb1a3521","modified":1557719763240},{"_id":"source/_posts/javascript异步开源库.md","hash":"90479dd6743dc965a6446b0ca703704e582b2799","modified":1557719763240},{"_id":"source/_posts/js中工厂模式.md","hash":"c634f2b1025e9ce3f87ce8724db6e7e18bfcbc50","modified":1557719763241},{"_id":"source/_posts/js中模拟栈的操作.md","hash":"7e50d4f32d2066b6e5c3f0608b7c094bf46a03f3","modified":1557719763241},{"_id":"source/_posts/js中的mixin.md","hash":"1cfb4bef762ab2532ac609d8d78ba509aa69158d","modified":1557719763241},{"_id":"source/_posts/js中的yield的理解.md","hash":"014b9e637bb2ba9f941bedafd1a652414659577d","modified":1557719763242},{"_id":"source/_posts/js中的观察者模式示例以及使用.md","hash":"b9487095f92270982d3f75ab0378990b6e0ab860","modified":1557719763242},{"_id":"source/_posts/js使用jsonp方式解决跨域问题.md","hash":"73f5350f8c68639a889e2023812b579f5ae33ba5","modified":1557719763242},{"_id":"source/_posts/linux常用命令.md","hash":"5a83c26bb247b0445c82765ea7a4811234937ebe","modified":1557719763247},{"_id":"source/_posts/mac下更新node和npm.md","hash":"d03e83a8875596889ac40720a40f607c3a3ee36f","modified":1557719763255},{"_id":"source/_posts/js移触屏滑动事件.md","hash":"84ef6c677dc9358599f9ce6e4e6a4f22843d9afb","modified":1557719763246},{"_id":"source/_posts/node使用node-smushit命令行来压缩你的图片.md","hash":"5f395447dd79aa4537ed47515d03be5e22b57147","modified":1557719763255},{"_id":"source/_posts/linux系统文件夹介绍.md","hash":"dc9749230ac0b1134a75cb13ec2bba6f3d795f95","modified":1557719763254},{"_id":"source/_posts/react-native中android环境问题.md","hash":"2e30d0115dc187b43a878939bfeda761661b11cd","modified":1557719763256},{"_id":"source/_posts/react-native中手指滑动事件介绍.md","hash":"aab2a5842099ed8baef0b955b7f2aa14073d5706","modified":1557719763256},{"_id":"source/_posts/react-native地区选择器.md","hash":"a85607725bf4438891206060a194ecbaf0f5030a","modified":1557719763256},{"_id":"source/_posts/react-native导航的那些事.md","hash":"03ae7cadb39eed8ae96ead6487da9a7ac85d5386","modified":1557719763256},{"_id":"source/_posts/react-redux小型项目感受.md","hash":"0d3accd87092459394f657dc06d911a04e6a52f1","modified":1557719763257},{"_id":"source/_posts/react-native开发中常见的坑.md","hash":"b96fe93e2b793f7992c79890d035af9a1ad932ec","modified":1557719763256},{"_id":"source/_posts/react16-3中带来的巨大改变.md","hash":"f2da5d005ce7270443829c3db8e6a68929abc24b","modified":1557719763257},{"_id":"source/_posts/react-native构建踩坑.md","hash":"26f3965d2f04749c25ae04ca6cfbc666cfaf3d88","modified":1557719763257},{"_id":"source/_posts/react中的高阶组件.md","hash":"d7fd327ba4301f5b84acf4f98e00fd902bfcece1","modified":1557719763258},{"_id":"source/_posts/react中setState的使用.md","hash":"556ab48bcc5fb51aa157a920c1be32012df1d922","modified":1557719763257},{"_id":"source/_posts/react使用感受.md","hash":"c8c90ab04989f38ea2ef3ea4a2b721dd65ad3961","modified":1557719763261},{"_id":"source/_posts/react中高阶组件的使用以及技巧.md","hash":"8f6333314a98a5202266fae7fb6b2513cd35873c","modified":1557719763258},{"_id":"source/_posts/react使用服务端渲染来优化SEO.md","hash":"a7fcf8e6387207456de7939fe80c77e33e82dad5","modified":1557719763262},{"_id":"source/_posts/react客户端渲染和服务器渲染.md","hash":"80398a9140dac1d381b6e4ba123da42b9667bc14","modified":1557719763262},{"_id":"source/_posts/vim转移emacs的艰辛路程.md","hash":"8dd116fcbcba5658f4e5568a382fec35247ccfd9","modified":1557719763266},{"_id":"source/_posts/react系列使用redux.md","hash":"da5ff70f83e9cb3920d4335d61a50d11a5db07e8","modified":1557719763263},{"_id":"source/_posts/二分查找.md","hash":"8d267ca0ee8d49cf0a4fd05fbaca611ec1eb81a2","modified":1557719763287},{"_id":"source/_posts/优雅的设计redux中的store的state树.md","hash":"6839d1f8507703a90f24d4bef294abce7a350347","modified":1557719763289},{"_id":"source/_posts/webpack打包-常用配置.md","hash":"9d5e1883dd85cff6847b97cb6be8471ad0f26bd3","modified":1557719763279},{"_id":"source/_posts/web前端mac下常用软件.md","hash":"aeeef8d0a5c30674e86ce51d92bf7ae7886cc983","modified":1557719763279},{"_id":"source/_posts/体验es7中的Async-Await来处理异步.md","hash":"502391d5d9f4533e54459e68f73f0e79c5ae802f","modified":1557719763289},{"_id":"source/_posts/使用Uglifyjs来压缩你的js.md","hash":"abf158b2c4b5271993ed60ec1cc0a3352b5e5074","modified":1557719763289},{"_id":"source/_posts/使用canvas来绘制图表.md","hash":"d2f66128ef3d96946d6e0a1e7d9c240041e328f6","modified":1557719763290},{"_id":"source/_posts/使用autojump一键到达你要得路径.md","hash":"de9c7dfccb9d3f5746ce16a1a9a0386fe0cefbdf","modified":1557719763290},{"_id":"source/_posts/使用jsdoc通过注释来自动生成js文档.md","hash":"90a0302ee6e92d1c76c9c317ed09099781306489","modified":1557719763290},{"_id":"source/_posts/使用jest来做javascript的单元测试.md","hash":"b3f00d76ffa91a7b18ae2fd1d9f22d2083217987","modified":1557719763290},{"_id":"source/_posts/使用js来体验装饰者模式.md","hash":"274360077a129496e665dae2ba8142bb12aa8045","modified":1557719763290},{"_id":"source/_posts/全球蛙首次开会议程.md","hash":"e57088f8efa05de76a08620d1c4659def1c031e7","modified":1557719763295},{"_id":"source/_posts/使用pm2来部署node项目.md","hash":"7db0090f774348858a048f033c3e8c99fbd78256","modified":1557719763295},{"_id":"source/_posts/冒泡排序.md","hash":"7359951408cb46f2468782d691749f648a977af2","modified":1557719763295},{"_id":"source/_posts/奇偶数排序.md","hash":"d206ed982a4cb60f24d55d937197f3a94161da35","modified":1557719763301},{"_id":"source/_posts/初次学习c语言的感想.md","hash":"fb6fc1291a98382c00297ccfd478c12ce9ebada3","modified":1557719763301},{"_id":"source/_posts/开发环境介绍以及博客搭建.md","hash":"3b364acc9d40bedc32688c0954cdad6c4b08f8e3","modified":1557719763302},{"_id":"source/_posts/深入理解es7中的decorators.md","hash":"3685fb454b139a7b33a33fc8824a52cdd48341fa","modified":1557719763306},{"_id":"source/_posts/是时候使用httpie来做你的api接口调试了.md","hash":"cd97882adb650350c6052381b1a7bd8bbfc3a4a3","modified":1557719763303},{"_id":"source/_posts/状态模式.md","hash":"1c159b7464be05f42448e5e21ed888db25e3c6f5","modified":1557719763307},{"_id":"source/_posts/手机扫码ios和android通用下载app.md","hash":"0f47a2733ebe443a24300ee7cdfc6a8e3d84d147","modified":1557719763303},{"_id":"source/_posts/简单聊聊web响应式布局.md","hash":"fe709ba73a2fd0718c82d7bb9cb4933999158db0","modified":1557719763307},{"_id":"source/category/index.md","hash":"7f7244fded59157de316a6b1ba4dbb6fc08a2a5c","modified":1557719763316},{"_id":"source/_posts/设计模式-js中的模板方法模式.md","hash":"06edcf7640c08c8a8b4c9c2d14e0c5ba4253ce06","modified":1557719763313},{"_id":"source/_posts/鸡尾酒排序.md","hash":"8969d29ba59fe0610167b3ae843aaece09bedf60","modified":1557719763313},{"_id":"source/css/personal-style.css","hash":"9d9bff808a08ba1a0eca7595497e72ffd8de0913","modified":1557719763316},{"_id":"source/tag/index.md","hash":"34c7b76f347ad9f82a1b085bc6691d24c8fb126b","modified":1557719763317},{"_id":"source/tags/index.md","hash":"6321e9094b7442680ce78872f74fb7719b161415","modified":1557719763317},{"_id":"source/写过的一些项目/index.md","hash":"e68e7c65e0c36fdbcb73b5560406d82f7438fa0e","modified":1557719763318},{"_id":"source/日记/index.md","hash":"56b4058c217178ff8f3f8d962c5df9cab6d2554e","modified":1557719763318},{"_id":"source/search/index.md","hash":"50c12c2a6300c2d6355834fda046593a02bd9be0","modified":1557719763317},{"_id":"source/images/angelp_avatar.jpeg","hash":"9ec573303de3142e85edc864c52508fbd448b59d","modified":1557719763317},{"_id":"source/_posts/Immutable-js意义以及使用场所/immutable2.jpg","hash":"86988e0621758220c14f48afffb5448138c8b150","modified":1557719763231},{"_id":"source/_posts/hexo添加自己域名/admin.png","hash":"57afd2230dc5a35fff079c028163feeb02b944ce","modified":1557719763237},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/2.png","hash":"aac89b20d02e9356372a698aae810a90db843653","modified":1557719763243},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/1.png","hash":"5fc209ddbfa0fd2d2caf69b9c058302804020402","modified":1557719763242},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/3.png","hash":"2856e77c0786b820429bdda03e394f9801aa5157","modified":1557719763243},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/4.png","hash":"2856e77c0786b820429bdda03e394f9801aa5157","modified":1557719763244},{"_id":"source/_posts/js移触屏滑动事件/touchstart_demo.png","hash":"33318f5460706cf7bd874b297e82725283256b99","modified":1557719763246},{"_id":"source/_posts/linux常用命令/linux_role.png","hash":"f5181683119ac55889437c12b10706dcd7618826","modified":1557719763254},{"_id":"source/_posts/react中高阶组件的使用以及技巧/hoc1.png","hash":"e470e3746ce456802f3c6f28c7fa8f25363772b2","modified":1557719763258},{"_id":"source/_posts/react中高阶组件的使用以及技巧/hoc2.png","hash":"bc8758438fb44727830db02d6e0e8f4df67fadec","modified":1557719763259},{"_id":"source/_posts/简单聊聊web响应式布局/2222.jpg","hash":"0835594c34e57c7681bdff92fbafa5816f92cb3b","modified":1557719763308},{"_id":"source/_posts/简单聊聊web响应式布局/333.jpg","hash":"5465b9702031c441f8be33294d94dfe723f9276b","modified":1557719763308},{"_id":"source/_posts/简单聊聊web响应式布局/111.png","hash":"438ce5dfb753976f1c5ae4f4c8602102c00c1101","modified":1557719763308},{"_id":"source/_posts/简单聊聊web响应式布局/444.jpg","hash":"e6ec02430b198bb6548a24eabddd5ffbb958932a","modified":1557719763309},{"_id":"source/_posts/javascript异步开源库/promise.png","hash":"433aae15dbf4eed079d4a6280cdffa7d101d4b88","modified":1557719763241},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/6.png","hash":"6c92751cc98656551949259f4ad0a54340dd087a","modified":1557719763245},{"_id":"source/_posts/react中setState的使用/this.setState.png","hash":"27974f93740ca4eb5c9d1554b2d2b9b6984c45a4","modified":1557719763258},{"_id":"source/_posts/鸡尾酒排序/鸡尾酒.png","hash":"0f45ddf0b0dfdca5e1ceaaee0f230710b474a3c9","modified":1557719763315},{"_id":"source/_posts/react中高阶组件的使用以及技巧/react-hoc.png","hash":"c2ea2a53cec4dbff6436d489d9c156009f52f82c","modified":1557719763261},{"_id":"source/_posts/react使用感受/react.png","hash":"f19ac1e7241b9866970c8b0c387a5f3369f58ffc","modified":1557719763262},{"_id":"source/_posts/web前端mac下常用软件/dash-seach.png","hash":"74059b55bdfc9185c3846b4d5e32a67ac7824c0d","modified":1557719763280},{"_id":"source/_posts/二分查找/shaker.gif","hash":"c7a80a3470f2703d9abb84c1cfe1b52e3b4c4c67","modified":1557719763289},{"_id":"source/_posts/使用js来体验装饰者模式/理解装饰者模式.jpg","hash":"a1c24f2a2c5fbeae78f86d024615016d6c4fa29c","modified":1557719763292},{"_id":"source/_posts/冒泡排序/maopao.gif","hash":"4f60337caedcc96ffeb08692e4f8d00f5cb3fd58","modified":1557719763296},{"_id":"source/_posts/开发环境介绍以及博客搭建/hexo-info.png","hash":"0298084aad94297e7f5a1352d21cd4730fe9298e","modified":1557719763303},{"_id":"source/_posts/鸡尾酒排序/jiweijiu1.gif","hash":"c7a80a3470f2703d9abb84c1cfe1b52e3b4c4c67","modified":1557719763314},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/5.png","hash":"e6575e734ac41ed03920a1fd132bd06331ea9c75","modified":1557719763245},{"_id":"source/_posts/react系列使用redux/redux-thing-image2.png","hash":"d268066fd336fbac5c0b8a8915a3a853d9b8d839","modified":1557719763265},{"_id":"source/_posts/使用js来体验装饰者模式/钢铁侠.jpg","hash":"0cd5c5a6e8af9ee2c651c6374ee974f11b8af184","modified":1557719763294},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","hash":"442d137ca0e56d61c9dc4b13ec679eca77d18a52","modified":1557719763233},{"_id":"source/_posts/react系列使用redux/redux-thing-image1.png","hash":"74ec09b58cc5132aa0f23d0d5ca6d219ef5f99f9","modified":1557719763264},{"_id":"source/_posts/httpie技巧/httpie.png","hash":"da803fa490ab3d2c861d5cdda8b57dc4e4e5fd08","modified":1557719763239},{"_id":"source/_posts/Immutable-js意义以及使用场所/immuable.gif","hash":"93c37a476770bf80f4debd367237f8ef0280643c","modified":1557719763230},{"_id":"source/_posts/web前端mac下常用软件/emacs-example.png","hash":"59f909fb8042b3da0ec9b2667d25e50b9b0db1a4","modified":1557719763282},{"_id":"source/_posts/简单聊聊web响应式布局/hei.gif","hash":"0bb548ed207d63cbd9d23b7b8193a3a15af813e7","modified":1557719763312},{"_id":"source/_posts/linux常用命令/baseBg.png","hash":"76bc74bd34b0e81f27ae82f1c77adec0f7be4cac","modified":1557719763253},{"_id":"source/_posts/是时候使用httpie来做你的api接口调试了/httpie.png","hash":"71c229a707657f52734f408f10fb51b4482386ae","modified":1557719763306},{"_id":"source/_posts/web前端mac下常用软件/mac-down.png","hash":"957654bb33880a91d8e817c8284b1ebb233dec41","modified":1557719763287},{"_id":"source/_posts/linux常用命令/base01.png","hash":"01711595acc555d181d561ade16d915d2cb28154","modified":1557719763250},{"_id":"source/_posts/冒泡排序/maopao2.gif","hash":"37035b9c72ec59f6c79a9f66f2438785cda2cbff","modified":1557719763301},{"_id":"source/_posts/vim转移emacs的艰辛路程/vim_key_help.png","hash":"847b6d5c2e01351a7118a01aed86eae232e74ed3","modified":1557719763278},{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1557723631107},{"_id":"themes/fexo/.gitignore","hash":"cb475326f4d34c639c3dc1abddc03a2539dafbc9","modified":1557723631108},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1557723631108},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1557723631108},{"_id":"themes/fexo/_config.yml","hash":"c465bc86a2c6289181b69f4a6105951ba8d0d9bd","modified":1557723631108},{"_id":"themes/fexo/gulpfile.js","hash":"dc8e67be9205210ca5d5776cc54ab8d76ead96a0","modified":1557723631108},{"_id":"themes/fexo/package.json","hash":"7e0642c0349ee1368304918d68c0a6a4f52aa435","modified":1557723631119},{"_id":"themes/fexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1557723631099},{"_id":"themes/fexo/.git/config","hash":"78a9f656fdfea85aaa63de99ef0857e7149d11d2","modified":1557723631101},{"_id":"themes/fexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1557723626666},{"_id":"themes/fexo/.git/index","hash":"922c9d8a00d551ff2b45bdd47bb69bea21f45cd8","modified":1557723631149},{"_id":"themes/fexo/.git/packed-refs","hash":"8899ec568f172c81301a71cb07b5b8ecff79fe46","modified":1557723631097},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1557723631109},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1557723631109},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1557723631109},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1557723631109},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1557723631109},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1557723631118},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1557723631118},{"_id":"themes/fexo/layout/category.ejs","hash":"e8c8209f74ac0c96c29dbdff38d0f43664417342","modified":1557723631118},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1557723631118},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1557723631118},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1557723631118},{"_id":"themes/fexo/layout/post.ejs","hash":"8cf15be489f8f3c11ac0215c16cbce36c854555f","modified":1557723631119},{"_id":"themes/fexo/layout/project.ejs","hash":"ea63f5ffda0d260b5dc2c2e852caddd082e37efa","modified":1557723631119},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1557723631119},{"_id":"themes/fexo/layout/tag.ejs","hash":"ea8f39f11e6f8750edbf4130abf26168a403b1b4","modified":1557723631119},{"_id":"themes/fexo/yarn.lock","hash":"4c334209995c83f4c60032fc3ecb2a395ba38be3","modified":1557723631148},{"_id":"themes/fexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1557723626668},{"_id":"themes/fexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1557723626666},{"_id":"themes/fexo/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1557723626668},{"_id":"themes/fexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1557723626670},{"_id":"themes/fexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1557723626671},{"_id":"themes/fexo/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1557723626667},{"_id":"themes/fexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1557723626672},{"_id":"themes/fexo/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1557723626667},{"_id":"themes/fexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1557723626669},{"_id":"themes/fexo/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1557723626670},{"_id":"themes/fexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1557723626672},{"_id":"themes/fexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1557723626665},{"_id":"themes/fexo/.git/logs/HEAD","hash":"e4e0bbe511f237504901a193f91e5d15e59887d0","modified":1557723631100},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"78c95b932b2f6d80e1765907b70df918fd00d694","modified":1557723631109},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1557723631110},{"_id":"themes/fexo/layout/_partial/baidu-push.ejs","hash":"6950255d74efac8811d5b05d0d7a263c3c96486d","modified":1557723631110},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1557723631117},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"c711336c4f4f970b276a244f121fed6eb02ee804","modified":1557723631117},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"225b8a001c7aace46f2b39676e968e7cba9a4277","modified":1557723631117},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1557723631117},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"b3a5bbed9dbdba4934e9805a6d98fb7ff3ed040c","modified":1557723631118},{"_id":"themes/fexo/source/css/styles.css","hash":"1c1062a8115827ce4b8ecd4e166abacf93e1e558","modified":1557723631120},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1557723631133},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1557723631135},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1557723631135},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1557723631136},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1557723631138},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1557723631138},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1557723631139},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1557723631139},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1557723631140},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1557723631140},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1557723631140},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"06b315b1cde634d2313044a83c40b1ac10961134","modified":1557723631140},{"_id":"themes/fexo/source/js/app.js","hash":"dca6a478f1ebfa27ea4bc36c0ab0692908705403","modified":1557723631141},{"_id":"themes/fexo/source/js/bundle.js","hash":"8b64dd44eec4521f554323fc0a1dbb07f61dc678","modified":1557723631141},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1557723631142},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"cd7ba3d2982bc418d9eced6ef28bdcff83d4cb35","modified":1557723631142},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1557723631142},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1557723631142},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1557723631142},{"_id":"themes/fexo/source/sass/_base.scss","hash":"83f01dbe82e47ce781c6e7eb8a793d95d97e168b","modified":1557723631142},{"_id":"themes/fexo/source/sass/_common.scss","hash":"f1ad269b3c2902411dcae94a04cd27e710783de3","modified":1557723631142},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1557723631143},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1557723631143},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1557723631143},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1557723631143},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1557723631143},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"7b05581ef035a88bd1191914ff992103c7812bdf","modified":1557723631143},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1557723631148},{"_id":"themes/fexo/source/css/styles.css.map","hash":"9672a4e5f8c6e9742095c1ca33f1c68b3145a7e3","modified":1557723631121},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1557723631138},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557723631148},{"_id":"themes/fexo/.git/refs/heads/master","hash":"7793d7bc482725f206010c0ffcb8cc30faf51eaa","modified":1557723631099},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1557723631110},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1557723631110},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1557723631110},{"_id":"themes/fexo/layout/_partial/component/changyan.ejs","hash":"e87c5fa6db61713b63264e467e11d7fde229e1c0","modified":1557723631110},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"db8c87adcf9426984b959a014cae149f4c872cb1","modified":1557723631110},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1557723631111},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1557723631111},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"b81e911bca334074fb4b504673a14f2f184b8536","modified":1557723631111},{"_id":"themes/fexo/layout/_partial/component/gentie.ejs","hash":"9b78a138fb93a71b481ab25c8dea2e082e5e9d6c","modified":1557723631111},{"_id":"themes/fexo/layout/_partial/component/gitalk.ejs","hash":"8bd0101b6673550fe1bf161cc005fb591ee8496c","modified":1557723631111},{"_id":"themes/fexo/layout/_partial/component/gitment.ejs","hash":"dda26e46ff84c896a96207ad33bb85a8f233f435","modified":1557723631111},{"_id":"themes/fexo/layout/_partial/component/hypercomments.ejs","hash":"321339582edb1dd9c4e4ca13108fe494d08494fc","modified":1557723631111},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1557723631112},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1557723631112},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1557723631112},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1557723631113},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1557723631113},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1557723631113},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1557723631114},{"_id":"themes/fexo/layout/_partial/component/prev-net.ejs","hash":"d1cb2e61814bcbd25ccb1628f99b18316e029892","modified":1557723631114},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1557723631115},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1557723631115},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1557723631116},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1557723631116},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1557723631116},{"_id":"themes/fexo/layout/_partial/component/uyan.ejs","hash":"afe757c6f45d24640b22d90db6f2799000c6f994","modified":1557723631116},{"_id":"themes/fexo/layout/_partial/component/valine.ejs","hash":"28d537af94571dd962ca37358c86d529eb4efa5e","modified":1557723631117},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1557723631134},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1557723631144},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1557723631144},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1557723631144},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"d4d2d05e470978a38abf883be34ea2095132057a","modified":1557723631144},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1557723631144},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"a741a0bfb47d0acdef12cdeb968c104bb002f86d","modified":1557723631144},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1557723631144},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1557723631145},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1557723631145},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1557723631145},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1557723631145},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1557723631145},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1557723631145},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1557723631145},{"_id":"themes/fexo/source/sass/component/_prev-net.scss","hash":"634ef68823dda03bf9d42c740590581663c17351","modified":1557723631146},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1557723631146},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1557723631146},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1557723631146},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1557723631146},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1557723631146},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1557723631146},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1557723631147},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1557723631147},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1557723631147},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1557723631147},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1557723631147},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1557723631147},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"cab0947fc9d7926a07badaa567803cc7a0968f10","modified":1557723631147},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1557723631148},{"_id":"themes/fexo/.git/objects/pack/pack-ad64b3b356e57a53d5b9e3d2caac46ec2b171980.idx","hash":"0d9e0b9bf9fc0faf29b29baf3cad7426e965c7be","modified":1557723631081},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1557723631137},{"_id":"themes/fexo/.git/logs/refs/heads/master","hash":"e4e0bbe511f237504901a193f91e5d15e59887d0","modified":1557723631100},{"_id":"themes/fexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1557723631098},{"_id":"themes/fexo/.git/logs/refs/remotes/origin/HEAD","hash":"e4e0bbe511f237504901a193f91e5d15e59887d0","modified":1557723631098},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1557723631123},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1557723631130},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1557723631133},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1557723631127},{"_id":"themes/fexo/.git/objects/pack/pack-ad64b3b356e57a53d5b9e3d2caac46ec2b171980.pack","hash":"982962702a4bdd3bbc53b5a9dac97bc276f39bff","modified":1557723631078}],"Category":[{"name":"算法","_id":"cjvluebbs0004a0dm6hpd2y2l"},{"name":"emacs使用记","_id":"cjvluebcr000qa0dmksk00swp"},{"name":"Nginx配置详解","_id":"cjvluebcw000va0dmt624fprg"},{"name":"语法理解","_id":"cjvluebcy0013a0dm1pyoierf"},{"name":"git","_id":"cjvluebd1001aa0dmje23swxr"},{"name":"golnag并发执行","_id":"cjvluebd4001ha0dmbjz08fiq"},{"name":"hexo","_id":"cjvluebd7001ra0dmaugipvrk"},{"name":"httpie","_id":"cjvluebdb001za0dmwclggcov"},{"name":"正则","_id":"cjvluebde0027a0dm5ho6klwe"},{"name":"javascript","_id":"cjvluebdg002da0dmz75jz3i9"},{"name":"设计模式","_id":"cjvluebdj002ia0dm5fr1hhew"},{"name":"字符串操作","_id":"cjvluebdm002oa0dm901u8wet"},{"name":"es6中的yield","_id":"cjvluebdq002ua0dmgc1zk131"},{"name":"linux命令","_id":"cjvluebdt002za0dmdiuec2za"},{"name":"web前端","_id":"cjvluebdv0037a0dm6dgcznpb"},{"name":"react-native踩坑记","_id":"cjvluebe2003ma0dm9ckdp0ua"},{"name":"react","_id":"cjvluebe5003ta0dm8xkuz1h7"},{"name":"react-native","_id":"cjvluebec0041a0dmentiproh"},{"name":"blog","_id":"cjvluebee0047a0dmfajpc42k"},{"name":"emacs","_id":"cjvluebel004fa0dm6v6x12qt"},{"name":"redux","_id":"cjvlueben004ma0dm1dkrfa1b"},{"name":"mac","_id":"cjvlueber004va0dms5gp7pv0"},{"name":"压缩","_id":"cjvluebet0053a0dmxcclb4cf"},{"name":"mac工具","_id":"cjvluebex005ba0dml3ihq3k5"},{"name":"api生成器","_id":"cjvluebf0005ia0dm2yqp6lhh"},{"name":"jest测试你的react","_id":"cjvluebf2005oa0dmssvrsg1q"},{"name":"全球蛙","_id":"cjvluebf4005wa0dm3ezv216u"},{"name":"pm2","_id":"cjvluebf70064a0dm4sd9bbed"},{"name":"排序","_id":"cjvluebfb006ba0dmqzzyazv1"},{"name":"decorator","_id":"cjvluebfe006ha0dmeua0rkhh"},{"name":"布局","_id":"cjvluebff006la0dml1361z23"}],"Data":[],"Page":[{"title":"categories","date":"2017-06-10T03:24:18.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-10 11:24:18\ntype: \"categories\"\n---\n","updated":"2019-05-13T03:56:03.316Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjvluebbn0001a0dm7c8xd08v","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"category","layout":"category","comments":0,"_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ncomments: false\n---\n","date":"2019-05-13T03:56:03.316Z","updated":"2019-05-13T03:56:03.316Z","path":"category/index.html","_id":"cjvluebbp0003a0dmtsjojqz1","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n","source":"css/personal-style.css","raw":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n","date":"2019-05-13T03:56:03.316Z","updated":"2019-05-13T03:56:03.316Z","path":"css/personal-style.css","layout":"false","title":"","comments":1,"_id":"cjvluebbw0007a0dmdqflsxl5","content":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n","site":{"data":{}},"excerpt":"","more":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n"},{"title":"tag","layout":"tag","comments":0,"_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\n---\n","date":"2019-05-13T03:56:03.317Z","updated":"2019-05-13T03:56:03.317Z","path":"tag/index.html","_id":"cjvluebbz0009a0dmbybm8jg9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-05T03:42:40.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-05 11:42:40\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-05-13T03:56:03.317Z","path":"tags/index.html","layout":"page","_id":"cjvluebc5000da0dmqqaxlpzt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"写过的一些项目","date":"2017-06-04T07:03:02.000Z","_content":"## 记载一些项目上的坑\n","source":"写过的一些项目/index.md","raw":"---\ntitle: 写过的一些项目\ndate: 2017-06-04 15:03:02\n---\n## 记载一些项目上的坑\n","updated":"2019-05-13T03:56:03.318Z","path":"写过的一些项目/index.html","comments":1,"layout":"page","_id":"cjvluebcd000ga0dm7c04kqxa","content":"<h2 id=\"记载一些项目上的坑\"><a href=\"#记载一些项目上的坑\" class=\"headerlink\" title=\"记载一些项目上的坑\"></a>记载一些项目上的坑</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记载一些项目上的坑\"><a href=\"#记载一些项目上的坑\" class=\"headerlink\" title=\"记载一些项目上的坑\"></a>记载一些项目上的坑</h2>"},{"title":"日记","date":"2017-06-10T03:25:12.000Z","_content":"","source":"日记/index.md","raw":"---\ntitle: 日记\ndate: 2017-06-10 11:25:12\n---\n","updated":"2019-05-13T03:56:03.318Z","path":"日记/index.html","comments":1,"layout":"page","_id":"cjvluebcj000ka0dmp2z1fs7u","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","layout":"search","comments":0,"_content":"","source":"search/index.md","raw":"---\ntitle: search\nlayout: search\ncomments: false\n---\n","date":"2019-05-13T03:56:03.317Z","updated":"2019-05-13T03:56:03.317Z","path":"search/index.html","_id":"cjvluebcm000ma0dm6knp38yv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"5分钟入门golang","date":"2017-10-20T02:21:49.000Z","_content":"\n发明Go语言是出于更好地完成工作的需要。Go不是计算机科学的最新发展潮流，但它却提供了解决现实问题的最新最快的方法。\ngolang拥有命令式语言的静态类型，编译很快，执行也很快，同时加入了对于目前多核CPU的并发计算支持，也有相应的特性来实现大规模编程。\nGo语言有非常棒的标准库，还有一个充满热情的社区。\n\n### 直接看代码学习\n\n```golang\n// 单行注释\n/* 多行\n    注释 */\n\n// 导入包的子句在每个源文件的开头。\n// Main比较特殊，它用来声明可执行文件，而不是一个库。\npackage main\n\n// Import语句声明了当前文件引用的包。\nimport (\n    \"fmt\"       // Go语言标准库中的包\n    \"io/ioutil\" // 包含一些输入输出函数\n    m \"math\"    // 数学标准库，在此文件中别名为m\n    \"net/http\"  // 一个web服务器包\n    \"os\"        // 系统底层函数，如文件读写\n    \"strconv\"   // 字符串转换\n)\n\n// 函数声明：Main是程序执行的入口。\n// 不管你喜欢还是不喜欢，反正Go就用了花括号来包住函数体。\nfunc main() {\n    // 往标准输出打印一行。\n    // 用包名fmt限制打印函数。\n    fmt.Println(\"天坑欢迎你!\")\n\n    // 调用当前包的另一个函数。\n    beyondHello()\n}\n\n// 函数可以在括号里加参数。\n// 如果没有参数的话，也需要一个空括号。\nfunc beyondHello() {\n    var x int   // 变量声明，变量必须在使用之前声明。\n    x = 3       // 变量赋值。\n    // 可以用:=来偷懒，它自动把变量类型、声明和赋值都搞定了。\n    y := 4\n    sum, prod := learnMultiple(x, y)        // 返回多个变量的函数\n    fmt.Println(\"sum:\", sum, \"prod:\", prod) // 简单输出\n    learnTypes()                            // 少于y分钟，学的更多！\n}\n\n/* <- 快看快看我是跨行注释_(:з」∠)_\nGo语言的函数可以有多个参数和 *多个* 返回值。\n在这个函数中， `x`、`y` 是参数，\n`sum`、`prod` 是返回值的标识符（可以理解为名字）且类型为int\n*/\nfunc learnMultiple(x, y int) (sum, prod int) {\n    return x + y, x * y // 返回两个值\n}\n\n// 内置变量类型和关键词\nfunc learnTypes() {\n    // 短声明给你所想。\n    str := \"少说话多读书!\" // String类型\n\n    s2 := `这是一个\n可以换行的字符串` // 同样是String类型\n\n    // 非ascii字符。Go使用UTF-8编码。\n    g := 'Σ' // rune类型，int32的别名，使用UTF-8编码\n\n    f := 3.14195 // float64类型，IEEE-754 64位浮点数\n    c := 3 + 4i  // complex128类型，内部使用两个float64表示\n\n    // Var变量可以直接初始化。\n    var u uint = 7  // unsigned 无符号变量，但是实现依赖int型变量的长度\n    var pi float32 = 22. / 7\n\n    // 字符转换\n    n := byte('\\n') // byte是uint8的别名\n\n    // 数组（Array）类型的大小在编译时即确定\n    var a4 [4] int              // 有4个int变量的数组，初始为0\n    a3 := [...]int{3, 1, 5}     // 有3个int变量的数组，同时进行了初始化\n\n    // Array和slice各有所长，但是slice可以动态的增删，所以更多时候还是使用slice。\n    s3 := []int{4, 5, 9}    // 回去看看 a3 ，是不是这里没有省略号？\n    s4 := make([]int, 4)    // 分配4个int大小的内存并初始化为0\n    var d2 [][]float64      // 这里只是声明，并未分配内存空间\n    bs := []byte(\"a slice\") // 进行类型转换\n\n    // 切片（Slice）的大小是动态的，它的长度可以按需增长\n    // 用内置函数 append() 向切片末尾添加元素\n    // 要增添到的目标是 append 函数第一个参数，\n    // 多数时候数组在原内存处顺次增长，如\n    s := []int{1, 2, 3}     // 这是个长度3的slice\n    s = append(s, 4, 5, 6)  // 再加仨元素，长度变为6了\n    fmt.Println(s) // 更新后的数组是 [1 2 3 4 5 6]\n\n    // 除了向append()提供一组原子元素（写死在代码里的）以外，我们\n    // 还可以用如下方法传递一个slice常量或变量，并在后面加上省略号，\n    // 用以表示我们将引用一个slice、解包其中的元素并将其添加到s数组末尾。\n    s = append(s, []int{7, 8, 9}...) // 第二个参数是一个slice常量\n    fmt.Println(s)  // 更新后的数组是 [1 2 3 4 5 6 7 8 9]\n\n    p, q := learnMemory()       // 声明p,q为int型变量的指针\n    fmt.Println(*p, *q)         // * 取值\n\n    // Map是动态可增长关联数组，和其他语言中的hash或者字典相似。\n    m := map[string]int{\"three\": 3, \"four\": 4}\n    m[\"one\"] = 1\n\n    // 在Go语言中未使用的变量在编译的时候会报错，而不是warning。\n    // 下划线 _ 可以使你“使用”一个变量，但是丢弃它的值。\n    _, _, _, _, _, _, _, _, _, _ = str, s2, g, f, u, pi, n, a3, s4, bs\n    // 通常的用法是，在调用拥有多个返回值的函数时，\n    // 用下划线抛弃其中的一个参数。下面的例子就是一个脏套路，\n    // 调用os.Create并用下划线变量扔掉它的错误代码。\n    // 因为我们觉得这个文件一定会成功创建。\n    file, _ := os.Create(\"output.txt\")\n    fmt.Fprint(file, \"这句代码还示范了如何写入文件呢\")\n    file.Close()\n\n    // 输出变量\n    fmt.Println(s, c, a4, s3, d2, m)\n\n    learnFlowControl() // 回到流程控制\n}\n\n// 和其他编程语言不同的是，go支持有名称的变量返回值。\n// 声明返回值时带上一个名字允许我们在函数内的不同位置\n// 只用写return一个词就能将函数内指定名称的变量返回\nfunc learnNamedReturns(x, y int) (z int) {\n    z = x * y\n    return // z is implicit here, because we named it earlier.\n\n// Go全面支持垃圾回收。Go有指针，但是不支持指针运算。\n// 你会因为空指针而犯错，但是不会因为增加指针而犯错。\nfunc learnMemory() (p, q *int) {\n    // 返回int型变量指针p和q\n    p = new(int)    // 内置函数new分配内存\n    // 自动将分配的int赋值0，p不再是空的了。\n    s := make([]int, 20)    // 给20个int变量分配一块内存\n    s[3] = 7                // 赋值\n    r := -2                 // 声明另一个局部变量\n    return &s[3], &r        // & 取地址\n}\n\nfunc expensiveComputation() int {\n    return 1e6\n}\n\nfunc learnFlowControl() {\n    // If需要花括号，括号就免了\n    if true {\n\tfmt.Println(\"这句话肯定被执行\")\n    }\n    // 用go fmt 命令可以帮你格式化代码，所以不用怕被人吐槽代码风格了，\n    // 也不用容忍别人的代码风格。\n    if false {\n\t// pout\n    } else {\n\t// gloat\n    }\n    // 如果太多嵌套的if语句，推荐使用switch\n    x := 1\n    switch x {\n    case 0:\n    case 1:\n\t// 隐式调用break语句，匹配上一个即停止\n    case 2:\n\t// 不会运行\n    }\n    // 和if一样，for也不用括号\n    for x := 0; x < 3; x++ { // ++ 自增\n\tfmt.Println(\"遍历\", x)\n    }\n    // x在这里还是1。为什么？\n\n    // for 是go里唯一的循环关键字，不过它有很多变种\n    for { // 死循环\n\tbreak    // 骗你的\n\tcontinue // 不会运行的\n    }\n\n    // 用range可以枚举 array、slice、string、map、channel等不同类型\n    // 对于channel，range返回一个值，\n    // array、slice、string、map等其他类型返回一对儿\n    for key, value := range map[string]int{\"one\": 1, \"two\": 2, \"three\": 3} {\n\t// 打印map中的每一个键值对\n\tfmt.Printf(\"索引：%s, 值为：%d\\n\", key, value)\n    }\n    // 如果你只想要值，那就用前面讲的下划线扔掉没用的\n    for _, name := range []string{\"Bob\", \"Bill\", \"Joe\"} {\n\tfmt.Printf(\"你是。。 %s\\n\", name)\n    }\n\n    // 和for一样，if中的:=先给y赋值，然后再和x作比较。\n    if y := expensiveComputation(); y > x {\n\tx = y\n    }\n    // 闭包函数\n    xBig := func() bool {\n\treturn x > 100 // x是上面声明的变量引用\n    }\n    fmt.Println(\"xBig:\", xBig()) // true （上面把y赋给x了）\n    x /= 1e5                     // x变成10\n    fmt.Println(\"xBig:\", xBig()) // 现在是false\n\n    // 除此之外，函数体可以在其他函数中定义并调用，\n    // 满足下列条件时，也可以作为参数传递给其他函数：\n    //   a) 定义的函数被立即调用\n    //   b) 函数返回值符合调用者对类型的要求\n    fmt.Println(\"两数相加乘二: \",\n\tfunc(a, b int) int {\n\t    return (a + b) * 2\n\t}(10, 2)) // Called with args 10 and 2\n    // => Add + double two numbers: 24\n\n    // 当你需要goto的时候，你会爱死它的！\n    goto love\nlove:\n\n    learnFunctionFactory() // 返回函数的函数多棒啊\n    learnDefer()      // 对defer关键字的简单介绍\n    learnInterfaces() // 好东西来了！\n}\n\nfunc learnFunctionFactory() {\n    // 空行分割的两个写法是相同的，不过第二个写法比较实用\n    fmt.Println(sentenceFactory(\"原谅\")(\"当然选择\", \"她！\"))\n\n    d := sentenceFactory(\"原谅\")\n    fmt.Println(d(\"当然选择\", \"她！\"))\n    fmt.Println(d(\"你怎么可以\", \"她？\"))\n}\n\n// Decorator在一些语言中很常见，在go语言中，\n// 接受参数作为其定义的一部分的函数是修饰符的替代品\nfunc sentenceFactory(mystring string) func(before, after string) string {\n    return func(before, after string) string {\n\treturn fmt.Sprintf(\"%s %s %s\", before, mystring, after) // new string\n    }\n}\n\nfunc learnDefer() (ok bool) {\n    // defer表达式在函数返回的前一刻执行\n    defer fmt.Println(\"defer表达式执行顺序为后进先出（LIFO）\")\n    defer fmt.Println(\"\\n这句话比上句话先输出，因为\")\n    // 关于defer的用法，例如用defer关闭一个文件，\n    // 就可以让关闭操作与打开操作的代码更近一些\n    return true\n}\n\n// 定义Stringer为一个接口类型，有一个方法String\ntype Stringer interface {\n    String() string\n}\n\n// 定义pair为一个结构体，有x和y两个int型变量。\ntype pair struct {\n    x, y int\n}\n\n// 定义pair类型的方法，实现Stringer接口。\nfunc (p pair) String() string { // p被叫做“接收器”\n    // Sprintf是fmt包中的另一个公有函数。\n    // 用 . 调用p中的元素。\n    return fmt.Sprintf(\"(%d, %d)\", p.x, p.y)\n}\n\nfunc learnInterfaces() {\n    // 花括号用来定义结构体变量，:=在这里将一个结构体变量赋值给p。\n    p := pair{3, 4}\n    fmt.Println(p.String()) // 调用pair类型p的String方法\n    var i Stringer          // 声明i为Stringer接口类型\n    i = p                   // 有效！因为p实现了Stringer接口（类似java中的塑型）\n    // 调用i的String方法，输出和上面一样\n    fmt.Println(i.String())\n\n    // fmt包中的Println函数向对象要它们的string输出，实现了String方法就可以这样使用了。\n    // （类似java中的序列化）\n    fmt.Println(p) // 输出和上面一样，自动调用String函数。\n    fmt.Println(i) // 输出和上面一样。\n\n    learnVariadicParams(\"great\", \"learning\", \"here!\")\n}\n\n// 有变长参数列表的函数\nfunc learnVariadicParams(myStrings ...interface{}) {\n    // 枚举变长参数列表的每个参数值\n    // 下划线在这里用来抛弃枚举时返回的数组索引值\n    for _, param := range myStrings {\n\tfmt.Println(\"param:\", param)\n    }\n\n    // 将可变参数列表作为其他函数的参数列表\n    fmt.Println(\"params:\", fmt.Sprintln(myStrings...))\n\n    learnErrorHandling()\n}\n\nfunc learnErrorHandling() {\n    // \", ok\"用来判断有没有正常工作\n    m := map[int]string{3: \"three\", 4: \"four\"}\n    if x, ok := m[1]; !ok { // ok 为false，因为m中没有1\n\tfmt.Println(\"别找了真没有\")\n    } else {\n\tfmt.Print(x) // 如果x在map中的话，x就是那个值喽。\n    }\n    // 错误可不只是ok，它还可以给出关于问题的更多细节。\n    if _, err := strconv.Atoi(\"non-int\"); err != nil { // _ discards value\n\t// 输出\"strconv.ParseInt: parsing \"non-int\": invalid syntax\"\n\tfmt.Println(err)\n    }\n    // 待会再说接口吧。同时，\n    learnConcurrency()\n}\n\n// c是channel类型，一个并发安全的通信对象。\nfunc inc(i int, c chan int) {\n    c <- i + 1 // <-把右边的发送到左边的channel。\n}\n\n// 我们将用inc函数来并发地增加一些数字。\nfunc learnConcurrency() {\n    // 用make来声明一个slice，make会分配和初始化slice，map和channel。\n    c := make(chan int)\n    // 用go关键字开始三个并发的goroutine，如果机器支持的话，还可能是并行执行。\n    // 三个都被发送到同一个channel。\n    go inc(0, c) // go is a statement that starts a new goroutine.\n    go inc(10, c)\n    go inc(-805, c)\n    // 从channel中读取结果并打印。\n    // 打印出什么东西是不可预知的。\n    fmt.Println(<-c, <-c, <-c) // channel在右边的时候，<-是读操作。\n\n    cs := make(chan string)       // 操作string的channel\n    cc := make(chan chan string)  // 操作channel的channel\n    go func() { c <- 84 }()       // 开始一个goroutine来发送一个新的数字\n    go func() { cs <- \"wordy\" }() // 发送给cs\n    // Select类似于switch，但是每个case包括一个channel操作。\n    // 它随机选择一个准备好通讯的case。\n    select {\n    case i := <-c: // 从channel接收的值可以赋给其他变量\n\tfmt.Println(\"这是……\", i)\n    case <-cs: // 或者直接丢弃\n\tfmt.Println(\"这是个字符串！\")\n    case <-cc: // 空的，还没作好通讯的准备\n\tfmt.Println(\"别瞎想\")\n    }\n    // 上面c或者cs的值被取到，其中一个goroutine结束，另外一个一直阻塞。\n\n    learnWebProgramming() // Go很适合web编程，我知道你也想学！\n}\n\n// http包中的一个简单的函数就可以开启web服务器。\nfunc learnWebProgramming() {\n    // ListenAndServe第一个参数指定了监听端口，第二个参数是一个接口，特定是http.Handler。\n    go func() {\n\terr := http.ListenAndServe(\":8080\", pair{})\n\tfmt.Println(err) // 不要无视错误。\n    }()\n\n    requestServer()\n}\n\n// 使pair实现http.Handler接口的ServeHTTP方法。\nfunc (p pair) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    // 使用http.ResponseWriter返回数据\n    w.Write([]byte(\"Y分钟golang速成!\"))\n}\n\nfunc requestServer() {\n    resp, err := http.Get(\"http://localhost:8080\")\n    fmt.Println(err)\n    defer resp.Body.Close()\n    body, err := ioutil.ReadAll(resp.Body)\n    fmt.Printf(\"\\n服务器消息： `%s`\", string(body))\n}\n```\n\n> 相信有编程基础的同学很容易就能看懂\n\n### 继续学习\n\n关于Go的一切你都可以在[Go官方网站](http://golang.org/)找到(需要翻墙)。 在那里你可以获得教程参考，在线试用，和更多的资料。 在简单的尝试过后，[在官方文档(同样需要翻墙)](https://golang.org/doc/)那里你会得到你所需要的所有资料、关于编写代码的规范、库和命令行工具的文档与Go的版本历史。\n\n学习Go还要阅读[Go标准库的源代码](https://play.golang.org/p/tnWMjr16Mm)，全部文档化了，可读性非常好，可以学到go，go style和go idioms。在文档中点击函数名，源代码就出来了！\n\n[Go by example同样可以学习go](https://gobyexample.com/)\n[原文](https://learnxinyminutes.com/docs/zh-cn/go-cn/)\n[配置emacs编写golang环境以及gocode补全go](http://angely.me/2017/10/20/golang%E7%BC%96%E8%BE%91%E5%99%A8emacs/)\n","source":"_posts/5分钟入门golang.md","raw":"---\nlayout: post\ntitle: 5分钟入门golang\ndate: 2017-10-20 10:21:49\ntags:\n- golang\ncategories: \"算法\"\n---\n\n发明Go语言是出于更好地完成工作的需要。Go不是计算机科学的最新发展潮流，但它却提供了解决现实问题的最新最快的方法。\ngolang拥有命令式语言的静态类型，编译很快，执行也很快，同时加入了对于目前多核CPU的并发计算支持，也有相应的特性来实现大规模编程。\nGo语言有非常棒的标准库，还有一个充满热情的社区。\n\n### 直接看代码学习\n\n```golang\n// 单行注释\n/* 多行\n    注释 */\n\n// 导入包的子句在每个源文件的开头。\n// Main比较特殊，它用来声明可执行文件，而不是一个库。\npackage main\n\n// Import语句声明了当前文件引用的包。\nimport (\n    \"fmt\"       // Go语言标准库中的包\n    \"io/ioutil\" // 包含一些输入输出函数\n    m \"math\"    // 数学标准库，在此文件中别名为m\n    \"net/http\"  // 一个web服务器包\n    \"os\"        // 系统底层函数，如文件读写\n    \"strconv\"   // 字符串转换\n)\n\n// 函数声明：Main是程序执行的入口。\n// 不管你喜欢还是不喜欢，反正Go就用了花括号来包住函数体。\nfunc main() {\n    // 往标准输出打印一行。\n    // 用包名fmt限制打印函数。\n    fmt.Println(\"天坑欢迎你!\")\n\n    // 调用当前包的另一个函数。\n    beyondHello()\n}\n\n// 函数可以在括号里加参数。\n// 如果没有参数的话，也需要一个空括号。\nfunc beyondHello() {\n    var x int   // 变量声明，变量必须在使用之前声明。\n    x = 3       // 变量赋值。\n    // 可以用:=来偷懒，它自动把变量类型、声明和赋值都搞定了。\n    y := 4\n    sum, prod := learnMultiple(x, y)        // 返回多个变量的函数\n    fmt.Println(\"sum:\", sum, \"prod:\", prod) // 简单输出\n    learnTypes()                            // 少于y分钟，学的更多！\n}\n\n/* <- 快看快看我是跨行注释_(:з」∠)_\nGo语言的函数可以有多个参数和 *多个* 返回值。\n在这个函数中， `x`、`y` 是参数，\n`sum`、`prod` 是返回值的标识符（可以理解为名字）且类型为int\n*/\nfunc learnMultiple(x, y int) (sum, prod int) {\n    return x + y, x * y // 返回两个值\n}\n\n// 内置变量类型和关键词\nfunc learnTypes() {\n    // 短声明给你所想。\n    str := \"少说话多读书!\" // String类型\n\n    s2 := `这是一个\n可以换行的字符串` // 同样是String类型\n\n    // 非ascii字符。Go使用UTF-8编码。\n    g := 'Σ' // rune类型，int32的别名，使用UTF-8编码\n\n    f := 3.14195 // float64类型，IEEE-754 64位浮点数\n    c := 3 + 4i  // complex128类型，内部使用两个float64表示\n\n    // Var变量可以直接初始化。\n    var u uint = 7  // unsigned 无符号变量，但是实现依赖int型变量的长度\n    var pi float32 = 22. / 7\n\n    // 字符转换\n    n := byte('\\n') // byte是uint8的别名\n\n    // 数组（Array）类型的大小在编译时即确定\n    var a4 [4] int              // 有4个int变量的数组，初始为0\n    a3 := [...]int{3, 1, 5}     // 有3个int变量的数组，同时进行了初始化\n\n    // Array和slice各有所长，但是slice可以动态的增删，所以更多时候还是使用slice。\n    s3 := []int{4, 5, 9}    // 回去看看 a3 ，是不是这里没有省略号？\n    s4 := make([]int, 4)    // 分配4个int大小的内存并初始化为0\n    var d2 [][]float64      // 这里只是声明，并未分配内存空间\n    bs := []byte(\"a slice\") // 进行类型转换\n\n    // 切片（Slice）的大小是动态的，它的长度可以按需增长\n    // 用内置函数 append() 向切片末尾添加元素\n    // 要增添到的目标是 append 函数第一个参数，\n    // 多数时候数组在原内存处顺次增长，如\n    s := []int{1, 2, 3}     // 这是个长度3的slice\n    s = append(s, 4, 5, 6)  // 再加仨元素，长度变为6了\n    fmt.Println(s) // 更新后的数组是 [1 2 3 4 5 6]\n\n    // 除了向append()提供一组原子元素（写死在代码里的）以外，我们\n    // 还可以用如下方法传递一个slice常量或变量，并在后面加上省略号，\n    // 用以表示我们将引用一个slice、解包其中的元素并将其添加到s数组末尾。\n    s = append(s, []int{7, 8, 9}...) // 第二个参数是一个slice常量\n    fmt.Println(s)  // 更新后的数组是 [1 2 3 4 5 6 7 8 9]\n\n    p, q := learnMemory()       // 声明p,q为int型变量的指针\n    fmt.Println(*p, *q)         // * 取值\n\n    // Map是动态可增长关联数组，和其他语言中的hash或者字典相似。\n    m := map[string]int{\"three\": 3, \"four\": 4}\n    m[\"one\"] = 1\n\n    // 在Go语言中未使用的变量在编译的时候会报错，而不是warning。\n    // 下划线 _ 可以使你“使用”一个变量，但是丢弃它的值。\n    _, _, _, _, _, _, _, _, _, _ = str, s2, g, f, u, pi, n, a3, s4, bs\n    // 通常的用法是，在调用拥有多个返回值的函数时，\n    // 用下划线抛弃其中的一个参数。下面的例子就是一个脏套路，\n    // 调用os.Create并用下划线变量扔掉它的错误代码。\n    // 因为我们觉得这个文件一定会成功创建。\n    file, _ := os.Create(\"output.txt\")\n    fmt.Fprint(file, \"这句代码还示范了如何写入文件呢\")\n    file.Close()\n\n    // 输出变量\n    fmt.Println(s, c, a4, s3, d2, m)\n\n    learnFlowControl() // 回到流程控制\n}\n\n// 和其他编程语言不同的是，go支持有名称的变量返回值。\n// 声明返回值时带上一个名字允许我们在函数内的不同位置\n// 只用写return一个词就能将函数内指定名称的变量返回\nfunc learnNamedReturns(x, y int) (z int) {\n    z = x * y\n    return // z is implicit here, because we named it earlier.\n\n// Go全面支持垃圾回收。Go有指针，但是不支持指针运算。\n// 你会因为空指针而犯错，但是不会因为增加指针而犯错。\nfunc learnMemory() (p, q *int) {\n    // 返回int型变量指针p和q\n    p = new(int)    // 内置函数new分配内存\n    // 自动将分配的int赋值0，p不再是空的了。\n    s := make([]int, 20)    // 给20个int变量分配一块内存\n    s[3] = 7                // 赋值\n    r := -2                 // 声明另一个局部变量\n    return &s[3], &r        // & 取地址\n}\n\nfunc expensiveComputation() int {\n    return 1e6\n}\n\nfunc learnFlowControl() {\n    // If需要花括号，括号就免了\n    if true {\n\tfmt.Println(\"这句话肯定被执行\")\n    }\n    // 用go fmt 命令可以帮你格式化代码，所以不用怕被人吐槽代码风格了，\n    // 也不用容忍别人的代码风格。\n    if false {\n\t// pout\n    } else {\n\t// gloat\n    }\n    // 如果太多嵌套的if语句，推荐使用switch\n    x := 1\n    switch x {\n    case 0:\n    case 1:\n\t// 隐式调用break语句，匹配上一个即停止\n    case 2:\n\t// 不会运行\n    }\n    // 和if一样，for也不用括号\n    for x := 0; x < 3; x++ { // ++ 自增\n\tfmt.Println(\"遍历\", x)\n    }\n    // x在这里还是1。为什么？\n\n    // for 是go里唯一的循环关键字，不过它有很多变种\n    for { // 死循环\n\tbreak    // 骗你的\n\tcontinue // 不会运行的\n    }\n\n    // 用range可以枚举 array、slice、string、map、channel等不同类型\n    // 对于channel，range返回一个值，\n    // array、slice、string、map等其他类型返回一对儿\n    for key, value := range map[string]int{\"one\": 1, \"two\": 2, \"three\": 3} {\n\t// 打印map中的每一个键值对\n\tfmt.Printf(\"索引：%s, 值为：%d\\n\", key, value)\n    }\n    // 如果你只想要值，那就用前面讲的下划线扔掉没用的\n    for _, name := range []string{\"Bob\", \"Bill\", \"Joe\"} {\n\tfmt.Printf(\"你是。。 %s\\n\", name)\n    }\n\n    // 和for一样，if中的:=先给y赋值，然后再和x作比较。\n    if y := expensiveComputation(); y > x {\n\tx = y\n    }\n    // 闭包函数\n    xBig := func() bool {\n\treturn x > 100 // x是上面声明的变量引用\n    }\n    fmt.Println(\"xBig:\", xBig()) // true （上面把y赋给x了）\n    x /= 1e5                     // x变成10\n    fmt.Println(\"xBig:\", xBig()) // 现在是false\n\n    // 除此之外，函数体可以在其他函数中定义并调用，\n    // 满足下列条件时，也可以作为参数传递给其他函数：\n    //   a) 定义的函数被立即调用\n    //   b) 函数返回值符合调用者对类型的要求\n    fmt.Println(\"两数相加乘二: \",\n\tfunc(a, b int) int {\n\t    return (a + b) * 2\n\t}(10, 2)) // Called with args 10 and 2\n    // => Add + double two numbers: 24\n\n    // 当你需要goto的时候，你会爱死它的！\n    goto love\nlove:\n\n    learnFunctionFactory() // 返回函数的函数多棒啊\n    learnDefer()      // 对defer关键字的简单介绍\n    learnInterfaces() // 好东西来了！\n}\n\nfunc learnFunctionFactory() {\n    // 空行分割的两个写法是相同的，不过第二个写法比较实用\n    fmt.Println(sentenceFactory(\"原谅\")(\"当然选择\", \"她！\"))\n\n    d := sentenceFactory(\"原谅\")\n    fmt.Println(d(\"当然选择\", \"她！\"))\n    fmt.Println(d(\"你怎么可以\", \"她？\"))\n}\n\n// Decorator在一些语言中很常见，在go语言中，\n// 接受参数作为其定义的一部分的函数是修饰符的替代品\nfunc sentenceFactory(mystring string) func(before, after string) string {\n    return func(before, after string) string {\n\treturn fmt.Sprintf(\"%s %s %s\", before, mystring, after) // new string\n    }\n}\n\nfunc learnDefer() (ok bool) {\n    // defer表达式在函数返回的前一刻执行\n    defer fmt.Println(\"defer表达式执行顺序为后进先出（LIFO）\")\n    defer fmt.Println(\"\\n这句话比上句话先输出，因为\")\n    // 关于defer的用法，例如用defer关闭一个文件，\n    // 就可以让关闭操作与打开操作的代码更近一些\n    return true\n}\n\n// 定义Stringer为一个接口类型，有一个方法String\ntype Stringer interface {\n    String() string\n}\n\n// 定义pair为一个结构体，有x和y两个int型变量。\ntype pair struct {\n    x, y int\n}\n\n// 定义pair类型的方法，实现Stringer接口。\nfunc (p pair) String() string { // p被叫做“接收器”\n    // Sprintf是fmt包中的另一个公有函数。\n    // 用 . 调用p中的元素。\n    return fmt.Sprintf(\"(%d, %d)\", p.x, p.y)\n}\n\nfunc learnInterfaces() {\n    // 花括号用来定义结构体变量，:=在这里将一个结构体变量赋值给p。\n    p := pair{3, 4}\n    fmt.Println(p.String()) // 调用pair类型p的String方法\n    var i Stringer          // 声明i为Stringer接口类型\n    i = p                   // 有效！因为p实现了Stringer接口（类似java中的塑型）\n    // 调用i的String方法，输出和上面一样\n    fmt.Println(i.String())\n\n    // fmt包中的Println函数向对象要它们的string输出，实现了String方法就可以这样使用了。\n    // （类似java中的序列化）\n    fmt.Println(p) // 输出和上面一样，自动调用String函数。\n    fmt.Println(i) // 输出和上面一样。\n\n    learnVariadicParams(\"great\", \"learning\", \"here!\")\n}\n\n// 有变长参数列表的函数\nfunc learnVariadicParams(myStrings ...interface{}) {\n    // 枚举变长参数列表的每个参数值\n    // 下划线在这里用来抛弃枚举时返回的数组索引值\n    for _, param := range myStrings {\n\tfmt.Println(\"param:\", param)\n    }\n\n    // 将可变参数列表作为其他函数的参数列表\n    fmt.Println(\"params:\", fmt.Sprintln(myStrings...))\n\n    learnErrorHandling()\n}\n\nfunc learnErrorHandling() {\n    // \", ok\"用来判断有没有正常工作\n    m := map[int]string{3: \"three\", 4: \"four\"}\n    if x, ok := m[1]; !ok { // ok 为false，因为m中没有1\n\tfmt.Println(\"别找了真没有\")\n    } else {\n\tfmt.Print(x) // 如果x在map中的话，x就是那个值喽。\n    }\n    // 错误可不只是ok，它还可以给出关于问题的更多细节。\n    if _, err := strconv.Atoi(\"non-int\"); err != nil { // _ discards value\n\t// 输出\"strconv.ParseInt: parsing \"non-int\": invalid syntax\"\n\tfmt.Println(err)\n    }\n    // 待会再说接口吧。同时，\n    learnConcurrency()\n}\n\n// c是channel类型，一个并发安全的通信对象。\nfunc inc(i int, c chan int) {\n    c <- i + 1 // <-把右边的发送到左边的channel。\n}\n\n// 我们将用inc函数来并发地增加一些数字。\nfunc learnConcurrency() {\n    // 用make来声明一个slice，make会分配和初始化slice，map和channel。\n    c := make(chan int)\n    // 用go关键字开始三个并发的goroutine，如果机器支持的话，还可能是并行执行。\n    // 三个都被发送到同一个channel。\n    go inc(0, c) // go is a statement that starts a new goroutine.\n    go inc(10, c)\n    go inc(-805, c)\n    // 从channel中读取结果并打印。\n    // 打印出什么东西是不可预知的。\n    fmt.Println(<-c, <-c, <-c) // channel在右边的时候，<-是读操作。\n\n    cs := make(chan string)       // 操作string的channel\n    cc := make(chan chan string)  // 操作channel的channel\n    go func() { c <- 84 }()       // 开始一个goroutine来发送一个新的数字\n    go func() { cs <- \"wordy\" }() // 发送给cs\n    // Select类似于switch，但是每个case包括一个channel操作。\n    // 它随机选择一个准备好通讯的case。\n    select {\n    case i := <-c: // 从channel接收的值可以赋给其他变量\n\tfmt.Println(\"这是……\", i)\n    case <-cs: // 或者直接丢弃\n\tfmt.Println(\"这是个字符串！\")\n    case <-cc: // 空的，还没作好通讯的准备\n\tfmt.Println(\"别瞎想\")\n    }\n    // 上面c或者cs的值被取到，其中一个goroutine结束，另外一个一直阻塞。\n\n    learnWebProgramming() // Go很适合web编程，我知道你也想学！\n}\n\n// http包中的一个简单的函数就可以开启web服务器。\nfunc learnWebProgramming() {\n    // ListenAndServe第一个参数指定了监听端口，第二个参数是一个接口，特定是http.Handler。\n    go func() {\n\terr := http.ListenAndServe(\":8080\", pair{})\n\tfmt.Println(err) // 不要无视错误。\n    }()\n\n    requestServer()\n}\n\n// 使pair实现http.Handler接口的ServeHTTP方法。\nfunc (p pair) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    // 使用http.ResponseWriter返回数据\n    w.Write([]byte(\"Y分钟golang速成!\"))\n}\n\nfunc requestServer() {\n    resp, err := http.Get(\"http://localhost:8080\")\n    fmt.Println(err)\n    defer resp.Body.Close()\n    body, err := ioutil.ReadAll(resp.Body)\n    fmt.Printf(\"\\n服务器消息： `%s`\", string(body))\n}\n```\n\n> 相信有编程基础的同学很容易就能看懂\n\n### 继续学习\n\n关于Go的一切你都可以在[Go官方网站](http://golang.org/)找到(需要翻墙)。 在那里你可以获得教程参考，在线试用，和更多的资料。 在简单的尝试过后，[在官方文档(同样需要翻墙)](https://golang.org/doc/)那里你会得到你所需要的所有资料、关于编写代码的规范、库和命令行工具的文档与Go的版本历史。\n\n学习Go还要阅读[Go标准库的源代码](https://play.golang.org/p/tnWMjr16Mm)，全部文档化了，可读性非常好，可以学到go，go style和go idioms。在文档中点击函数名，源代码就出来了！\n\n[Go by example同样可以学习go](https://gobyexample.com/)\n[原文](https://learnxinyminutes.com/docs/zh-cn/go-cn/)\n[配置emacs编写golang环境以及gocode补全go](http://angely.me/2017/10/20/golang%E7%BC%96%E8%BE%91%E5%99%A8emacs/)\n","slug":"5分钟入门golang","published":1,"updated":"2019-05-13T03:56:03.224Z","comments":1,"photos":[],"link":"","_id":"cjvluebbk0000a0dm5eimi5ry","content":"<p>发明Go语言是出于更好地完成工作的需要。Go不是计算机科学的最新发展潮流，但它却提供了解决现实问题的最新最快的方法。<br>golang拥有命令式语言的静态类型，编译很快，执行也很快，同时加入了对于目前多核CPU的并发计算支持，也有相应的特性来实现大规模编程。<br>Go语言有非常棒的标准库，还有一个充满热情的社区。</p>\n<h3 id=\"直接看代码学习\"><a href=\"#直接看代码学习\" class=\"headerlink\" title=\"直接看代码学习\"></a>直接看代码学习</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单行注释</span></div><div class=\"line\"><span class=\"comment\">/* 多行</span></div><div class=\"line\">    注释 */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 导入包的子句在每个源文件的开头。</span></div><div class=\"line\"><span class=\"comment\">// Main比较特殊，它用来声明可执行文件，而不是一个库。</span></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Import语句声明了当前文件引用的包。</span></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span>       <span class=\"comment\">// Go语言标准库中的包</span></div><div class=\"line\">    <span class=\"string\">\"io/ioutil\"</span> <span class=\"comment\">// 包含一些输入输出函数</span></div><div class=\"line\">    m <span class=\"string\">\"math\"</span>    <span class=\"comment\">// 数学标准库，在此文件中别名为m</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span>  <span class=\"comment\">// 一个web服务器包</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span>        <span class=\"comment\">// 系统底层函数，如文件读写</span></div><div class=\"line\">    <span class=\"string\">\"strconv\"</span>   <span class=\"comment\">// 字符串转换</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数声明：Main是程序执行的入口。</span></div><div class=\"line\"><span class=\"comment\">// 不管你喜欢还是不喜欢，反正Go就用了花括号来包住函数体。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 往标准输出打印一行。</span></div><div class=\"line\">    <span class=\"comment\">// 用包名fmt限制打印函数。</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"天坑欢迎你!\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 调用当前包的另一个函数。</span></div><div class=\"line\">    beyondHello()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数可以在括号里加参数。</span></div><div class=\"line\"><span class=\"comment\">// 如果没有参数的话，也需要一个空括号。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">beyondHello</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"keyword\">int</span>   <span class=\"comment\">// 变量声明，变量必须在使用之前声明。</span></div><div class=\"line\">    x = <span class=\"number\">3</span>       <span class=\"comment\">// 变量赋值。</span></div><div class=\"line\">    <span class=\"comment\">// 可以用:=来偷懒，它自动把变量类型、声明和赋值都搞定了。</span></div><div class=\"line\">    y := <span class=\"number\">4</span></div><div class=\"line\">    sum, prod := learnMultiple(x, y)        <span class=\"comment\">// 返回多个变量的函数</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"sum:\"</span>, sum, <span class=\"string\">\"prod:\"</span>, prod) <span class=\"comment\">// 简单输出</span></div><div class=\"line\">    learnTypes()                            <span class=\"comment\">// 少于y分钟，学的更多！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* &lt;- 快看快看我是跨行注释_(:з」∠)_</span></div><div class=\"line\">Go语言的函数可以有多个参数和 *多个* 返回值。</div><div class=\"line\">在这个函数中， `x`、`y` 是参数，</div><div class=\"line\">`sum`、`prod` 是返回值的标识符（可以理解为名字）且类型为int</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnMultiple</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum, prod <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y, x * y <span class=\"comment\">// 返回两个值</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 内置变量类型和关键词</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnTypes</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 短声明给你所想。</span></div><div class=\"line\">    str := <span class=\"string\">\"少说话多读书!\"</span> <span class=\"comment\">// String类型</span></div><div class=\"line\"></div><div class=\"line\">    s2 := <span class=\"string\">`这是一个</span></div><div class=\"line\">可以换行的字符串` <span class=\"comment\">// 同样是String类型</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 非ascii字符。Go使用UTF-8编码。</span></div><div class=\"line\">    g := <span class=\"string\">'Σ'</span> <span class=\"comment\">// rune类型，int32的别名，使用UTF-8编码</span></div><div class=\"line\"></div><div class=\"line\">    f := <span class=\"number\">3.14195</span> <span class=\"comment\">// float64类型，IEEE-754 64位浮点数</span></div><div class=\"line\">    c := <span class=\"number\">3</span> + <span class=\"number\">4i</span>  <span class=\"comment\">// complex128类型，内部使用两个float64表示</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Var变量可以直接初始化。</span></div><div class=\"line\">    <span class=\"keyword\">var</span> u <span class=\"keyword\">uint</span> = <span class=\"number\">7</span>  <span class=\"comment\">// unsigned 无符号变量，但是实现依赖int型变量的长度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> pi <span class=\"keyword\">float32</span> = <span class=\"number\">22.</span> / <span class=\"number\">7</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 字符转换</span></div><div class=\"line\">    n := <span class=\"keyword\">byte</span>(<span class=\"string\">'\\n'</span>) <span class=\"comment\">// byte是uint8的别名</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数组（Array）类型的大小在编译时即确定</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a4 [<span class=\"number\">4</span>] <span class=\"keyword\">int</span>              <span class=\"comment\">// 有4个int变量的数组，初始为0</span></div><div class=\"line\">    a3 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;     <span class=\"comment\">// 有3个int变量的数组，同时进行了初始化</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Array和slice各有所长，但是slice可以动态的增删，所以更多时候还是使用slice。</span></div><div class=\"line\">    s3 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>&#125;    <span class=\"comment\">// 回去看看 a3 ，是不是这里没有省略号？</span></div><div class=\"line\">    s4 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">4</span>)    <span class=\"comment\">// 分配4个int大小的内存并初始化为0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> d2 [][]<span class=\"keyword\">float64</span>      <span class=\"comment\">// 这里只是声明，并未分配内存空间</span></div><div class=\"line\">    bs := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"a slice\"</span>) <span class=\"comment\">// 进行类型转换</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 切片（Slice）的大小是动态的，它的长度可以按需增长</span></div><div class=\"line\">    <span class=\"comment\">// 用内置函数 append() 向切片末尾添加元素</span></div><div class=\"line\">    <span class=\"comment\">// 要增添到的目标是 append 函数第一个参数，</span></div><div class=\"line\">    <span class=\"comment\">// 多数时候数组在原内存处顺次增长，如</span></div><div class=\"line\">    s := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;     <span class=\"comment\">// 这是个长度3的slice</span></div><div class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)  <span class=\"comment\">// 再加仨元素，长度变为6了</span></div><div class=\"line\">    fmt.Println(s) <span class=\"comment\">// 更新后的数组是 [1 2 3 4 5 6]</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 除了向append()提供一组原子元素（写死在代码里的）以外，我们</span></div><div class=\"line\">    <span class=\"comment\">// 还可以用如下方法传递一个slice常量或变量，并在后面加上省略号，</span></div><div class=\"line\">    <span class=\"comment\">// 用以表示我们将引用一个slice、解包其中的元素并将其添加到s数组末尾。</span></div><div class=\"line\">    s = <span class=\"built_in\">append</span>(s, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;...) <span class=\"comment\">// 第二个参数是一个slice常量</span></div><div class=\"line\">    fmt.Println(s)  <span class=\"comment\">// 更新后的数组是 [1 2 3 4 5 6 7 8 9]</span></div><div class=\"line\"></div><div class=\"line\">    p, q := learnMemory()       <span class=\"comment\">// 声明p,q为int型变量的指针</span></div><div class=\"line\">    fmt.Println(*p, *q)         <span class=\"comment\">// * 取值</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Map是动态可增长关联数组，和其他语言中的hash或者字典相似。</span></div><div class=\"line\">    m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"three\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"four\"</span>: <span class=\"number\">4</span>&#125;</div><div class=\"line\">    m[<span class=\"string\">\"one\"</span>] = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在Go语言中未使用的变量在编译的时候会报错，而不是warning。</span></div><div class=\"line\">    <span class=\"comment\">// 下划线 _ 可以使你“使用”一个变量，但是丢弃它的值。</span></div><div class=\"line\">    _, _, _, _, _, _, _, _, _, _ = str, s2, g, f, u, pi, n, a3, s4, bs</div><div class=\"line\">    <span class=\"comment\">// 通常的用法是，在调用拥有多个返回值的函数时，</span></div><div class=\"line\">    <span class=\"comment\">// 用下划线抛弃其中的一个参数。下面的例子就是一个脏套路，</span></div><div class=\"line\">    <span class=\"comment\">// 调用os.Create并用下划线变量扔掉它的错误代码。</span></div><div class=\"line\">    <span class=\"comment\">// 因为我们觉得这个文件一定会成功创建。</span></div><div class=\"line\">    file, _ := os.Create(<span class=\"string\">\"output.txt\"</span>)</div><div class=\"line\">    fmt.Fprint(file, <span class=\"string\">\"这句代码还示范了如何写入文件呢\"</span>)</div><div class=\"line\">    file.Close()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 输出变量</span></div><div class=\"line\">    fmt.Println(s, c, a4, s3, d2, m)</div><div class=\"line\"></div><div class=\"line\">    learnFlowControl() <span class=\"comment\">// 回到流程控制</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 和其他编程语言不同的是，go支持有名称的变量返回值。</span></div><div class=\"line\"><span class=\"comment\">// 声明返回值时带上一个名字允许我们在函数内的不同位置</span></div><div class=\"line\"><span class=\"comment\">// 只用写return一个词就能将函数内指定名称的变量返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnNamedReturns</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"params\">(z <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    z = x * y</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// z is implicit here, because we named it earlier.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Go全面支持垃圾回收。Go有指针，但是不支持指针运算。</span></div><div class=\"line\"><span class=\"comment\">// 你会因为空指针而犯错，但是不会因为增加指针而犯错。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnMemory</span><span class=\"params\">()</span> <span class=\"params\">(p, q *<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 返回int型变量指针p和q</span></div><div class=\"line\">    p = <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)    <span class=\"comment\">// 内置函数new分配内存</span></div><div class=\"line\">    <span class=\"comment\">// 自动将分配的int赋值0，p不再是空的了。</span></div><div class=\"line\">    s := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">20</span>)    <span class=\"comment\">// 给20个int变量分配一块内存</span></div><div class=\"line\">    s[<span class=\"number\">3</span>] = <span class=\"number\">7</span>                <span class=\"comment\">// 赋值</span></div><div class=\"line\">    r := <span class=\"number\">-2</span>                 <span class=\"comment\">// 声明另一个局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;s[<span class=\"number\">3</span>], &amp;r        <span class=\"comment\">// &amp; 取地址</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">expensiveComputation</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1e6</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnFlowControl</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// If需要花括号，括号就免了</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"这句话肯定被执行\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 用go fmt 命令可以帮你格式化代码，所以不用怕被人吐槽代码风格了，</span></div><div class=\"line\">    <span class=\"comment\">// 也不用容忍别人的代码风格。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">false</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// pout</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// gloat</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果太多嵌套的if语句，推荐使用switch</span></div><div class=\"line\">    x := <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> x &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">\t<span class=\"comment\">// 隐式调用break语句，匹配上一个即停止</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">\t<span class=\"comment\">// 不会运行</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 和if一样，for也不用括号</span></div><div class=\"line\">    <span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">3</span>; x++ &#123; <span class=\"comment\">// ++ 自增</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"遍历\"</span>, x)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// x在这里还是1。为什么？</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// for 是go里唯一的循环关键字，不过它有很多变种</span></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123; <span class=\"comment\">// 死循环</span></div><div class=\"line\">\t<span class=\"keyword\">break</span>    <span class=\"comment\">// 骗你的</span></div><div class=\"line\">\t<span class=\"keyword\">continue</span> <span class=\"comment\">// 不会运行的</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 用range可以枚举 array、slice、string、map、channel等不同类型</span></div><div class=\"line\">    <span class=\"comment\">// 对于channel，range返回一个值，</span></div><div class=\"line\">    <span class=\"comment\">// array、slice、string、map等其他类型返回一对儿</span></div><div class=\"line\">    <span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"one\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"two\"</span>: <span class=\"number\">2</span>, <span class=\"string\">\"three\"</span>: <span class=\"number\">3</span>&#125; &#123;</div><div class=\"line\">\t<span class=\"comment\">// 打印map中的每一个键值对</span></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"索引：%s, 值为：%d\\n\"</span>, key, value)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果你只想要值，那就用前面讲的下划线扔掉没用的</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, name := <span class=\"keyword\">range</span> []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Bill\"</span>, <span class=\"string\">\"Joe\"</span>&#125; &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"你是。。 %s\\n\"</span>, name)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 和for一样，if中的:=先给y赋值，然后再和x作比较。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> y := expensiveComputation(); y &gt; x &#123;</div><div class=\"line\">\tx = y</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 闭包函数</span></div><div class=\"line\">    xBig := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">100</span> <span class=\"comment\">// x是上面声明的变量引用</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"xBig:\"</span>, xBig()) <span class=\"comment\">// true （上面把y赋给x了）</span></div><div class=\"line\">    x /= <span class=\"number\">1e5</span>                     <span class=\"comment\">// x变成10</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"xBig:\"</span>, xBig()) <span class=\"comment\">// 现在是false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 除此之外，函数体可以在其他函数中定义并调用，</span></div><div class=\"line\">    <span class=\"comment\">// 满足下列条件时，也可以作为参数传递给其他函数：</span></div><div class=\"line\">    <span class=\"comment\">//   a) 定义的函数被立即调用</span></div><div class=\"line\">    <span class=\"comment\">//   b) 函数返回值符合调用者对类型的要求</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"两数相加乘二: \"</span>,</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> (a + b) * <span class=\"number\">2</span></div><div class=\"line\">\t&#125;(<span class=\"number\">10</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// Called with args 10 and 2</span></div><div class=\"line\">    <span class=\"comment\">// =&gt; Add + double two numbers: 24</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 当你需要goto的时候，你会爱死它的！</span></div><div class=\"line\">    <span class=\"keyword\">goto</span> love</div><div class=\"line\">love:</div><div class=\"line\"></div><div class=\"line\">    learnFunctionFactory() <span class=\"comment\">// 返回函数的函数多棒啊</span></div><div class=\"line\">    learnDefer()      <span class=\"comment\">// 对defer关键字的简单介绍</span></div><div class=\"line\">    learnInterfaces() <span class=\"comment\">// 好东西来了！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnFunctionFactory</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 空行分割的两个写法是相同的，不过第二个写法比较实用</span></div><div class=\"line\">    fmt.Println(sentenceFactory(<span class=\"string\">\"原谅\"</span>)(<span class=\"string\">\"当然选择\"</span>, <span class=\"string\">\"她！\"</span>))</div><div class=\"line\"></div><div class=\"line\">    d := sentenceFactory(<span class=\"string\">\"原谅\"</span>)</div><div class=\"line\">    fmt.Println(d(<span class=\"string\">\"当然选择\"</span>, <span class=\"string\">\"她！\"</span>))</div><div class=\"line\">    fmt.Println(d(<span class=\"string\">\"你怎么可以\"</span>, <span class=\"string\">\"她？\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Decorator在一些语言中很常见，在go语言中，</span></div><div class=\"line\"><span class=\"comment\">// 接受参数作为其定义的一部分的函数是修饰符的替代品</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sentenceFactory</span><span class=\"params\">(mystring <span class=\"keyword\">string</span>)</span> <span class=\"title\">func</span><span class=\"params\">(before, after <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(before, after <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%s %s %s\"</span>, before, mystring, after) <span class=\"comment\">// new string</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnDefer</span><span class=\"params\">()</span> <span class=\"params\">(ok <span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// defer表达式在函数返回的前一刻执行</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"defer表达式执行顺序为后进先出（LIFO）\"</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"\\n这句话比上句话先输出，因为\"</span>)</div><div class=\"line\">    <span class=\"comment\">// 关于defer的用法，例如用defer关闭一个文件，</span></div><div class=\"line\">    <span class=\"comment\">// 就可以让关闭操作与打开操作的代码更近一些</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义Stringer为一个接口类型，有一个方法String</span></div><div class=\"line\"><span class=\"keyword\">type</span> Stringer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    String() <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义pair为一个结构体，有x和y两个int型变量。</span></div><div class=\"line\"><span class=\"keyword\">type</span> pair <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    x, y <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义pair类型的方法，实现Stringer接口。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p pair)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"comment\">// p被叫做“接收器”</span></div><div class=\"line\">    <span class=\"comment\">// Sprintf是fmt包中的另一个公有函数。</span></div><div class=\"line\">    <span class=\"comment\">// 用 . 调用p中的元素。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"(%d, %d)\"</span>, p.x, p.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnInterfaces</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 花括号用来定义结构体变量，:=在这里将一个结构体变量赋值给p。</span></div><div class=\"line\">    p := pair&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</div><div class=\"line\">    fmt.Println(p.String()) <span class=\"comment\">// 调用pair类型p的String方法</span></div><div class=\"line\">    <span class=\"keyword\">var</span> i Stringer          <span class=\"comment\">// 声明i为Stringer接口类型</span></div><div class=\"line\">    i = p                   <span class=\"comment\">// 有效！因为p实现了Stringer接口（类似java中的塑型）</span></div><div class=\"line\">    <span class=\"comment\">// 调用i的String方法，输出和上面一样</span></div><div class=\"line\">    fmt.Println(i.String())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// fmt包中的Println函数向对象要它们的string输出，实现了String方法就可以这样使用了。</span></div><div class=\"line\">    <span class=\"comment\">// （类似java中的序列化）</span></div><div class=\"line\">    fmt.Println(p) <span class=\"comment\">// 输出和上面一样，自动调用String函数。</span></div><div class=\"line\">    fmt.Println(i) <span class=\"comment\">// 输出和上面一样。</span></div><div class=\"line\"></div><div class=\"line\">    learnVariadicParams(<span class=\"string\">\"great\"</span>, <span class=\"string\">\"learning\"</span>, <span class=\"string\">\"here!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 有变长参数列表的函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnVariadicParams</span><span class=\"params\">(myStrings ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 枚举变长参数列表的每个参数值</span></div><div class=\"line\">    <span class=\"comment\">// 下划线在这里用来抛弃枚举时返回的数组索引值</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, param := <span class=\"keyword\">range</span> myStrings &#123;</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"param:\"</span>, param)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 将可变参数列表作为其他函数的参数列表</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"params:\"</span>, fmt.Sprintln(myStrings...))</div><div class=\"line\"></div><div class=\"line\">    learnErrorHandling()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnErrorHandling</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// \", ok\"用来判断有没有正常工作</span></div><div class=\"line\">    m := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">\"three\"</span>, <span class=\"number\">4</span>: <span class=\"string\">\"four\"</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> x, ok := m[<span class=\"number\">1</span>]; !ok &#123; <span class=\"comment\">// ok 为false，因为m中没有1</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"别找了真没有\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\tfmt.Print(x) <span class=\"comment\">// 如果x在map中的话，x就是那个值喽。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 错误可不只是ok，它还可以给出关于问题的更多细节。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> _, err := strconv.Atoi(<span class=\"string\">\"non-int\"</span>); err != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// _ discards value</span></div><div class=\"line\">\t<span class=\"comment\">// 输出\"strconv.ParseInt: parsing \"non-int\": invalid syntax\"</span></div><div class=\"line\">\tfmt.Println(err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 待会再说接口吧。同时，</span></div><div class=\"line\">    learnConcurrency()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// c是channel类型，一个并发安全的通信对象。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">inc</span><span class=\"params\">(i <span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    c &lt;- i + <span class=\"number\">1</span> <span class=\"comment\">// &lt;-把右边的发送到左边的channel。</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 我们将用inc函数来并发地增加一些数字。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnConcurrency</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 用make来声明一个slice，make会分配和初始化slice，map和channel。</span></div><div class=\"line\">    c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">    <span class=\"comment\">// 用go关键字开始三个并发的goroutine，如果机器支持的话，还可能是并行执行。</span></div><div class=\"line\">    <span class=\"comment\">// 三个都被发送到同一个channel。</span></div><div class=\"line\">    <span class=\"keyword\">go</span> inc(<span class=\"number\">0</span>, c) <span class=\"comment\">// go is a statement that starts a new goroutine.</span></div><div class=\"line\">    <span class=\"keyword\">go</span> inc(<span class=\"number\">10</span>, c)</div><div class=\"line\">    <span class=\"keyword\">go</span> inc(<span class=\"number\">-805</span>, c)</div><div class=\"line\">    <span class=\"comment\">// 从channel中读取结果并打印。</span></div><div class=\"line\">    <span class=\"comment\">// 打印出什么东西是不可预知的。</span></div><div class=\"line\">    fmt.Println(&lt;-c, &lt;-c, &lt;-c) <span class=\"comment\">// channel在右边的时候，&lt;-是读操作。</span></div><div class=\"line\"></div><div class=\"line\">    cs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)       <span class=\"comment\">// 操作string的channel</span></div><div class=\"line\">    cc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)  <span class=\"comment\">// 操作channel的channel</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; c &lt;- <span class=\"number\">84</span> &#125;()       <span class=\"comment\">// 开始一个goroutine来发送一个新的数字</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; cs &lt;- <span class=\"string\">\"wordy\"</span> &#125;() <span class=\"comment\">// 发送给cs</span></div><div class=\"line\">    <span class=\"comment\">// Select类似于switch，但是每个case包括一个channel操作。</span></div><div class=\"line\">    <span class=\"comment\">// 它随机选择一个准备好通讯的case。</span></div><div class=\"line\">    <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> i := &lt;-c: <span class=\"comment\">// 从channel接收的值可以赋给其他变量</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"这是……\"</span>, i)</div><div class=\"line\">    <span class=\"keyword\">case</span> &lt;-cs: <span class=\"comment\">// 或者直接丢弃</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"这是个字符串！\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> &lt;-cc: <span class=\"comment\">// 空的，还没作好通讯的准备</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"别瞎想\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 上面c或者cs的值被取到，其中一个goroutine结束，另外一个一直阻塞。</span></div><div class=\"line\"></div><div class=\"line\">    learnWebProgramming() <span class=\"comment\">// Go很适合web编程，我知道你也想学！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// http包中的一个简单的函数就可以开启web服务器。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnWebProgramming</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ListenAndServe第一个参数指定了监听端口，第二个参数是一个接口，特定是http.Handler。</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">\":8080\"</span>, pair&#123;&#125;)</div><div class=\"line\">\tfmt.Println(err) <span class=\"comment\">// 不要无视错误。</span></div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    requestServer()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使pair实现http.Handler接口的ServeHTTP方法。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p pair)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用http.ResponseWriter返回数据</span></div><div class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Y分钟golang速成!\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">requestServer</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    resp, err := http.Get(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">    fmt.Println(err)</div><div class=\"line\">    <span class=\"keyword\">defer</span> resp.Body.Close()</div><div class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"\\n服务器消息： `%s`\"</span>, <span class=\"keyword\">string</span>(body))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>相信有编程基础的同学很容易就能看懂</p>\n</blockquote>\n<h3 id=\"继续学习\"><a href=\"#继续学习\" class=\"headerlink\" title=\"继续学习\"></a>继续学习</h3><p>关于Go的一切你都可以在<a href=\"http://golang.org/\" target=\"_blank\" rel=\"external\">Go官方网站</a>找到(需要翻墙)。 在那里你可以获得教程参考，在线试用，和更多的资料。 在简单的尝试过后，<a href=\"https://golang.org/doc/\" target=\"_blank\" rel=\"external\">在官方文档(同样需要翻墙)</a>那里你会得到你所需要的所有资料、关于编写代码的规范、库和命令行工具的文档与Go的版本历史。</p>\n<p>学习Go还要阅读<a href=\"https://play.golang.org/p/tnWMjr16Mm\" target=\"_blank\" rel=\"external\">Go标准库的源代码</a>，全部文档化了，可读性非常好，可以学到go，go style和go idioms。在文档中点击函数名，源代码就出来了！</p>\n<p><a href=\"https://gobyexample.com/\" target=\"_blank\" rel=\"external\">Go by example同样可以学习go</a><br><a href=\"https://learnxinyminutes.com/docs/zh-cn/go-cn/\" target=\"_blank\" rel=\"external\">原文</a><br><a href=\"http://angely.me/2017/10/20/golang%E7%BC%96%E8%BE%91%E5%99%A8emacs/\">配置emacs编写golang环境以及gocode补全go</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>发明Go语言是出于更好地完成工作的需要。Go不是计算机科学的最新发展潮流，但它却提供了解决现实问题的最新最快的方法。<br>golang拥有命令式语言的静态类型，编译很快，执行也很快，同时加入了对于目前多核CPU的并发计算支持，也有相应的特性来实现大规模编程。<br>Go语言有非常棒的标准库，还有一个充满热情的社区。</p>\n<h3 id=\"直接看代码学习\"><a href=\"#直接看代码学习\" class=\"headerlink\" title=\"直接看代码学习\"></a>直接看代码学习</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div><div class=\"line\">203</div><div class=\"line\">204</div><div class=\"line\">205</div><div class=\"line\">206</div><div class=\"line\">207</div><div class=\"line\">208</div><div class=\"line\">209</div><div class=\"line\">210</div><div class=\"line\">211</div><div class=\"line\">212</div><div class=\"line\">213</div><div class=\"line\">214</div><div class=\"line\">215</div><div class=\"line\">216</div><div class=\"line\">217</div><div class=\"line\">218</div><div class=\"line\">219</div><div class=\"line\">220</div><div class=\"line\">221</div><div class=\"line\">222</div><div class=\"line\">223</div><div class=\"line\">224</div><div class=\"line\">225</div><div class=\"line\">226</div><div class=\"line\">227</div><div class=\"line\">228</div><div class=\"line\">229</div><div class=\"line\">230</div><div class=\"line\">231</div><div class=\"line\">232</div><div class=\"line\">233</div><div class=\"line\">234</div><div class=\"line\">235</div><div class=\"line\">236</div><div class=\"line\">237</div><div class=\"line\">238</div><div class=\"line\">239</div><div class=\"line\">240</div><div class=\"line\">241</div><div class=\"line\">242</div><div class=\"line\">243</div><div class=\"line\">244</div><div class=\"line\">245</div><div class=\"line\">246</div><div class=\"line\">247</div><div class=\"line\">248</div><div class=\"line\">249</div><div class=\"line\">250</div><div class=\"line\">251</div><div class=\"line\">252</div><div class=\"line\">253</div><div class=\"line\">254</div><div class=\"line\">255</div><div class=\"line\">256</div><div class=\"line\">257</div><div class=\"line\">258</div><div class=\"line\">259</div><div class=\"line\">260</div><div class=\"line\">261</div><div class=\"line\">262</div><div class=\"line\">263</div><div class=\"line\">264</div><div class=\"line\">265</div><div class=\"line\">266</div><div class=\"line\">267</div><div class=\"line\">268</div><div class=\"line\">269</div><div class=\"line\">270</div><div class=\"line\">271</div><div class=\"line\">272</div><div class=\"line\">273</div><div class=\"line\">274</div><div class=\"line\">275</div><div class=\"line\">276</div><div class=\"line\">277</div><div class=\"line\">278</div><div class=\"line\">279</div><div class=\"line\">280</div><div class=\"line\">281</div><div class=\"line\">282</div><div class=\"line\">283</div><div class=\"line\">284</div><div class=\"line\">285</div><div class=\"line\">286</div><div class=\"line\">287</div><div class=\"line\">288</div><div class=\"line\">289</div><div class=\"line\">290</div><div class=\"line\">291</div><div class=\"line\">292</div><div class=\"line\">293</div><div class=\"line\">294</div><div class=\"line\">295</div><div class=\"line\">296</div><div class=\"line\">297</div><div class=\"line\">298</div><div class=\"line\">299</div><div class=\"line\">300</div><div class=\"line\">301</div><div class=\"line\">302</div><div class=\"line\">303</div><div class=\"line\">304</div><div class=\"line\">305</div><div class=\"line\">306</div><div class=\"line\">307</div><div class=\"line\">308</div><div class=\"line\">309</div><div class=\"line\">310</div><div class=\"line\">311</div><div class=\"line\">312</div><div class=\"line\">313</div><div class=\"line\">314</div><div class=\"line\">315</div><div class=\"line\">316</div><div class=\"line\">317</div><div class=\"line\">318</div><div class=\"line\">319</div><div class=\"line\">320</div><div class=\"line\">321</div><div class=\"line\">322</div><div class=\"line\">323</div><div class=\"line\">324</div><div class=\"line\">325</div><div class=\"line\">326</div><div class=\"line\">327</div><div class=\"line\">328</div><div class=\"line\">329</div><div class=\"line\">330</div><div class=\"line\">331</div><div class=\"line\">332</div><div class=\"line\">333</div><div class=\"line\">334</div><div class=\"line\">335</div><div class=\"line\">336</div><div class=\"line\">337</div><div class=\"line\">338</div><div class=\"line\">339</div><div class=\"line\">340</div><div class=\"line\">341</div><div class=\"line\">342</div><div class=\"line\">343</div><div class=\"line\">344</div><div class=\"line\">345</div><div class=\"line\">346</div><div class=\"line\">347</div><div class=\"line\">348</div><div class=\"line\">349</div><div class=\"line\">350</div><div class=\"line\">351</div><div class=\"line\">352</div><div class=\"line\">353</div><div class=\"line\">354</div><div class=\"line\">355</div><div class=\"line\">356</div><div class=\"line\">357</div><div class=\"line\">358</div><div class=\"line\">359</div><div class=\"line\">360</div><div class=\"line\">361</div><div class=\"line\">362</div><div class=\"line\">363</div><div class=\"line\">364</div><div class=\"line\">365</div><div class=\"line\">366</div><div class=\"line\">367</div><div class=\"line\">368</div><div class=\"line\">369</div><div class=\"line\">370</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 单行注释</span></div><div class=\"line\"><span class=\"comment\">/* 多行</span></div><div class=\"line\">    注释 */</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 导入包的子句在每个源文件的开头。</span></div><div class=\"line\"><span class=\"comment\">// Main比较特殊，它用来声明可执行文件，而不是一个库。</span></div><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Import语句声明了当前文件引用的包。</span></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"fmt\"</span>       <span class=\"comment\">// Go语言标准库中的包</span></div><div class=\"line\">    <span class=\"string\">\"io/ioutil\"</span> <span class=\"comment\">// 包含一些输入输出函数</span></div><div class=\"line\">    m <span class=\"string\">\"math\"</span>    <span class=\"comment\">// 数学标准库，在此文件中别名为m</span></div><div class=\"line\">    <span class=\"string\">\"net/http\"</span>  <span class=\"comment\">// 一个web服务器包</span></div><div class=\"line\">    <span class=\"string\">\"os\"</span>        <span class=\"comment\">// 系统底层函数，如文件读写</span></div><div class=\"line\">    <span class=\"string\">\"strconv\"</span>   <span class=\"comment\">// 字符串转换</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数声明：Main是程序执行的入口。</span></div><div class=\"line\"><span class=\"comment\">// 不管你喜欢还是不喜欢，反正Go就用了花括号来包住函数体。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 往标准输出打印一行。</span></div><div class=\"line\">    <span class=\"comment\">// 用包名fmt限制打印函数。</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"天坑欢迎你!\"</span>)</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 调用当前包的另一个函数。</span></div><div class=\"line\">    beyondHello()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 函数可以在括号里加参数。</span></div><div class=\"line\"><span class=\"comment\">// 如果没有参数的话，也需要一个空括号。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">beyondHello</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x <span class=\"keyword\">int</span>   <span class=\"comment\">// 变量声明，变量必须在使用之前声明。</span></div><div class=\"line\">    x = <span class=\"number\">3</span>       <span class=\"comment\">// 变量赋值。</span></div><div class=\"line\">    <span class=\"comment\">// 可以用:=来偷懒，它自动把变量类型、声明和赋值都搞定了。</span></div><div class=\"line\">    y := <span class=\"number\">4</span></div><div class=\"line\">    sum, prod := learnMultiple(x, y)        <span class=\"comment\">// 返回多个变量的函数</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"sum:\"</span>, sum, <span class=\"string\">\"prod:\"</span>, prod) <span class=\"comment\">// 简单输出</span></div><div class=\"line\">    learnTypes()                            <span class=\"comment\">// 少于y分钟，学的更多！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* &lt;- 快看快看我是跨行注释_(:з」∠)_</span></div><div class=\"line\">Go语言的函数可以有多个参数和 *多个* 返回值。</div><div class=\"line\">在这个函数中， `x`、`y` 是参数，</div><div class=\"line\">`sum`、`prod` 是返回值的标识符（可以理解为名字）且类型为int</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnMultiple</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"params\">(sum, prod <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> x + y, x * y <span class=\"comment\">// 返回两个值</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 内置变量类型和关键词</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnTypes</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 短声明给你所想。</span></div><div class=\"line\">    str := <span class=\"string\">\"少说话多读书!\"</span> <span class=\"comment\">// String类型</span></div><div class=\"line\"></div><div class=\"line\">    s2 := <span class=\"string\">`这是一个</span></div><div class=\"line\">可以换行的字符串` <span class=\"comment\">// 同样是String类型</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 非ascii字符。Go使用UTF-8编码。</span></div><div class=\"line\">    g := <span class=\"string\">'Σ'</span> <span class=\"comment\">// rune类型，int32的别名，使用UTF-8编码</span></div><div class=\"line\"></div><div class=\"line\">    f := <span class=\"number\">3.14195</span> <span class=\"comment\">// float64类型，IEEE-754 64位浮点数</span></div><div class=\"line\">    c := <span class=\"number\">3</span> + <span class=\"number\">4i</span>  <span class=\"comment\">// complex128类型，内部使用两个float64表示</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Var变量可以直接初始化。</span></div><div class=\"line\">    <span class=\"keyword\">var</span> u <span class=\"keyword\">uint</span> = <span class=\"number\">7</span>  <span class=\"comment\">// unsigned 无符号变量，但是实现依赖int型变量的长度</span></div><div class=\"line\">    <span class=\"keyword\">var</span> pi <span class=\"keyword\">float32</span> = <span class=\"number\">22.</span> / <span class=\"number\">7</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 字符转换</span></div><div class=\"line\">    n := <span class=\"keyword\">byte</span>(<span class=\"string\">'\\n'</span>) <span class=\"comment\">// byte是uint8的别名</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 数组（Array）类型的大小在编译时即确定</span></div><div class=\"line\">    <span class=\"keyword\">var</span> a4 [<span class=\"number\">4</span>] <span class=\"keyword\">int</span>              <span class=\"comment\">// 有4个int变量的数组，初始为0</span></div><div class=\"line\">    a3 := [...]<span class=\"keyword\">int</span>&#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;     <span class=\"comment\">// 有3个int变量的数组，同时进行了初始化</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Array和slice各有所长，但是slice可以动态的增删，所以更多时候还是使用slice。</span></div><div class=\"line\">    s3 := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>&#125;    <span class=\"comment\">// 回去看看 a3 ，是不是这里没有省略号？</span></div><div class=\"line\">    s4 := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">4</span>)    <span class=\"comment\">// 分配4个int大小的内存并初始化为0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> d2 [][]<span class=\"keyword\">float64</span>      <span class=\"comment\">// 这里只是声明，并未分配内存空间</span></div><div class=\"line\">    bs := []<span class=\"keyword\">byte</span>(<span class=\"string\">\"a slice\"</span>) <span class=\"comment\">// 进行类型转换</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 切片（Slice）的大小是动态的，它的长度可以按需增长</span></div><div class=\"line\">    <span class=\"comment\">// 用内置函数 append() 向切片末尾添加元素</span></div><div class=\"line\">    <span class=\"comment\">// 要增添到的目标是 append 函数第一个参数，</span></div><div class=\"line\">    <span class=\"comment\">// 多数时候数组在原内存处顺次增长，如</span></div><div class=\"line\">    s := []<span class=\"keyword\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;     <span class=\"comment\">// 这是个长度3的slice</span></div><div class=\"line\">    s = <span class=\"built_in\">append</span>(s, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>)  <span class=\"comment\">// 再加仨元素，长度变为6了</span></div><div class=\"line\">    fmt.Println(s) <span class=\"comment\">// 更新后的数组是 [1 2 3 4 5 6]</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 除了向append()提供一组原子元素（写死在代码里的）以外，我们</span></div><div class=\"line\">    <span class=\"comment\">// 还可以用如下方法传递一个slice常量或变量，并在后面加上省略号，</span></div><div class=\"line\">    <span class=\"comment\">// 用以表示我们将引用一个slice、解包其中的元素并将其添加到s数组末尾。</span></div><div class=\"line\">    s = <span class=\"built_in\">append</span>(s, []<span class=\"keyword\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>&#125;...) <span class=\"comment\">// 第二个参数是一个slice常量</span></div><div class=\"line\">    fmt.Println(s)  <span class=\"comment\">// 更新后的数组是 [1 2 3 4 5 6 7 8 9]</span></div><div class=\"line\"></div><div class=\"line\">    p, q := learnMemory()       <span class=\"comment\">// 声明p,q为int型变量的指针</span></div><div class=\"line\">    fmt.Println(*p, *q)         <span class=\"comment\">// * 取值</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Map是动态可增长关联数组，和其他语言中的hash或者字典相似。</span></div><div class=\"line\">    m := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"three\"</span>: <span class=\"number\">3</span>, <span class=\"string\">\"four\"</span>: <span class=\"number\">4</span>&#125;</div><div class=\"line\">    m[<span class=\"string\">\"one\"</span>] = <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 在Go语言中未使用的变量在编译的时候会报错，而不是warning。</span></div><div class=\"line\">    <span class=\"comment\">// 下划线 _ 可以使你“使用”一个变量，但是丢弃它的值。</span></div><div class=\"line\">    _, _, _, _, _, _, _, _, _, _ = str, s2, g, f, u, pi, n, a3, s4, bs</div><div class=\"line\">    <span class=\"comment\">// 通常的用法是，在调用拥有多个返回值的函数时，</span></div><div class=\"line\">    <span class=\"comment\">// 用下划线抛弃其中的一个参数。下面的例子就是一个脏套路，</span></div><div class=\"line\">    <span class=\"comment\">// 调用os.Create并用下划线变量扔掉它的错误代码。</span></div><div class=\"line\">    <span class=\"comment\">// 因为我们觉得这个文件一定会成功创建。</span></div><div class=\"line\">    file, _ := os.Create(<span class=\"string\">\"output.txt\"</span>)</div><div class=\"line\">    fmt.Fprint(file, <span class=\"string\">\"这句代码还示范了如何写入文件呢\"</span>)</div><div class=\"line\">    file.Close()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 输出变量</span></div><div class=\"line\">    fmt.Println(s, c, a4, s3, d2, m)</div><div class=\"line\"></div><div class=\"line\">    learnFlowControl() <span class=\"comment\">// 回到流程控制</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 和其他编程语言不同的是，go支持有名称的变量返回值。</span></div><div class=\"line\"><span class=\"comment\">// 声明返回值时带上一个名字允许我们在函数内的不同位置</span></div><div class=\"line\"><span class=\"comment\">// 只用写return一个词就能将函数内指定名称的变量返回</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnNamedReturns</span><span class=\"params\">(x, y <span class=\"keyword\">int</span>)</span> <span class=\"params\">(z <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    z = x * y</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"comment\">// z is implicit here, because we named it earlier.</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Go全面支持垃圾回收。Go有指针，但是不支持指针运算。</span></div><div class=\"line\"><span class=\"comment\">// 你会因为空指针而犯错，但是不会因为增加指针而犯错。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnMemory</span><span class=\"params\">()</span> <span class=\"params\">(p, q *<span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 返回int型变量指针p和q</span></div><div class=\"line\">    p = <span class=\"built_in\">new</span>(<span class=\"keyword\">int</span>)    <span class=\"comment\">// 内置函数new分配内存</span></div><div class=\"line\">    <span class=\"comment\">// 自动将分配的int赋值0，p不再是空的了。</span></div><div class=\"line\">    s := <span class=\"built_in\">make</span>([]<span class=\"keyword\">int</span>, <span class=\"number\">20</span>)    <span class=\"comment\">// 给20个int变量分配一块内存</span></div><div class=\"line\">    s[<span class=\"number\">3</span>] = <span class=\"number\">7</span>                <span class=\"comment\">// 赋值</span></div><div class=\"line\">    r := <span class=\"number\">-2</span>                 <span class=\"comment\">// 声明另一个局部变量</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &amp;s[<span class=\"number\">3</span>], &amp;r        <span class=\"comment\">// &amp; 取地址</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">expensiveComputation</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1e6</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnFlowControl</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// If需要花括号，括号就免了</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">true</span> &#123;</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"这句话肯定被执行\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 用go fmt 命令可以帮你格式化代码，所以不用怕被人吐槽代码风格了，</span></div><div class=\"line\">    <span class=\"comment\">// 也不用容忍别人的代码风格。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"literal\">false</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// pout</span></div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">// gloat</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果太多嵌套的if语句，推荐使用switch</span></div><div class=\"line\">    x := <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> x &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">\t<span class=\"comment\">// 隐式调用break语句，匹配上一个即停止</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</div><div class=\"line\">\t<span class=\"comment\">// 不会运行</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 和if一样，for也不用括号</span></div><div class=\"line\">    <span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; <span class=\"number\">3</span>; x++ &#123; <span class=\"comment\">// ++ 自增</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"遍历\"</span>, x)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// x在这里还是1。为什么？</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// for 是go里唯一的循环关键字，不过它有很多变种</span></div><div class=\"line\">    <span class=\"keyword\">for</span> &#123; <span class=\"comment\">// 死循环</span></div><div class=\"line\">\t<span class=\"keyword\">break</span>    <span class=\"comment\">// 骗你的</span></div><div class=\"line\">\t<span class=\"keyword\">continue</span> <span class=\"comment\">// 不会运行的</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 用range可以枚举 array、slice、string、map、channel等不同类型</span></div><div class=\"line\">    <span class=\"comment\">// 对于channel，range返回一个值，</span></div><div class=\"line\">    <span class=\"comment\">// array、slice、string、map等其他类型返回一对儿</span></div><div class=\"line\">    <span class=\"keyword\">for</span> key, value := <span class=\"keyword\">range</span> <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">\"one\"</span>: <span class=\"number\">1</span>, <span class=\"string\">\"two\"</span>: <span class=\"number\">2</span>, <span class=\"string\">\"three\"</span>: <span class=\"number\">3</span>&#125; &#123;</div><div class=\"line\">\t<span class=\"comment\">// 打印map中的每一个键值对</span></div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"索引：%s, 值为：%d\\n\"</span>, key, value)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 如果你只想要值，那就用前面讲的下划线扔掉没用的</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, name := <span class=\"keyword\">range</span> []<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"Bob\"</span>, <span class=\"string\">\"Bill\"</span>, <span class=\"string\">\"Joe\"</span>&#125; &#123;</div><div class=\"line\">\tfmt.Printf(<span class=\"string\">\"你是。。 %s\\n\"</span>, name)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 和for一样，if中的:=先给y赋值，然后再和x作比较。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> y := expensiveComputation(); y &gt; x &#123;</div><div class=\"line\">\tx = y</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 闭包函数</span></div><div class=\"line\">    xBig := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> x &gt; <span class=\"number\">100</span> <span class=\"comment\">// x是上面声明的变量引用</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"xBig:\"</span>, xBig()) <span class=\"comment\">// true （上面把y赋给x了）</span></div><div class=\"line\">    x /= <span class=\"number\">1e5</span>                     <span class=\"comment\">// x变成10</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"xBig:\"</span>, xBig()) <span class=\"comment\">// 现在是false</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 除此之外，函数体可以在其他函数中定义并调用，</span></div><div class=\"line\">    <span class=\"comment\">// 满足下列条件时，也可以作为参数传递给其他函数：</span></div><div class=\"line\">    <span class=\"comment\">//   a) 定义的函数被立即调用</span></div><div class=\"line\">    <span class=\"comment\">//   b) 函数返回值符合调用者对类型的要求</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"两数相加乘二: \"</span>,</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(a, b <span class=\"keyword\">int</span>)</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">\t    <span class=\"keyword\">return</span> (a + b) * <span class=\"number\">2</span></div><div class=\"line\">\t&#125;(<span class=\"number\">10</span>, <span class=\"number\">2</span>)) <span class=\"comment\">// Called with args 10 and 2</span></div><div class=\"line\">    <span class=\"comment\">// =&gt; Add + double two numbers: 24</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 当你需要goto的时候，你会爱死它的！</span></div><div class=\"line\">    <span class=\"keyword\">goto</span> love</div><div class=\"line\">love:</div><div class=\"line\"></div><div class=\"line\">    learnFunctionFactory() <span class=\"comment\">// 返回函数的函数多棒啊</span></div><div class=\"line\">    learnDefer()      <span class=\"comment\">// 对defer关键字的简单介绍</span></div><div class=\"line\">    learnInterfaces() <span class=\"comment\">// 好东西来了！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnFunctionFactory</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 空行分割的两个写法是相同的，不过第二个写法比较实用</span></div><div class=\"line\">    fmt.Println(sentenceFactory(<span class=\"string\">\"原谅\"</span>)(<span class=\"string\">\"当然选择\"</span>, <span class=\"string\">\"她！\"</span>))</div><div class=\"line\"></div><div class=\"line\">    d := sentenceFactory(<span class=\"string\">\"原谅\"</span>)</div><div class=\"line\">    fmt.Println(d(<span class=\"string\">\"当然选择\"</span>, <span class=\"string\">\"她！\"</span>))</div><div class=\"line\">    fmt.Println(d(<span class=\"string\">\"你怎么可以\"</span>, <span class=\"string\">\"她？\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Decorator在一些语言中很常见，在go语言中，</span></div><div class=\"line\"><span class=\"comment\">// 接受参数作为其定义的一部分的函数是修饰符的替代品</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sentenceFactory</span><span class=\"params\">(mystring <span class=\"keyword\">string</span>)</span> <span class=\"title\">func</span><span class=\"params\">(before, after <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(before, after <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%s %s %s\"</span>, before, mystring, after) <span class=\"comment\">// new string</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnDefer</span><span class=\"params\">()</span> <span class=\"params\">(ok <span class=\"keyword\">bool</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// defer表达式在函数返回的前一刻执行</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"defer表达式执行顺序为后进先出（LIFO）\"</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"\\n这句话比上句话先输出，因为\"</span>)</div><div class=\"line\">    <span class=\"comment\">// 关于defer的用法，例如用defer关闭一个文件，</span></div><div class=\"line\">    <span class=\"comment\">// 就可以让关闭操作与打开操作的代码更近一些</span></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义Stringer为一个接口类型，有一个方法String</span></div><div class=\"line\"><span class=\"keyword\">type</span> Stringer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    String() <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义pair为一个结构体，有x和y两个int型变量。</span></div><div class=\"line\"><span class=\"keyword\">type</span> pair <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    x, y <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义pair类型的方法，实现Stringer接口。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p pair)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"comment\">// p被叫做“接收器”</span></div><div class=\"line\">    <span class=\"comment\">// Sprintf是fmt包中的另一个公有函数。</span></div><div class=\"line\">    <span class=\"comment\">// 用 . 调用p中的元素。</span></div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"(%d, %d)\"</span>, p.x, p.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnInterfaces</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 花括号用来定义结构体变量，:=在这里将一个结构体变量赋值给p。</span></div><div class=\"line\">    p := pair&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</div><div class=\"line\">    fmt.Println(p.String()) <span class=\"comment\">// 调用pair类型p的String方法</span></div><div class=\"line\">    <span class=\"keyword\">var</span> i Stringer          <span class=\"comment\">// 声明i为Stringer接口类型</span></div><div class=\"line\">    i = p                   <span class=\"comment\">// 有效！因为p实现了Stringer接口（类似java中的塑型）</span></div><div class=\"line\">    <span class=\"comment\">// 调用i的String方法，输出和上面一样</span></div><div class=\"line\">    fmt.Println(i.String())</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// fmt包中的Println函数向对象要它们的string输出，实现了String方法就可以这样使用了。</span></div><div class=\"line\">    <span class=\"comment\">// （类似java中的序列化）</span></div><div class=\"line\">    fmt.Println(p) <span class=\"comment\">// 输出和上面一样，自动调用String函数。</span></div><div class=\"line\">    fmt.Println(i) <span class=\"comment\">// 输出和上面一样。</span></div><div class=\"line\"></div><div class=\"line\">    learnVariadicParams(<span class=\"string\">\"great\"</span>, <span class=\"string\">\"learning\"</span>, <span class=\"string\">\"here!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 有变长参数列表的函数</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnVariadicParams</span><span class=\"params\">(myStrings ...<span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 枚举变长参数列表的每个参数值</span></div><div class=\"line\">    <span class=\"comment\">// 下划线在这里用来抛弃枚举时返回的数组索引值</span></div><div class=\"line\">    <span class=\"keyword\">for</span> _, param := <span class=\"keyword\">range</span> myStrings &#123;</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"param:\"</span>, param)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 将可变参数列表作为其他函数的参数列表</span></div><div class=\"line\">    fmt.Println(<span class=\"string\">\"params:\"</span>, fmt.Sprintln(myStrings...))</div><div class=\"line\"></div><div class=\"line\">    learnErrorHandling()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnErrorHandling</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// \", ok\"用来判断有没有正常工作</span></div><div class=\"line\">    m := <span class=\"keyword\">map</span>[<span class=\"keyword\">int</span>]<span class=\"keyword\">string</span>&#123;<span class=\"number\">3</span>: <span class=\"string\">\"three\"</span>, <span class=\"number\">4</span>: <span class=\"string\">\"four\"</span>&#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> x, ok := m[<span class=\"number\">1</span>]; !ok &#123; <span class=\"comment\">// ok 为false，因为m中没有1</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"别找了真没有\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\tfmt.Print(x) <span class=\"comment\">// 如果x在map中的话，x就是那个值喽。</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 错误可不只是ok，它还可以给出关于问题的更多细节。</span></div><div class=\"line\">    <span class=\"keyword\">if</span> _, err := strconv.Atoi(<span class=\"string\">\"non-int\"</span>); err != <span class=\"literal\">nil</span> &#123; <span class=\"comment\">// _ discards value</span></div><div class=\"line\">\t<span class=\"comment\">// 输出\"strconv.ParseInt: parsing \"non-int\": invalid syntax\"</span></div><div class=\"line\">\tfmt.Println(err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 待会再说接口吧。同时，</span></div><div class=\"line\">    learnConcurrency()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// c是channel类型，一个并发安全的通信对象。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">inc</span><span class=\"params\">(i <span class=\"keyword\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    c &lt;- i + <span class=\"number\">1</span> <span class=\"comment\">// &lt;-把右边的发送到左边的channel。</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 我们将用inc函数来并发地增加一些数字。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnConcurrency</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 用make来声明一个slice，make会分配和初始化slice，map和channel。</span></div><div class=\"line\">    c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">    <span class=\"comment\">// 用go关键字开始三个并发的goroutine，如果机器支持的话，还可能是并行执行。</span></div><div class=\"line\">    <span class=\"comment\">// 三个都被发送到同一个channel。</span></div><div class=\"line\">    <span class=\"keyword\">go</span> inc(<span class=\"number\">0</span>, c) <span class=\"comment\">// go is a statement that starts a new goroutine.</span></div><div class=\"line\">    <span class=\"keyword\">go</span> inc(<span class=\"number\">10</span>, c)</div><div class=\"line\">    <span class=\"keyword\">go</span> inc(<span class=\"number\">-805</span>, c)</div><div class=\"line\">    <span class=\"comment\">// 从channel中读取结果并打印。</span></div><div class=\"line\">    <span class=\"comment\">// 打印出什么东西是不可预知的。</span></div><div class=\"line\">    fmt.Println(&lt;-c, &lt;-c, &lt;-c) <span class=\"comment\">// channel在右边的时候，&lt;-是读操作。</span></div><div class=\"line\"></div><div class=\"line\">    cs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)       <span class=\"comment\">// 操作string的channel</span></div><div class=\"line\">    cc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">chan</span> <span class=\"keyword\">string</span>)  <span class=\"comment\">// 操作channel的channel</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; c &lt;- <span class=\"number\">84</span> &#125;()       <span class=\"comment\">// 开始一个goroutine来发送一个新的数字</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; cs &lt;- <span class=\"string\">\"wordy\"</span> &#125;() <span class=\"comment\">// 发送给cs</span></div><div class=\"line\">    <span class=\"comment\">// Select类似于switch，但是每个case包括一个channel操作。</span></div><div class=\"line\">    <span class=\"comment\">// 它随机选择一个准备好通讯的case。</span></div><div class=\"line\">    <span class=\"keyword\">select</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> i := &lt;-c: <span class=\"comment\">// 从channel接收的值可以赋给其他变量</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"这是……\"</span>, i)</div><div class=\"line\">    <span class=\"keyword\">case</span> &lt;-cs: <span class=\"comment\">// 或者直接丢弃</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"这是个字符串！\"</span>)</div><div class=\"line\">    <span class=\"keyword\">case</span> &lt;-cc: <span class=\"comment\">// 空的，还没作好通讯的准备</span></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"别瞎想\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">// 上面c或者cs的值被取到，其中一个goroutine结束，另外一个一直阻塞。</span></div><div class=\"line\"></div><div class=\"line\">    learnWebProgramming() <span class=\"comment\">// Go很适合web编程，我知道你也想学！</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// http包中的一个简单的函数就可以开启web服务器。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">learnWebProgramming</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// ListenAndServe第一个参数指定了监听端口，第二个参数是一个接口，特定是http.Handler。</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\terr := http.ListenAndServe(<span class=\"string\">\":8080\"</span>, pair&#123;&#125;)</div><div class=\"line\">\tfmt.Println(err) <span class=\"comment\">// 不要无视错误。</span></div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    requestServer()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使pair实现http.Handler接口的ServeHTTP方法。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p pair)</span> <span class=\"title\">ServeHTTP</span><span class=\"params\">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用http.ResponseWriter返回数据</span></div><div class=\"line\">    w.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"Y分钟golang速成!\"</span>))</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">requestServer</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    resp, err := http.Get(<span class=\"string\">\"http://localhost:8080\"</span>)</div><div class=\"line\">    fmt.Println(err)</div><div class=\"line\">    <span class=\"keyword\">defer</span> resp.Body.Close()</div><div class=\"line\">    body, err := ioutil.ReadAll(resp.Body)</div><div class=\"line\">    fmt.Printf(<span class=\"string\">\"\\n服务器消息： `%s`\"</span>, <span class=\"keyword\">string</span>(body))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>相信有编程基础的同学很容易就能看懂</p>\n</blockquote>\n<h3 id=\"继续学习\"><a href=\"#继续学习\" class=\"headerlink\" title=\"继续学习\"></a>继续学习</h3><p>关于Go的一切你都可以在<a href=\"http://golang.org/\" target=\"_blank\" rel=\"external\">Go官方网站</a>找到(需要翻墙)。 在那里你可以获得教程参考，在线试用，和更多的资料。 在简单的尝试过后，<a href=\"https://golang.org/doc/\" target=\"_blank\" rel=\"external\">在官方文档(同样需要翻墙)</a>那里你会得到你所需要的所有资料、关于编写代码的规范、库和命令行工具的文档与Go的版本历史。</p>\n<p>学习Go还要阅读<a href=\"https://play.golang.org/p/tnWMjr16Mm\" target=\"_blank\" rel=\"external\">Go标准库的源代码</a>，全部文档化了，可读性非常好，可以学到go，go style和go idioms。在文档中点击函数名，源代码就出来了！</p>\n<p><a href=\"https://gobyexample.com/\" target=\"_blank\" rel=\"external\">Go by example同样可以学习go</a><br><a href=\"https://learnxinyminutes.com/docs/zh-cn/go-cn/\" target=\"_blank\" rel=\"external\">原文</a><br><a href=\"http://angely.me/2017/10/20/golang%E7%BC%96%E8%BE%91%E5%99%A8emacs/\">配置emacs编写golang环境以及gocode补全go</a></p>\n"},{"layout":"post","title":"Golang中defer, panic, recover","date":"2017-10-30T03:41:52.000Z","_content":"\n刚入门`golang` 对一些关键是上面的理解还不是很好,  所以就除了看官网还是找前人理解的看法\n\n## defer\n\ndefer 英文原意： vi. 推迟；延期；服从   vt. 使推迟；使延期。\n\nGolang中的defer关键字实现比较特殊的功能，按照官方的解释，defer后面的表达式会被放入一个列表中，在当前方法`return`的时候，列表中的表达式就会被执行。一个方法中可以在一个或者多个地方使用defer表达式，这也是前面提到的，为什么需要用一个列表来保存这些表达式。在Golang中，defer表达式通常用来处理一些清理和释放资源的操作。\n\n貌似看起来比较难懂，其实，如果你用过C#，一定记得那个用起来非常方便的using语句，defer可以理解成为了实现类似的功能。不过比起C#的using语句，defer的行为稍微复杂一些，想要彻底理解defer，需要了解Golang中defer相关的一些特性。\n\n通过简单的例子, 我们就可以大致的了解`defer`的用法:\n\n```golang\n/*\n *  拷贝文件内容功能的函数\n *  srcName文件的内容拷贝到dstName文件中\n *  返回一个int和一个err\n*/\nfunc CopyFile( dstName, srcName string ) (written int64, err error) {\n    src, err := os.Open(srcName)\n    if err != nil {\n        return\n    }\n    dst, err := os.Create(dstName)\n    if err != nil {\n        return\n    }\n    written, err = io.Copy(dst, src)\n    dst.Close()\n    src.Close()\n    return\n}\n```\n\n上面例子中看似没什么问题,  不过`Golang`中的资源需要释放, 假如`os.Create`方法的调用出现了错误,  下面的语句就直接return, 导致这两个打开的文件没有机会被释放, 这个时候, `defer`就派上用场了.\n\n```golang\n/**\n * 这个是使用defer改进后的例子\n**/\nfunc CopyFile(dstName, srcName string) (written int64, err error) {\n    src, err := os.Open(srcName)\n    if err != nil {\n        return\n    }\n    defer src.Close() // 使用defer src文件被释放再调用\n    dst, err := os.Create(dstName)\n    if err != nil {\n        return\n    }\n    defer dst.Close() // 使用defer src文件被释放再调用\n    return io.Copy(dst, src)\n}\n```\n\n改进的代码中两处都使用了`defer`表达式, 表达式的内容就是关闭文件, 前面介绍过, 虽然表达式的具体行为是关闭文件,  但是并不会被马上执行, 两个表达式都会被放入一个list中, 等待被调用, 先卖个关子，这个list可以看作是一个栈(stack)的结构，是一个后进先出的栈。\n\n知道`defer`的基本用法,  我们继续深入了解一下`defer`的一些特性\n\n- ##`defer`##表达式中的变量值再defer表达式被定义是就已经明确\n\n```golang\nfunc a() {\n    i := 0\n    defer fmt.PrintIn(i)\n    i++\n    return\n}\n```\n\n上面的这段代码，defer表达式中用到了i这个变量，i在初始化之后的值为0，接着程序执行到defer表达式这一行，表达式所用到的i的值就为0了，接着，表达式被放入list，等待在return的时候被调用。所以，后面尽管有一个i++语句，仍然不能改变表达式 fmt.Println(i)的结果。\n\n所以，程序运行结束的时候，输出的结果是0而不是1。\n\n- `defer`表达式的调用顺序是按照先进后出的方式\n\n```golang\nfunc b() {\n    defer fmt.Print(1)\n    defer fmt.Print(2)\n    defer fmt.Print(3)\n    defer fmt.Print(4)\n}\n```\n\n前面已经提到过，defer表达式会被放入一个类似于栈(stack)的结构，所以调用的顺序是后进先出的。所以，上面这段代码输出的结果是4321而不是1234。在实际的编码中应该主意，程序后面的defer表达式会被优先执行。\n\n- defer表达式中可以修改函数中的命名返回值\n\nGolang中的函数返回值是可以命名的，这也是Golang带给开发人员的一个比较方便特性。\n```golang\nfunc c() (i int) {\n    defer func() { i++ }()\n    return 1\n}\n```\n\n上面的示例程序，返回值变量名为i，在defer表达式中可以修改这个变量的值。所以，虽然在return的时候给返回值赋值为1，后来defer修改了这个值，让i自增了1，所以，函数的返回值是2而不是1。\n\n理解了defer的三个特性，用到defer的时候就能心中有数了。\n\n## panic\n\n一般配合recover来使用,  但是不推荐使用这个方法来对异常处理,  因为标准库和第三方库基本都会把`err`return出去,  然后供给开发者做处理\n\ngolang中没有`try catch`这样想弱类型语言的错误处理方式是不能用的,而是使用`panic`和`recover`来处理异常,这也和他的语言设计场景有关系,  毕竟是系统级的高性能层面的, 这种精准错误处理应该减少那种后遗症bug。\n\npanic 英文原意：n. 恐慌，惊慌；大恐慌  adj. 恐慌的；没有理由的  vt. 使恐慌  vi. 十分惊慌\n\npanic 是一个内置函数，当一个函数 F 调用 panic，F 的执行就会停止，F 中 deferred 函数调用会被执行，然后 F 返回控制到它的调用者。这个过程会沿着调用栈执行下去，直到当前 goroutine 中的所有函数返回，然后程序 crash。出现 panic 是因为：\n\n调用了 panic 函数\n出现了运行时错误（例如，数组越界访问）\nrecover 是一个内置函数，用于恢复一个 panicking goroutine 的控制。需要注意的是，recover 只能使用在 deferred 函数中。如果当前的 goroutine panicking，recover 调用将会捕获 panic 传递的值并且恢复正常的执行。看一个例子：\n\n```golang\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  f() // 入口函数中调用f函数\n  fmt.Println(\"Returned normally from f.\")\n}\n\nfunc f() {\n  defer func() {  // defer表达式的自调用匿名函数\n    if r := recover(); r != nil {\n      fmt.Println(\"Recovered in f\", r)\n    }\n  }()\n  fmt.Println(\"Calling g.\")\n  g(0)\n  fmt.Println(\"Returned normally from g.\")\n}\n\nfunc g(i int) {\n  if i > 3 {\n    fmt.Println(\"Panicking!\")\n    panic(fmt.Sprintf(\"%v\", i))\n  }\n  defer fmt.Println(\"Defer in g\", i)\n  fmt.Println(\"Printing in g\", i)\n  g(i + 1)\n}\n```\n","source":"_posts/Golang中defer的关键字.md","raw":"---\nlayout: post\ntitle: Golang中defer, panic, recover\ndate: 2017-10-30 11:41:52\ntags:\n    - golang\n    - defer\n    - golang错误处理\ncategories: \"算法\"\n---\n\n刚入门`golang` 对一些关键是上面的理解还不是很好,  所以就除了看官网还是找前人理解的看法\n\n## defer\n\ndefer 英文原意： vi. 推迟；延期；服从   vt. 使推迟；使延期。\n\nGolang中的defer关键字实现比较特殊的功能，按照官方的解释，defer后面的表达式会被放入一个列表中，在当前方法`return`的时候，列表中的表达式就会被执行。一个方法中可以在一个或者多个地方使用defer表达式，这也是前面提到的，为什么需要用一个列表来保存这些表达式。在Golang中，defer表达式通常用来处理一些清理和释放资源的操作。\n\n貌似看起来比较难懂，其实，如果你用过C#，一定记得那个用起来非常方便的using语句，defer可以理解成为了实现类似的功能。不过比起C#的using语句，defer的行为稍微复杂一些，想要彻底理解defer，需要了解Golang中defer相关的一些特性。\n\n通过简单的例子, 我们就可以大致的了解`defer`的用法:\n\n```golang\n/*\n *  拷贝文件内容功能的函数\n *  srcName文件的内容拷贝到dstName文件中\n *  返回一个int和一个err\n*/\nfunc CopyFile( dstName, srcName string ) (written int64, err error) {\n    src, err := os.Open(srcName)\n    if err != nil {\n        return\n    }\n    dst, err := os.Create(dstName)\n    if err != nil {\n        return\n    }\n    written, err = io.Copy(dst, src)\n    dst.Close()\n    src.Close()\n    return\n}\n```\n\n上面例子中看似没什么问题,  不过`Golang`中的资源需要释放, 假如`os.Create`方法的调用出现了错误,  下面的语句就直接return, 导致这两个打开的文件没有机会被释放, 这个时候, `defer`就派上用场了.\n\n```golang\n/**\n * 这个是使用defer改进后的例子\n**/\nfunc CopyFile(dstName, srcName string) (written int64, err error) {\n    src, err := os.Open(srcName)\n    if err != nil {\n        return\n    }\n    defer src.Close() // 使用defer src文件被释放再调用\n    dst, err := os.Create(dstName)\n    if err != nil {\n        return\n    }\n    defer dst.Close() // 使用defer src文件被释放再调用\n    return io.Copy(dst, src)\n}\n```\n\n改进的代码中两处都使用了`defer`表达式, 表达式的内容就是关闭文件, 前面介绍过, 虽然表达式的具体行为是关闭文件,  但是并不会被马上执行, 两个表达式都会被放入一个list中, 等待被调用, 先卖个关子，这个list可以看作是一个栈(stack)的结构，是一个后进先出的栈。\n\n知道`defer`的基本用法,  我们继续深入了解一下`defer`的一些特性\n\n- ##`defer`##表达式中的变量值再defer表达式被定义是就已经明确\n\n```golang\nfunc a() {\n    i := 0\n    defer fmt.PrintIn(i)\n    i++\n    return\n}\n```\n\n上面的这段代码，defer表达式中用到了i这个变量，i在初始化之后的值为0，接着程序执行到defer表达式这一行，表达式所用到的i的值就为0了，接着，表达式被放入list，等待在return的时候被调用。所以，后面尽管有一个i++语句，仍然不能改变表达式 fmt.Println(i)的结果。\n\n所以，程序运行结束的时候，输出的结果是0而不是1。\n\n- `defer`表达式的调用顺序是按照先进后出的方式\n\n```golang\nfunc b() {\n    defer fmt.Print(1)\n    defer fmt.Print(2)\n    defer fmt.Print(3)\n    defer fmt.Print(4)\n}\n```\n\n前面已经提到过，defer表达式会被放入一个类似于栈(stack)的结构，所以调用的顺序是后进先出的。所以，上面这段代码输出的结果是4321而不是1234。在实际的编码中应该主意，程序后面的defer表达式会被优先执行。\n\n- defer表达式中可以修改函数中的命名返回值\n\nGolang中的函数返回值是可以命名的，这也是Golang带给开发人员的一个比较方便特性。\n```golang\nfunc c() (i int) {\n    defer func() { i++ }()\n    return 1\n}\n```\n\n上面的示例程序，返回值变量名为i，在defer表达式中可以修改这个变量的值。所以，虽然在return的时候给返回值赋值为1，后来defer修改了这个值，让i自增了1，所以，函数的返回值是2而不是1。\n\n理解了defer的三个特性，用到defer的时候就能心中有数了。\n\n## panic\n\n一般配合recover来使用,  但是不推荐使用这个方法来对异常处理,  因为标准库和第三方库基本都会把`err`return出去,  然后供给开发者做处理\n\ngolang中没有`try catch`这样想弱类型语言的错误处理方式是不能用的,而是使用`panic`和`recover`来处理异常,这也和他的语言设计场景有关系,  毕竟是系统级的高性能层面的, 这种精准错误处理应该减少那种后遗症bug。\n\npanic 英文原意：n. 恐慌，惊慌；大恐慌  adj. 恐慌的；没有理由的  vt. 使恐慌  vi. 十分惊慌\n\npanic 是一个内置函数，当一个函数 F 调用 panic，F 的执行就会停止，F 中 deferred 函数调用会被执行，然后 F 返回控制到它的调用者。这个过程会沿着调用栈执行下去，直到当前 goroutine 中的所有函数返回，然后程序 crash。出现 panic 是因为：\n\n调用了 panic 函数\n出现了运行时错误（例如，数组越界访问）\nrecover 是一个内置函数，用于恢复一个 panicking goroutine 的控制。需要注意的是，recover 只能使用在 deferred 函数中。如果当前的 goroutine panicking，recover 调用将会捕获 panic 传递的值并且恢复正常的执行。看一个例子：\n\n```golang\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  f() // 入口函数中调用f函数\n  fmt.Println(\"Returned normally from f.\")\n}\n\nfunc f() {\n  defer func() {  // defer表达式的自调用匿名函数\n    if r := recover(); r != nil {\n      fmt.Println(\"Recovered in f\", r)\n    }\n  }()\n  fmt.Println(\"Calling g.\")\n  g(0)\n  fmt.Println(\"Returned normally from g.\")\n}\n\nfunc g(i int) {\n  if i > 3 {\n    fmt.Println(\"Panicking!\")\n    panic(fmt.Sprintf(\"%v\", i))\n  }\n  defer fmt.Println(\"Defer in g\", i)\n  fmt.Println(\"Printing in g\", i)\n  g(i + 1)\n}\n```\n","slug":"Golang中defer的关键字","published":1,"updated":"2019-05-13T03:56:03.225Z","comments":1,"photos":[],"link":"","_id":"cjvluebbo0002a0dmuev8jlr5","content":"<p>刚入门<code>golang</code> 对一些关键是上面的理解还不是很好,  所以就除了看官网还是找前人理解的看法</p>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p>defer 英文原意： vi. 推迟；延期；服从   vt. 使推迟；使延期。</p>\n<p>Golang中的defer关键字实现比较特殊的功能，按照官方的解释，defer后面的表达式会被放入一个列表中，在当前方法<code>return</code>的时候，列表中的表达式就会被执行。一个方法中可以在一个或者多个地方使用defer表达式，这也是前面提到的，为什么需要用一个列表来保存这些表达式。在Golang中，defer表达式通常用来处理一些清理和释放资源的操作。</p>\n<p>貌似看起来比较难懂，其实，如果你用过C#，一定记得那个用起来非常方便的using语句，defer可以理解成为了实现类似的功能。不过比起C#的using语句，defer的行为稍微复杂一些，想要彻底理解defer，需要了解Golang中defer相关的一些特性。</p>\n<p>通过简单的例子, 我们就可以大致的了解<code>defer</code>的用法:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *  拷贝文件内容功能的函数</div><div class=\"line\"> *  srcName文件的内容拷贝到dstName文件中</div><div class=\"line\"> *  返回一个int和一个err</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyFile</span><span class=\"params\">( dstName, srcName <span class=\"keyword\">string</span> )</span> <span class=\"params\">(written <span class=\"keyword\">int64</span>, err error)</span></span> &#123;</div><div class=\"line\">    src, err := os.Open(srcName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    dst, err := os.Create(dstName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    written, err = io.Copy(dst, src)</div><div class=\"line\">    dst.Close()</div><div class=\"line\">    src.Close()</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面例子中看似没什么问题,  不过<code>Golang</code>中的资源需要释放, 假如<code>os.Create</code>方法的调用出现了错误,  下面的语句就直接return, 导致这两个打开的文件没有机会被释放, 这个时候, <code>defer</code>就派上用场了.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这个是使用defer改进后的例子</div><div class=\"line\">**/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyFile</span><span class=\"params\">(dstName, srcName <span class=\"keyword\">string</span>)</span> <span class=\"params\">(written <span class=\"keyword\">int64</span>, err error)</span></span> &#123;</div><div class=\"line\">    src, err := os.Open(srcName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">defer</span> src.Close() <span class=\"comment\">// 使用defer src文件被释放再调用</span></div><div class=\"line\">    dst, err := os.Create(dstName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">defer</span> dst.Close() <span class=\"comment\">// 使用defer src文件被释放再调用</span></div><div class=\"line\">    <span class=\"keyword\">return</span> io.Copy(dst, src)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>改进的代码中两处都使用了<code>defer</code>表达式, 表达式的内容就是关闭文件, 前面介绍过, 虽然表达式的具体行为是关闭文件,  但是并不会被马上执行, 两个表达式都会被放入一个list中, 等待被调用, 先卖个关子，这个list可以看作是一个栈(stack)的结构，是一个后进先出的栈。</p>\n<p>知道<code>defer</code>的基本用法,  我们继续深入了解一下<code>defer</code>的一些特性</p>\n<ul>\n<li>##<code>defer</code>##表达式中的变量值再defer表达式被定义是就已经明确</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    i := <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.PrintIn(i)</div><div class=\"line\">    i++</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的这段代码，defer表达式中用到了i这个变量，i在初始化之后的值为0，接着程序执行到defer表达式这一行，表达式所用到的i的值就为0了，接着，表达式被放入list，等待在return的时候被调用。所以，后面尽管有一个i++语句，仍然不能改变表达式 fmt.Println(i)的结果。</p>\n<p>所以，程序运行结束的时候，输出的结果是0而不是1。</p>\n<ul>\n<li><code>defer</code>表达式的调用顺序是按照先进后出的方式</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">4</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>前面已经提到过，defer表达式会被放入一个类似于栈(stack)的结构，所以调用的顺序是后进先出的。所以，上面这段代码输出的结果是4321而不是1234。在实际的编码中应该主意，程序后面的defer表达式会被优先执行。</p>\n<ul>\n<li>defer表达式中可以修改函数中的命名返回值</li>\n</ul>\n<p>Golang中的函数返回值是可以命名的，这也是Golang带给开发人员的一个比较方便特性。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">c</span><span class=\"params\">()</span> <span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; i++ &#125;()</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的示例程序，返回值变量名为i，在defer表达式中可以修改这个变量的值。所以，虽然在return的时候给返回值赋值为1，后来defer修改了这个值，让i自增了1，所以，函数的返回值是2而不是1。</p>\n<p>理解了defer的三个特性，用到defer的时候就能心中有数了。</p>\n<h2 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h2><p>一般配合recover来使用,  但是不推荐使用这个方法来对异常处理,  因为标准库和第三方库基本都会把<code>err</code>return出去,  然后供给开发者做处理</p>\n<p>golang中没有<code>try catch</code>这样想弱类型语言的错误处理方式是不能用的,而是使用<code>panic</code>和<code>recover</code>来处理异常,这也和他的语言设计场景有关系,  毕竟是系统级的高性能层面的, 这种精准错误处理应该减少那种后遗症bug。</p>\n<p>panic 英文原意：n. 恐慌，惊慌；大恐慌  adj. 恐慌的；没有理由的  vt. 使恐慌  vi. 十分惊慌</p>\n<p>panic 是一个内置函数，当一个函数 F 调用 panic，F 的执行就会停止，F 中 deferred 函数调用会被执行，然后 F 返回控制到它的调用者。这个过程会沿着调用栈执行下去，直到当前 goroutine 中的所有函数返回，然后程序 crash。出现 panic 是因为：</p>\n<p>调用了 panic 函数<br>出现了运行时错误（例如，数组越界访问）<br>recover 是一个内置函数，用于恢复一个 panicking goroutine 的控制。需要注意的是，recover 只能使用在 deferred 函数中。如果当前的 goroutine panicking，recover 调用将会捕获 panic 传递的值并且恢复正常的执行。看一个例子：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  f() <span class=\"comment\">// 入口函数中调用f函数</span></div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Returned normally from f.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;  <span class=\"comment\">// defer表达式的自调用匿名函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> r := <span class=\"built_in\">recover</span>(); r != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">      fmt.Println(<span class=\"string\">\"Recovered in f\"</span>, r)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;()</div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Calling g.\"</span>)</div><div class=\"line\">  g(<span class=\"number\">0</span>)</div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Returned normally from g.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">g</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> i &gt; <span class=\"number\">3</span> &#123;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"Panicking!\"</span>)</div><div class=\"line\">    <span class=\"built_in\">panic</span>(fmt.Sprintf(<span class=\"string\">\"%v\"</span>, i))</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"Defer in g\"</span>, i)</div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Printing in g\"</span>, i)</div><div class=\"line\">  g(i + <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>刚入门<code>golang</code> 对一些关键是上面的理解还不是很好,  所以就除了看官网还是找前人理解的看法</p>\n<h2 id=\"defer\"><a href=\"#defer\" class=\"headerlink\" title=\"defer\"></a>defer</h2><p>defer 英文原意： vi. 推迟；延期；服从   vt. 使推迟；使延期。</p>\n<p>Golang中的defer关键字实现比较特殊的功能，按照官方的解释，defer后面的表达式会被放入一个列表中，在当前方法<code>return</code>的时候，列表中的表达式就会被执行。一个方法中可以在一个或者多个地方使用defer表达式，这也是前面提到的，为什么需要用一个列表来保存这些表达式。在Golang中，defer表达式通常用来处理一些清理和释放资源的操作。</p>\n<p>貌似看起来比较难懂，其实，如果你用过C#，一定记得那个用起来非常方便的using语句，defer可以理解成为了实现类似的功能。不过比起C#的using语句，defer的行为稍微复杂一些，想要彻底理解defer，需要了解Golang中defer相关的一些特性。</p>\n<p>通过简单的例子, 我们就可以大致的了解<code>defer</code>的用法:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> *  拷贝文件内容功能的函数</div><div class=\"line\"> *  srcName文件的内容拷贝到dstName文件中</div><div class=\"line\"> *  返回一个int和一个err</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyFile</span><span class=\"params\">( dstName, srcName <span class=\"keyword\">string</span> )</span> <span class=\"params\">(written <span class=\"keyword\">int64</span>, err error)</span></span> &#123;</div><div class=\"line\">    src, err := os.Open(srcName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    dst, err := os.Create(dstName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    written, err = io.Copy(dst, src)</div><div class=\"line\">    dst.Close()</div><div class=\"line\">    src.Close()</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面例子中看似没什么问题,  不过<code>Golang</code>中的资源需要释放, 假如<code>os.Create</code>方法的调用出现了错误,  下面的语句就直接return, 导致这两个打开的文件没有机会被释放, 这个时候, <code>defer</code>就派上用场了.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这个是使用defer改进后的例子</div><div class=\"line\">**/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CopyFile</span><span class=\"params\">(dstName, srcName <span class=\"keyword\">string</span>)</span> <span class=\"params\">(written <span class=\"keyword\">int64</span>, err error)</span></span> &#123;</div><div class=\"line\">    src, err := os.Open(srcName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">defer</span> src.Close() <span class=\"comment\">// 使用defer src文件被释放再调用</span></div><div class=\"line\">    dst, err := os.Create(dstName)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">defer</span> dst.Close() <span class=\"comment\">// 使用defer src文件被释放再调用</span></div><div class=\"line\">    <span class=\"keyword\">return</span> io.Copy(dst, src)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>改进的代码中两处都使用了<code>defer</code>表达式, 表达式的内容就是关闭文件, 前面介绍过, 虽然表达式的具体行为是关闭文件,  但是并不会被马上执行, 两个表达式都会被放入一个list中, 等待被调用, 先卖个关子，这个list可以看作是一个栈(stack)的结构，是一个后进先出的栈。</p>\n<p>知道<code>defer</code>的基本用法,  我们继续深入了解一下<code>defer</code>的一些特性</p>\n<ul>\n<li>##<code>defer</code>##表达式中的变量值再defer表达式被定义是就已经明确</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">a</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    i := <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.PrintIn(i)</div><div class=\"line\">    i++</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的这段代码，defer表达式中用到了i这个变量，i在初始化之后的值为0，接着程序执行到defer表达式这一行，表达式所用到的i的值就为0了，接着，表达式被放入list，等待在return的时候被调用。所以，后面尽管有一个i++语句，仍然不能改变表达式 fmt.Println(i)的结果。</p>\n<p>所以，程序运行结束的时候，输出的结果是0而不是1。</p>\n<ul>\n<li><code>defer</code>表达式的调用顺序是按照先进后出的方式</li>\n</ul>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">b</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">1</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">2</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">3</span>)</div><div class=\"line\">    <span class=\"keyword\">defer</span> fmt.Print(<span class=\"number\">4</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>前面已经提到过，defer表达式会被放入一个类似于栈(stack)的结构，所以调用的顺序是后进先出的。所以，上面这段代码输出的结果是4321而不是1234。在实际的编码中应该主意，程序后面的defer表达式会被优先执行。</p>\n<ul>\n<li>defer表达式中可以修改函数中的命名返回值</li>\n</ul>\n<p>Golang中的函数返回值是可以命名的，这也是Golang带给开发人员的一个比较方便特性。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">c</span><span class=\"params\">()</span> <span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; i++ &#125;()</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面的示例程序，返回值变量名为i，在defer表达式中可以修改这个变量的值。所以，虽然在return的时候给返回值赋值为1，后来defer修改了这个值，让i自增了1，所以，函数的返回值是2而不是1。</p>\n<p>理解了defer的三个特性，用到defer的时候就能心中有数了。</p>\n<h2 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h2><p>一般配合recover来使用,  但是不推荐使用这个方法来对异常处理,  因为标准库和第三方库基本都会把<code>err</code>return出去,  然后供给开发者做处理</p>\n<p>golang中没有<code>try catch</code>这样想弱类型语言的错误处理方式是不能用的,而是使用<code>panic</code>和<code>recover</code>来处理异常,这也和他的语言设计场景有关系,  毕竟是系统级的高性能层面的, 这种精准错误处理应该减少那种后遗症bug。</p>\n<p>panic 英文原意：n. 恐慌，惊慌；大恐慌  adj. 恐慌的；没有理由的  vt. 使恐慌  vi. 十分惊慌</p>\n<p>panic 是一个内置函数，当一个函数 F 调用 panic，F 的执行就会停止，F 中 deferred 函数调用会被执行，然后 F 返回控制到它的调用者。这个过程会沿着调用栈执行下去，直到当前 goroutine 中的所有函数返回，然后程序 crash。出现 panic 是因为：</p>\n<p>调用了 panic 函数<br>出现了运行时错误（例如，数组越界访问）<br>recover 是一个内置函数，用于恢复一个 panicking goroutine 的控制。需要注意的是，recover 只能使用在 deferred 函数中。如果当前的 goroutine panicking，recover 调用将会捕获 panic 传递的值并且恢复正常的执行。看一个例子：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  f() <span class=\"comment\">// 入口函数中调用f函数</span></div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Returned normally from f.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;  <span class=\"comment\">// defer表达式的自调用匿名函数</span></div><div class=\"line\">    <span class=\"keyword\">if</span> r := <span class=\"built_in\">recover</span>(); r != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">      fmt.Println(<span class=\"string\">\"Recovered in f\"</span>, r)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;()</div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Calling g.\"</span>)</div><div class=\"line\">  g(<span class=\"number\">0</span>)</div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Returned normally from g.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">g</span><span class=\"params\">(i <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> i &gt; <span class=\"number\">3</span> &#123;</div><div class=\"line\">    fmt.Println(<span class=\"string\">\"Panicking!\"</span>)</div><div class=\"line\">    <span class=\"built_in\">panic</span>(fmt.Sprintf(<span class=\"string\">\"%v\"</span>, i))</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">\"Defer in g\"</span>, i)</div><div class=\"line\">  fmt.Println(<span class=\"string\">\"Printing in g\"</span>, i)</div><div class=\"line\">  g(i + <span class=\"number\">1</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"Immutable.js意义以及使用场所","date":"2017-06-15T09:19:56.000Z","_content":"\n### [学习资料地址](https://juejin.im/post/5948985ea0bb9f006bed7472)\n\n    Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n\n<!-- more -->\n\n安装: `npm install immutable`\n\n{% asset_img immuable.gif Immuable  %}\n\n```\nlet foo = {a: {b: 1}};\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b);  // 打印 2\nconsole.log(foo === bar);  //  打印 true\n\n// 使用 immutable.js 后\nimport Immutable from 'immutable';\nfoo = Immutable.fromJS({a: {b: 1}});\nbar = foo.setIn(['a', 'b'], 2);   // 使用 setIn 赋值\nconsole.log(foo.getIn(['a', 'b']));  // 使用 getIn 取值，打印 1\n\nconsole.log(foo === bar);  //  打印 false\n```\n\n先放上官方`README`要解决的  (共享的可变状态是万恶之源)\n\n上面的例子中已经看出来了, , , 着不是react设计初衷,\n\n## Immutable 优点\n\n1. Immutable 降低了 Mutable 带来的复杂度\n\n\t> 可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯\n\n2. 节省内存\n\n\t> Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。\n\n```\nimport { Map} from 'immutable';\nlet a = Map({\n  select: 'users',\n  filter: Map({ name: 'Cam' })\n})\nlet b = a.set('select', 'people');\n\na === b; // false\n\na.get('filter') === b.get('filter'); // true\n\n```\n\n3. Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟\n\n    因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。\n\n4. 并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？\n\n常用api示例:\n\n```\n//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)\nimmutable.Map({name:'danny', age:18})\n\n//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)\nimmutable.List([1,2,3,4,5])\n\n//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)\nimmutable.fromJS([1,2,3,4,5])    //将原生array  --> List\nimmutable.fromJS({name:'danny', age:18})   //将原生object  --> Map\n\n//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)\nimmutableData.toJS();\n\n//查看List或者map大小\nimmutableData.size  或者 immutableData.count()\n\n// is()   判断两个immutable对象是否相等\nimmutable.is(imA, imB);\n\n//merge()  对象合并\nvar imA = immutable.fromJS({a:1,b:2});\nvar imA = immutable.fromJS({c:3});\nvar imC = imA.merge(imB);\nconsole.log(imC.toJS())  //{a:1,b:2,c:3}\n\n//增删改查（所有操作都会返回新的值，不会修改原来值）\nvar immutableData = immutable.fromJS({\n    a:1,\n    b:2，\n    c:{\n        d:3\n    }\n});\nvar data1 = immutableData.get('a') //  data1 = 1\nvar data2 = immutableData.getIn(['c', 'd']) // data2 = 3   getIn用于深层结构访问\nvar data3 = immutableData.set('a' , 2);   // data3中的 a = 2\nvar data4 = immutableData.setIn(['c', 'd'], 4);   //data4中的 d = 4\nvar data5 = immutableData.update('a',function(x){return x+4})   //data5中的 a = 5\nvar data6 = immutableData.updateIn(['c', 'd'],function(x){return x+4})   //data6中的 d = 7\nvar data7 = immutableData.delete('a')   //data7中的 a 不存在\nvar data8 = immutableData.deleteIn(['c', 'd'])   //data8中的 d 不存在\n\n```\n### 我认为最大的缺点就是容易和原生对象混淆\n\n> 就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动`return`新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换\n\n```\nmap.get('key') // Immuable对象取值\nmay.key  //原生对象取值\n```\n\n### 周边信息\n\n两个 immutable 对象可以使用 `===` 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 `false`：\n\n```\nlet map1 = Immutable.Map({a:1, b:1, c:1});\nlet map2 = Immutable.Map({a:1, b:1, c:1});\nmap1 === map2;             // false\n```\n为了直接比较对象的值，immutable.js 提供了 `Immutable.is` 来做『值比较』，结果如下：\n```\nImmutable.is(map1, map2);  // true\n```\n`Immutable.is` 比较的是两个对象的 `hashCode` 或 `valueOf`（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 `hashCode` 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用 `Immutable.is` 来减少 React 重复渲染，提高性能。\n\n与 Object.freeze、const 区别\n\n`Object.freeze` 和 ES6 中新加入的 `const` 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。\n\nCursor 的概念\n\n这个 Cursor 和数据库中的游标是完全不同的概念。\n\n由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。\n\n```\nimport Immutable from 'immutable';\nimport Cursor from 'immutable/contrib/cursor';\n\nlet data = Immutable.fromJS({ a: { b: { c: 1 } } });\n// 让 cursor 指向 { c: 1 }\nlet cursor = Cursor.from(data, ['a', 'b'], newData => {\n  // 当 cursor 或其子 cursor 执行 update 时调用\n  console.log(newData);\n});\n\ncursor.get('c'); // 1\ncursor = cursor.update('c', x => x + 1);\ncursor.get('c'); // 2\n```\n\n### 实践\n\n1. 与 React 搭配使用，Pure Render\n\n熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 `shouldComponentUpdate()`，但它默认返回 `true`，即始终会执行 `render()` 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在 `shouldComponentUpdate()` 中使用使用 deepCopy 和 deepCompare 来避免无必要的 `render()`，但 deepCopy 和 deepCompare 一般都是非常耗性能的。\n\nImmutable 则提供了简洁高效的判断数据是否变化的方法，只需 `===` 和 `is` 比较就能知道是否需要执行 `render()`，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 `shouldComponentUpdate` 是这样的：\n\n前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是\n\n```\nimport { is } from 'immutable';\n\nshouldComponentUpdate: (nextProps = {}, nextState = {}) => {\n  const thisProps = this.props || {}, thisState = this.state || {};\n\n  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||\n      Object.keys(thisState).length !== Object.keys(nextState).length) {\n    return true;\n  }\n\n  for (const key in nextProps) {\n    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) {\n      return true;\n    }\n  }\n\n  for (const key in nextState) {\n    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n> 使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:\n{% asset_img immuable2.gif 使用后效果图  %}\n你也可以借助 `React.addons.PureRenderMixin` 或支持 class 语法的[pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator]() 来实现。\n\nsetState 的一个技巧\n\nReact 建议把 `this.state` 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：\n```\nimport '_' from 'lodash';\n\nconst Component = React.createClass({\n  getInitialState() {\n    return {\n      data: { times: 0 }\n    }\n  },\n  handleAdd() {\n    let data = _.cloneDeep(this.state.data);\n    data.times = data.times + 1;\n    this.setState({ data: data });\n    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。\n    console.log(this.state.data.times);\n  }\n}\n```\n使用 Immutable 后：\n```javaScript\ngetInitialState() {\n    return {\n      data: Map({ times: 0 })\n    }\n  },\n  handleAdd() {\n    this.setState({ data: this.state.data.update('times', v => v + 1) });\n    // 这时的 times 并不会改变\n    console.log(this.state.data.get('times'));\n  }\n\n```\n上面的 `handleAdd` 可以简写成：\n\n```javaScript\nhandleAdd() {\n    this.setState(({data}) => ({\n      data: data.update('times', v => v + 1) })\n    });\n  }\n```\n\n### 与`Redux`配合使用遇到的坑\n先说下`redux`中的单向数据流（View -> Action -> Middleware -> Reducer）, 项目中使用的redux,\n\n由于redux中内置的`combineReducers`和reducer中的`initialState`都会返回一个原生的Object对象, 所以配合`Imuutable`之后就会和原生Object搭配使用,  开发起来很不爽.\n\n幸运的是,  redux中并不排斥使用Immutable, 可以自己重写`combineReducers`或使用[ redux-immutablejs](https://github.com/indexiatech/redux-immutablejs)来提供支持\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n> [写的很不错,  原文地址](https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender)\n","source":"_posts/Immutable-js意义以及使用场所.md","raw":"---\ntitle: Immutable.js意义以及使用场所\ndate: 2017-06-15 17:19:56\ntags:\n    - react\n    - react-native\n    - immutable\n---\n\n### [学习资料地址](https://juejin.im/post/5948985ea0bb9f006bed7472)\n\n    Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n\n<!-- more -->\n\n安装: `npm install immutable`\n\n{% asset_img immuable.gif Immuable  %}\n\n```\nlet foo = {a: {b: 1}};\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b);  // 打印 2\nconsole.log(foo === bar);  //  打印 true\n\n// 使用 immutable.js 后\nimport Immutable from 'immutable';\nfoo = Immutable.fromJS({a: {b: 1}});\nbar = foo.setIn(['a', 'b'], 2);   // 使用 setIn 赋值\nconsole.log(foo.getIn(['a', 'b']));  // 使用 getIn 取值，打印 1\n\nconsole.log(foo === bar);  //  打印 false\n```\n\n先放上官方`README`要解决的  (共享的可变状态是万恶之源)\n\n上面的例子中已经看出来了, , , 着不是react设计初衷,\n\n## Immutable 优点\n\n1. Immutable 降低了 Mutable 带来的复杂度\n\n\t> 可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯\n\n2. 节省内存\n\n\t> Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。\n\n```\nimport { Map} from 'immutable';\nlet a = Map({\n  select: 'users',\n  filter: Map({ name: 'Cam' })\n})\nlet b = a.set('select', 'people');\n\na === b; // false\n\na.get('filter') === b.get('filter'); // true\n\n```\n\n3. Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟\n\n    因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。\n\n4. 并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？\n\n常用api示例:\n\n```\n//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)\nimmutable.Map({name:'danny', age:18})\n\n//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)\nimmutable.List([1,2,3,4,5])\n\n//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)\nimmutable.fromJS([1,2,3,4,5])    //将原生array  --> List\nimmutable.fromJS({name:'danny', age:18})   //将原生object  --> Map\n\n//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)\nimmutableData.toJS();\n\n//查看List或者map大小\nimmutableData.size  或者 immutableData.count()\n\n// is()   判断两个immutable对象是否相等\nimmutable.is(imA, imB);\n\n//merge()  对象合并\nvar imA = immutable.fromJS({a:1,b:2});\nvar imA = immutable.fromJS({c:3});\nvar imC = imA.merge(imB);\nconsole.log(imC.toJS())  //{a:1,b:2,c:3}\n\n//增删改查（所有操作都会返回新的值，不会修改原来值）\nvar immutableData = immutable.fromJS({\n    a:1,\n    b:2，\n    c:{\n        d:3\n    }\n});\nvar data1 = immutableData.get('a') //  data1 = 1\nvar data2 = immutableData.getIn(['c', 'd']) // data2 = 3   getIn用于深层结构访问\nvar data3 = immutableData.set('a' , 2);   // data3中的 a = 2\nvar data4 = immutableData.setIn(['c', 'd'], 4);   //data4中的 d = 4\nvar data5 = immutableData.update('a',function(x){return x+4})   //data5中的 a = 5\nvar data6 = immutableData.updateIn(['c', 'd'],function(x){return x+4})   //data6中的 d = 7\nvar data7 = immutableData.delete('a')   //data7中的 a 不存在\nvar data8 = immutableData.deleteIn(['c', 'd'])   //data8中的 d 不存在\n\n```\n### 我认为最大的缺点就是容易和原生对象混淆\n\n> 就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动`return`新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换\n\n```\nmap.get('key') // Immuable对象取值\nmay.key  //原生对象取值\n```\n\n### 周边信息\n\n两个 immutable 对象可以使用 `===` 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 `false`：\n\n```\nlet map1 = Immutable.Map({a:1, b:1, c:1});\nlet map2 = Immutable.Map({a:1, b:1, c:1});\nmap1 === map2;             // false\n```\n为了直接比较对象的值，immutable.js 提供了 `Immutable.is` 来做『值比较』，结果如下：\n```\nImmutable.is(map1, map2);  // true\n```\n`Immutable.is` 比较的是两个对象的 `hashCode` 或 `valueOf`（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 `hashCode` 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用 `Immutable.is` 来减少 React 重复渲染，提高性能。\n\n与 Object.freeze、const 区别\n\n`Object.freeze` 和 ES6 中新加入的 `const` 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。\n\nCursor 的概念\n\n这个 Cursor 和数据库中的游标是完全不同的概念。\n\n由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。\n\n```\nimport Immutable from 'immutable';\nimport Cursor from 'immutable/contrib/cursor';\n\nlet data = Immutable.fromJS({ a: { b: { c: 1 } } });\n// 让 cursor 指向 { c: 1 }\nlet cursor = Cursor.from(data, ['a', 'b'], newData => {\n  // 当 cursor 或其子 cursor 执行 update 时调用\n  console.log(newData);\n});\n\ncursor.get('c'); // 1\ncursor = cursor.update('c', x => x + 1);\ncursor.get('c'); // 2\n```\n\n### 实践\n\n1. 与 React 搭配使用，Pure Render\n\n熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 `shouldComponentUpdate()`，但它默认返回 `true`，即始终会执行 `render()` 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在 `shouldComponentUpdate()` 中使用使用 deepCopy 和 deepCompare 来避免无必要的 `render()`，但 deepCopy 和 deepCompare 一般都是非常耗性能的。\n\nImmutable 则提供了简洁高效的判断数据是否变化的方法，只需 `===` 和 `is` 比较就能知道是否需要执行 `render()`，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 `shouldComponentUpdate` 是这样的：\n\n前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是\n\n```\nimport { is } from 'immutable';\n\nshouldComponentUpdate: (nextProps = {}, nextState = {}) => {\n  const thisProps = this.props || {}, thisState = this.state || {};\n\n  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||\n      Object.keys(thisState).length !== Object.keys(nextState).length) {\n    return true;\n  }\n\n  for (const key in nextProps) {\n    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) {\n      return true;\n    }\n  }\n\n  for (const key in nextState) {\n    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n> 使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:\n{% asset_img immuable2.gif 使用后效果图  %}\n你也可以借助 `React.addons.PureRenderMixin` 或支持 class 语法的[pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator]() 来实现。\n\nsetState 的一个技巧\n\nReact 建议把 `this.state` 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：\n```\nimport '_' from 'lodash';\n\nconst Component = React.createClass({\n  getInitialState() {\n    return {\n      data: { times: 0 }\n    }\n  },\n  handleAdd() {\n    let data = _.cloneDeep(this.state.data);\n    data.times = data.times + 1;\n    this.setState({ data: data });\n    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。\n    console.log(this.state.data.times);\n  }\n}\n```\n使用 Immutable 后：\n```javaScript\ngetInitialState() {\n    return {\n      data: Map({ times: 0 })\n    }\n  },\n  handleAdd() {\n    this.setState({ data: this.state.data.update('times', v => v + 1) });\n    // 这时的 times 并不会改变\n    console.log(this.state.data.get('times'));\n  }\n\n```\n上面的 `handleAdd` 可以简写成：\n\n```javaScript\nhandleAdd() {\n    this.setState(({data}) => ({\n      data: data.update('times', v => v + 1) })\n    });\n  }\n```\n\n### 与`Redux`配合使用遇到的坑\n先说下`redux`中的单向数据流（View -> Action -> Middleware -> Reducer）, 项目中使用的redux,\n\n由于redux中内置的`combineReducers`和reducer中的`initialState`都会返回一个原生的Object对象, 所以配合`Imuutable`之后就会和原生Object搭配使用,  开发起来很不爽.\n\n幸运的是,  redux中并不排斥使用Immutable, 可以自己重写`combineReducers`或使用[ redux-immutablejs](https://github.com/indexiatech/redux-immutablejs)来提供支持\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n> [写的很不错,  原文地址](https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender)\n","slug":"Immutable-js意义以及使用场所","published":1,"updated":"2019-05-13T03:56:03.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebbv0006a0dmt198urlw","content":"<h3 id=\"学习资料地址\"><a href=\"#学习资料地址\" class=\"headerlink\" title=\"学习资料地址\"></a><a href=\"https://juejin.im/post/5948985ea0bb9f006bed7472\" target=\"_blank\" rel=\"external\">学习资料地址</a></h3><pre><code>Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n</code></pre><a id=\"more\"></a>\n<p>安装: <code>npm install immutable</code></p>\n<img src=\"/2017/06/15/Immutable-js意义以及使用场所/immuable.gif\" alt=\"Immuable\" title=\"Immuable\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">let foo = &#123;a: &#123;b: 1&#125;&#125;;</div><div class=\"line\">let bar = foo;</div><div class=\"line\">bar.a.b = 2;</div><div class=\"line\">console.log(foo.a.b);  // 打印 2</div><div class=\"line\">console.log(foo === bar);  //  打印 true</div><div class=\"line\"></div><div class=\"line\">// 使用 immutable.js 后</div><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">foo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);</div><div class=\"line\">bar = foo.setIn([&apos;a&apos;, &apos;b&apos;], 2);   // 使用 setIn 赋值</div><div class=\"line\">console.log(foo.getIn([&apos;a&apos;, &apos;b&apos;]));  // 使用 getIn 取值，打印 1</div><div class=\"line\"></div><div class=\"line\">console.log(foo === bar);  //  打印 false</div></pre></td></tr></table></figure>\n<p>先放上官方<code>README</code>要解决的  (共享的可变状态是万恶之源)</p>\n<p>上面的例子中已经看出来了, , , 着不是react设计初衷,</p>\n<h2 id=\"Immutable-优点\"><a href=\"#Immutable-优点\" class=\"headerlink\" title=\"Immutable 优点\"></a>Immutable 优点</h2><ol>\n<li><p>Immutable 降低了 Mutable 带来的复杂度</p>\n<blockquote>\n<p>可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯</p>\n</blockquote>\n</li>\n<li><p>节省内存</p>\n<blockquote>\n<p>Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Map&#125; from &apos;immutable&apos;;</div><div class=\"line\">let a = Map(&#123;</div><div class=\"line\">  select: &apos;users&apos;,</div><div class=\"line\">  filter: Map(&#123; name: &apos;Cam&apos; &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">let b = a.set(&apos;select&apos;, &apos;people&apos;);</div><div class=\"line\"></div><div class=\"line\">a === b; // false</div><div class=\"line\"></div><div class=\"line\">a.get(&apos;filter&apos;) === b.get(&apos;filter&apos;); // true</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</p>\n<p> 因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。</p>\n</li>\n<li><p>并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？</p>\n<p>常用api示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.Map(&#123;name:&apos;danny&apos;, age:18&#125;)</div><div class=\"line\"></div><div class=\"line\">//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.List([1,2,3,4,5])</div><div class=\"line\"></div><div class=\"line\">//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)</div><div class=\"line\">immutable.fromJS([1,2,3,4,5])    //将原生array  --&gt; List</div><div class=\"line\">immutable.fromJS(&#123;name:&apos;danny&apos;, age:18&#125;)   //将原生object  --&gt; Map</div><div class=\"line\"></div><div class=\"line\">//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)</div><div class=\"line\">immutableData.toJS();</div><div class=\"line\"></div><div class=\"line\">//查看List或者map大小</div><div class=\"line\">immutableData.size  或者 immutableData.count()</div><div class=\"line\"></div><div class=\"line\">// is()   判断两个immutable对象是否相等</div><div class=\"line\">immutable.is(imA, imB);</div><div class=\"line\"></div><div class=\"line\">//merge()  对象合并</div><div class=\"line\">var imA = immutable.fromJS(&#123;a:1,b:2&#125;);</div><div class=\"line\">var imA = immutable.fromJS(&#123;c:3&#125;);</div><div class=\"line\">var imC = imA.merge(imB);</div><div class=\"line\">console.log(imC.toJS())  //&#123;a:1,b:2,c:3&#125;</div><div class=\"line\"></div><div class=\"line\">//增删改查（所有操作都会返回新的值，不会修改原来值）</div><div class=\"line\">var immutableData = immutable.fromJS(&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2，</div><div class=\"line\">    c:&#123;</div><div class=\"line\">        d:3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">var data1 = immutableData.get(&apos;a&apos;) //  data1 = 1</div><div class=\"line\">var data2 = immutableData.getIn([&apos;c&apos;, &apos;d&apos;]) // data2 = 3   getIn用于深层结构访问</div><div class=\"line\">var data3 = immutableData.set(&apos;a&apos; , 2);   // data3中的 a = 2</div><div class=\"line\">var data4 = immutableData.setIn([&apos;c&apos;, &apos;d&apos;], 4);   //data4中的 d = 4</div><div class=\"line\">var data5 = immutableData.update(&apos;a&apos;,function(x)&#123;return x+4&#125;)   //data5中的 a = 5</div><div class=\"line\">var data6 = immutableData.updateIn([&apos;c&apos;, &apos;d&apos;],function(x)&#123;return x+4&#125;)   //data6中的 d = 7</div><div class=\"line\">var data7 = immutableData.delete(&apos;a&apos;)   //data7中的 a 不存在</div><div class=\"line\">var data8 = immutableData.deleteIn([&apos;c&apos;, &apos;d&apos;])   //data8中的 d 不存在</div></pre></td></tr></table></figure>\n<h3 id=\"我认为最大的缺点就是容易和原生对象混淆\"><a href=\"#我认为最大的缺点就是容易和原生对象混淆\" class=\"headerlink\" title=\"我认为最大的缺点就是容易和原生对象混淆\"></a>我认为最大的缺点就是容易和原生对象混淆</h3><blockquote>\n<p>就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动<code>return</code>新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.get(&apos;key&apos;) // Immuable对象取值</div><div class=\"line\">may.key  //原生对象取值</div></pre></td></tr></table></figure>\n<h3 id=\"周边信息\"><a href=\"#周边信息\" class=\"headerlink\" title=\"周边信息\"></a>周边信息</h3><p>两个 immutable 对象可以使用 <code>===</code> 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 <code>false</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let map1 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">let map2 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">map1 === map2;             // false</div></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js 提供了 <code>Immutable.is</code> 来做『值比较』，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Immutable.is(map1, map2);  // true</div></pre></td></tr></table></figure></p>\n<p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code>（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用 <code>Immutable.is</code> 来减少 React 重复渲染，提高性能。</p>\n<p>与 Object.freeze、const 区别</p>\n<p><code>Object.freeze</code> 和 ES6 中新加入的 <code>const</code> 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p>\n<p>Cursor 的概念</p>\n<p>这个 Cursor 和数据库中的游标是完全不同的概念。</p>\n<p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">import Cursor from &apos;immutable/contrib/cursor&apos;;</div><div class=\"line\"></div><div class=\"line\">let data = Immutable.fromJS(&#123; a: &#123; b: &#123; c: 1 &#125; &#125; &#125;);</div><div class=\"line\">// 让 cursor 指向 &#123; c: 1 &#125;</div><div class=\"line\">let cursor = Cursor.from(data, [&apos;a&apos;, &apos;b&apos;], newData =&gt; &#123;</div><div class=\"line\">  // 当 cursor 或其子 cursor 执行 update 时调用</div><div class=\"line\">  console.log(newData);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">cursor.get(&apos;c&apos;); // 1</div><div class=\"line\">cursor = cursor.update(&apos;c&apos;, x =&gt; x + 1);</div><div class=\"line\">cursor.get(&apos;c&apos;); // 2</div></pre></td></tr></table></figure>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><ol>\n<li>与 React 搭配使用，Pure Render</li>\n</ol>\n<p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code>，但它默认返回 <code>true</code>，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code>，但 deepCopy 和 deepCompare 一般都是非常耗性能的。</p>\n<p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render()</code>，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：</p>\n<p>前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; is &#125; from &apos;immutable&apos;;</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate: (nextProps = &#123;&#125;, nextState = &#123;&#125;) =&gt; &#123;</div><div class=\"line\">  const thisProps = this.props || &#123;&#125;, thisState = this.state || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||</div><div class=\"line\">      Object.keys(thisState).length !== Object.keys(nextState).length) &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextProps) &#123;</div><div class=\"line\">    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextState) &#123;</div><div class=\"line\">    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:<br><br>你也可以借助 <code>React.addons.PureRenderMixin</code> 或支持 class 语法的<a href=\"\">pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator</a> 来实现。</p>\n</blockquote>\n<p>setState 的一个技巧</p>\n<p>React 建议把 <code>this.state</code> 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &apos;_&apos; from &apos;lodash&apos;;</div><div class=\"line\"></div><div class=\"line\">const Component = React.createClass(&#123;</div><div class=\"line\">  getInitialState() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      data: &#123; times: 0 &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    let data = _.cloneDeep(this.state.data);</div><div class=\"line\">    data.times = data.times + 1;</div><div class=\"line\">    this.setState(&#123; data: data &#125;);</div><div class=\"line\">    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。</div><div class=\"line\">    console.log(this.state.data.times);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 Immutable 后：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: <span class=\"built_in\">Map</span>(&#123; <span class=\"attr\">times</span>: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;);</div><div class=\"line\">    <span class=\"comment\">// 这时的 times 并不会改变</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的 <code>handleAdd</code> 可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"与Redux配合使用遇到的坑\"><a href=\"#与Redux配合使用遇到的坑\" class=\"headerlink\" title=\"与Redux配合使用遇到的坑\"></a>与<code>Redux</code>配合使用遇到的坑</h3><p>先说下<code>redux</code>中的单向数据流（View -&gt; Action -&gt; Middleware -&gt; Reducer）, 项目中使用的redux,</p>\n<p>由于redux中内置的<code>combineReducers</code>和reducer中的<code>initialState</code>都会返回一个原生的Object对象, 所以配合<code>Imuutable</code>之后就会和原生Object搭配使用,  开发起来很不爽.</p>\n<p>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写<code>combineReducers</code>或使用<a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"> redux-immutablejs</a>来提供支持</p>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\" target=\"_blank\" rel=\"external\">写的很不错,  原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"学习资料地址\"><a href=\"#学习资料地址\" class=\"headerlink\" title=\"学习资料地址\"></a><a href=\"https://juejin.im/post/5948985ea0bb9f006bed7472\" target=\"_blank\" rel=\"external\">学习资料地址</a></h3><pre><code>Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n</code></pre>","more":"<p>安装: <code>npm install immutable</code></p>\n<img src=\"/2017/06/15/Immutable-js意义以及使用场所/immuable.gif\" alt=\"Immuable\" title=\"Immuable\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">let foo = &#123;a: &#123;b: 1&#125;&#125;;</div><div class=\"line\">let bar = foo;</div><div class=\"line\">bar.a.b = 2;</div><div class=\"line\">console.log(foo.a.b);  // 打印 2</div><div class=\"line\">console.log(foo === bar);  //  打印 true</div><div class=\"line\"></div><div class=\"line\">// 使用 immutable.js 后</div><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">foo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);</div><div class=\"line\">bar = foo.setIn([&apos;a&apos;, &apos;b&apos;], 2);   // 使用 setIn 赋值</div><div class=\"line\">console.log(foo.getIn([&apos;a&apos;, &apos;b&apos;]));  // 使用 getIn 取值，打印 1</div><div class=\"line\"></div><div class=\"line\">console.log(foo === bar);  //  打印 false</div></pre></td></tr></table></figure>\n<p>先放上官方<code>README</code>要解决的  (共享的可变状态是万恶之源)</p>\n<p>上面的例子中已经看出来了, , , 着不是react设计初衷,</p>\n<h2 id=\"Immutable-优点\"><a href=\"#Immutable-优点\" class=\"headerlink\" title=\"Immutable 优点\"></a>Immutable 优点</h2><ol>\n<li><p>Immutable 降低了 Mutable 带来的复杂度</p>\n<blockquote>\n<p>可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯</p>\n</blockquote>\n</li>\n<li><p>节省内存</p>\n<blockquote>\n<p>Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Map&#125; from &apos;immutable&apos;;</div><div class=\"line\">let a = Map(&#123;</div><div class=\"line\">  select: &apos;users&apos;,</div><div class=\"line\">  filter: Map(&#123; name: &apos;Cam&apos; &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">let b = a.set(&apos;select&apos;, &apos;people&apos;);</div><div class=\"line\"></div><div class=\"line\">a === b; // false</div><div class=\"line\"></div><div class=\"line\">a.get(&apos;filter&apos;) === b.get(&apos;filter&apos;); // true</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</p>\n<p> 因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。</p>\n</li>\n<li><p>并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？</p>\n<p>常用api示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.Map(&#123;name:&apos;danny&apos;, age:18&#125;)</div><div class=\"line\"></div><div class=\"line\">//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.List([1,2,3,4,5])</div><div class=\"line\"></div><div class=\"line\">//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)</div><div class=\"line\">immutable.fromJS([1,2,3,4,5])    //将原生array  --&gt; List</div><div class=\"line\">immutable.fromJS(&#123;name:&apos;danny&apos;, age:18&#125;)   //将原生object  --&gt; Map</div><div class=\"line\"></div><div class=\"line\">//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)</div><div class=\"line\">immutableData.toJS();</div><div class=\"line\"></div><div class=\"line\">//查看List或者map大小</div><div class=\"line\">immutableData.size  或者 immutableData.count()</div><div class=\"line\"></div><div class=\"line\">// is()   判断两个immutable对象是否相等</div><div class=\"line\">immutable.is(imA, imB);</div><div class=\"line\"></div><div class=\"line\">//merge()  对象合并</div><div class=\"line\">var imA = immutable.fromJS(&#123;a:1,b:2&#125;);</div><div class=\"line\">var imA = immutable.fromJS(&#123;c:3&#125;);</div><div class=\"line\">var imC = imA.merge(imB);</div><div class=\"line\">console.log(imC.toJS())  //&#123;a:1,b:2,c:3&#125;</div><div class=\"line\"></div><div class=\"line\">//增删改查（所有操作都会返回新的值，不会修改原来值）</div><div class=\"line\">var immutableData = immutable.fromJS(&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2，</div><div class=\"line\">    c:&#123;</div><div class=\"line\">        d:3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">var data1 = immutableData.get(&apos;a&apos;) //  data1 = 1</div><div class=\"line\">var data2 = immutableData.getIn([&apos;c&apos;, &apos;d&apos;]) // data2 = 3   getIn用于深层结构访问</div><div class=\"line\">var data3 = immutableData.set(&apos;a&apos; , 2);   // data3中的 a = 2</div><div class=\"line\">var data4 = immutableData.setIn([&apos;c&apos;, &apos;d&apos;], 4);   //data4中的 d = 4</div><div class=\"line\">var data5 = immutableData.update(&apos;a&apos;,function(x)&#123;return x+4&#125;)   //data5中的 a = 5</div><div class=\"line\">var data6 = immutableData.updateIn([&apos;c&apos;, &apos;d&apos;],function(x)&#123;return x+4&#125;)   //data6中的 d = 7</div><div class=\"line\">var data7 = immutableData.delete(&apos;a&apos;)   //data7中的 a 不存在</div><div class=\"line\">var data8 = immutableData.deleteIn([&apos;c&apos;, &apos;d&apos;])   //data8中的 d 不存在</div></pre></td></tr></table></figure>\n<h3 id=\"我认为最大的缺点就是容易和原生对象混淆\"><a href=\"#我认为最大的缺点就是容易和原生对象混淆\" class=\"headerlink\" title=\"我认为最大的缺点就是容易和原生对象混淆\"></a>我认为最大的缺点就是容易和原生对象混淆</h3><blockquote>\n<p>就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动<code>return</code>新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.get(&apos;key&apos;) // Immuable对象取值</div><div class=\"line\">may.key  //原生对象取值</div></pre></td></tr></table></figure>\n<h3 id=\"周边信息\"><a href=\"#周边信息\" class=\"headerlink\" title=\"周边信息\"></a>周边信息</h3><p>两个 immutable 对象可以使用 <code>===</code> 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 <code>false</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let map1 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">let map2 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">map1 === map2;             // false</div></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js 提供了 <code>Immutable.is</code> 来做『值比较』，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Immutable.is(map1, map2);  // true</div></pre></td></tr></table></figure></p>\n<p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code>（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用 <code>Immutable.is</code> 来减少 React 重复渲染，提高性能。</p>\n<p>与 Object.freeze、const 区别</p>\n<p><code>Object.freeze</code> 和 ES6 中新加入的 <code>const</code> 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p>\n<p>Cursor 的概念</p>\n<p>这个 Cursor 和数据库中的游标是完全不同的概念。</p>\n<p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">import Cursor from &apos;immutable/contrib/cursor&apos;;</div><div class=\"line\"></div><div class=\"line\">let data = Immutable.fromJS(&#123; a: &#123; b: &#123; c: 1 &#125; &#125; &#125;);</div><div class=\"line\">// 让 cursor 指向 &#123; c: 1 &#125;</div><div class=\"line\">let cursor = Cursor.from(data, [&apos;a&apos;, &apos;b&apos;], newData =&gt; &#123;</div><div class=\"line\">  // 当 cursor 或其子 cursor 执行 update 时调用</div><div class=\"line\">  console.log(newData);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">cursor.get(&apos;c&apos;); // 1</div><div class=\"line\">cursor = cursor.update(&apos;c&apos;, x =&gt; x + 1);</div><div class=\"line\">cursor.get(&apos;c&apos;); // 2</div></pre></td></tr></table></figure>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><ol>\n<li>与 React 搭配使用，Pure Render</li>\n</ol>\n<p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code>，但它默认返回 <code>true</code>，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code>，但 deepCopy 和 deepCompare 一般都是非常耗性能的。</p>\n<p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render()</code>，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：</p>\n<p>前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; is &#125; from &apos;immutable&apos;;</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate: (nextProps = &#123;&#125;, nextState = &#123;&#125;) =&gt; &#123;</div><div class=\"line\">  const thisProps = this.props || &#123;&#125;, thisState = this.state || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||</div><div class=\"line\">      Object.keys(thisState).length !== Object.keys(nextState).length) &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextProps) &#123;</div><div class=\"line\">    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextState) &#123;</div><div class=\"line\">    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:<br><br>你也可以借助 <code>React.addons.PureRenderMixin</code> 或支持 class 语法的<a href=\"\">pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator</a> 来实现。</p>\n</blockquote>\n<p>setState 的一个技巧</p>\n<p>React 建议把 <code>this.state</code> 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &apos;_&apos; from &apos;lodash&apos;;</div><div class=\"line\"></div><div class=\"line\">const Component = React.createClass(&#123;</div><div class=\"line\">  getInitialState() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      data: &#123; times: 0 &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    let data = _.cloneDeep(this.state.data);</div><div class=\"line\">    data.times = data.times + 1;</div><div class=\"line\">    this.setState(&#123; data: data &#125;);</div><div class=\"line\">    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。</div><div class=\"line\">    console.log(this.state.data.times);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 Immutable 后：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: <span class=\"built_in\">Map</span>(&#123; <span class=\"attr\">times</span>: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;);</div><div class=\"line\">    <span class=\"comment\">// 这时的 times 并不会改变</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的 <code>handleAdd</code> 可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"与Redux配合使用遇到的坑\"><a href=\"#与Redux配合使用遇到的坑\" class=\"headerlink\" title=\"与Redux配合使用遇到的坑\"></a>与<code>Redux</code>配合使用遇到的坑</h3><p>先说下<code>redux</code>中的单向数据流（View -&gt; Action -&gt; Middleware -&gt; Reducer）, 项目中使用的redux,</p>\n<p>由于redux中内置的<code>combineReducers</code>和reducer中的<code>initialState</code>都会返回一个原生的Object对象, 所以配合<code>Imuutable</code>之后就会和原生Object搭配使用,  开发起来很不爽.</p>\n<p>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写<code>combineReducers</code>或使用<a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"> redux-immutablejs</a>来提供支持</p>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\" target=\"_blank\" rel=\"external\">写的很不错,  原文地址</a></p>\n</blockquote>"},{"title":"JSON数据规范","date":"2017-06-29T09:01:13.000Z","_content":"","source":"_posts/JSON数据规范.md","raw":"---\ntitle: JSON数据规范\ndate: 2017-06-29 17:01:13\ntags:\n---\n","slug":"JSON数据规范","published":1,"updated":"2019-05-13T03:56:03.231Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebby0008a0dmvgex3dvi","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"js中的source","title":"JavaScript Source Map详解","date":"2018-05-04T05:02:26.000Z","_content":"\n## 前言\n\n接触source map是在使用`autoprefixer`来自动给css添加前缀的时候发现底部有段代码\n```css\nbody{\n    border-radius: 10px;\n    display: flex;\n}\n\n/*# sourceMappingURL=all.css.map */\n```\n上面是css中的\n\njs中的`//@ sourceMappingURL=jquery.min.map``jquery`中有使用\n\n上面指定的map是一个独立的map文件, 与源码在同一个目录下, 上面css中的文件是这样子的:\n```json\n{\"version\":3,\"sources\":[\"test.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,oBAAoB;IACpB,cAAc;CACjB\",\"file\":\"all.css\",\"sourcesContent\":[\"body{\\n    border-radius: 10px;\\n    display: flex;\\n}\\n\"]}\n```\n\n\n## 从源码转换讲起\n\nJavaScript脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。\n\n其中postcss也是需要转换才能投入生产\n\n常见的源码转换，主要是以下三种情况：\n\n- 压缩，减小体积。比如jQuery 1.9的源码，压缩前是252KB，压缩后是32KB。\n- 多个文件合并，减少HTTP请求数\n- 其他语言编译成JavaScript。最常见的例子就是CoffeeScript。\n\n这种情况就导致源代码和生产代码有很大的区别, `debug`就变得很复杂\n\njs debug 通常，JavaScript的解释器会告诉你，第几行第几列代码出错。但是，这对于转换后的代码毫无用处。举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。\n\n有了source map就可以知道编译后的代码对应的源代码字符和jquery中变量, 这只是我的猜测, 并没有做实际的测试, 继续往下看就知道了其中的道理.\n\n这就是Source map想要解决的问题。\n\n## 什么是Source map\n\n简单说，Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。\n\n有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。\n\n\n目前，暂时只有Chrome浏览器支持这个功能。在Developer Tools的Setting设置中，确认选中\"Enable source maps\"。\n\n## 如何启动Source map详解\n\n正如前文所提到的，只要在转换后的代码尾部，加上一行就可以了。\njs:\n```js\n//@ sourceMappingURL=/path/to/file.js.map\n```\n\ncss:\n```css\n/*# sourceMappingURL=all.css.map */\n```\n\nmap文件可以放在网络上，也可以放在本地文件系统。\n\n## 如何生产Source map\n\n常用方式使用Goolge的[Closure Compiler](https://developers.google.com/closure/compiler/)\n\n生成命令的格式如下：\n```base\njava -jar compiler.jar \\ \n　　　　--js script.js \\\n　　　　--create_source_map ./script-min.js.map \\\n　　　　--source_map_format=V3 \\\n　　　　--js_output_file script-min.js\n```\n\n各个参数的意义如下：\n```\njs： 转换前的代码文件\n　　- create_source_map： 生成的source map文件\n　　- source_map_format：source map的版本，目前一律采用V3。\n　　- js_output_file： 转换后的代码文件。\n```\n\n## Source map的格式\n\n```json\n{\n　　　　version : 3,\n　　　　file: \"out.js\",\n　　　　sourceRoot : \"\",\n　　　　sources: [\"foo.js\", \"bar.js\"],\n　　　　names: [\"src\", \"maps\", \"are\", \"fun\"],\n　　　　mappings: \"AAgBC,SAAQ,CAAEA\"\n　　}\n```\n整个文件就是一个JavaScript对象，可以被解释器读取。它主要有以下几个属性：\n``` base\n    - version：Source map的版本，目前为3。\n\n　　- file：转换后的文件名。\n\n　　- sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。\n\n　　- sources：转换前的文件。该项是一个数组，表示可能存在多个文件合并。\n\n　　- names：转换前的所有变量名和属性名。\n\n　　- mappings：记录位置信息的字符串，下文详细介绍。\n```\n\n\n> 转自[阮一峰大大的blog](http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html)\n","source":"_posts/Map详解.md","raw":"---\nlayout: js中的source\ntitle: JavaScript Source Map详解\ndate: 2018-05-04 13:02:26\ntags:\n    - js\n---\n\n## 前言\n\n接触source map是在使用`autoprefixer`来自动给css添加前缀的时候发现底部有段代码\n```css\nbody{\n    border-radius: 10px;\n    display: flex;\n}\n\n/*# sourceMappingURL=all.css.map */\n```\n上面是css中的\n\njs中的`//@ sourceMappingURL=jquery.min.map``jquery`中有使用\n\n上面指定的map是一个独立的map文件, 与源码在同一个目录下, 上面css中的文件是这样子的:\n```json\n{\"version\":3,\"sources\":[\"test.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,oBAAoB;IACpB,cAAc;CACjB\",\"file\":\"all.css\",\"sourcesContent\":[\"body{\\n    border-radius: 10px;\\n    display: flex;\\n}\\n\"]}\n```\n\n\n## 从源码转换讲起\n\nJavaScript脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。\n\n其中postcss也是需要转换才能投入生产\n\n常见的源码转换，主要是以下三种情况：\n\n- 压缩，减小体积。比如jQuery 1.9的源码，压缩前是252KB，压缩后是32KB。\n- 多个文件合并，减少HTTP请求数\n- 其他语言编译成JavaScript。最常见的例子就是CoffeeScript。\n\n这种情况就导致源代码和生产代码有很大的区别, `debug`就变得很复杂\n\njs debug 通常，JavaScript的解释器会告诉你，第几行第几列代码出错。但是，这对于转换后的代码毫无用处。举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。\n\n有了source map就可以知道编译后的代码对应的源代码字符和jquery中变量, 这只是我的猜测, 并没有做实际的测试, 继续往下看就知道了其中的道理.\n\n这就是Source map想要解决的问题。\n\n## 什么是Source map\n\n简单说，Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。\n\n有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。\n\n\n目前，暂时只有Chrome浏览器支持这个功能。在Developer Tools的Setting设置中，确认选中\"Enable source maps\"。\n\n## 如何启动Source map详解\n\n正如前文所提到的，只要在转换后的代码尾部，加上一行就可以了。\njs:\n```js\n//@ sourceMappingURL=/path/to/file.js.map\n```\n\ncss:\n```css\n/*# sourceMappingURL=all.css.map */\n```\n\nmap文件可以放在网络上，也可以放在本地文件系统。\n\n## 如何生产Source map\n\n常用方式使用Goolge的[Closure Compiler](https://developers.google.com/closure/compiler/)\n\n生成命令的格式如下：\n```base\njava -jar compiler.jar \\ \n　　　　--js script.js \\\n　　　　--create_source_map ./script-min.js.map \\\n　　　　--source_map_format=V3 \\\n　　　　--js_output_file script-min.js\n```\n\n各个参数的意义如下：\n```\njs： 转换前的代码文件\n　　- create_source_map： 生成的source map文件\n　　- source_map_format：source map的版本，目前一律采用V3。\n　　- js_output_file： 转换后的代码文件。\n```\n\n## Source map的格式\n\n```json\n{\n　　　　version : 3,\n　　　　file: \"out.js\",\n　　　　sourceRoot : \"\",\n　　　　sources: [\"foo.js\", \"bar.js\"],\n　　　　names: [\"src\", \"maps\", \"are\", \"fun\"],\n　　　　mappings: \"AAgBC,SAAQ,CAAEA\"\n　　}\n```\n整个文件就是一个JavaScript对象，可以被解释器读取。它主要有以下几个属性：\n``` base\n    - version：Source map的版本，目前为3。\n\n　　- file：转换后的文件名。\n\n　　- sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。\n\n　　- sources：转换前的文件。该项是一个数组，表示可能存在多个文件合并。\n\n　　- names：转换前的所有变量名和属性名。\n\n　　- mappings：记录位置信息的字符串，下文详细介绍。\n```\n\n\n> 转自[阮一峰大大的blog](http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html)\n","slug":"Map详解","published":1,"updated":"2019-05-13T03:56:03.231Z","comments":1,"photos":[],"link":"","_id":"cjvluebc3000aa0dm2vmmek5h","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>接触source map是在使用<code>autoprefixer</code>来自动给css添加前缀的时候发现底部有段代码<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*# sourceMappingURL=all.css.map */</span></div></pre></td></tr></table></figure></p>\n<p>上面是css中的</p>\n<p>js中的<code>//@ sourceMappingURL=jquery.min.map``jquery</code>中有使用</p>\n<p>上面指定的map是一个独立的map文件, 与源码在同一个目录下, 上面css中的文件是这样子的:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"version\"</span>:<span class=\"number\">3</span>,<span class=\"attr\">\"sources\"</span>:[<span class=\"string\">\"test.css\"</span>],<span class=\"attr\">\"names\"</span>:[],<span class=\"attr\">\"mappings\"</span>:<span class=\"string\">\"AAAA;IACI,oBAAoB;IACpB,cAAc;CACjB\"</span>,<span class=\"attr\">\"file\"</span>:<span class=\"string\">\"all.css\"</span>,<span class=\"attr\">\"sourcesContent\"</span>:[<span class=\"string\">\"body&#123;\\n    border-radius: 10px;\\n    display: flex;\\n&#125;\\n\"</span>]&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"从源码转换讲起\"><a href=\"#从源码转换讲起\" class=\"headerlink\" title=\"从源码转换讲起\"></a>从源码转换讲起</h2><p>JavaScript脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。</p>\n<p>其中postcss也是需要转换才能投入生产</p>\n<p>常见的源码转换，主要是以下三种情况：</p>\n<ul>\n<li>压缩，减小体积。比如jQuery 1.9的源码，压缩前是252KB，压缩后是32KB。</li>\n<li>多个文件合并，减少HTTP请求数</li>\n<li>其他语言编译成JavaScript。最常见的例子就是CoffeeScript。</li>\n</ul>\n<p>这种情况就导致源代码和生产代码有很大的区别, <code>debug</code>就变得很复杂</p>\n<p>js debug 通常，JavaScript的解释器会告诉你，第几行第几列代码出错。但是，这对于转换后的代码毫无用处。举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。</p>\n<p>有了source map就可以知道编译后的代码对应的源代码字符和jquery中变量, 这只是我的猜测, 并没有做实际的测试, 继续往下看就知道了其中的道理.</p>\n<p>这就是Source map想要解决的问题。</p>\n<h2 id=\"什么是Source-map\"><a href=\"#什么是Source-map\" class=\"headerlink\" title=\"什么是Source map\"></a>什么是Source map</h2><p>简单说，Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。</p>\n<p>有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。</p>\n<p>目前，暂时只有Chrome浏览器支持这个功能。在Developer Tools的Setting设置中，确认选中”Enable source maps”。</p>\n<h2 id=\"如何启动Source-map详解\"><a href=\"#如何启动Source-map详解\" class=\"headerlink\" title=\"如何启动Source map详解\"></a>如何启动Source map详解</h2><p>正如前文所提到的，只要在转换后的代码尾部，加上一行就可以了。<br>js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//@ sourceMappingURL=/path/to/file.js.map</span></div></pre></td></tr></table></figure></p>\n<p>css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*# sourceMappingURL=all.css.map */</span></div></pre></td></tr></table></figure></p>\n<p>map文件可以放在网络上，也可以放在本地文件系统。</p>\n<h2 id=\"如何生产Source-map\"><a href=\"#如何生产Source-map\" class=\"headerlink\" title=\"如何生产Source map\"></a>如何生产Source map</h2><p>常用方式使用Goolge的<a href=\"https://developers.google.com/closure/compiler/\" target=\"_blank\" rel=\"external\">Closure Compiler</a></p>\n<p>生成命令的格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -jar compiler.jar \\ </div><div class=\"line\">　　　　--js script.js \\</div><div class=\"line\">　　　　--create_source_map ./script-min.js.map \\</div><div class=\"line\">　　　　--source_map_format=V3 \\</div><div class=\"line\">　　　　--js_output_file script-min.js</div></pre></td></tr></table></figure></p>\n<p>各个参数的意义如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">js： 转换前的代码文件</div><div class=\"line\">　　- create_source_map： 生成的source map文件</div><div class=\"line\">　　- source_map_format：source map的版本，目前一律采用V3。</div><div class=\"line\">　　- js_output_file： 转换后的代码文件。</div></pre></td></tr></table></figure></p>\n<h2 id=\"Source-map的格式\"><a href=\"#Source-map的格式\" class=\"headerlink\" title=\"Source map的格式\"></a>Source map的格式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">　　　　version : 3,</div><div class=\"line\">　　　　file: \"out.js\",</div><div class=\"line\">　　　　sourceRoot : \"\",</div><div class=\"line\">　　　　sources: [\"foo.js\", \"bar.js\"],</div><div class=\"line\">　　　　names: [\"src\", \"maps\", \"are\", \"fun\"],</div><div class=\"line\">　　　　mappings: \"AAgBC,SAAQ,CAAEA\"</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>整个文件就是一个JavaScript对象，可以被解释器读取。它主要有以下几个属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- version：Source map的版本，目前为3。</div><div class=\"line\"></div><div class=\"line\">　　- file：转换后的文件名。</div><div class=\"line\"></div><div class=\"line\">　　- sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。</div><div class=\"line\"></div><div class=\"line\">　　- sources：转换前的文件。该项是一个数组，表示可能存在多个文件合并。</div><div class=\"line\"></div><div class=\"line\">　　- names：转换前的所有变量名和属性名。</div><div class=\"line\"></div><div class=\"line\">　　- mappings：记录位置信息的字符串，下文详细介绍。</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>转自<a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"external\">阮一峰大大的blog</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>接触source map是在使用<code>autoprefixer</code>来自动给css添加前缀的时候发现底部有段代码<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">body</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*# sourceMappingURL=all.css.map */</span></div></pre></td></tr></table></figure></p>\n<p>上面是css中的</p>\n<p>js中的<code>//@ sourceMappingURL=jquery.min.map``jquery</code>中有使用</p>\n<p>上面指定的map是一个独立的map文件, 与源码在同一个目录下, 上面css中的文件是这样子的:<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;<span class=\"attr\">\"version\"</span>:<span class=\"number\">3</span>,<span class=\"attr\">\"sources\"</span>:[<span class=\"string\">\"test.css\"</span>],<span class=\"attr\">\"names\"</span>:[],<span class=\"attr\">\"mappings\"</span>:<span class=\"string\">\"AAAA;IACI,oBAAoB;IACpB,cAAc;CACjB\"</span>,<span class=\"attr\">\"file\"</span>:<span class=\"string\">\"all.css\"</span>,<span class=\"attr\">\"sourcesContent\"</span>:[<span class=\"string\">\"body&#123;\\n    border-radius: 10px;\\n    display: flex;\\n&#125;\\n\"</span>]&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"从源码转换讲起\"><a href=\"#从源码转换讲起\" class=\"headerlink\" title=\"从源码转换讲起\"></a>从源码转换讲起</h2><p>JavaScript脚本正变得越来越复杂。大部分源码（尤其是各种函数库和框架）都要经过转换，才能投入生产环境。</p>\n<p>其中postcss也是需要转换才能投入生产</p>\n<p>常见的源码转换，主要是以下三种情况：</p>\n<ul>\n<li>压缩，减小体积。比如jQuery 1.9的源码，压缩前是252KB，压缩后是32KB。</li>\n<li>多个文件合并，减少HTTP请求数</li>\n<li>其他语言编译成JavaScript。最常见的例子就是CoffeeScript。</li>\n</ul>\n<p>这种情况就导致源代码和生产代码有很大的区别, <code>debug</code>就变得很复杂</p>\n<p>js debug 通常，JavaScript的解释器会告诉你，第几行第几列代码出错。但是，这对于转换后的代码毫无用处。举例来说，jQuery 1.9压缩后只有3行，每行3万个字符，所有内部变量都改了名字。你看着报错信息，感到毫无头绪，根本不知道它所对应的原始位置。</p>\n<p>有了source map就可以知道编译后的代码对应的源代码字符和jquery中变量, 这只是我的猜测, 并没有做实际的测试, 继续往下看就知道了其中的道理.</p>\n<p>这就是Source map想要解决的问题。</p>\n<h2 id=\"什么是Source-map\"><a href=\"#什么是Source-map\" class=\"headerlink\" title=\"什么是Source map\"></a>什么是Source map</h2><p>简单说，Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。</p>\n<p>有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。这无疑给开发者带来了很大方便。</p>\n<p>目前，暂时只有Chrome浏览器支持这个功能。在Developer Tools的Setting设置中，确认选中”Enable source maps”。</p>\n<h2 id=\"如何启动Source-map详解\"><a href=\"#如何启动Source-map详解\" class=\"headerlink\" title=\"如何启动Source map详解\"></a>如何启动Source map详解</h2><p>正如前文所提到的，只要在转换后的代码尾部，加上一行就可以了。<br>js:<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//@ sourceMappingURL=/path/to/file.js.map</span></div></pre></td></tr></table></figure></p>\n<p>css:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*# sourceMappingURL=all.css.map */</span></div></pre></td></tr></table></figure></p>\n<p>map文件可以放在网络上，也可以放在本地文件系统。</p>\n<h2 id=\"如何生产Source-map\"><a href=\"#如何生产Source-map\" class=\"headerlink\" title=\"如何生产Source map\"></a>如何生产Source map</h2><p>常用方式使用Goolge的<a href=\"https://developers.google.com/closure/compiler/\" target=\"_blank\" rel=\"external\">Closure Compiler</a></p>\n<p>生成命令的格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -jar compiler.jar \\ </div><div class=\"line\">　　　　--js script.js \\</div><div class=\"line\">　　　　--create_source_map ./script-min.js.map \\</div><div class=\"line\">　　　　--source_map_format=V3 \\</div><div class=\"line\">　　　　--js_output_file script-min.js</div></pre></td></tr></table></figure></p>\n<p>各个参数的意义如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">js： 转换前的代码文件</div><div class=\"line\">　　- create_source_map： 生成的source map文件</div><div class=\"line\">　　- source_map_format：source map的版本，目前一律采用V3。</div><div class=\"line\">　　- js_output_file： 转换后的代码文件。</div></pre></td></tr></table></figure></p>\n<h2 id=\"Source-map的格式\"><a href=\"#Source-map的格式\" class=\"headerlink\" title=\"Source map的格式\"></a>Source map的格式</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">　　　　version : 3,</div><div class=\"line\">　　　　file: \"out.js\",</div><div class=\"line\">　　　　sourceRoot : \"\",</div><div class=\"line\">　　　　sources: [\"foo.js\", \"bar.js\"],</div><div class=\"line\">　　　　names: [\"src\", \"maps\", \"are\", \"fun\"],</div><div class=\"line\">　　　　mappings: \"AAgBC,SAAQ,CAAEA\"</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>整个文件就是一个JavaScript对象，可以被解释器读取。它主要有以下几个属性：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">- version：Source map的版本，目前为3。</div><div class=\"line\"></div><div class=\"line\">　　- file：转换后的文件名。</div><div class=\"line\"></div><div class=\"line\">　　- sourceRoot：转换前的文件所在的目录。如果与转换前的文件在同一目录，该项为空。</div><div class=\"line\"></div><div class=\"line\">　　- sources：转换前的文件。该项是一个数组，表示可能存在多个文件合并。</div><div class=\"line\"></div><div class=\"line\">　　- names：转换前的所有变量名和属性名。</div><div class=\"line\"></div><div class=\"line\">　　- mappings：记录位置信息的字符串，下文详细介绍。</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>转自<a href=\"http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html\" target=\"_blank\" rel=\"external\">阮一峰大大的blog</a></p>\n</blockquote>\n"},{"layout":"post","title":"Redux-devTools简单的使用","date":"2018-03-28T03:52:34.000Z","_content":"\n> [前人总结](https://www.jianshu.com/p/a2d4c1856560)\n","source":"_posts/Redux-devTools简单的使用.md","raw":"---\nlayout: post\ntitle: Redux-devTools简单的使用\ndate: 2018-03-28 11:52:34\ntags:\n    - redux\n    - react调试\n---\n\n> [前人总结](https://www.jianshu.com/p/a2d4c1856560)\n","slug":"Redux-devTools简单的使用","published":1,"updated":"2019-05-13T03:56:03.232Z","comments":1,"photos":[],"link":"","_id":"cjvluebcc000fa0dmtchfbn5z","content":"<blockquote>\n<p><a href=\"https://www.jianshu.com/p/a2d4c1856560\" target=\"_blank\" rel=\"external\">前人总结</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://www.jianshu.com/p/a2d4c1856560\" target=\"_blank\" rel=\"external\">前人总结</a></p>\n</blockquote>\n"},{"layout":"post","title":"console.log在终端输出漂亮的颜色","date":"2018-03-29T07:55:39.000Z","_content":"\n```base\nReset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"\n```\n\nuse\n```javascript\nconsole.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');  //cyan\nconsole.log('\\x1b[33m%s\\x1b[0m', stringToMakeYellow);  //yellow\n```\n","source":"_posts/console-log在终端输出漂亮的颜色.md","raw":"---\nlayout: post\ntitle: console.log在终端输出漂亮的颜色\ndate: 2018-03-29 15:55:39\ntags:\n    - terminal color\n---\n\n```base\nReset = \"\\x1b[0m\"\nBright = \"\\x1b[1m\"\nDim = \"\\x1b[2m\"\nUnderscore = \"\\x1b[4m\"\nBlink = \"\\x1b[5m\"\nReverse = \"\\x1b[7m\"\nHidden = \"\\x1b[8m\"\n\nFgBlack = \"\\x1b[30m\"\nFgRed = \"\\x1b[31m\"\nFgGreen = \"\\x1b[32m\"\nFgYellow = \"\\x1b[33m\"\nFgBlue = \"\\x1b[34m\"\nFgMagenta = \"\\x1b[35m\"\nFgCyan = \"\\x1b[36m\"\nFgWhite = \"\\x1b[37m\"\n\nBgBlack = \"\\x1b[40m\"\nBgRed = \"\\x1b[41m\"\nBgGreen = \"\\x1b[42m\"\nBgYellow = \"\\x1b[43m\"\nBgBlue = \"\\x1b[44m\"\nBgMagenta = \"\\x1b[45m\"\nBgCyan = \"\\x1b[46m\"\nBgWhite = \"\\x1b[47m\"\n```\n\nuse\n```javascript\nconsole.log('\\x1b[36m%s\\x1b[0m', 'I am cyan');  //cyan\nconsole.log('\\x1b[33m%s\\x1b[0m', stringToMakeYellow);  //yellow\n```\n","slug":"console-log在终端输出漂亮的颜色","published":1,"updated":"2019-05-13T03:56:03.232Z","comments":1,"photos":[],"link":"","_id":"cjvluebch000ia0dmopyti2b6","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">Reset = &quot;\\x1b[0m&quot;</div><div class=\"line\">Bright = &quot;\\x1b[1m&quot;</div><div class=\"line\">Dim = &quot;\\x1b[2m&quot;</div><div class=\"line\">Underscore = &quot;\\x1b[4m&quot;</div><div class=\"line\">Blink = &quot;\\x1b[5m&quot;</div><div class=\"line\">Reverse = &quot;\\x1b[7m&quot;</div><div class=\"line\">Hidden = &quot;\\x1b[8m&quot;</div><div class=\"line\"></div><div class=\"line\">FgBlack = &quot;\\x1b[30m&quot;</div><div class=\"line\">FgRed = &quot;\\x1b[31m&quot;</div><div class=\"line\">FgGreen = &quot;\\x1b[32m&quot;</div><div class=\"line\">FgYellow = &quot;\\x1b[33m&quot;</div><div class=\"line\">FgBlue = &quot;\\x1b[34m&quot;</div><div class=\"line\">FgMagenta = &quot;\\x1b[35m&quot;</div><div class=\"line\">FgCyan = &quot;\\x1b[36m&quot;</div><div class=\"line\">FgWhite = &quot;\\x1b[37m&quot;</div><div class=\"line\"></div><div class=\"line\">BgBlack = &quot;\\x1b[40m&quot;</div><div class=\"line\">BgRed = &quot;\\x1b[41m&quot;</div><div class=\"line\">BgGreen = &quot;\\x1b[42m&quot;</div><div class=\"line\">BgYellow = &quot;\\x1b[43m&quot;</div><div class=\"line\">BgBlue = &quot;\\x1b[44m&quot;</div><div class=\"line\">BgMagenta = &quot;\\x1b[45m&quot;</div><div class=\"line\">BgCyan = &quot;\\x1b[46m&quot;</div><div class=\"line\">BgWhite = &quot;\\x1b[47m&quot;</div></pre></td></tr></table></figure>\n<p>use<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'\\x1b[36m%s\\x1b[0m'</span>, <span class=\"string\">'I am cyan'</span>);  <span class=\"comment\">//cyan</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'\\x1b[33m%s\\x1b[0m'</span>, stringToMakeYellow);  <span class=\"comment\">//yellow</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">Reset = &quot;\\x1b[0m&quot;</div><div class=\"line\">Bright = &quot;\\x1b[1m&quot;</div><div class=\"line\">Dim = &quot;\\x1b[2m&quot;</div><div class=\"line\">Underscore = &quot;\\x1b[4m&quot;</div><div class=\"line\">Blink = &quot;\\x1b[5m&quot;</div><div class=\"line\">Reverse = &quot;\\x1b[7m&quot;</div><div class=\"line\">Hidden = &quot;\\x1b[8m&quot;</div><div class=\"line\"></div><div class=\"line\">FgBlack = &quot;\\x1b[30m&quot;</div><div class=\"line\">FgRed = &quot;\\x1b[31m&quot;</div><div class=\"line\">FgGreen = &quot;\\x1b[32m&quot;</div><div class=\"line\">FgYellow = &quot;\\x1b[33m&quot;</div><div class=\"line\">FgBlue = &quot;\\x1b[34m&quot;</div><div class=\"line\">FgMagenta = &quot;\\x1b[35m&quot;</div><div class=\"line\">FgCyan = &quot;\\x1b[36m&quot;</div><div class=\"line\">FgWhite = &quot;\\x1b[37m&quot;</div><div class=\"line\"></div><div class=\"line\">BgBlack = &quot;\\x1b[40m&quot;</div><div class=\"line\">BgRed = &quot;\\x1b[41m&quot;</div><div class=\"line\">BgGreen = &quot;\\x1b[42m&quot;</div><div class=\"line\">BgYellow = &quot;\\x1b[43m&quot;</div><div class=\"line\">BgBlue = &quot;\\x1b[44m&quot;</div><div class=\"line\">BgMagenta = &quot;\\x1b[45m&quot;</div><div class=\"line\">BgCyan = &quot;\\x1b[46m&quot;</div><div class=\"line\">BgWhite = &quot;\\x1b[47m&quot;</div></pre></td></tr></table></figure>\n<p>use<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'\\x1b[36m%s\\x1b[0m'</span>, <span class=\"string\">'I am cyan'</span>);  <span class=\"comment\">//cyan</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'\\x1b[33m%s\\x1b[0m'</span>, stringToMakeYellow);  <span class=\"comment\">//yellow</span></div></pre></td></tr></table></figure></p>\n"},{"title":"emacs使用company-mode,ycmd,hippie,来完善你的补全功能,以及遇到的坑","date":"2017-06-16T02:57:50.000Z","comments":0,"_content":"\n{% asset_img emacs-ycmd.png my emacs image %}\n\n<!-- more -->\n> 先说一下使用emacs的历程\n\n之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.\n但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换\n毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置[fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)](https://github.com/angelporo/emacs.d)\n\n\n之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,\n你会发现, 自己写的完全没有必要, 因为`github`上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.\n\n对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern\n\n## 框框框的安装\n前提自行安装git, python和以来包 , mac `birew install git build-essential cmake python-dev`\n\n\n`npm install tern -g`\n\n### 安装ycmd server\n\n `git clone https://github.com/Valloric/ycmd`\n \n 下载完整的submodule(时间比较久)\n `git submodule update --init --recursive`\n \n 下载完后进入`ycmd`文件夹编译\n \n ```base\n $ cd ~/ycmd\n $ ./build.py --tern-completer\n ```\n \n### 2. 安装 ycmd client，还有必要的工具\n\n打开Emacs , 命令`M-x list-packages`分别安装 `ycmd, company-ycmd, flycheck-ycmd company-mode`\n\n\n### 配置\n\n```elisp\n;;设置ycmd补全插件\n(set-variable 'ycmd-server-command '(\"python\" \"/Users/angel/ycmd/ycmd\"))\n(setq company-tooltip-limit 8)\n(setq company-idle-delay 0.2)\n(setq company-echo-delay 0)\n(setq company-begin-commands '(self-insert-command))\n(setq company-require-match nil)\n(company-ycmd-setup)\n(add-hook 'after-init-hook 'global-company-mode)\n```\n\n讲上面代码添加到配置文件中...\n\n\t注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n\n### 添加`hippie-extend`\n\nhippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置\n\n安装: `package-install hippie-extend`\n\n```elisp\n(global-set-key (kbd \"M-/\") 'hippie-expand)\n\n(setq hippie-expand-try-functions-list\n      '(try-expand-debbrev\n        try-expand-debbrev-all-buffers\n        try-expand-debbrev-from-kill\n        try-complete-file-name-partially\n        try-complete-file-name\n        try-expand-all-abbrevs\n        try-expand-list\n        try-expand-line\n        try-complete-lisp-symbol-partially\n        try-complete-lisp-symbol))\n```\n上面是我的配置,如果不习惯, 可以自己配置\n\n更换上面`hippie-expand-try-functions-list` 参数就可以\n\n```elisp\ntry-expand-dabbrev                 ; 搜索当前 buffer\ntry-expand-dabbrev-visible         ; 搜索当前可见窗口\ntry-expand-dabbrev-all-buffers     ; 搜索所有 buffer\ntry-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索\ntry-complete-file-name-partially   ; 文件名部分匹配\ntry-complete-file-name             ; 文件名匹配\ntry-expand-all-abbrevs             ; 匹配所有缩写词\ntry-expand-list                    ; 补全一个列表\ntry-expand-line                    ; 补全当前行\ntry-complete-lisp-symbol-partially ; 部分补全 elisp symbol\ntry-complete-lisp-symbol           ; 补全 lisp symbol\n```\n\n\n## 遇到的问题处理对策\n> tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动\n\n- tern 启动之后会在项目目录下创建一个 `.tern-port`文件, 里面的端口和emacs中\n`M-x describe-variabble tern-known-port` 看到的一致.\n\n- `tern-mode`是否启动?\n  `M-x describe-variabel tern-mode`结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)\n\n```base\n$ cd /path/to/project\n$ tern\nListening on port 63935\n```\n\n记住这个端口号，回到 Emacs，手动 `M-x tern-use-server RET 63953` 第二个server可以不填 默认是`127.0.0.1`\n当然最终还是要解决配置问题, 想tern自动启动.\n\n把下面代码放到配置文件中就可以自启动了.\n\n```elisp\n(add-hook 'js-mode-hook\n          '(lambda ()\n             (company-mode 1)\n             (tern-mode 1)\n             (setq company-tooltip-align-annotations t)\n             (add-to-list 'company-backends 'company-tern)))\n```\n\n如果不出现js补全dom的提示 可能是因为跟目录没有 `.tern-project`文件\n然后添加下面代码到`~/.tern-project`\n\n```json\n{\n  \"libs\": [\n    \"browser\",\n    \"jquery\"\n  ],\n  \"plugins\": {\n    \"node\": {}\n  }\n}\n```\n\n所以即使项目目录没有任何配置,  根目录`.tern-project`也会起作用!\n","source":"_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑.md","raw":"---\ntitle: 'emacs使用company-mode,ycmd,hippie,来完善你的补全功能,以及遇到的坑'\ndate: 2017-06-16 10:57:50\ntags:\n    - emacs\n    - emacs自动补全\n    - ycmd\n    - company-mode\n    - hippie\ncategories: \"emacs使用记\"\ncomments: false\n---\n\n{% asset_img emacs-ycmd.png my emacs image %}\n\n<!-- more -->\n> 先说一下使用emacs的历程\n\n之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.\n但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换\n毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置[fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)](https://github.com/angelporo/emacs.d)\n\n\n之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,\n你会发现, 自己写的完全没有必要, 因为`github`上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.\n\n对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern\n\n## 框框框的安装\n前提自行安装git, python和以来包 , mac `birew install git build-essential cmake python-dev`\n\n\n`npm install tern -g`\n\n### 安装ycmd server\n\n `git clone https://github.com/Valloric/ycmd`\n \n 下载完整的submodule(时间比较久)\n `git submodule update --init --recursive`\n \n 下载完后进入`ycmd`文件夹编译\n \n ```base\n $ cd ~/ycmd\n $ ./build.py --tern-completer\n ```\n \n### 2. 安装 ycmd client，还有必要的工具\n\n打开Emacs , 命令`M-x list-packages`分别安装 `ycmd, company-ycmd, flycheck-ycmd company-mode`\n\n\n### 配置\n\n```elisp\n;;设置ycmd补全插件\n(set-variable 'ycmd-server-command '(\"python\" \"/Users/angel/ycmd/ycmd\"))\n(setq company-tooltip-limit 8)\n(setq company-idle-delay 0.2)\n(setq company-echo-delay 0)\n(setq company-begin-commands '(self-insert-command))\n(setq company-require-match nil)\n(company-ycmd-setup)\n(add-hook 'after-init-hook 'global-company-mode)\n```\n\n讲上面代码添加到配置文件中...\n\n\t注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n\n### 添加`hippie-extend`\n\nhippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置\n\n安装: `package-install hippie-extend`\n\n```elisp\n(global-set-key (kbd \"M-/\") 'hippie-expand)\n\n(setq hippie-expand-try-functions-list\n      '(try-expand-debbrev\n        try-expand-debbrev-all-buffers\n        try-expand-debbrev-from-kill\n        try-complete-file-name-partially\n        try-complete-file-name\n        try-expand-all-abbrevs\n        try-expand-list\n        try-expand-line\n        try-complete-lisp-symbol-partially\n        try-complete-lisp-symbol))\n```\n上面是我的配置,如果不习惯, 可以自己配置\n\n更换上面`hippie-expand-try-functions-list` 参数就可以\n\n```elisp\ntry-expand-dabbrev                 ; 搜索当前 buffer\ntry-expand-dabbrev-visible         ; 搜索当前可见窗口\ntry-expand-dabbrev-all-buffers     ; 搜索所有 buffer\ntry-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索\ntry-complete-file-name-partially   ; 文件名部分匹配\ntry-complete-file-name             ; 文件名匹配\ntry-expand-all-abbrevs             ; 匹配所有缩写词\ntry-expand-list                    ; 补全一个列表\ntry-expand-line                    ; 补全当前行\ntry-complete-lisp-symbol-partially ; 部分补全 elisp symbol\ntry-complete-lisp-symbol           ; 补全 lisp symbol\n```\n\n\n## 遇到的问题处理对策\n> tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动\n\n- tern 启动之后会在项目目录下创建一个 `.tern-port`文件, 里面的端口和emacs中\n`M-x describe-variabble tern-known-port` 看到的一致.\n\n- `tern-mode`是否启动?\n  `M-x describe-variabel tern-mode`结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)\n\n```base\n$ cd /path/to/project\n$ tern\nListening on port 63935\n```\n\n记住这个端口号，回到 Emacs，手动 `M-x tern-use-server RET 63953` 第二个server可以不填 默认是`127.0.0.1`\n当然最终还是要解决配置问题, 想tern自动启动.\n\n把下面代码放到配置文件中就可以自启动了.\n\n```elisp\n(add-hook 'js-mode-hook\n          '(lambda ()\n             (company-mode 1)\n             (tern-mode 1)\n             (setq company-tooltip-align-annotations t)\n             (add-to-list 'company-backends 'company-tern)))\n```\n\n如果不出现js补全dom的提示 可能是因为跟目录没有 `.tern-project`文件\n然后添加下面代码到`~/.tern-project`\n\n```json\n{\n  \"libs\": [\n    \"browser\",\n    \"jquery\"\n  ],\n  \"plugins\": {\n    \"node\": {}\n  }\n}\n```\n\n所以即使项目目录没有任何配置,  根目录`.tern-project`也会起作用!\n","slug":"emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑","published":1,"updated":"2019-05-13T03:56:03.232Z","layout":"post","photos":[],"link":"","_id":"cjvluebcl000la0dmpdc7j4by","content":"<img src=\"/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png\" alt=\"my emacs image\" title=\"my emacs image\">\n<a id=\"more\"></a>\n<blockquote>\n<p>先说一下使用emacs的历程</p>\n</blockquote>\n<p>之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.<br>但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换<br>毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置<a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)</a></p>\n<p>之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,<br>你会发现, 自己写的完全没有必要, 因为<code>github</code>上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.</p>\n<p>对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern</p>\n<h2 id=\"框框框的安装\"><a href=\"#框框框的安装\" class=\"headerlink\" title=\"框框框的安装\"></a>框框框的安装</h2><p>前提自行安装git, python和以来包 , mac <code>birew install git build-essential cmake python-dev</code></p>\n<p><code>npm install tern -g</code></p>\n<h3 id=\"安装ycmd-server\"><a href=\"#安装ycmd-server\" class=\"headerlink\" title=\"安装ycmd server\"></a>安装ycmd server</h3><p> <code>git clone https://github.com/Valloric/ycmd</code></p>\n<p> 下载完整的submodule(时间比较久)<br> <code>git submodule update --init --recursive</code></p>\n<p> 下载完后进入<code>ycmd</code>文件夹编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/ycmd</div><div class=\"line\">$ ./build.py --tern-completer</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-ycmd-client，还有必要的工具\"><a href=\"#2-安装-ycmd-client，还有必要的工具\" class=\"headerlink\" title=\"2. 安装 ycmd client，还有必要的工具\"></a>2. 安装 ycmd client，还有必要的工具</h3><p>打开Emacs , 命令<code>M-x list-packages</code>分别安装 <code>ycmd, company-ycmd, flycheck-ycmd company-mode</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;;设置ycmd补全插件</div><div class=\"line\">(set-variable &apos;ycmd-server-command &apos;(&quot;python&quot; &quot;/Users/angel/ycmd/ycmd&quot;))</div><div class=\"line\">(setq company-tooltip-limit 8)</div><div class=\"line\">(setq company-idle-delay 0.2)</div><div class=\"line\">(setq company-echo-delay 0)</div><div class=\"line\">(setq company-begin-commands &apos;(self-insert-command))</div><div class=\"line\">(setq company-require-match nil)</div><div class=\"line\">(company-ycmd-setup)</div><div class=\"line\">(add-hook &apos;after-init-hook &apos;global-company-mode)</div></pre></td></tr></table></figure>\n<p>讲上面代码添加到配置文件中…</p>\n<pre><code>注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n</code></pre><h3 id=\"添加hippie-extend\"><a href=\"#添加hippie-extend\" class=\"headerlink\" title=\"添加hippie-extend\"></a>添加<code>hippie-extend</code></h3><p>hippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置</p>\n<p>安装: <code>package-install hippie-extend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(global-set-key (kbd &quot;M-/&quot;) &apos;hippie-expand)</div><div class=\"line\"></div><div class=\"line\">(setq hippie-expand-try-functions-list</div><div class=\"line\">      &apos;(try-expand-debbrev</div><div class=\"line\">        try-expand-debbrev-all-buffers</div><div class=\"line\">        try-expand-debbrev-from-kill</div><div class=\"line\">        try-complete-file-name-partially</div><div class=\"line\">        try-complete-file-name</div><div class=\"line\">        try-expand-all-abbrevs</div><div class=\"line\">        try-expand-list</div><div class=\"line\">        try-expand-line</div><div class=\"line\">        try-complete-lisp-symbol-partially</div><div class=\"line\">        try-complete-lisp-symbol))</div></pre></td></tr></table></figure>\n<p>上面是我的配置,如果不习惯, 可以自己配置</p>\n<p>更换上面<code>hippie-expand-try-functions-list</code> 参数就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">try-expand-dabbrev                 ; 搜索当前 buffer</div><div class=\"line\">try-expand-dabbrev-visible         ; 搜索当前可见窗口</div><div class=\"line\">try-expand-dabbrev-all-buffers     ; 搜索所有 buffer</div><div class=\"line\">try-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索</div><div class=\"line\">try-complete-file-name-partially   ; 文件名部分匹配</div><div class=\"line\">try-complete-file-name             ; 文件名匹配</div><div class=\"line\">try-expand-all-abbrevs             ; 匹配所有缩写词</div><div class=\"line\">try-expand-list                    ; 补全一个列表</div><div class=\"line\">try-expand-line                    ; 补全当前行</div><div class=\"line\">try-complete-lisp-symbol-partially ; 部分补全 elisp symbol</div><div class=\"line\">try-complete-lisp-symbol           ; 补全 lisp symbol</div></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题处理对策\"><a href=\"#遇到的问题处理对策\" class=\"headerlink\" title=\"遇到的问题处理对策\"></a>遇到的问题处理对策</h2><blockquote>\n<p>tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动</p>\n</blockquote>\n<ul>\n<li><p>tern 启动之后会在项目目录下创建一个 <code>.tern-port</code>文件, 里面的端口和emacs中<br><code>M-x describe-variabble tern-known-port</code> 看到的一致.</p>\n</li>\n<li><p><code>tern-mode</code>是否启动?<br><code>M-x describe-variabel tern-mode</code>结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /path/to/project</div><div class=\"line\">$ tern</div><div class=\"line\">Listening on port 63935</div></pre></td></tr></table></figure>\n<p>记住这个端口号，回到 Emacs，手动 <code>M-x tern-use-server RET 63953</code> 第二个server可以不填 默认是<code>127.0.0.1</code><br>当然最终还是要解决配置问题, 想tern自动启动.</p>\n<p>把下面代码放到配置文件中就可以自启动了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(add-hook &apos;js-mode-hook</div><div class=\"line\">          &apos;(lambda ()</div><div class=\"line\">             (company-mode 1)</div><div class=\"line\">             (tern-mode 1)</div><div class=\"line\">             (setq company-tooltip-align-annotations t)</div><div class=\"line\">             (add-to-list &apos;company-backends &apos;company-tern)))</div></pre></td></tr></table></figure>\n<p>如果不出现js补全dom的提示 可能是因为跟目录没有 <code>.tern-project</code>文件<br>然后添加下面代码到<code>~/.tern-project</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"libs\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"browser\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以即使项目目录没有任何配置,  根目录<code>.tern-project</code>也会起作用!</p>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png\" alt=\"my emacs image\" title=\"my emacs image\">","more":"<blockquote>\n<p>先说一下使用emacs的历程</p>\n</blockquote>\n<p>之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.<br>但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换<br>毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置<a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)</a></p>\n<p>之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,<br>你会发现, 自己写的完全没有必要, 因为<code>github</code>上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.</p>\n<p>对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern</p>\n<h2 id=\"框框框的安装\"><a href=\"#框框框的安装\" class=\"headerlink\" title=\"框框框的安装\"></a>框框框的安装</h2><p>前提自行安装git, python和以来包 , mac <code>birew install git build-essential cmake python-dev</code></p>\n<p><code>npm install tern -g</code></p>\n<h3 id=\"安装ycmd-server\"><a href=\"#安装ycmd-server\" class=\"headerlink\" title=\"安装ycmd server\"></a>安装ycmd server</h3><p> <code>git clone https://github.com/Valloric/ycmd</code></p>\n<p> 下载完整的submodule(时间比较久)<br> <code>git submodule update --init --recursive</code></p>\n<p> 下载完后进入<code>ycmd</code>文件夹编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/ycmd</div><div class=\"line\">$ ./build.py --tern-completer</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-ycmd-client，还有必要的工具\"><a href=\"#2-安装-ycmd-client，还有必要的工具\" class=\"headerlink\" title=\"2. 安装 ycmd client，还有必要的工具\"></a>2. 安装 ycmd client，还有必要的工具</h3><p>打开Emacs , 命令<code>M-x list-packages</code>分别安装 <code>ycmd, company-ycmd, flycheck-ycmd company-mode</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;;设置ycmd补全插件</div><div class=\"line\">(set-variable &apos;ycmd-server-command &apos;(&quot;python&quot; &quot;/Users/angel/ycmd/ycmd&quot;))</div><div class=\"line\">(setq company-tooltip-limit 8)</div><div class=\"line\">(setq company-idle-delay 0.2)</div><div class=\"line\">(setq company-echo-delay 0)</div><div class=\"line\">(setq company-begin-commands &apos;(self-insert-command))</div><div class=\"line\">(setq company-require-match nil)</div><div class=\"line\">(company-ycmd-setup)</div><div class=\"line\">(add-hook &apos;after-init-hook &apos;global-company-mode)</div></pre></td></tr></table></figure>\n<p>讲上面代码添加到配置文件中…</p>\n<pre><code>注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n</code></pre><h3 id=\"添加hippie-extend\"><a href=\"#添加hippie-extend\" class=\"headerlink\" title=\"添加hippie-extend\"></a>添加<code>hippie-extend</code></h3><p>hippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置</p>\n<p>安装: <code>package-install hippie-extend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(global-set-key (kbd &quot;M-/&quot;) &apos;hippie-expand)</div><div class=\"line\"></div><div class=\"line\">(setq hippie-expand-try-functions-list</div><div class=\"line\">      &apos;(try-expand-debbrev</div><div class=\"line\">        try-expand-debbrev-all-buffers</div><div class=\"line\">        try-expand-debbrev-from-kill</div><div class=\"line\">        try-complete-file-name-partially</div><div class=\"line\">        try-complete-file-name</div><div class=\"line\">        try-expand-all-abbrevs</div><div class=\"line\">        try-expand-list</div><div class=\"line\">        try-expand-line</div><div class=\"line\">        try-complete-lisp-symbol-partially</div><div class=\"line\">        try-complete-lisp-symbol))</div></pre></td></tr></table></figure>\n<p>上面是我的配置,如果不习惯, 可以自己配置</p>\n<p>更换上面<code>hippie-expand-try-functions-list</code> 参数就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">try-expand-dabbrev                 ; 搜索当前 buffer</div><div class=\"line\">try-expand-dabbrev-visible         ; 搜索当前可见窗口</div><div class=\"line\">try-expand-dabbrev-all-buffers     ; 搜索所有 buffer</div><div class=\"line\">try-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索</div><div class=\"line\">try-complete-file-name-partially   ; 文件名部分匹配</div><div class=\"line\">try-complete-file-name             ; 文件名匹配</div><div class=\"line\">try-expand-all-abbrevs             ; 匹配所有缩写词</div><div class=\"line\">try-expand-list                    ; 补全一个列表</div><div class=\"line\">try-expand-line                    ; 补全当前行</div><div class=\"line\">try-complete-lisp-symbol-partially ; 部分补全 elisp symbol</div><div class=\"line\">try-complete-lisp-symbol           ; 补全 lisp symbol</div></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题处理对策\"><a href=\"#遇到的问题处理对策\" class=\"headerlink\" title=\"遇到的问题处理对策\"></a>遇到的问题处理对策</h2><blockquote>\n<p>tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动</p>\n</blockquote>\n<ul>\n<li><p>tern 启动之后会在项目目录下创建一个 <code>.tern-port</code>文件, 里面的端口和emacs中<br><code>M-x describe-variabble tern-known-port</code> 看到的一致.</p>\n</li>\n<li><p><code>tern-mode</code>是否启动?<br><code>M-x describe-variabel tern-mode</code>结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /path/to/project</div><div class=\"line\">$ tern</div><div class=\"line\">Listening on port 63935</div></pre></td></tr></table></figure>\n<p>记住这个端口号，回到 Emacs，手动 <code>M-x tern-use-server RET 63953</code> 第二个server可以不填 默认是<code>127.0.0.1</code><br>当然最终还是要解决配置问题, 想tern自动启动.</p>\n<p>把下面代码放到配置文件中就可以自启动了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(add-hook &apos;js-mode-hook</div><div class=\"line\">          &apos;(lambda ()</div><div class=\"line\">             (company-mode 1)</div><div class=\"line\">             (tern-mode 1)</div><div class=\"line\">             (setq company-tooltip-align-annotations t)</div><div class=\"line\">             (add-to-list &apos;company-backends &apos;company-tern)))</div></pre></td></tr></table></figure>\n<p>如果不出现js补全dom的提示 可能是因为跟目录没有 <code>.tern-project</code>文件<br>然后添加下面代码到<code>~/.tern-project</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"libs\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"browser\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以即使项目目录没有任何配置,  根目录<code>.tern-project</code>也会起作用!</p>"},{"layout":"post","title":"Nginx反向代理配置字段详解","date":"2018-02-27T08:22:33.000Z","_content":"\n## 安装`brew install nginx`\n\n如果不清楚安装目录, run `nginx -h` 就可以看到默认的配置文件地址\nmac一般在`/usr/local/etc/nginx`\n\n## 基本配置\n\n```base\n#运行用户\nuser www-data;    \n#启动进程,通常设置成和cpu的数量相等\nworker_processes  1;\n\n#全局错误日志及PID文件\nerror_log  /var/log/nginx/error.log;\npid        /var/run/nginx.pid;\n\n#工作模式及连接数上限\nevents {\n    use   epoll;             #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能\n    worker_connections  1024;#单个后台worker process进程的最大并发链接数\n    # multi_accept on; \n}\n\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp {\n     #设定mime类型,类型由mime.type文件定义\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    #设定日志格式\n    access_log    /var/log/nginx/access.log;\n\n    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，\n    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #连接超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    tcp_nodelay        on;\n    \n    #开启gzip压缩\n    gzip  on;\n    gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\";\n\n    #设定请求缓冲\n    client_header_buffer_size    1k;\n    large_client_header_buffers  4 4k;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n    #设定负载均衡的服务器列表\n     upstream mysvr {\n    #weigth参数表示权值，权值越高被分配到的几率越大\n    #本机上的Squid开启3128端口\n    server 192.168.8.1:3128 weight=5;\n    server 192.168.8.2:80  weight=1;\n    server 192.168.8.3:80  weight=6;\n    }\n\n\n   server {\n    #侦听80端口\n        listen       80;\n        #定义使用www.xx.com访问\n        server_name  www.xx.com;\n\n        #设定本虚拟主机的访问日志\n        access_log  logs/www.xx.com.access.log  main;\n\n    #默认请求\n    location / {\n          root   /root;      #定义服务器的默认网站根目录位置\n          index index.php index.html index.htm;   #定义首页索引文件的名称\n\n          fastcgi_pass  www.xx.com;\n         fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name; \n          include /etc/nginx/fastcgi_params;\n        }\n\n    # 定义错误提示页面\n    error_page   500 502 503 504 /50x.html;  \n        location = /50x.html {\n        root   /root;\n    }\n\n    #静态文件，nginx自己处理\n    location ~ ^/(images|javascript|js|css|flash|media|static)/ {\n        root /var/www/virtual/htdocs;\n        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。\n        expires 30d;\n    }\n    #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.\n    location ~ \\.php$ {\n        root /root;\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;\n        include fastcgi_params;\n    }\n    #设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status            on;\n        access_log              on;\n        auth_basic              \"NginxStatus\";\n        auth_basic_user_file  conf/htpasswd;\n    }\n    #禁止访问 .htxxx 文件\n    location ~ /\\.ht {\n        deny all;\n    }\n  }\n}\n```\n\n\n负载均衡配置\n主要修改http节点内容\n\n```base\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp {\n     #设定mime类型,类型由mime.type文件定义\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    #设定日志格式\n    access_log    /var/log/nginx/access.log;\n\n    #省略上文有的一些配置节点\n\n    #。。。。。。。。。。\n\n    #设定负载均衡的服务器列表\n     upstream mysvr {\n    #weigth参数表示权值，权值越高被分配到的几率越大\n    server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口\n    server 192.168.8.2x:80  weight=1;\n    server 192.168.8.3x:80  weight=6;\n    }\n\n   upstream mysvr2 {\n    #weigth参数表示权值，权值越高被分配到的几率越大\n\n    server 192.168.8.x:80  weight=1;\n    server 192.168.8.x:80  weight=6;\n    }\n\n   #第一个虚拟服务器\n   server {\n    #侦听192.168.8.x的80端口\n        listen       80;\n        server_name  192.168.8.x;\n\n      #对aspx后缀的进行负载均衡请求\n    location ~ .*\\.aspx$ {\n\n         root   /root;      #定义服务器的默认网站根目录位置\n          index index.php index.html index.htm;   #定义首页索引文件的名称\n\n          proxy_pass  http://mysvr ;#请求转向mysvr 定义的服务器列表\n\n          #以下是一些反向代理的配置可删除.\n\n          proxy_redirect off;\n\n          #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n          proxy_set_header Host $host;\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n          client_max_body_size 10m;    #允许客户端请求的最大单文件字节数\n          client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，\n          proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)\n          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)\n          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)\n          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）\n          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n\n       }\n     }\n}\n```\n\n\n## nginx启动,重启,以及关闭命令\n\n### 停止\n1 查询nginx进程号然后kill掉\n`ps -ef | ag nginx`\n在进程列表里 面找master进程，它的编号就是主进程号了。\n\n2 发送信号\n从容停止Nginx：\nkill -QUIT 主进程号\n快速停止Nginx：\nkill -TERM 主进程号\n强制停止Nginx：\npkill -9 nginx\n\n我使用的`zsh` 所以关闭起来很容易, 直接`kill nginx`然后按`tab`就可以显示出`nginx`进程号\n\n### 重启\n**注意**，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：\n`nginx -t -c /usr/nginx/conf/nginx.conf`\n\n重启`/usr/nginx/sbin/nginx -s reload`\n","source":"_posts/Nginx反向代理配置字段接受.md","raw":"---\nlayout: post\ntitle: Nginx反向代理配置字段详解\ndate: 2018-02-27 16:22:33\ntags:\n    - Nginx\ncategories: \"Nginx配置详解\"\n---\n\n## 安装`brew install nginx`\n\n如果不清楚安装目录, run `nginx -h` 就可以看到默认的配置文件地址\nmac一般在`/usr/local/etc/nginx`\n\n## 基本配置\n\n```base\n#运行用户\nuser www-data;    \n#启动进程,通常设置成和cpu的数量相等\nworker_processes  1;\n\n#全局错误日志及PID文件\nerror_log  /var/log/nginx/error.log;\npid        /var/run/nginx.pid;\n\n#工作模式及连接数上限\nevents {\n    use   epoll;             #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能\n    worker_connections  1024;#单个后台worker process进程的最大并发链接数\n    # multi_accept on; \n}\n\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp {\n     #设定mime类型,类型由mime.type文件定义\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    #设定日志格式\n    access_log    /var/log/nginx/access.log;\n\n    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，\n    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #连接超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    tcp_nodelay        on;\n    \n    #开启gzip压缩\n    gzip  on;\n    gzip_disable \"MSIE [1-6]\\.(?!.*SV1)\";\n\n    #设定请求缓冲\n    client_header_buffer_size    1k;\n    large_client_header_buffers  4 4k;\n\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n\n    #设定负载均衡的服务器列表\n     upstream mysvr {\n    #weigth参数表示权值，权值越高被分配到的几率越大\n    #本机上的Squid开启3128端口\n    server 192.168.8.1:3128 weight=5;\n    server 192.168.8.2:80  weight=1;\n    server 192.168.8.3:80  weight=6;\n    }\n\n\n   server {\n    #侦听80端口\n        listen       80;\n        #定义使用www.xx.com访问\n        server_name  www.xx.com;\n\n        #设定本虚拟主机的访问日志\n        access_log  logs/www.xx.com.access.log  main;\n\n    #默认请求\n    location / {\n          root   /root;      #定义服务器的默认网站根目录位置\n          index index.php index.html index.htm;   #定义首页索引文件的名称\n\n          fastcgi_pass  www.xx.com;\n         fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name; \n          include /etc/nginx/fastcgi_params;\n        }\n\n    # 定义错误提示页面\n    error_page   500 502 503 504 /50x.html;  \n        location = /50x.html {\n        root   /root;\n    }\n\n    #静态文件，nginx自己处理\n    location ~ ^/(images|javascript|js|css|flash|media|static)/ {\n        root /var/www/virtual/htdocs;\n        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。\n        expires 30d;\n    }\n    #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.\n    location ~ \\.php$ {\n        root /root;\n        fastcgi_pass 127.0.0.1:9000;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;\n        include fastcgi_params;\n    }\n    #设定查看Nginx状态的地址\n    location /NginxStatus {\n        stub_status            on;\n        access_log              on;\n        auth_basic              \"NginxStatus\";\n        auth_basic_user_file  conf/htpasswd;\n    }\n    #禁止访问 .htxxx 文件\n    location ~ /\\.ht {\n        deny all;\n    }\n  }\n}\n```\n\n\n负载均衡配置\n主要修改http节点内容\n\n```base\n#设定http服务器，利用它的反向代理功能提供负载均衡支持\nhttp {\n     #设定mime类型,类型由mime.type文件定义\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n    #设定日志格式\n    access_log    /var/log/nginx/access.log;\n\n    #省略上文有的一些配置节点\n\n    #。。。。。。。。。。\n\n    #设定负载均衡的服务器列表\n     upstream mysvr {\n    #weigth参数表示权值，权值越高被分配到的几率越大\n    server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口\n    server 192.168.8.2x:80  weight=1;\n    server 192.168.8.3x:80  weight=6;\n    }\n\n   upstream mysvr2 {\n    #weigth参数表示权值，权值越高被分配到的几率越大\n\n    server 192.168.8.x:80  weight=1;\n    server 192.168.8.x:80  weight=6;\n    }\n\n   #第一个虚拟服务器\n   server {\n    #侦听192.168.8.x的80端口\n        listen       80;\n        server_name  192.168.8.x;\n\n      #对aspx后缀的进行负载均衡请求\n    location ~ .*\\.aspx$ {\n\n         root   /root;      #定义服务器的默认网站根目录位置\n          index index.php index.html index.htm;   #定义首页索引文件的名称\n\n          proxy_pass  http://mysvr ;#请求转向mysvr 定义的服务器列表\n\n          #以下是一些反向代理的配置可删除.\n\n          proxy_redirect off;\n\n          #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n          proxy_set_header Host $host;\n          proxy_set_header X-Real-IP $remote_addr;\n          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n          client_max_body_size 10m;    #允许客户端请求的最大单文件字节数\n          client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，\n          proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)\n          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)\n          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)\n          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置\n          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）\n          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n\n       }\n     }\n}\n```\n\n\n## nginx启动,重启,以及关闭命令\n\n### 停止\n1 查询nginx进程号然后kill掉\n`ps -ef | ag nginx`\n在进程列表里 面找master进程，它的编号就是主进程号了。\n\n2 发送信号\n从容停止Nginx：\nkill -QUIT 主进程号\n快速停止Nginx：\nkill -TERM 主进程号\n强制停止Nginx：\npkill -9 nginx\n\n我使用的`zsh` 所以关闭起来很容易, 直接`kill nginx`然后按`tab`就可以显示出`nginx`进程号\n\n### 重启\n**注意**，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：\n`nginx -t -c /usr/nginx/conf/nginx.conf`\n\n重启`/usr/nginx/sbin/nginx -s reload`\n","slug":"Nginx反向代理配置字段接受","published":1,"updated":"2019-05-13T03:56:03.231Z","comments":1,"photos":[],"link":"","_id":"cjvluebco000oa0dmd7gu9338","content":"<h2 id=\"安装brew-install-nginx\"><a href=\"#安装brew-install-nginx\" class=\"headerlink\" title=\"安装brew install nginx\"></a>安装<code>brew install nginx</code></h2><p>如果不清楚安装目录, run <code>nginx -h</code> 就可以看到默认的配置文件地址<br>mac一般在<code>/usr/local/etc/nginx</code></p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div></pre></td><td class=\"code\"><pre><div class=\"line\">#运行用户</div><div class=\"line\">user www-data;    </div><div class=\"line\">#启动进程,通常设置成和cpu的数量相等</div><div class=\"line\">worker_processes  1;</div><div class=\"line\"></div><div class=\"line\">#全局错误日志及PID文件</div><div class=\"line\">error_log  /var/log/nginx/error.log;</div><div class=\"line\">pid        /var/run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">#工作模式及连接数上限</div><div class=\"line\">events &#123;</div><div class=\"line\">    use   epoll;             #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</div><div class=\"line\">    worker_connections  1024;#单个后台worker process进程的最大并发链接数</div><div class=\"line\">    # multi_accept on; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class=\"line\">http &#123;</div><div class=\"line\">     #设定mime类型,类型由mime.type文件定义</div><div class=\"line\">    include       /etc/nginx/mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\">    #设定日志格式</div><div class=\"line\">    access_log    /var/log/nginx/access.log;</div><div class=\"line\"></div><div class=\"line\">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</div><div class=\"line\">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</div><div class=\"line\">    sendfile        on;</div><div class=\"line\">    #tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">    #连接超时时间</div><div class=\"line\">    #keepalive_timeout  0;</div><div class=\"line\">    keepalive_timeout  65;</div><div class=\"line\">    tcp_nodelay        on;</div><div class=\"line\">    </div><div class=\"line\">    #开启gzip压缩</div><div class=\"line\">    gzip  on;</div><div class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.(?!.*SV1)&quot;;</div><div class=\"line\"></div><div class=\"line\">    #设定请求缓冲</div><div class=\"line\">    client_header_buffer_size    1k;</div><div class=\"line\">    large_client_header_buffers  4 4k;</div><div class=\"line\"></div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\">    include /etc/nginx/sites-enabled/*;</div><div class=\"line\"></div><div class=\"line\">    #设定负载均衡的服务器列表</div><div class=\"line\">     upstream mysvr &#123;</div><div class=\"line\">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class=\"line\">    #本机上的Squid开启3128端口</div><div class=\"line\">    server 192.168.8.1:3128 weight=5;</div><div class=\"line\">    server 192.168.8.2:80  weight=1;</div><div class=\"line\">    server 192.168.8.3:80  weight=6;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   server &#123;</div><div class=\"line\">    #侦听80端口</div><div class=\"line\">        listen       80;</div><div class=\"line\">        #定义使用www.xx.com访问</div><div class=\"line\">        server_name  www.xx.com;</div><div class=\"line\"></div><div class=\"line\">        #设定本虚拟主机的访问日志</div><div class=\"line\">        access_log  logs/www.xx.com.access.log  main;</div><div class=\"line\"></div><div class=\"line\">    #默认请求</div><div class=\"line\">    location / &#123;</div><div class=\"line\">          root   /root;      #定义服务器的默认网站根目录位置</div><div class=\"line\">          index index.php index.html index.htm;   #定义首页索引文件的名称</div><div class=\"line\"></div><div class=\"line\">          fastcgi_pass  www.xx.com;</div><div class=\"line\">         fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name; </div><div class=\"line\">          include /etc/nginx/fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    # 定义错误提示页面</div><div class=\"line\">    error_page   500 502 503 504 /50x.html;  </div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">        root   /root;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    #静态文件，nginx自己处理</div><div class=\"line\">    location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</div><div class=\"line\">        root /var/www/virtual/htdocs;</div><div class=\"line\">        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</div><div class=\"line\">        expires 30d;</div><div class=\"line\">    &#125;</div><div class=\"line\">    #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        root /root;</div><div class=\"line\">        fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">    #设定查看Nginx状态的地址</div><div class=\"line\">    location /NginxStatus &#123;</div><div class=\"line\">        stub_status            on;</div><div class=\"line\">        access_log              on;</div><div class=\"line\">        auth_basic              &quot;NginxStatus&quot;;</div><div class=\"line\">        auth_basic_user_file  conf/htpasswd;</div><div class=\"line\">    &#125;</div><div class=\"line\">    #禁止访问 .htxxx 文件</div><div class=\"line\">    location ~ /\\.ht &#123;</div><div class=\"line\">        deny all;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>负载均衡配置<br>主要修改http节点内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class=\"line\">http &#123;</div><div class=\"line\">     #设定mime类型,类型由mime.type文件定义</div><div class=\"line\">    include       /etc/nginx/mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\">    #设定日志格式</div><div class=\"line\">    access_log    /var/log/nginx/access.log;</div><div class=\"line\"></div><div class=\"line\">    #省略上文有的一些配置节点</div><div class=\"line\"></div><div class=\"line\">    #。。。。。。。。。。</div><div class=\"line\"></div><div class=\"line\">    #设定负载均衡的服务器列表</div><div class=\"line\">     upstream mysvr &#123;</div><div class=\"line\">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class=\"line\">    server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口</div><div class=\"line\">    server 192.168.8.2x:80  weight=1;</div><div class=\"line\">    server 192.168.8.3x:80  weight=6;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   upstream mysvr2 &#123;</div><div class=\"line\">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class=\"line\"></div><div class=\"line\">    server 192.168.8.x:80  weight=1;</div><div class=\"line\">    server 192.168.8.x:80  weight=6;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   #第一个虚拟服务器</div><div class=\"line\">   server &#123;</div><div class=\"line\">    #侦听192.168.8.x的80端口</div><div class=\"line\">        listen       80;</div><div class=\"line\">        server_name  192.168.8.x;</div><div class=\"line\"></div><div class=\"line\">      #对aspx后缀的进行负载均衡请求</div><div class=\"line\">    location ~ .*\\.aspx$ &#123;</div><div class=\"line\"></div><div class=\"line\">         root   /root;      #定义服务器的默认网站根目录位置</div><div class=\"line\">          index index.php index.html index.htm;   #定义首页索引文件的名称</div><div class=\"line\"></div><div class=\"line\">          proxy_pass  http://mysvr ;#请求转向mysvr 定义的服务器列表</div><div class=\"line\"></div><div class=\"line\">          #以下是一些反向代理的配置可删除.</div><div class=\"line\"></div><div class=\"line\">          proxy_redirect off;</div><div class=\"line\"></div><div class=\"line\">          #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</div><div class=\"line\">          proxy_set_header Host $host;</div><div class=\"line\">          proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">          client_max_body_size 10m;    #允许客户端请求的最大单文件字节数</div><div class=\"line\">          client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，</div><div class=\"line\">          proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)</div><div class=\"line\">          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)</div><div class=\"line\">          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)</div><div class=\"line\">          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小</div><div class=\"line\">          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</div><div class=\"line\">          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）</div><div class=\"line\">          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nginx启动-重启-以及关闭命令\"><a href=\"#nginx启动-重启-以及关闭命令\" class=\"headerlink\" title=\"nginx启动,重启,以及关闭命令\"></a>nginx启动,重启,以及关闭命令</h2><h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><p>1 查询nginx进程号然后kill掉<br><code>ps -ef | ag nginx</code><br>在进程列表里 面找master进程，它的编号就是主进程号了。</p>\n<p>2 发送信号<br>从容停止Nginx：<br>kill -QUIT 主进程号<br>快速停止Nginx：<br>kill -TERM 主进程号<br>强制停止Nginx：<br>pkill -9 nginx</p>\n<p>我使用的<code>zsh</code> 所以关闭起来很容易, 直接<code>kill nginx</code>然后按<code>tab</code>就可以显示出<code>nginx</code>进程号</p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p><strong>注意</strong>，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：<br><code>nginx -t -c /usr/nginx/conf/nginx.conf</code></p>\n<p>重启<code>/usr/nginx/sbin/nginx -s reload</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装brew-install-nginx\"><a href=\"#安装brew-install-nginx\" class=\"headerlink\" title=\"安装brew install nginx\"></a>安装<code>brew install nginx</code></h2><p>如果不清楚安装目录, run <code>nginx -h</code> 就可以看到默认的配置文件地址<br>mac一般在<code>/usr/local/etc/nginx</code></p>\n<h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div></pre></td><td class=\"code\"><pre><div class=\"line\">#运行用户</div><div class=\"line\">user www-data;    </div><div class=\"line\">#启动进程,通常设置成和cpu的数量相等</div><div class=\"line\">worker_processes  1;</div><div class=\"line\"></div><div class=\"line\">#全局错误日志及PID文件</div><div class=\"line\">error_log  /var/log/nginx/error.log;</div><div class=\"line\">pid        /var/run/nginx.pid;</div><div class=\"line\"></div><div class=\"line\">#工作模式及连接数上限</div><div class=\"line\">events &#123;</div><div class=\"line\">    use   epoll;             #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</div><div class=\"line\">    worker_connections  1024;#单个后台worker process进程的最大并发链接数</div><div class=\"line\">    # multi_accept on; </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class=\"line\">http &#123;</div><div class=\"line\">     #设定mime类型,类型由mime.type文件定义</div><div class=\"line\">    include       /etc/nginx/mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\">    #设定日志格式</div><div class=\"line\">    access_log    /var/log/nginx/access.log;</div><div class=\"line\"></div><div class=\"line\">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</div><div class=\"line\">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</div><div class=\"line\">    sendfile        on;</div><div class=\"line\">    #tcp_nopush     on;</div><div class=\"line\"></div><div class=\"line\">    #连接超时时间</div><div class=\"line\">    #keepalive_timeout  0;</div><div class=\"line\">    keepalive_timeout  65;</div><div class=\"line\">    tcp_nodelay        on;</div><div class=\"line\">    </div><div class=\"line\">    #开启gzip压缩</div><div class=\"line\">    gzip  on;</div><div class=\"line\">    gzip_disable &quot;MSIE [1-6]\\.(?!.*SV1)&quot;;</div><div class=\"line\"></div><div class=\"line\">    #设定请求缓冲</div><div class=\"line\">    client_header_buffer_size    1k;</div><div class=\"line\">    large_client_header_buffers  4 4k;</div><div class=\"line\"></div><div class=\"line\">    include /etc/nginx/conf.d/*.conf;</div><div class=\"line\">    include /etc/nginx/sites-enabled/*;</div><div class=\"line\"></div><div class=\"line\">    #设定负载均衡的服务器列表</div><div class=\"line\">     upstream mysvr &#123;</div><div class=\"line\">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class=\"line\">    #本机上的Squid开启3128端口</div><div class=\"line\">    server 192.168.8.1:3128 weight=5;</div><div class=\"line\">    server 192.168.8.2:80  weight=1;</div><div class=\"line\">    server 192.168.8.3:80  weight=6;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   server &#123;</div><div class=\"line\">    #侦听80端口</div><div class=\"line\">        listen       80;</div><div class=\"line\">        #定义使用www.xx.com访问</div><div class=\"line\">        server_name  www.xx.com;</div><div class=\"line\"></div><div class=\"line\">        #设定本虚拟主机的访问日志</div><div class=\"line\">        access_log  logs/www.xx.com.access.log  main;</div><div class=\"line\"></div><div class=\"line\">    #默认请求</div><div class=\"line\">    location / &#123;</div><div class=\"line\">          root   /root;      #定义服务器的默认网站根目录位置</div><div class=\"line\">          index index.php index.html index.htm;   #定义首页索引文件的名称</div><div class=\"line\"></div><div class=\"line\">          fastcgi_pass  www.xx.com;</div><div class=\"line\">         fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name; </div><div class=\"line\">          include /etc/nginx/fastcgi_params;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    # 定义错误提示页面</div><div class=\"line\">    error_page   500 502 503 504 /50x.html;  </div><div class=\"line\">        location = /50x.html &#123;</div><div class=\"line\">        root   /root;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    #静态文件，nginx自己处理</div><div class=\"line\">    location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</div><div class=\"line\">        root /var/www/virtual/htdocs;</div><div class=\"line\">        #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</div><div class=\"line\">        expires 30d;</div><div class=\"line\">    &#125;</div><div class=\"line\">    #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</div><div class=\"line\">    location ~ \\.php$ &#123;</div><div class=\"line\">        root /root;</div><div class=\"line\">        fastcgi_pass 127.0.0.1:9000;</div><div class=\"line\">        fastcgi_index index.php;</div><div class=\"line\">        fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;</div><div class=\"line\">        include fastcgi_params;</div><div class=\"line\">    &#125;</div><div class=\"line\">    #设定查看Nginx状态的地址</div><div class=\"line\">    location /NginxStatus &#123;</div><div class=\"line\">        stub_status            on;</div><div class=\"line\">        access_log              on;</div><div class=\"line\">        auth_basic              &quot;NginxStatus&quot;;</div><div class=\"line\">        auth_basic_user_file  conf/htpasswd;</div><div class=\"line\">    &#125;</div><div class=\"line\">    #禁止访问 .htxxx 文件</div><div class=\"line\">    location ~ /\\.ht &#123;</div><div class=\"line\">        deny all;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>负载均衡配置<br>主要修改http节点内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\">#设定http服务器，利用它的反向代理功能提供负载均衡支持</div><div class=\"line\">http &#123;</div><div class=\"line\">     #设定mime类型,类型由mime.type文件定义</div><div class=\"line\">    include       /etc/nginx/mime.types;</div><div class=\"line\">    default_type  application/octet-stream;</div><div class=\"line\">    #设定日志格式</div><div class=\"line\">    access_log    /var/log/nginx/access.log;</div><div class=\"line\"></div><div class=\"line\">    #省略上文有的一些配置节点</div><div class=\"line\"></div><div class=\"line\">    #。。。。。。。。。。</div><div class=\"line\"></div><div class=\"line\">    #设定负载均衡的服务器列表</div><div class=\"line\">     upstream mysvr &#123;</div><div class=\"line\">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class=\"line\">    server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口</div><div class=\"line\">    server 192.168.8.2x:80  weight=1;</div><div class=\"line\">    server 192.168.8.3x:80  weight=6;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   upstream mysvr2 &#123;</div><div class=\"line\">    #weigth参数表示权值，权值越高被分配到的几率越大</div><div class=\"line\"></div><div class=\"line\">    server 192.168.8.x:80  weight=1;</div><div class=\"line\">    server 192.168.8.x:80  weight=6;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">   #第一个虚拟服务器</div><div class=\"line\">   server &#123;</div><div class=\"line\">    #侦听192.168.8.x的80端口</div><div class=\"line\">        listen       80;</div><div class=\"line\">        server_name  192.168.8.x;</div><div class=\"line\"></div><div class=\"line\">      #对aspx后缀的进行负载均衡请求</div><div class=\"line\">    location ~ .*\\.aspx$ &#123;</div><div class=\"line\"></div><div class=\"line\">         root   /root;      #定义服务器的默认网站根目录位置</div><div class=\"line\">          index index.php index.html index.htm;   #定义首页索引文件的名称</div><div class=\"line\"></div><div class=\"line\">          proxy_pass  http://mysvr ;#请求转向mysvr 定义的服务器列表</div><div class=\"line\"></div><div class=\"line\">          #以下是一些反向代理的配置可删除.</div><div class=\"line\"></div><div class=\"line\">          proxy_redirect off;</div><div class=\"line\"></div><div class=\"line\">          #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</div><div class=\"line\">          proxy_set_header Host $host;</div><div class=\"line\">          proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">          client_max_body_size 10m;    #允许客户端请求的最大单文件字节数</div><div class=\"line\">          client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，</div><div class=\"line\">          proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)</div><div class=\"line\">          proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)</div><div class=\"line\">          proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)</div><div class=\"line\">          proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小</div><div class=\"line\">          proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</div><div class=\"line\">          proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）</div><div class=\"line\">          proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\">     &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"nginx启动-重启-以及关闭命令\"><a href=\"#nginx启动-重启-以及关闭命令\" class=\"headerlink\" title=\"nginx启动,重启,以及关闭命令\"></a>nginx启动,重启,以及关闭命令</h2><h3 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h3><p>1 查询nginx进程号然后kill掉<br><code>ps -ef | ag nginx</code><br>在进程列表里 面找master进程，它的编号就是主进程号了。</p>\n<p>2 发送信号<br>从容停止Nginx：<br>kill -QUIT 主进程号<br>快速停止Nginx：<br>kill -TERM 主进程号<br>强制停止Nginx：<br>pkill -9 nginx</p>\n<p>我使用的<code>zsh</code> 所以关闭起来很容易, 直接<code>kill nginx</code>然后按<code>tab</code>就可以显示出<code>nginx</code>进程号</p>\n<h3 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h3><p><strong>注意</strong>，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。判断Nginx配置是否正确命令如下：<br><code>nginx -t -c /usr/nginx/conf/nginx.conf</code></p>\n<p>重启<code>/usr/nginx/sbin/nginx -s reload</code></p>\n"},{"title":"emacs使用笔记","date":"2017-07-04T01:48:00.000Z","_content":"\n记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西\n\n<!-- more -->\n\n- M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；\n- M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；\n- M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；\n- M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。\n\n### emacs 编辑时好用的会快捷键\n\n- `C-t` 命令用来交换两个字母的位置\n- `C-x C-t`这个命令进行交换2行。\n- 使单词首字母大写 `M-c` 来将光标所指向的字母首字母大写\n- `Alt-shift-%`，替换字符创\n- 使用命令`M-u` 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)\n","source":"_posts/emacs使用笔记.md","raw":"---\ntitle: emacs使用笔记\ndate: 2017-07-04 09:48:00\ntags:\n    - emacs\n    - emacs API\n---\n\n记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西\n\n<!-- more -->\n\n- M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；\n- M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；\n- M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；\n- M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。\n\n### emacs 编辑时好用的会快捷键\n\n- `C-t` 命令用来交换两个字母的位置\n- `C-x C-t`这个命令进行交换2行。\n- 使单词首字母大写 `M-c` 来将光标所指向的字母首字母大写\n- `Alt-shift-%`，替换字符创\n- 使用命令`M-u` 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)\n","slug":"emacs使用笔记","published":1,"updated":"2019-05-13T03:56:03.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebcr000ra0dmt332h0iv","content":"<p>记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西</p>\n<a id=\"more\"></a>\n<ul>\n<li>M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；</li>\n<li>M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；</li>\n<li>M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；</li>\n<li>M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。</li>\n</ul>\n<h3 id=\"emacs-编辑时好用的会快捷键\"><a href=\"#emacs-编辑时好用的会快捷键\" class=\"headerlink\" title=\"emacs 编辑时好用的会快捷键\"></a>emacs 编辑时好用的会快捷键</h3><ul>\n<li><code>C-t</code> 命令用来交换两个字母的位置</li>\n<li><code>C-x C-t</code>这个命令进行交换2行。</li>\n<li>使单词首字母大写 <code>M-c</code> 来将光标所指向的字母首字母大写</li>\n<li><code>Alt-shift-%</code>，替换字符创</li>\n<li>使用命令<code>M-u</code> 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西</p>","more":"<ul>\n<li>M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；</li>\n<li>M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；</li>\n<li>M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；</li>\n<li>M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。</li>\n</ul>\n<h3 id=\"emacs-编辑时好用的会快捷键\"><a href=\"#emacs-编辑时好用的会快捷键\" class=\"headerlink\" title=\"emacs 编辑时好用的会快捷键\"></a>emacs 编辑时好用的会快捷键</h3><ul>\n<li><code>C-t</code> 命令用来交换两个字母的位置</li>\n<li><code>C-x C-t</code>这个命令进行交换2行。</li>\n<li>使单词首字母大写 <code>M-c</code> 来将光标所指向的字母首字母大写</li>\n<li><code>Alt-shift-%</code>，替换字符创</li>\n<li>使用命令<code>M-u</code> 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)</li>\n</ul>"},{"layout":"post","title":"js中迭代器和生成器","date":"2018-02-02T09:06:36.000Z","_content":"# 迭代器和可迭代对象\n\n请先看看[可迭代协议和迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n\n## 定义\n\n迭代器`iterator`是一个`Object`, 这个`Object`有一个`next`函数, 该函数返回一个`value`和`done`属性额`Object`其中`value`指向迭代序列中下一个值 . 这样看来迭代器中定义简直简单的感人......\n\n栗子:\n``` javascript\n/**\n* 制作一个迭代器\n**/\nfunction makeIterator(array) {\n    console.log(\"Enter this function\");\n    var nextIndex = 0; // 设置局部count\n    return {\n        next: function () {\n            return nextIndex < array.length ?\n                {value: array[nextIndex++], done: false } :\n                { done: true }\n        }\n    };\n}\n var iteratorT = makeIterator([1, 2, 3]);\n     console.log(iteratorT) // 打印出{next}函数\n     console.log(iteratorT.next().value); // 1\n     console.log(iteratorT.next().value); // 2\n     console.log(iteratorT.next().value); // 3\n     console.log(iteratorT.next().done);  false\n```\n\n## 可迭代协议\n\n这是一个协议, 一旦支持可迭代协议, 就意味着该`Object`可以用`for-of`来遍历, 可以用来定义或者定制js对象的迭代行为. 常见的内建类型比如`Array & Map` 都是支持可迭代协议的.\n\n### 实现该协议\n\n对象必须实现@@iterator方法,  意味着对象必须有一个带有@@iterator key的可以通过常量`Symbol.iterator`访问到的属性.\n`Symbol.iterator` 属性 返回一个对象的无参数函数, 被返回对象符合迭代协议\n\n## 迭代器协议\n\n上面的例子就是一个迭代器协议的实现 `iterator`协议定义了产生`value`序列的一种标准方法, 只要实现符合要求的next函数, 改对象就是一个迭代器. 这个概念是不是和`golang`中的`interface`相似呢.\n\n`String`内置的可迭代对象\n```javascript\nvar someString = \"hi\";\ntypeof someString[Symbol.iterator];          // \"function\"\n```\n\n可见`String`内部已经实现了可迭代协议\n\nString 的默认迭代器会一个接一个返回该字符串的字符\n\n```javascript\nvar iterator = someString[Symbol.iterator]();\niterator + \"\";                               // \"[object String Iterator]\"\n\niterator.next();                             // { value: \"h\", done: false }\niterator.next();                             // { value: \"i\", done: false }\niterator.next();                             // { value: undefined, done: true }\n```\n\n我们可以通过自己的 @@iterator 方法重新定义迭代行为：\n```javascript\nvar someString = new String(\"hi\");          // need to construct a String object explicitly to avoid auto-boxing\n\nsomeString[Symbol.iterator] = function() {\n  return { // this is the iterator object, returning a single element, the string \"bye\"\n    next: function() {\n      if (this._first) {\n        this._first = false;\n        return { value: \"bye\", done: false };\n      } else {\n        return { done: true };\n      }\n    },\n    _first: true\n  };\n};\n```\n\n`String`, `Array`, `TypedArray`, `Map and Set` 是所有内置可迭代对象， 因为它们的原型对象都有一个 `@@iterator` 方法.\n\n\n### 自定义可迭代对象\n\n```javascript\nvar myIterator = {};\n\nmyIterator[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\n[ ...myIterator ] //[1, 2, 3]\n```\n\n\n如何还有不理解的可以自己去mdn上面仔细看看.\n","source":"_posts/es6中yield关键字的理解.md","raw":"---\nlayout: post\ntitle: js中迭代器和生成器\ndate: 2018-02-02 17:06:36\ntags:\n    - yield\n    - es6\n    - 迭代器\n    - 可迭代对象\n    - 生成器\ncategories: \"算法\"\n---\n# 迭代器和可迭代对象\n\n请先看看[可迭代协议和迭代器协议](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n\n## 定义\n\n迭代器`iterator`是一个`Object`, 这个`Object`有一个`next`函数, 该函数返回一个`value`和`done`属性额`Object`其中`value`指向迭代序列中下一个值 . 这样看来迭代器中定义简直简单的感人......\n\n栗子:\n``` javascript\n/**\n* 制作一个迭代器\n**/\nfunction makeIterator(array) {\n    console.log(\"Enter this function\");\n    var nextIndex = 0; // 设置局部count\n    return {\n        next: function () {\n            return nextIndex < array.length ?\n                {value: array[nextIndex++], done: false } :\n                { done: true }\n        }\n    };\n}\n var iteratorT = makeIterator([1, 2, 3]);\n     console.log(iteratorT) // 打印出{next}函数\n     console.log(iteratorT.next().value); // 1\n     console.log(iteratorT.next().value); // 2\n     console.log(iteratorT.next().value); // 3\n     console.log(iteratorT.next().done);  false\n```\n\n## 可迭代协议\n\n这是一个协议, 一旦支持可迭代协议, 就意味着该`Object`可以用`for-of`来遍历, 可以用来定义或者定制js对象的迭代行为. 常见的内建类型比如`Array & Map` 都是支持可迭代协议的.\n\n### 实现该协议\n\n对象必须实现@@iterator方法,  意味着对象必须有一个带有@@iterator key的可以通过常量`Symbol.iterator`访问到的属性.\n`Symbol.iterator` 属性 返回一个对象的无参数函数, 被返回对象符合迭代协议\n\n## 迭代器协议\n\n上面的例子就是一个迭代器协议的实现 `iterator`协议定义了产生`value`序列的一种标准方法, 只要实现符合要求的next函数, 改对象就是一个迭代器. 这个概念是不是和`golang`中的`interface`相似呢.\n\n`String`内置的可迭代对象\n```javascript\nvar someString = \"hi\";\ntypeof someString[Symbol.iterator];          // \"function\"\n```\n\n可见`String`内部已经实现了可迭代协议\n\nString 的默认迭代器会一个接一个返回该字符串的字符\n\n```javascript\nvar iterator = someString[Symbol.iterator]();\niterator + \"\";                               // \"[object String Iterator]\"\n\niterator.next();                             // { value: \"h\", done: false }\niterator.next();                             // { value: \"i\", done: false }\niterator.next();                             // { value: undefined, done: true }\n```\n\n我们可以通过自己的 @@iterator 方法重新定义迭代行为：\n```javascript\nvar someString = new String(\"hi\");          // need to construct a String object explicitly to avoid auto-boxing\n\nsomeString[Symbol.iterator] = function() {\n  return { // this is the iterator object, returning a single element, the string \"bye\"\n    next: function() {\n      if (this._first) {\n        this._first = false;\n        return { value: \"bye\", done: false };\n      } else {\n        return { done: true };\n      }\n    },\n    _first: true\n  };\n};\n```\n\n`String`, `Array`, `TypedArray`, `Map and Set` 是所有内置可迭代对象， 因为它们的原型对象都有一个 `@@iterator` 方法.\n\n\n### 自定义可迭代对象\n\n```javascript\nvar myIterator = {};\n\nmyIterator[Symbol.iterator] = function* () {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n\n[ ...myIterator ] //[1, 2, 3]\n```\n\n\n如何还有不理解的可以自己去mdn上面仔细看看.\n","slug":"es6中yield关键字的理解","published":1,"updated":"2019-05-13T03:56:03.234Z","comments":1,"photos":[],"link":"","_id":"cjvluebcu000sa0dmw2ky0e7p","content":"<h1 id=\"迭代器和可迭代对象\"><a href=\"#迭代器和可迭代对象\" class=\"headerlink\" title=\"迭代器和可迭代对象\"></a>迭代器和可迭代对象</h1><p>请先看看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\" rel=\"external\">可迭代协议和迭代器协议</a></p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>迭代器<code>iterator</code>是一个<code>Object</code>, 这个<code>Object</code>有一个<code>next</code>函数, 该函数返回一个<code>value</code>和<code>done</code>属性额<code>Object</code>其中<code>value</code>指向迭代序列中下一个值 . 这样看来迭代器中定义简直简单的感人……</p>\n<p>栗子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 制作一个迭代器</div><div class=\"line\">**/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeIterator</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Enter this function\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>; <span class=\"comment\">// 设置局部count</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">next</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex &lt; array.length ?</div><div class=\"line\">                &#123;<span class=\"attr\">value</span>: array[nextIndex++], <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125; :</div><div class=\"line\">                &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> iteratorT = makeIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT) <span class=\"comment\">// 打印出&#123;next&#125;函数</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().value); <span class=\"comment\">// 1</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().value); <span class=\"comment\">// 2</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().value); <span class=\"comment\">// 3</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().done);  <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"可迭代协议\"><a href=\"#可迭代协议\" class=\"headerlink\" title=\"可迭代协议\"></a>可迭代协议</h2><p>这是一个协议, 一旦支持可迭代协议, 就意味着该<code>Object</code>可以用<code>for-of</code>来遍历, 可以用来定义或者定制js对象的迭代行为. 常见的内建类型比如<code>Array &amp; Map</code> 都是支持可迭代协议的.</p>\n<h3 id=\"实现该协议\"><a href=\"#实现该协议\" class=\"headerlink\" title=\"实现该协议\"></a>实现该协议</h3><p>对象必须实现@@iterator方法,  意味着对象必须有一个带有@@iterator key的可以通过常量<code>Symbol.iterator</code>访问到的属性.<br><code>Symbol.iterator</code> 属性 返回一个对象的无参数函数, 被返回对象符合迭代协议</p>\n<h2 id=\"迭代器协议\"><a href=\"#迭代器协议\" class=\"headerlink\" title=\"迭代器协议\"></a>迭代器协议</h2><p>上面的例子就是一个迭代器协议的实现 <code>iterator</code>协议定义了产生<code>value</code>序列的一种标准方法, 只要实现符合要求的next函数, 改对象就是一个迭代器. 这个概念是不是和<code>golang</code>中的<code>interface</code>相似呢.</p>\n<p><code>String</code>内置的可迭代对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">\"hi\"</span>;</div><div class=\"line\"><span class=\"keyword\">typeof</span> someString[<span class=\"built_in\">Symbol</span>.iterator];          <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure></p>\n<p>可见<code>String</code>内部已经实现了可迭代协议</p>\n<p>String 的默认迭代器会一个接一个返回该字符串的字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> iterator = someString[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\">iterator + <span class=\"string\">\"\"</span>;                               <span class=\"comment\">// \"[object String Iterator]\"</span></div><div class=\"line\"></div><div class=\"line\">iterator.next();                             <span class=\"comment\">// &#123; value: \"h\", done: false &#125;</span></div><div class=\"line\">iterator.next();                             <span class=\"comment\">// &#123; value: \"i\", done: false &#125;</span></div><div class=\"line\">iterator.next();                             <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>\n<p>我们可以通过自己的 @@iterator 方法重新定义迭代行为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"hi\"</span>);          <span class=\"comment\">// need to construct a String object explicitly to avoid auto-boxing</span></div><div class=\"line\"></div><div class=\"line\">someString[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// this is the iterator object, returning a single element, the string \"bye\"</span></div><div class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._first) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._first = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">\"bye\"</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">_first</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>String</code>, <code>Array</code>, <code>TypedArray</code>, <code>Map and Set</code> 是所有内置可迭代对象， 因为它们的原型对象都有一个 <code>@@iterator</code> 方法.</p>\n<h3 id=\"自定义可迭代对象\"><a href=\"#自定义可迭代对象\" class=\"headerlink\" title=\"自定义可迭代对象\"></a>自定义可迭代对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myIterator = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">myIterator[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[ ...myIterator ] <span class=\"comment\">//[1, 2, 3]</span></div></pre></td></tr></table></figure>\n<p>如何还有不理解的可以自己去mdn上面仔细看看.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"迭代器和可迭代对象\"><a href=\"#迭代器和可迭代对象\" class=\"headerlink\" title=\"迭代器和可迭代对象\"></a>迭代器和可迭代对象</h1><p>请先看看<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\" rel=\"external\">可迭代协议和迭代器协议</a></p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>迭代器<code>iterator</code>是一个<code>Object</code>, 这个<code>Object</code>有一个<code>next</code>函数, 该函数返回一个<code>value</code>和<code>done</code>属性额<code>Object</code>其中<code>value</code>指向迭代序列中下一个值 . 这样看来迭代器中定义简直简单的感人……</p>\n<p>栗子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* 制作一个迭代器</div><div class=\"line\">**/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeIterator</span>(<span class=\"params\">array</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Enter this function\"</span>);</div><div class=\"line\">    <span class=\"keyword\">var</span> nextIndex = <span class=\"number\">0</span>; <span class=\"comment\">// 设置局部count</span></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">next</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> nextIndex &lt; array.length ?</div><div class=\"line\">                &#123;<span class=\"attr\">value</span>: array[nextIndex++], <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125; :</div><div class=\"line\">                &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"> <span class=\"keyword\">var</span> iteratorT = makeIterator([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT) <span class=\"comment\">// 打印出&#123;next&#125;函数</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().value); <span class=\"comment\">// 1</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().value); <span class=\"comment\">// 2</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().value); <span class=\"comment\">// 3</span></div><div class=\"line\">     <span class=\"built_in\">console</span>.log(iteratorT.next().done);  <span class=\"literal\">false</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"可迭代协议\"><a href=\"#可迭代协议\" class=\"headerlink\" title=\"可迭代协议\"></a>可迭代协议</h2><p>这是一个协议, 一旦支持可迭代协议, 就意味着该<code>Object</code>可以用<code>for-of</code>来遍历, 可以用来定义或者定制js对象的迭代行为. 常见的内建类型比如<code>Array &amp; Map</code> 都是支持可迭代协议的.</p>\n<h3 id=\"实现该协议\"><a href=\"#实现该协议\" class=\"headerlink\" title=\"实现该协议\"></a>实现该协议</h3><p>对象必须实现@@iterator方法,  意味着对象必须有一个带有@@iterator key的可以通过常量<code>Symbol.iterator</code>访问到的属性.<br><code>Symbol.iterator</code> 属性 返回一个对象的无参数函数, 被返回对象符合迭代协议</p>\n<h2 id=\"迭代器协议\"><a href=\"#迭代器协议\" class=\"headerlink\" title=\"迭代器协议\"></a>迭代器协议</h2><p>上面的例子就是一个迭代器协议的实现 <code>iterator</code>协议定义了产生<code>value</code>序列的一种标准方法, 只要实现符合要求的next函数, 改对象就是一个迭代器. 这个概念是不是和<code>golang</code>中的<code>interface</code>相似呢.</p>\n<p><code>String</code>内置的可迭代对象<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">\"hi\"</span>;</div><div class=\"line\"><span class=\"keyword\">typeof</span> someString[<span class=\"built_in\">Symbol</span>.iterator];          <span class=\"comment\">// \"function\"</span></div></pre></td></tr></table></figure></p>\n<p>可见<code>String</code>内部已经实现了可迭代协议</p>\n<p>String 的默认迭代器会一个接一个返回该字符串的字符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> iterator = someString[<span class=\"built_in\">Symbol</span>.iterator]();</div><div class=\"line\">iterator + <span class=\"string\">\"\"</span>;                               <span class=\"comment\">// \"[object String Iterator]\"</span></div><div class=\"line\"></div><div class=\"line\">iterator.next();                             <span class=\"comment\">// &#123; value: \"h\", done: false &#125;</span></div><div class=\"line\">iterator.next();                             <span class=\"comment\">// &#123; value: \"i\", done: false &#125;</span></div><div class=\"line\">iterator.next();                             <span class=\"comment\">// &#123; value: undefined, done: true &#125;</span></div></pre></td></tr></table></figure>\n<p>我们可以通过自己的 @@iterator 方法重新定义迭代行为：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">\"hi\"</span>);          <span class=\"comment\">// need to construct a String object explicitly to avoid auto-boxing</span></div><div class=\"line\"></div><div class=\"line\">someString[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"comment\">// this is the iterator object, returning a single element, the string \"bye\"</span></div><div class=\"line\">    next: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>._first) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>._first = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">value</span>: <span class=\"string\">\"bye\"</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;;</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> &#123; <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">_first</span>: <span class=\"literal\">true</span></div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p><code>String</code>, <code>Array</code>, <code>TypedArray</code>, <code>Map and Set</code> 是所有内置可迭代对象， 因为它们的原型对象都有一个 <code>@@iterator</code> 方法.</p>\n<h3 id=\"自定义可迭代对象\"><a href=\"#自定义可迭代对象\" class=\"headerlink\" title=\"自定义可迭代对象\"></a>自定义可迭代对象</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myIterator = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">myIterator[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span>* (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"number\">3</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">[ ...myIterator ] <span class=\"comment\">//[1, 2, 3]</span></div></pre></td></tr></table></figure>\n<p>如何还有不理解的可以自己去mdn上面仔细看看.</p>\n"},{"title":"es6总的6个优雅的技巧","date":"2017-08-07T08:51:03.000Z","_content":"\n```javascript\n/**\n* Called if a parameter is missing and\n* the default value is evaluated.\n*/\nfunction mandatory() {\n    throw new Error('Missing parameter');\n}\nfunction foo(mustBeProvided = mandatory()) {\n    return mustBeProvided;\n}\n```\n\n使用默认参数来检测函数中的错误!\n\n函数调用 `mandatory()` 只有在参数 `mustBeProvided` 缺失的时候才会被执行。\n\n通过 `for-of` 循环来遍历数组元素和索引\n方法 `forEach()` 允许你遍历一个数组的元素和索引：\n\n```javascript\nvar arr = ['a', 'b', 'c'];\narr.forEach(function (elem, index) {\n    console.log('index = '+index+', elem = '+elem);\n});\n// Output:\n// index = 0, elem = a\n// index = 1, elem = b\n// index = 2, elem = c\n```\n\n### 通过子类工厂实现简单的合成器\n\n当 ES6 类继承另一个类，被继承的类可以是通过任意表达式创建的动态类：\n\n```javascript\n// Function id() simply returns its parameter\nconst id = x => x;\n\nclass Foo extends id(Object) {}\n```\n\n> [转载原文](http://www.zcfy.cc/article/346)\n","source":"_posts/es6总的6个优雅的技巧.md","raw":"---\ntitle: es6总的6个优雅的技巧\ndate: 2017-08-07 16:51:03\ntags:\n    - es6\n---\n\n```javascript\n/**\n* Called if a parameter is missing and\n* the default value is evaluated.\n*/\nfunction mandatory() {\n    throw new Error('Missing parameter');\n}\nfunction foo(mustBeProvided = mandatory()) {\n    return mustBeProvided;\n}\n```\n\n使用默认参数来检测函数中的错误!\n\n函数调用 `mandatory()` 只有在参数 `mustBeProvided` 缺失的时候才会被执行。\n\n通过 `for-of` 循环来遍历数组元素和索引\n方法 `forEach()` 允许你遍历一个数组的元素和索引：\n\n```javascript\nvar arr = ['a', 'b', 'c'];\narr.forEach(function (elem, index) {\n    console.log('index = '+index+', elem = '+elem);\n});\n// Output:\n// index = 0, elem = a\n// index = 1, elem = b\n// index = 2, elem = c\n```\n\n### 通过子类工厂实现简单的合成器\n\n当 ES6 类继承另一个类，被继承的类可以是通过任意表达式创建的动态类：\n\n```javascript\n// Function id() simply returns its parameter\nconst id = x => x;\n\nclass Foo extends id(Object) {}\n```\n\n> [转载原文](http://www.zcfy.cc/article/346)\n","slug":"es6总的6个优雅的技巧","published":1,"updated":"2019-05-13T03:56:03.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebcv000ua0dmocpblmsl","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Called if a parameter is missing and</div><div class=\"line\">* the default value is evaluated.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mandatory</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">mustBeProvided = mandatory(</span>)) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mustBeProvided;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用默认参数来检测函数中的错误!</p>\n<p>函数调用 <code>mandatory()</code> 只有在参数 <code>mustBeProvided</code> 缺失的时候才会被执行。</p>\n<p>通过 <code>for-of</code> 循环来遍历数组元素和索引<br>方法 <code>forEach()</code> 允许你遍历一个数组的元素和索引：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'index = '</span>+index+<span class=\"string\">', elem = '</span>+elem);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// index = 0, elem = a</span></div><div class=\"line\"><span class=\"comment\">// index = 1, elem = b</span></div><div class=\"line\"><span class=\"comment\">// index = 2, elem = c</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过子类工厂实现简单的合成器\"><a href=\"#通过子类工厂实现简单的合成器\" class=\"headerlink\" title=\"通过子类工厂实现简单的合成器\"></a>通过子类工厂实现简单的合成器</h3><p>当 ES6 类继承另一个类，被继承的类可以是通过任意表达式创建的动态类：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Function id() simply returns its parameter</span></div><div class=\"line\"><span class=\"keyword\">const</span> id = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">id</span>(<span class=\"title\">Object</span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://www.zcfy.cc/article/346\" target=\"_blank\" rel=\"external\">转载原文</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">* Called if a parameter is missing and</div><div class=\"line\">* the default value is evaluated.</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mandatory</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Missing parameter'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">mustBeProvided = mandatory(</span>)) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mustBeProvided;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>使用默认参数来检测函数中的错误!</p>\n<p>函数调用 <code>mandatory()</code> 只有在参数 <code>mustBeProvided</code> 缺失的时候才会被执行。</p>\n<p>通过 <code>for-of</code> 循环来遍历数组元素和索引<br>方法 <code>forEach()</code> 允许你遍历一个数组的元素和索引：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">elem, index</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'index = '</span>+index+<span class=\"string\">', elem = '</span>+elem);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// Output:</span></div><div class=\"line\"><span class=\"comment\">// index = 0, elem = a</span></div><div class=\"line\"><span class=\"comment\">// index = 1, elem = b</span></div><div class=\"line\"><span class=\"comment\">// index = 2, elem = c</span></div></pre></td></tr></table></figure>\n<h3 id=\"通过子类工厂实现简单的合成器\"><a href=\"#通过子类工厂实现简单的合成器\" class=\"headerlink\" title=\"通过子类工厂实现简单的合成器\"></a>通过子类工厂实现简单的合成器</h3><p>当 ES6 类继承另一个类，被继承的类可以是通过任意表达式创建的动态类：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Function id() simply returns its parameter</span></div><div class=\"line\"><span class=\"keyword\">const</span> id = <span class=\"function\"><span class=\"params\">x</span> =&gt;</span> x;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> <span class=\"keyword\">extends</span> <span class=\"title\">id</span>(<span class=\"title\">Object</span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://www.zcfy.cc/article/346\" target=\"_blank\" rel=\"external\">转载原文</a></p>\n</blockquote>\n"},{"layout":"post","title":"golang中interface作为函数参数","date":"2017-11-10T08:43:31.000Z","_content":"\n```golang\npackage main\n\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\n// 定义item结构\ntype item struct {\n    Name string\n}\n// item结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法\nfunc (i item) String() string {\n    return fmt.Sprintf(\"item name:%v\", i.Name)\n}\n\n// 定义person结构\ntype person struct {\n    Name string\n    Sex  string\n}\n// person结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法\nfunc (p person) String() string {\n    return fmt.Sprintf(\"person name:%v sex:%v\", p.Name, p.Sex)\n}\n\n// 这种情况一般是需要类型断言。类型断言接受一个接口值， 并从中提取指定的明确类型的值。\n// 其语法借鉴自类型选择开头的子句，但它需要一个明确的类型， 而非 type 关键字：\n// 说白了就是不明确传入type类型,  需要用interface来判断传入的具体type类型来做相应的操作\nfunc Parse(i interface{}) interface{} {\n    switch i.(type) {\n    case string:\n        return &item{\n            Name: i.(string),\n        }\n\n    case []string:\n        data := i.([]string)\n        length := len(data)\n        if length == 2 {\n            return &person{\n                Name: data[0],\n                Sex:  data[1],\n            }\n        } else {\n            return nil\n        }\n\n    default:\n        panic(errors.New(\"Type match miss\"))\n    }\n\n    return nil\n}\n\nfunc main() {\n    p1 := Parse(\"apple\").(*item)\n    fmt.Println(p1)\n    p2 := Parse([]string{\"zhanghan\", \"man\"}).(*person)\n    fmt.Println(p2)// 调用的时候回自动调用String方法\n\n    fmt.Println(p1.Name) // 调用的时候回自动调用String方法\n\n    fmt.Println(p2.Name) // 调用的时候回自动调用String方法\n    fmt.Println(p2.Sex) // 调用的时候回自动调用String方法\n}\n```\n\n```base\n// 运行结果为\n➜  imClientServer\nitem name:apple\nperson name:zhanghan sex:man\napple\nzhanghan\nman\n```\n\n","source":"_posts/golang中interface作为函数参数.md","raw":"---\nlayout: post\ntitle: golang中interface作为函数参数\ndate: 2017-11-10 16:43:31\ntags:\n    - golang\n    - interface{}\ncategories: \"语法理解\"\n---\n\n```golang\npackage main\n\nimport (\n    \"errors\"\n    \"fmt\"\n)\n\n// 定义item结构\ntype item struct {\n    Name string\n}\n// item结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法\nfunc (i item) String() string {\n    return fmt.Sprintf(\"item name:%v\", i.Name)\n}\n\n// 定义person结构\ntype person struct {\n    Name string\n    Sex  string\n}\n// person结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法\nfunc (p person) String() string {\n    return fmt.Sprintf(\"person name:%v sex:%v\", p.Name, p.Sex)\n}\n\n// 这种情况一般是需要类型断言。类型断言接受一个接口值， 并从中提取指定的明确类型的值。\n// 其语法借鉴自类型选择开头的子句，但它需要一个明确的类型， 而非 type 关键字：\n// 说白了就是不明确传入type类型,  需要用interface来判断传入的具体type类型来做相应的操作\nfunc Parse(i interface{}) interface{} {\n    switch i.(type) {\n    case string:\n        return &item{\n            Name: i.(string),\n        }\n\n    case []string:\n        data := i.([]string)\n        length := len(data)\n        if length == 2 {\n            return &person{\n                Name: data[0],\n                Sex:  data[1],\n            }\n        } else {\n            return nil\n        }\n\n    default:\n        panic(errors.New(\"Type match miss\"))\n    }\n\n    return nil\n}\n\nfunc main() {\n    p1 := Parse(\"apple\").(*item)\n    fmt.Println(p1)\n    p2 := Parse([]string{\"zhanghan\", \"man\"}).(*person)\n    fmt.Println(p2)// 调用的时候回自动调用String方法\n\n    fmt.Println(p1.Name) // 调用的时候回自动调用String方法\n\n    fmt.Println(p2.Name) // 调用的时候回自动调用String方法\n    fmt.Println(p2.Sex) // 调用的时候回自动调用String方法\n}\n```\n\n```base\n// 运行结果为\n➜  imClientServer\nitem name:apple\nperson name:zhanghan sex:man\napple\nzhanghan\nman\n```\n\n","slug":"golang中interface作为函数参数","published":1,"updated":"2019-05-13T03:56:03.235Z","comments":1,"photos":[],"link":"","_id":"cjvluebcw000xa0dm46pnc7cd","content":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"errors\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义item结构</span></div><div class=\"line\"><span class=\"keyword\">type</span> item <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// item结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i item)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"item name:%v\"</span>, i.Name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义person结构</span></div><div class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">    Sex  <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// person结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p person)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"person name:%v sex:%v\"</span>, p.Name, p.Sex)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这种情况一般是需要类型断言。类型断言接受一个接口值， 并从中提取指定的明确类型的值。</span></div><div class=\"line\"><span class=\"comment\">// 其语法借鉴自类型选择开头的子句，但它需要一个明确的类型， 而非 type 关键字：</span></div><div class=\"line\"><span class=\"comment\">// 说白了就是不明确传入type类型,  需要用interface来判断传入的具体type类型来做相应的操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">interface</span></span>&#123;&#125; &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> i.(<span class=\"keyword\">type</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> &amp;item&#123;</div><div class=\"line\">            Name: i.(<span class=\"keyword\">string</span>),</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> []<span class=\"keyword\">string</span>:</div><div class=\"line\">        data := i.([]<span class=\"keyword\">string</span>)</div><div class=\"line\">        length := <span class=\"built_in\">len</span>(data)</div><div class=\"line\">        <span class=\"keyword\">if</span> length == <span class=\"number\">2</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;person&#123;</div><div class=\"line\">                Name: data[<span class=\"number\">0</span>],</div><div class=\"line\">                Sex:  data[<span class=\"number\">1</span>],</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">panic</span>(errors.New(<span class=\"string\">\"Type match miss\"</span>))</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    p1 := Parse(<span class=\"string\">\"apple\"</span>).(*item)</div><div class=\"line\">    fmt.Println(p1)</div><div class=\"line\">    p2 := Parse([]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"zhanghan\"</span>, <span class=\"string\">\"man\"</span>&#125;).(*person)</div><div class=\"line\">    fmt.Println(p2)<span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Println(p1.Name) <span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Println(p2.Name) <span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\">    fmt.Println(p2.Sex) <span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 运行结果为</div><div class=\"line\">➜  imClientServer</div><div class=\"line\">item name:apple</div><div class=\"line\">person name:zhanghan sex:man</div><div class=\"line\">apple</div><div class=\"line\">zhanghan</div><div class=\"line\">man</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"errors\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义item结构</span></div><div class=\"line\"><span class=\"keyword\">type</span> item <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// item结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i item)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"item name:%v\"</span>, i.Name)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 定义person结构</span></div><div class=\"line\"><span class=\"keyword\">type</span> person <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name <span class=\"keyword\">string</span></div><div class=\"line\">    Sex  <span class=\"keyword\">string</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// person结构实现Stringer接口 在调用fmt.PrintIn时自动调用String方法</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p person)</span> <span class=\"title\">String</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"person name:%v sex:%v\"</span>, p.Name, p.Sex)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这种情况一般是需要类型断言。类型断言接受一个接口值， 并从中提取指定的明确类型的值。</span></div><div class=\"line\"><span class=\"comment\">// 其语法借鉴自类型选择开头的子句，但它需要一个明确的类型， 而非 type 关键字：</span></div><div class=\"line\"><span class=\"comment\">// 说白了就是不明确传入type类型,  需要用interface来判断传入的具体type类型来做相应的操作</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Parse</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">interface</span></span>&#123;&#125; &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> i.(<span class=\"keyword\">type</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> &amp;item&#123;</div><div class=\"line\">            Name: i.(<span class=\"keyword\">string</span>),</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">case</span> []<span class=\"keyword\">string</span>:</div><div class=\"line\">        data := i.([]<span class=\"keyword\">string</span>)</div><div class=\"line\">        length := <span class=\"built_in\">len</span>(data)</div><div class=\"line\">        <span class=\"keyword\">if</span> length == <span class=\"number\">2</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> &amp;person&#123;</div><div class=\"line\">                Name: data[<span class=\"number\">0</span>],</div><div class=\"line\">                Sex:  data[<span class=\"number\">1</span>],</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">panic</span>(errors.New(<span class=\"string\">\"Type match miss\"</span>))</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    p1 := Parse(<span class=\"string\">\"apple\"</span>).(*item)</div><div class=\"line\">    fmt.Println(p1)</div><div class=\"line\">    p2 := Parse([]<span class=\"keyword\">string</span>&#123;<span class=\"string\">\"zhanghan\"</span>, <span class=\"string\">\"man\"</span>&#125;).(*person)</div><div class=\"line\">    fmt.Println(p2)<span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Println(p1.Name) <span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\"></div><div class=\"line\">    fmt.Println(p2.Name) <span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\">    fmt.Println(p2.Sex) <span class=\"comment\">// 调用的时候回自动调用String方法</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 运行结果为</div><div class=\"line\">➜  imClientServer</div><div class=\"line\">item name:apple</div><div class=\"line\">person name:zhanghan sex:man</div><div class=\"line\">apple</div><div class=\"line\">zhanghan</div><div class=\"line\">man</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"golang中sync的介绍以及使用","date":"2018-01-25T06:48:24.000Z","_content":"\n## 前言\n有些不是科班出身的有时候学习的时候就会看不懂一些问题的本质,  今天就说说golang中也是很多程序设计的锁的作用, 具体参考`golang`来介绍锁的作用, 当然这个锁和数据库的锁是类似的.\n\n先来个例子\n\n```go\na := 0\n// goroutine 1\ngo func () {\n    for i := 0; i< 10000; i++ {\n        a += 1\n    }\n}()\n\n// goroutine 2\ngo func () {\n    for i := 0; i< 10000; i++ {\n        a += 1\n    }\n}()\n\n// goroutine 1 和goroutine 2 并发执行\ntime.Sleep(time.Second) // 等待goroutine执行完成\nfmt.Println(a)\n\n\n// 执行结果\n/*\n➜  src go run test.go\n102629\n*/\n```\n\n上面代码可以很简单的看出, 正确的应该输出`200000`, 但是实际情况是小于`200000`的.\n问题在于`goroutine 1`不知道`goroutine 2`中a的变化, 导致最终结果错误, 这时候就需要使用锁.\n\n## 使用场景\n\n上面代码中可以看出\n\n在进行并发编程的时候, 通过共享内存的方式进行通信, 这时候可能会导致资源的竞争, 最终导致出现数据报错.\n\n## 锁介绍\n> `sync`包提供了基本的同步基元，如互斥锁。除了Once和WaitGroup类型，大部分都是适用于低水平程序线程，高水平的同步使用channel通信更好一些。\n\n`golang`的`sync`实现了两种类型的锁:\n> - sync.Mutex\n> - sync.RWMutex\n\n通过代码字面量信息就可以知道`sync.RWMutex`是基于`sync.Mutex`实现的.其中的只读锁的实现使用了类似引用计数的方式\n\n\n### 互斥锁`sync.Mutex`\napi\n```go\nvar mutex sync.Mutex\nmutex.Lock() // 加锁\n// ...\nmutex.UnLock() // 解锁\n```\n\n接着我们通过`symc`这个包, 来解决上面并发执行的问题\n\n```go\nvar mutex sync.Mutex\na := 0\n// goroutine1\ngo func() {\n   for i := 0; i < 100000; i++ {\n      mutex.Lock() // 上互斥锁\n      a += 1\n      mutex.Unlock() // 解互斥锁\n   }\n}()\n// goroutine2\ngo func() {\n   for i := 0; i < 100000; i++ {\n      mutex.Lock()\n      a += 1\n      mutex.Unlock()\n   }\n}()\ntime.Sleep(time.Second)\nfmt.Println(a)\n```\n\n这下执行结果就是`200000`\n\n接下来我们使用例子的方式在看看\n### 读写锁`sync.RWMutex`\n\n通常情况下互斥锁已经能满足很多的应用场景了, 不过, 互斥锁比较耗费资源, 会拖慢执行效率. 在一些`读取操作谢雨写入操作`的场景下, 互斥锁就不大适应了,  这个时候我们就需要读写锁, 顾名思义, 这个就是为了避免并发执行读写发生冲突设计的锁.\n\napi\n```go\nvar rwmutex sync.RWMutex\nrwmutex.Lock() // 加写锁\nrwmutex.Unlock() // 解写锁\nrwmutex.RLock() // 加读锁\nrwmutex.RUnlock() // 解读锁\n```\n\n让我们看看两种锁的执行时间差异\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tmutex()\n\trwmutex()\n}\n\n// 使用互斥锁\nfunc mutex() {\n\tvar mutex sync.Mutex\n\tvar wg sync.WaitGroup\n\n\tbt := time.Now()\n\ta := 0\n\tb := 0\n\twg.Add(9) // Add方法向内部计数加上delta，delta可以是负数；如果内部计数器变为0，Wait方法阻塞等待的所有线程都会释放，如果计数器小于0，方法panic。注意Add加上正数的调用应在Wait之前，否则Wait可能只会等待很少的线程。一般来说本方法应在创建新的线程或者其他应等待的事件之前调用。\n\t// 读操作\n\tfor i := 1; i < 10; i++ {\n\t\tgo func() {\n\t\t\tfor i := 0; i < 100000; i++ {\n\t\t\t\tmutex.Lock()\n\t\t\t\tb = a\n\t\t\t\tmutex.Unlock()\n\t\t\t}\n\t\t\twg.Done() // Done方法减少WaitGroup计数器的值，应在线程的最后执行\n\t\t}()\n\t}\n\n\twg.Add(1)\n\t// 写操作\n\tgo func() {\n\t\tfor i := 0; i < 100; i++ {\n\t\t\tmutex.Lock()\n\t\t\ta += 1\n\t\t\tmutex.Unlock()\n\t\t}\n\t\twg.Done()\n\t}()\n\n\twg.Wait()\n\tet := time.Now().Sub(bt)\n\tfmt.Println(\"mutex time:\", et.String())\n}\n\n// 使用读写锁\nfunc rwmutex() {\n\tvar rwmutex sync.RWMutex\n\tvar wg sync.WaitGroup\n\n\tbt := time.Now()\n\ta := 0\n\tb := 0\n\twg.Add(9)\n\t// 读操作\n\tfor i := 1; i < 10; i++ {\n\t\tgo func() {\n\t\t\tfor i := 0; i < 100000; i++ {\n\t\t\t\t// 上读锁，多个goroutine可同时获取读锁，这里不会阻塞\n\t\t\t\t// 但读锁会阻塞其他写锁，直到读锁释放\n\t\t\t\trwmutex.RLock()\n\t\t\t\tb = a\n\t\t\t\trwmutex.RUnlock()\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\n\twg.Add(1)\n\t// 写操作\n\tgo func() {\n\t\tfor i := 0; i < 100; i++ {\n\t\t\t// 上写锁，会阻塞其他的读锁和写锁，直到写锁释放\n\t\t\trwmutex.Lock()\n\t\t\ta += 1\n\t\t\trwmutex.Unlock()\n\t\t}\n\t\twg.Done()\n\t}()\n\n\twg.Wait()\n\tet := time.Now().Sub(bt)\n\tfmt.Println(\"rwmutex time:\", et.String())\n}\n```\n\n执行结构\n```base\n➜  src go run test.go\nmutex time: 109.218727ms\nrwmutex time: 38.589895ms\n```\n\n可以看出差距还是很大的\n","source":"_posts/golang中sync的介绍以及使用.md","raw":"---\nlayout: post\ntitle: golang中sync的介绍以及使用\ndate: 2018-01-25 14:48:24\ntags:\n    - golang\n    - sync\n    - linux内核中自带锁\n    - golang异步锁\ncategories: \"算法\"\n---\n\n## 前言\n有些不是科班出身的有时候学习的时候就会看不懂一些问题的本质,  今天就说说golang中也是很多程序设计的锁的作用, 具体参考`golang`来介绍锁的作用, 当然这个锁和数据库的锁是类似的.\n\n先来个例子\n\n```go\na := 0\n// goroutine 1\ngo func () {\n    for i := 0; i< 10000; i++ {\n        a += 1\n    }\n}()\n\n// goroutine 2\ngo func () {\n    for i := 0; i< 10000; i++ {\n        a += 1\n    }\n}()\n\n// goroutine 1 和goroutine 2 并发执行\ntime.Sleep(time.Second) // 等待goroutine执行完成\nfmt.Println(a)\n\n\n// 执行结果\n/*\n➜  src go run test.go\n102629\n*/\n```\n\n上面代码可以很简单的看出, 正确的应该输出`200000`, 但是实际情况是小于`200000`的.\n问题在于`goroutine 1`不知道`goroutine 2`中a的变化, 导致最终结果错误, 这时候就需要使用锁.\n\n## 使用场景\n\n上面代码中可以看出\n\n在进行并发编程的时候, 通过共享内存的方式进行通信, 这时候可能会导致资源的竞争, 最终导致出现数据报错.\n\n## 锁介绍\n> `sync`包提供了基本的同步基元，如互斥锁。除了Once和WaitGroup类型，大部分都是适用于低水平程序线程，高水平的同步使用channel通信更好一些。\n\n`golang`的`sync`实现了两种类型的锁:\n> - sync.Mutex\n> - sync.RWMutex\n\n通过代码字面量信息就可以知道`sync.RWMutex`是基于`sync.Mutex`实现的.其中的只读锁的实现使用了类似引用计数的方式\n\n\n### 互斥锁`sync.Mutex`\napi\n```go\nvar mutex sync.Mutex\nmutex.Lock() // 加锁\n// ...\nmutex.UnLock() // 解锁\n```\n\n接着我们通过`symc`这个包, 来解决上面并发执行的问题\n\n```go\nvar mutex sync.Mutex\na := 0\n// goroutine1\ngo func() {\n   for i := 0; i < 100000; i++ {\n      mutex.Lock() // 上互斥锁\n      a += 1\n      mutex.Unlock() // 解互斥锁\n   }\n}()\n// goroutine2\ngo func() {\n   for i := 0; i < 100000; i++ {\n      mutex.Lock()\n      a += 1\n      mutex.Unlock()\n   }\n}()\ntime.Sleep(time.Second)\nfmt.Println(a)\n```\n\n这下执行结果就是`200000`\n\n接下来我们使用例子的方式在看看\n### 读写锁`sync.RWMutex`\n\n通常情况下互斥锁已经能满足很多的应用场景了, 不过, 互斥锁比较耗费资源, 会拖慢执行效率. 在一些`读取操作谢雨写入操作`的场景下, 互斥锁就不大适应了,  这个时候我们就需要读写锁, 顾名思义, 这个就是为了避免并发执行读写发生冲突设计的锁.\n\napi\n```go\nvar rwmutex sync.RWMutex\nrwmutex.Lock() // 加写锁\nrwmutex.Unlock() // 解写锁\nrwmutex.RLock() // 加读锁\nrwmutex.RUnlock() // 解读锁\n```\n\n让我们看看两种锁的执行时间差异\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n\t\"time\"\n)\n\nfunc main() {\n\tmutex()\n\trwmutex()\n}\n\n// 使用互斥锁\nfunc mutex() {\n\tvar mutex sync.Mutex\n\tvar wg sync.WaitGroup\n\n\tbt := time.Now()\n\ta := 0\n\tb := 0\n\twg.Add(9) // Add方法向内部计数加上delta，delta可以是负数；如果内部计数器变为0，Wait方法阻塞等待的所有线程都会释放，如果计数器小于0，方法panic。注意Add加上正数的调用应在Wait之前，否则Wait可能只会等待很少的线程。一般来说本方法应在创建新的线程或者其他应等待的事件之前调用。\n\t// 读操作\n\tfor i := 1; i < 10; i++ {\n\t\tgo func() {\n\t\t\tfor i := 0; i < 100000; i++ {\n\t\t\t\tmutex.Lock()\n\t\t\t\tb = a\n\t\t\t\tmutex.Unlock()\n\t\t\t}\n\t\t\twg.Done() // Done方法减少WaitGroup计数器的值，应在线程的最后执行\n\t\t}()\n\t}\n\n\twg.Add(1)\n\t// 写操作\n\tgo func() {\n\t\tfor i := 0; i < 100; i++ {\n\t\t\tmutex.Lock()\n\t\t\ta += 1\n\t\t\tmutex.Unlock()\n\t\t}\n\t\twg.Done()\n\t}()\n\n\twg.Wait()\n\tet := time.Now().Sub(bt)\n\tfmt.Println(\"mutex time:\", et.String())\n}\n\n// 使用读写锁\nfunc rwmutex() {\n\tvar rwmutex sync.RWMutex\n\tvar wg sync.WaitGroup\n\n\tbt := time.Now()\n\ta := 0\n\tb := 0\n\twg.Add(9)\n\t// 读操作\n\tfor i := 1; i < 10; i++ {\n\t\tgo func() {\n\t\t\tfor i := 0; i < 100000; i++ {\n\t\t\t\t// 上读锁，多个goroutine可同时获取读锁，这里不会阻塞\n\t\t\t\t// 但读锁会阻塞其他写锁，直到读锁释放\n\t\t\t\trwmutex.RLock()\n\t\t\t\tb = a\n\t\t\t\trwmutex.RUnlock()\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\n\twg.Add(1)\n\t// 写操作\n\tgo func() {\n\t\tfor i := 0; i < 100; i++ {\n\t\t\t// 上写锁，会阻塞其他的读锁和写锁，直到写锁释放\n\t\t\trwmutex.Lock()\n\t\t\ta += 1\n\t\t\trwmutex.Unlock()\n\t\t}\n\t\twg.Done()\n\t}()\n\n\twg.Wait()\n\tet := time.Now().Sub(bt)\n\tfmt.Println(\"rwmutex time:\", et.String())\n}\n```\n\n执行结构\n```base\n➜  src go run test.go\nmutex time: 109.218727ms\nrwmutex time: 38.589895ms\n```\n\n可以看出差距还是很大的\n","slug":"golang中sync的介绍以及使用","published":1,"updated":"2019-05-13T03:56:03.235Z","comments":1,"photos":[],"link":"","_id":"cjvluebcx0011a0dmlvmdicy7","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有些不是科班出身的有时候学习的时候就会看不懂一些问题的本质,  今天就说说golang中也是很多程序设计的锁的作用, 具体参考<code>golang</code>来介绍锁的作用, 当然这个锁和数据库的锁是类似的.</p>\n<p>先来个例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">a := <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">// goroutine 1</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i&lt; <span class=\"number\">10000</span>; i++ &#123;</div><div class=\"line\">        a += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// goroutine 2</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i&lt; <span class=\"number\">10000</span>; i++ &#123;</div><div class=\"line\">        a += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// goroutine 1 和goroutine 2 并发执行</span></div><div class=\"line\">time.Sleep(time.Second) <span class=\"comment\">// 等待goroutine执行完成</span></div><div class=\"line\">fmt.Println(a)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 执行结果</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">➜  src go run test.go</div><div class=\"line\">102629</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p>上面代码可以很简单的看出, 正确的应该输出<code>200000</code>, 但是实际情况是小于<code>200000</code>的.<br>问题在于<code>goroutine 1</code>不知道<code>goroutine 2</code>中a的变化, 导致最终结果错误, 这时候就需要使用锁.</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>上面代码中可以看出</p>\n<p>在进行并发编程的时候, 通过共享内存的方式进行通信, 这时候可能会导致资源的竞争, 最终导致出现数据报错.</p>\n<h2 id=\"锁介绍\"><a href=\"#锁介绍\" class=\"headerlink\" title=\"锁介绍\"></a>锁介绍</h2><blockquote>\n<p><code>sync</code>包提供了基本的同步基元，如互斥锁。除了Once和WaitGroup类型，大部分都是适用于低水平程序线程，高水平的同步使用channel通信更好一些。</p>\n</blockquote>\n<p><code>golang</code>的<code>sync</code>实现了两种类型的锁:</p>\n<blockquote>\n<ul>\n<li>sync.Mutex</li>\n<li>sync.RWMutex</li>\n</ul>\n</blockquote>\n<p>通过代码字面量信息就可以知道<code>sync.RWMutex</code>是基于<code>sync.Mutex</code>实现的.其中的只读锁的实现使用了类似引用计数的方式</p>\n<h3 id=\"互斥锁sync-Mutex\"><a href=\"#互斥锁sync-Mutex\" class=\"headerlink\" title=\"互斥锁sync.Mutex\"></a>互斥锁<code>sync.Mutex</code></h3><p>api<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mutex sync.Mutex</div><div class=\"line\">mutex.Lock() <span class=\"comment\">// 加锁</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">mutex.UnLock() <span class=\"comment\">// 解锁</span></div></pre></td></tr></table></figure></p>\n<p>接着我们通过<code>symc</code>这个包, 来解决上面并发执行的问题</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mutex sync.Mutex</div><div class=\"line\">a := <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">// goroutine1</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">      mutex.Lock() <span class=\"comment\">// 上互斥锁</span></div><div class=\"line\">      a += <span class=\"number\">1</span></div><div class=\"line\">      mutex.Unlock() <span class=\"comment\">// 解互斥锁</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\"><span class=\"comment\">// goroutine2</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">      mutex.Lock()</div><div class=\"line\">      a += <span class=\"number\">1</span></div><div class=\"line\">      mutex.Unlock()</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\">time.Sleep(time.Second)</div><div class=\"line\">fmt.Println(a)</div></pre></td></tr></table></figure>\n<p>这下执行结果就是<code>200000</code></p>\n<p>接下来我们使用例子的方式在看看</p>\n<h3 id=\"读写锁sync-RWMutex\"><a href=\"#读写锁sync-RWMutex\" class=\"headerlink\" title=\"读写锁sync.RWMutex\"></a>读写锁<code>sync.RWMutex</code></h3><p>通常情况下互斥锁已经能满足很多的应用场景了, 不过, 互斥锁比较耗费资源, 会拖慢执行效率. 在一些<code>读取操作谢雨写入操作</code>的场景下, 互斥锁就不大适应了,  这个时候我们就需要读写锁, 顾名思义, 这个就是为了避免并发执行读写发生冲突设计的锁.</p>\n<p>api<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rwmutex sync.RWMutex</div><div class=\"line\">rwmutex.Lock() <span class=\"comment\">// 加写锁</span></div><div class=\"line\">rwmutex.Unlock() <span class=\"comment\">// 解写锁</span></div><div class=\"line\">rwmutex.RLock() <span class=\"comment\">// 加读锁</span></div><div class=\"line\">rwmutex.RUnlock() <span class=\"comment\">// 解读锁</span></div></pre></td></tr></table></figure></p>\n<p>让我们看看两种锁的执行时间差异<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tmutex()</div><div class=\"line\">\trwmutex()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用互斥锁</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mutex</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> mutex sync.Mutex</div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\"></div><div class=\"line\">\tbt := time.Now()</div><div class=\"line\">\ta := <span class=\"number\">0</span></div><div class=\"line\">\tb := <span class=\"number\">0</span></div><div class=\"line\">\twg.Add(<span class=\"number\">9</span>) <span class=\"comment\">// Add方法向内部计数加上delta，delta可以是负数；如果内部计数器变为0，Wait方法阻塞等待的所有线程都会释放，如果计数器小于0，方法panic。注意Add加上正数的调用应在Wait之前，否则Wait可能只会等待很少的线程。一般来说本方法应在创建新的线程或者其他应等待的事件之前调用。</span></div><div class=\"line\">\t<span class=\"comment\">// 读操作</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">\t\t\t\tmutex.Lock()</div><div class=\"line\">\t\t\t\tb = a</div><div class=\"line\">\t\t\t\tmutex.Unlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twg.Done() <span class=\"comment\">// Done方法减少WaitGroup计数器的值，应在线程的最后执行</span></div><div class=\"line\">\t\t&#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t<span class=\"comment\">// 写操作</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</div><div class=\"line\">\t\t\tmutex.Lock()</div><div class=\"line\">\t\t\ta += <span class=\"number\">1</span></div><div class=\"line\">\t\t\tmutex.Unlock()</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\twg.Done()</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\twg.Wait()</div><div class=\"line\">\tet := time.Now().Sub(bt)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"mutex time:\"</span>, et.String())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用读写锁</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rwmutex</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> rwmutex sync.RWMutex</div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\"></div><div class=\"line\">\tbt := time.Now()</div><div class=\"line\">\ta := <span class=\"number\">0</span></div><div class=\"line\">\tb := <span class=\"number\">0</span></div><div class=\"line\">\twg.Add(<span class=\"number\">9</span>)</div><div class=\"line\">\t<span class=\"comment\">// 读操作</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 上读锁，多个goroutine可同时获取读锁，这里不会阻塞</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 但读锁会阻塞其他写锁，直到读锁释放</span></div><div class=\"line\">\t\t\t\trwmutex.RLock()</div><div class=\"line\">\t\t\t\tb = a</div><div class=\"line\">\t\t\t\trwmutex.RUnlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twg.Done()</div><div class=\"line\">\t\t&#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t<span class=\"comment\">// 写操作</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 上写锁，会阻塞其他的读锁和写锁，直到写锁释放</span></div><div class=\"line\">\t\t\trwmutex.Lock()</div><div class=\"line\">\t\t\ta += <span class=\"number\">1</span></div><div class=\"line\">\t\t\trwmutex.Unlock()</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\twg.Done()</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\twg.Wait()</div><div class=\"line\">\tet := time.Now().Sub(bt)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"rwmutex time:\"</span>, et.String())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  src go run test.go</div><div class=\"line\">mutex time: 109.218727ms</div><div class=\"line\">rwmutex time: 38.589895ms</div></pre></td></tr></table></figure></p>\n<p>可以看出差距还是很大的</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>有些不是科班出身的有时候学习的时候就会看不懂一些问题的本质,  今天就说说golang中也是很多程序设计的锁的作用, 具体参考<code>golang</code>来介绍锁的作用, 当然这个锁和数据库的锁是类似的.</p>\n<p>先来个例子</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">a := <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">// goroutine 1</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i&lt; <span class=\"number\">10000</span>; i++ &#123;</div><div class=\"line\">        a += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// goroutine 2</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i&lt; <span class=\"number\">10000</span>; i++ &#123;</div><div class=\"line\">        a += <span class=\"number\">1</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// goroutine 1 和goroutine 2 并发执行</span></div><div class=\"line\">time.Sleep(time.Second) <span class=\"comment\">// 等待goroutine执行完成</span></div><div class=\"line\">fmt.Println(a)</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 执行结果</span></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">➜  src go run test.go</div><div class=\"line\">102629</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<p>上面代码可以很简单的看出, 正确的应该输出<code>200000</code>, 但是实际情况是小于<code>200000</code>的.<br>问题在于<code>goroutine 1</code>不知道<code>goroutine 2</code>中a的变化, 导致最终结果错误, 这时候就需要使用锁.</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>上面代码中可以看出</p>\n<p>在进行并发编程的时候, 通过共享内存的方式进行通信, 这时候可能会导致资源的竞争, 最终导致出现数据报错.</p>\n<h2 id=\"锁介绍\"><a href=\"#锁介绍\" class=\"headerlink\" title=\"锁介绍\"></a>锁介绍</h2><blockquote>\n<p><code>sync</code>包提供了基本的同步基元，如互斥锁。除了Once和WaitGroup类型，大部分都是适用于低水平程序线程，高水平的同步使用channel通信更好一些。</p>\n</blockquote>\n<p><code>golang</code>的<code>sync</code>实现了两种类型的锁:</p>\n<blockquote>\n<ul>\n<li>sync.Mutex</li>\n<li>sync.RWMutex</li>\n</ul>\n</blockquote>\n<p>通过代码字面量信息就可以知道<code>sync.RWMutex</code>是基于<code>sync.Mutex</code>实现的.其中的只读锁的实现使用了类似引用计数的方式</p>\n<h3 id=\"互斥锁sync-Mutex\"><a href=\"#互斥锁sync-Mutex\" class=\"headerlink\" title=\"互斥锁sync.Mutex\"></a>互斥锁<code>sync.Mutex</code></h3><p>api<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mutex sync.Mutex</div><div class=\"line\">mutex.Lock() <span class=\"comment\">// 加锁</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">mutex.UnLock() <span class=\"comment\">// 解锁</span></div></pre></td></tr></table></figure></p>\n<p>接着我们通过<code>symc</code>这个包, 来解决上面并发执行的问题</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mutex sync.Mutex</div><div class=\"line\">a := <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">// goroutine1</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">      mutex.Lock() <span class=\"comment\">// 上互斥锁</span></div><div class=\"line\">      a += <span class=\"number\">1</span></div><div class=\"line\">      mutex.Unlock() <span class=\"comment\">// 解互斥锁</span></div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\"><span class=\"comment\">// goroutine2</span></div><div class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">   <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">      mutex.Lock()</div><div class=\"line\">      a += <span class=\"number\">1</span></div><div class=\"line\">      mutex.Unlock()</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;()</div><div class=\"line\">time.Sleep(time.Second)</div><div class=\"line\">fmt.Println(a)</div></pre></td></tr></table></figure>\n<p>这下执行结果就是<code>200000</code></p>\n<p>接下来我们使用例子的方式在看看</p>\n<h3 id=\"读写锁sync-RWMutex\"><a href=\"#读写锁sync-RWMutex\" class=\"headerlink\" title=\"读写锁sync.RWMutex\"></a>读写锁<code>sync.RWMutex</code></h3><p>通常情况下互斥锁已经能满足很多的应用场景了, 不过, 互斥锁比较耗费资源, 会拖慢执行效率. 在一些<code>读取操作谢雨写入操作</code>的场景下, 互斥锁就不大适应了,  这个时候我们就需要读写锁, 顾名思义, 这个就是为了避免并发执行读写发生冲突设计的锁.</p>\n<p>api<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> rwmutex sync.RWMutex</div><div class=\"line\">rwmutex.Lock() <span class=\"comment\">// 加写锁</span></div><div class=\"line\">rwmutex.Unlock() <span class=\"comment\">// 解写锁</span></div><div class=\"line\">rwmutex.RLock() <span class=\"comment\">// 加读锁</span></div><div class=\"line\">rwmutex.RUnlock() <span class=\"comment\">// 解读锁</span></div></pre></td></tr></table></figure></p>\n<p>让我们看看两种锁的执行时间差异<br><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">\t<span class=\"string\">\"sync\"</span></div><div class=\"line\">\t<span class=\"string\">\"time\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tmutex()</div><div class=\"line\">\trwmutex()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用互斥锁</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">mutex</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> mutex sync.Mutex</div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\"></div><div class=\"line\">\tbt := time.Now()</div><div class=\"line\">\ta := <span class=\"number\">0</span></div><div class=\"line\">\tb := <span class=\"number\">0</span></div><div class=\"line\">\twg.Add(<span class=\"number\">9</span>) <span class=\"comment\">// Add方法向内部计数加上delta，delta可以是负数；如果内部计数器变为0，Wait方法阻塞等待的所有线程都会释放，如果计数器小于0，方法panic。注意Add加上正数的调用应在Wait之前，否则Wait可能只会等待很少的线程。一般来说本方法应在创建新的线程或者其他应等待的事件之前调用。</span></div><div class=\"line\">\t<span class=\"comment\">// 读操作</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">\t\t\t\tmutex.Lock()</div><div class=\"line\">\t\t\t\tb = a</div><div class=\"line\">\t\t\t\tmutex.Unlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twg.Done() <span class=\"comment\">// Done方法减少WaitGroup计数器的值，应在线程的最后执行</span></div><div class=\"line\">\t\t&#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t<span class=\"comment\">// 写操作</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</div><div class=\"line\">\t\t\tmutex.Lock()</div><div class=\"line\">\t\t\ta += <span class=\"number\">1</span></div><div class=\"line\">\t\t\tmutex.Unlock()</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\twg.Done()</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\twg.Wait()</div><div class=\"line\">\tet := time.Now().Sub(bt)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"mutex time:\"</span>, et.String())</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 使用读写锁</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rwmutex</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> rwmutex sync.RWMutex</div><div class=\"line\">\t<span class=\"keyword\">var</span> wg sync.WaitGroup</div><div class=\"line\"></div><div class=\"line\">\tbt := time.Now()</div><div class=\"line\">\ta := <span class=\"number\">0</span></div><div class=\"line\">\tb := <span class=\"number\">0</span></div><div class=\"line\">\twg.Add(<span class=\"number\">9</span>)</div><div class=\"line\">\t<span class=\"comment\">// 读操作</span></div><div class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100000</span>; i++ &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 上读锁，多个goroutine可同时获取读锁，这里不会阻塞</span></div><div class=\"line\">\t\t\t\t<span class=\"comment\">// 但读锁会阻塞其他写锁，直到读锁释放</span></div><div class=\"line\">\t\t\t\trwmutex.RLock()</div><div class=\"line\">\t\t\t\tb = a</div><div class=\"line\">\t\t\t\trwmutex.RUnlock()</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\twg.Done()</div><div class=\"line\">\t\t&#125;()</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\twg.Add(<span class=\"number\">1</span>)</div><div class=\"line\">\t<span class=\"comment\">// 写操作</span></div><div class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 上写锁，会阻塞其他的读锁和写锁，直到写锁释放</span></div><div class=\"line\">\t\t\trwmutex.Lock()</div><div class=\"line\">\t\t\ta += <span class=\"number\">1</span></div><div class=\"line\">\t\t\trwmutex.Unlock()</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\twg.Done()</div><div class=\"line\">\t&#125;()</div><div class=\"line\"></div><div class=\"line\">\twg.Wait()</div><div class=\"line\">\tet := time.Now().Sub(bt)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"rwmutex time:\"</span>, et.String())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>执行结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  src go run test.go</div><div class=\"line\">mutex time: 109.218727ms</div><div class=\"line\">rwmutex time: 38.589895ms</div></pre></td></tr></table></figure></p>\n<p>可以看出差距还是很大的</p>\n"},{"title":"git常用的命令","date":"2017-07-27T07:59:12.000Z","_content":"\n好记性不如一个烂笔头\n\n使用`git`快两年了, 一些命令依然是记不住!!!这就尴尬了\n\n想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.\n\n### 记录一些 `git` 命令\n\n检出仓库：$ git clone git://github.com/jquery/jquery.git\n查看远程仓库：$ git remote -v\n添加远程仓库：$ git remote add [name] [url]\n删除远程仓库：$ git remote rm [name]\n修改远程仓库：$ git remote set-url --push [name] [newUrl]\n拉取远程仓库：$ git pull [remoteName] [localBranchName]\n推送远程仓库：$ git push [remoteName] [localBranchName]\n\n如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：\n\n```base\n$git push origin test:master         // 提交本地test分支作为远程的master分支\n$git push origin test:test              // 提交本地test分支作为远程的test分支\n```\n\n### 分支\n查看本地分支：$ git branch\n查看远程分支：$ git branch -r\n创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支\n切换分支：$ git checkout [name]\n创建新分支并立即切换到新分支：$ git checkout -b [name]\n删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并\n创建远程分支(本地分支push到远程)：$ git push origin [name]\n删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] \n\n### 创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\n$git symbolic-ref HEAD refs/heads/[name]\n$rm .git/index\n$git clean -fdx\n\n### 版本`tag`相关操作\n查看版本：$ git tag\n创建版本：$ git tag [name]\n删除版本：$ git tag -d [name]\n查看远程版本：$ git tag -r\n创建远程版本(本地版本push到远程)：$ git push origin [name]\n删除远程版本：$ git push origin :refs/tags/[name]\n合并远程仓库的tag到本地：$ git pull origin --tags\n上传本地tag到远程仓库：$ git push origin --tags\n创建带注释的tag：$ git tag -a [name] -m 'yourMessage'\n\n### Git 常用命令\ngit branch 查看本地所有分支\ngit status 查看当前状态 \ngit commit 提交 \ngit branch -a 查看所有的分支\ngit branch -r 查看本地所有分支\ngit commit -am \"init\" 提交并且加注释 \ngit remote add origin git@192.168.1.119:ndshow\ngit push origin master 将文件给推到服务器上 \ngit remote show origin 显示远程库origin里的资源 \ngit push origin master:develop\ngit push origin master:hb-dev 将本地库与服务器上的库进行关联 \ngit checkout --track origin/dev 切换到远程dev分支\ngit branch -D master develop 删除本地库develop\ngit checkout -b dev 建立一个新的本地分支dev\ngit merge origin/dev 将分支dev与当前分支进行合并\ngit checkout dev 切换到本地dev分支\ngit remote show 查看远程库\ngit add .\ngit rm 文件名(包括路径) 从git中删除指定文件\ngit clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来\ngit config --list 看所有用户\ngit ls-files 看已经被提交的\ngit rm [file name] 删除一个文件\ngit commit -a 提交当前repos的所有的改变\ngit add [file name] 添加一个文件到git index\ngit commit -v 当你用－v参数的时候可以看commit的差异\ngit commit -m \"This is the message describing the commit\" 添加commit信息\ngit commit -a -a是代表add，把所有的change加到git index里然后再commit\ngit commit -a -v 一般提交命令\ngit log 看你commit的日志\ngit diff 查看尚未暂存的更新\ngit rm a.a 移除文件(从暂存区和工作区中删除)\ngit rm --cached a.a 移除文件(只从暂存区中删除)\ngit commit -m \"remove\" 移除文件(从Git中删除)\ngit rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)\ngit diff --cached 或 $ git diff --staged 查看尚未提交的更新\ngit stash push 将文件给push到一个临时空间中\ngit stash pop 将文件从临时空间pop下来\n---------------------------------------------------------\ngit remote add origin git@github.com:username/Hello-World.git\n`git push origin master` 将本地项目给提交到服务器中\n-----------------------------------------------------------\n`git pull` 本地与服务器端同步\n-----------------------------------------------------------------\ngit push (远程仓库名) (分支名) 将本地分支推送到服务器上去。\ngit push origin serverfix:awesomebranch\n------------------------------------------------------------------\ngit fetch 相当于是从远程获取最新版本到本地，不会自动merge\ngit commit -a -m \"log_message\" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：\ngit branch branch_0.1 master 从主分支master创建branch_0.1分支\ngit branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0\ngit checkout branch_1.0/master 切换到branch_1.0/master分支\n","source":"_posts/git常用的命令.md","raw":"---\ntitle: git常用的命令\ndate: 2017-07-27 15:59:12\ncategories: \"git\"\ntags:\n    - git\n---\n\n好记性不如一个烂笔头\n\n使用`git`快两年了, 一些命令依然是记不住!!!这就尴尬了\n\n想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.\n\n### 记录一些 `git` 命令\n\n检出仓库：$ git clone git://github.com/jquery/jquery.git\n查看远程仓库：$ git remote -v\n添加远程仓库：$ git remote add [name] [url]\n删除远程仓库：$ git remote rm [name]\n修改远程仓库：$ git remote set-url --push [name] [newUrl]\n拉取远程仓库：$ git pull [remoteName] [localBranchName]\n推送远程仓库：$ git push [remoteName] [localBranchName]\n\n如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：\n\n```base\n$git push origin test:master         // 提交本地test分支作为远程的master分支\n$git push origin test:test              // 提交本地test分支作为远程的test分支\n```\n\n### 分支\n查看本地分支：$ git branch\n查看远程分支：$ git branch -r\n创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支\n切换分支：$ git checkout [name]\n创建新分支并立即切换到新分支：$ git checkout -b [name]\n删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并\n创建远程分支(本地分支push到远程)：$ git push origin [name]\n删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] \n\n### 创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\n$git symbolic-ref HEAD refs/heads/[name]\n$rm .git/index\n$git clean -fdx\n\n### 版本`tag`相关操作\n查看版本：$ git tag\n创建版本：$ git tag [name]\n删除版本：$ git tag -d [name]\n查看远程版本：$ git tag -r\n创建远程版本(本地版本push到远程)：$ git push origin [name]\n删除远程版本：$ git push origin :refs/tags/[name]\n合并远程仓库的tag到本地：$ git pull origin --tags\n上传本地tag到远程仓库：$ git push origin --tags\n创建带注释的tag：$ git tag -a [name] -m 'yourMessage'\n\n### Git 常用命令\ngit branch 查看本地所有分支\ngit status 查看当前状态 \ngit commit 提交 \ngit branch -a 查看所有的分支\ngit branch -r 查看本地所有分支\ngit commit -am \"init\" 提交并且加注释 \ngit remote add origin git@192.168.1.119:ndshow\ngit push origin master 将文件给推到服务器上 \ngit remote show origin 显示远程库origin里的资源 \ngit push origin master:develop\ngit push origin master:hb-dev 将本地库与服务器上的库进行关联 \ngit checkout --track origin/dev 切换到远程dev分支\ngit branch -D master develop 删除本地库develop\ngit checkout -b dev 建立一个新的本地分支dev\ngit merge origin/dev 将分支dev与当前分支进行合并\ngit checkout dev 切换到本地dev分支\ngit remote show 查看远程库\ngit add .\ngit rm 文件名(包括路径) 从git中删除指定文件\ngit clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来\ngit config --list 看所有用户\ngit ls-files 看已经被提交的\ngit rm [file name] 删除一个文件\ngit commit -a 提交当前repos的所有的改变\ngit add [file name] 添加一个文件到git index\ngit commit -v 当你用－v参数的时候可以看commit的差异\ngit commit -m \"This is the message describing the commit\" 添加commit信息\ngit commit -a -a是代表add，把所有的change加到git index里然后再commit\ngit commit -a -v 一般提交命令\ngit log 看你commit的日志\ngit diff 查看尚未暂存的更新\ngit rm a.a 移除文件(从暂存区和工作区中删除)\ngit rm --cached a.a 移除文件(只从暂存区中删除)\ngit commit -m \"remove\" 移除文件(从Git中删除)\ngit rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)\ngit diff --cached 或 $ git diff --staged 查看尚未提交的更新\ngit stash push 将文件给push到一个临时空间中\ngit stash pop 将文件从临时空间pop下来\n---------------------------------------------------------\ngit remote add origin git@github.com:username/Hello-World.git\n`git push origin master` 将本地项目给提交到服务器中\n-----------------------------------------------------------\n`git pull` 本地与服务器端同步\n-----------------------------------------------------------------\ngit push (远程仓库名) (分支名) 将本地分支推送到服务器上去。\ngit push origin serverfix:awesomebranch\n------------------------------------------------------------------\ngit fetch 相当于是从远程获取最新版本到本地，不会自动merge\ngit commit -a -m \"log_message\" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：\ngit branch branch_0.1 master 从主分支master创建branch_0.1分支\ngit branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0\ngit checkout branch_1.0/master 切换到branch_1.0/master分支\n","slug":"git常用的命令","published":1,"updated":"2019-05-13T03:56:03.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebcz0015a0dm9v298i7s","content":"<p>好记性不如一个烂笔头</p>\n<p>使用<code>git</code>快两年了, 一些命令依然是记不住!!!这就尴尬了</p>\n<p>想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.</p>\n<h3 id=\"记录一些-git-命令\"><a href=\"#记录一些-git-命令\" class=\"headerlink\" title=\"记录一些 git 命令\"></a>记录一些 <code>git</code> 命令</h3><p>检出仓库：$ git clone git://github.com/jquery/jquery.git<br>查看远程仓库：$ git remote -v<br>添加远程仓库：$ git remote add [name] [url]<br>删除远程仓库：$ git remote rm [name]<br>修改远程仓库：$ git remote set-url –push [name] [newUrl]<br>拉取远程仓库：$ git pull [remoteName] [localBranchName]<br>推送远程仓库：$ git push [remoteName] [localBranchName]</p>\n<p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git push origin test:master         // 提交本地test分支作为远程的master分支</div><div class=\"line\">$git push origin test:test              // 提交本地test分支作为远程的test分支</div></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>查看本地分支：$ git branch<br>查看远程分支：$ git branch -r<br>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支<br>切换分支：$ git checkout [name]<br>创建新分支并立即切换到新分支：$ git checkout -b [name]<br>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项<br>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并<br>创建远程分支(本地分支push到远程)：$ git push origin [name]<br>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </p>\n<h3 id=\"创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\"><a href=\"#创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\" class=\"headerlink\" title=\"创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\"></a>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</h3><p>$git symbolic-ref HEAD refs/heads/[name]<br>$rm .git/index<br>$git clean -fdx</p>\n<h3 id=\"版本tag相关操作\"><a href=\"#版本tag相关操作\" class=\"headerlink\" title=\"版本tag相关操作\"></a>版本<code>tag</code>相关操作</h3><p>查看版本：$ git tag<br>创建版本：$ git tag [name]<br>删除版本：$ git tag -d [name]<br>查看远程版本：$ git tag -r<br>创建远程版本(本地版本push到远程)：$ git push origin [name]<br>删除远程版本：$ git push origin :refs/tags/[name]<br>合并远程仓库的tag到本地：$ git pull origin –tags<br>上传本地tag到远程仓库：$ git push origin –tags<br>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</p>\n<h3 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h3><p>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看本地所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中</p>\n<h2 id=\"git-stash-pop-将文件从临时空间pop下来\"><a href=\"#git-stash-pop-将文件从临时空间pop下来\" class=\"headerlink\" title=\"git stash pop 将文件从临时空间pop下来\"></a>git stash pop 将文件从临时空间pop下来</h2><p>git remote add origin git@github.com:username/Hello-World.git</p>\n<h2 id=\"git-push-origin-master-将本地项目给提交到服务器中\"><a href=\"#git-push-origin-master-将本地项目给提交到服务器中\" class=\"headerlink\" title=\"git push origin master 将本地项目给提交到服务器中\"></a><code>git push origin master</code> 将本地项目给提交到服务器中</h2><h2 id=\"git-pull-本地与服务器端同步\"><a href=\"#git-pull-本地与服务器端同步\" class=\"headerlink\" title=\"git pull 本地与服务器端同步\"></a><code>git pull</code> 本地与服务器端同步</h2><p>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</p>\n<h2 id=\"git-push-origin-serverfix-awesomebranch\"><a href=\"#git-push-origin-serverfix-awesomebranch\" class=\"headerlink\" title=\"git push origin serverfix:awesomebranch\"></a>git push origin serverfix:awesomebranch</h2><p>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好记性不如一个烂笔头</p>\n<p>使用<code>git</code>快两年了, 一些命令依然是记不住!!!这就尴尬了</p>\n<p>想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.</p>\n<h3 id=\"记录一些-git-命令\"><a href=\"#记录一些-git-命令\" class=\"headerlink\" title=\"记录一些 git 命令\"></a>记录一些 <code>git</code> 命令</h3><p>检出仓库：$ git clone git://github.com/jquery/jquery.git<br>查看远程仓库：$ git remote -v<br>添加远程仓库：$ git remote add [name] [url]<br>删除远程仓库：$ git remote rm [name]<br>修改远程仓库：$ git remote set-url –push [name] [newUrl]<br>拉取远程仓库：$ git pull [remoteName] [localBranchName]<br>推送远程仓库：$ git push [remoteName] [localBranchName]</p>\n<p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git push origin test:master         // 提交本地test分支作为远程的master分支</div><div class=\"line\">$git push origin test:test              // 提交本地test分支作为远程的test分支</div></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>查看本地分支：$ git branch<br>查看远程分支：$ git branch -r<br>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支<br>切换分支：$ git checkout [name]<br>创建新分支并立即切换到新分支：$ git checkout -b [name]<br>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项<br>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并<br>创建远程分支(本地分支push到远程)：$ git push origin [name]<br>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </p>\n<h3 id=\"创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\"><a href=\"#创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\" class=\"headerlink\" title=\"创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\"></a>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</h3><p>$git symbolic-ref HEAD refs/heads/[name]<br>$rm .git/index<br>$git clean -fdx</p>\n<h3 id=\"版本tag相关操作\"><a href=\"#版本tag相关操作\" class=\"headerlink\" title=\"版本tag相关操作\"></a>版本<code>tag</code>相关操作</h3><p>查看版本：$ git tag<br>创建版本：$ git tag [name]<br>删除版本：$ git tag -d [name]<br>查看远程版本：$ git tag -r<br>创建远程版本(本地版本push到远程)：$ git push origin [name]<br>删除远程版本：$ git push origin :refs/tags/[name]<br>合并远程仓库的tag到本地：$ git pull origin –tags<br>上传本地tag到远程仓库：$ git push origin –tags<br>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</p>\n<h3 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h3><p>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看本地所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中</p>\n<h2 id=\"git-stash-pop-将文件从临时空间pop下来\"><a href=\"#git-stash-pop-将文件从临时空间pop下来\" class=\"headerlink\" title=\"git stash pop 将文件从临时空间pop下来\"></a>git stash pop 将文件从临时空间pop下来</h2><p>git remote add origin git@github.com:username/Hello-World.git</p>\n<h2 id=\"git-push-origin-master-将本地项目给提交到服务器中\"><a href=\"#git-push-origin-master-将本地项目给提交到服务器中\" class=\"headerlink\" title=\"git push origin master 将本地项目给提交到服务器中\"></a><code>git push origin master</code> 将本地项目给提交到服务器中</h2><h2 id=\"git-pull-本地与服务器端同步\"><a href=\"#git-pull-本地与服务器端同步\" class=\"headerlink\" title=\"git pull 本地与服务器端同步\"></a><code>git pull</code> 本地与服务器端同步</h2><p>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</p>\n<h2 id=\"git-push-origin-serverfix-awesomebranch\"><a href=\"#git-push-origin-serverfix-awesomebranch\" class=\"headerlink\" title=\"git push origin serverfix:awesomebranch\"></a>git push origin serverfix:awesomebranch</h2><p>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支</p>\n"},{"layout":"post","title":"golang中并发执行和通道传参以及并发中错误处理","date":"2017-11-27T01:55:18.000Z","_content":"\n## `panic`和`recover`捕获运行中的错误\n先来看看`panic`和`recover`的配合使用:\n\n`panic`虽然官方不推荐使用, 但是有些业务需求必须要使用它来捕获**运行**中错误.\n\n> go中可以抛出一个panic的异常，然后在defer中通过recover捕获这个异常，然后正常处理\n> 在一个主进程，多个go程处理逻辑的结构中，这个很重要，如果不用recover捕获panic异常，会导致整个进程出错中断\n```golang\npackage main\nimport \"fmt\"\nfunc main() {\n    // 程序在错误的时候才会调用defer定义的函数\n\tdefer func() {     //必须要先声明defer，否则不能捕获到panic异常 不知道defer的可以查阅相关博客\n\t\tfmt.Println(\"c\")\n\t\tif err := recover(); err != nil {\n\t\t\tfmt.Println(err)    //这里的err其实就是panic传入的内容，55\n\t\t}\n\t\tfmt.Println(\"d\")\n\t}()\n\tf()\n}\n\n\nfunc f() {\n\tfmt.Println(\"a\")\n\tpanic(55)\n\tfmt.Println(\"b\")\n\n\tfmt.Println(\"f\")\n}\n```\n\n运行结果\n```base\n➜  imClientServer git:(login) ✗ go run test.go\na\nc\n55\nd\n```\n`panic`和`recover`只是稳固一下,是为了不懂得童鞋可以继续下面的实例\n\n\n\n## 完整的一个`多协程`和`通道`的例子,\n下面讲说了一个很好的例子, 其中有携程执行中出错然后对错误的处理方式,不过具体的错误还需要在业务需求做出相对应的处理.\n\n有几个地方需要注意：for i + 协程时如果协程使用 i ，那么需要增加 i:=i 来防止多协程冲突；实际执行任务时需要用一个函数包起来，防止单个任务panic造成整个程序崩溃。\n\n```golang\npackage main\nimport (\n    \"sync\"\n    \"fmt\"\n)\n\n/*\n一个标准的协程+信道实现\n\n*/\n\nfunc main() {\n\n    taskChan := make(chan int)\n    TCount := 10\n    var wg sync.WaitGroup //创建一个sync.WaitGroup\n\n    // 产生任务\n    go func() {\n        for i := 0; i < 1000; i++ {\n            taskChan <- i\n        }\n        // 全部任务都输入后关闭信道，告诉工作者进程没有新任务了。\n        close(taskChan)\n    }()\n\n    // 告诉 WaitGroup 有 TCount 个执行者。\n    wg.Add(TCount)\n    // 启动 TCount 个协程执行任务\n    for i := 0; i < TCount; i++ {\n\n        // 注意：如果协程内使用了 i，必须有这一步，或者选择通过参数传递进协程。\n        // 否则 i 会被 for 所在的协程修改，协程实际使用时值并不确定。\n        i := i\n\n        go func() {\n\n            // 协程结束时报告当前协程执行完毕。\n            defer func() { wg.Done() }()\n\n            fmt.Printf(\"工作者 %v 启动...\\r\\n\", i)\n\n            for task := range taskChan {\n\n                // 建立匿名函数执行任务的目的是为了捕获单个任务崩溃，防止造成整个工作者、系统崩溃。\n                func() {\n\n                    defer func() {\n                        err := recover()\n                        if err != nil {\n                            fmt.Printf(\"任务失败：工作者i=%v, task=%v, err=%v\\r\\n\", i, task, err)\n                        }\n                    }()\n\n                    // 故意崩溃，看看是不是会造成整个系统崩溃。\n                    if task%100==0{\n                        panic(\"故意崩溃啦\")\n                    }\n\n                    // 这里的 task 并不需要通过参数传递进来。\n                    // 原因是这里是同步执行的，并不会被其它协程修改。\n                    fmt.Printf(\"任务结果=%v ，工作者id=%v, task=%v\\r\\n\",task*task,i,task)\n                }()\n            }\n\n            fmt.Printf(\"工作者 %v 结束。\\r\\n\", i)\n        }()\n    }\n\n    //等待所有任务完成\n    wg.Wait()\n    print(\"全部任务结束\")\n}\n\n```\n","source":"_posts/golang中并发执行和通道传参以及并发中错误处理.md","raw":"---\nlayout: post\ntitle: golang中并发执行和通道传参以及并发中错误处理\ndate: 2017-11-27 09:55:18\ntags:\n    - chan\n    - golang通道\n    - panic\n    - recover\ncategories: \"golnag并发执行\"\n---\n\n## `panic`和`recover`捕获运行中的错误\n先来看看`panic`和`recover`的配合使用:\n\n`panic`虽然官方不推荐使用, 但是有些业务需求必须要使用它来捕获**运行**中错误.\n\n> go中可以抛出一个panic的异常，然后在defer中通过recover捕获这个异常，然后正常处理\n> 在一个主进程，多个go程处理逻辑的结构中，这个很重要，如果不用recover捕获panic异常，会导致整个进程出错中断\n```golang\npackage main\nimport \"fmt\"\nfunc main() {\n    // 程序在错误的时候才会调用defer定义的函数\n\tdefer func() {     //必须要先声明defer，否则不能捕获到panic异常 不知道defer的可以查阅相关博客\n\t\tfmt.Println(\"c\")\n\t\tif err := recover(); err != nil {\n\t\t\tfmt.Println(err)    //这里的err其实就是panic传入的内容，55\n\t\t}\n\t\tfmt.Println(\"d\")\n\t}()\n\tf()\n}\n\n\nfunc f() {\n\tfmt.Println(\"a\")\n\tpanic(55)\n\tfmt.Println(\"b\")\n\n\tfmt.Println(\"f\")\n}\n```\n\n运行结果\n```base\n➜  imClientServer git:(login) ✗ go run test.go\na\nc\n55\nd\n```\n`panic`和`recover`只是稳固一下,是为了不懂得童鞋可以继续下面的实例\n\n\n\n## 完整的一个`多协程`和`通道`的例子,\n下面讲说了一个很好的例子, 其中有携程执行中出错然后对错误的处理方式,不过具体的错误还需要在业务需求做出相对应的处理.\n\n有几个地方需要注意：for i + 协程时如果协程使用 i ，那么需要增加 i:=i 来防止多协程冲突；实际执行任务时需要用一个函数包起来，防止单个任务panic造成整个程序崩溃。\n\n```golang\npackage main\nimport (\n    \"sync\"\n    \"fmt\"\n)\n\n/*\n一个标准的协程+信道实现\n\n*/\n\nfunc main() {\n\n    taskChan := make(chan int)\n    TCount := 10\n    var wg sync.WaitGroup //创建一个sync.WaitGroup\n\n    // 产生任务\n    go func() {\n        for i := 0; i < 1000; i++ {\n            taskChan <- i\n        }\n        // 全部任务都输入后关闭信道，告诉工作者进程没有新任务了。\n        close(taskChan)\n    }()\n\n    // 告诉 WaitGroup 有 TCount 个执行者。\n    wg.Add(TCount)\n    // 启动 TCount 个协程执行任务\n    for i := 0; i < TCount; i++ {\n\n        // 注意：如果协程内使用了 i，必须有这一步，或者选择通过参数传递进协程。\n        // 否则 i 会被 for 所在的协程修改，协程实际使用时值并不确定。\n        i := i\n\n        go func() {\n\n            // 协程结束时报告当前协程执行完毕。\n            defer func() { wg.Done() }()\n\n            fmt.Printf(\"工作者 %v 启动...\\r\\n\", i)\n\n            for task := range taskChan {\n\n                // 建立匿名函数执行任务的目的是为了捕获单个任务崩溃，防止造成整个工作者、系统崩溃。\n                func() {\n\n                    defer func() {\n                        err := recover()\n                        if err != nil {\n                            fmt.Printf(\"任务失败：工作者i=%v, task=%v, err=%v\\r\\n\", i, task, err)\n                        }\n                    }()\n\n                    // 故意崩溃，看看是不是会造成整个系统崩溃。\n                    if task%100==0{\n                        panic(\"故意崩溃啦\")\n                    }\n\n                    // 这里的 task 并不需要通过参数传递进来。\n                    // 原因是这里是同步执行的，并不会被其它协程修改。\n                    fmt.Printf(\"任务结果=%v ，工作者id=%v, task=%v\\r\\n\",task*task,i,task)\n                }()\n            }\n\n            fmt.Printf(\"工作者 %v 结束。\\r\\n\", i)\n        }()\n    }\n\n    //等待所有任务完成\n    wg.Wait()\n    print(\"全部任务结束\")\n}\n\n```\n","slug":"golang中并发执行和通道传参以及并发中错误处理","published":1,"updated":"2019-05-13T03:56:03.236Z","comments":1,"photos":[],"link":"","_id":"cjvluebd00016a0dmwh9zeaa4","content":"<h2 id=\"panic和recover捕获运行中的错误\"><a href=\"#panic和recover捕获运行中的错误\" class=\"headerlink\" title=\"panic和recover捕获运行中的错误\"></a><code>panic</code>和<code>recover</code>捕获运行中的错误</h2><p>先来看看<code>panic</code>和<code>recover</code>的配合使用:</p>\n<p><code>panic</code>虽然官方不推荐使用, 但是有些业务需求必须要使用它来捕获<strong>运行</strong>中错误.</p>\n<blockquote>\n<p>go中可以抛出一个panic的异常，然后在defer中通过recover捕获这个异常，然后正常处理<br>在一个主进程，多个go程处理逻辑的结构中，这个很重要，如果不用recover捕获panic异常，会导致整个进程出错中断<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 程序在错误的时候才会调用defer定义的函数</span></div><div class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;     <span class=\"comment\">//必须要先声明defer，否则不能捕获到panic异常 不知道defer的可以查阅相关博客</span></div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"c\"</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tfmt.Println(err)    <span class=\"comment\">//这里的err其实就是panic传入的内容，55</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"d\"</span>)</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\tf()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"number\">55</span>)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"b\"</span>)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"f\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer git:(login) ✗ go run test.go</div><div class=\"line\">a</div><div class=\"line\">c</div><div class=\"line\">55</div><div class=\"line\">d</div></pre></td></tr></table></figure></p>\n<p><code>panic</code>和<code>recover</code>只是稳固一下,是为了不懂得童鞋可以继续下面的实例</p>\n<h2 id=\"完整的一个多协程和通道的例子\"><a href=\"#完整的一个多协程和通道的例子\" class=\"headerlink\" title=\"完整的一个多协程和通道的例子,\"></a>完整的一个<code>多协程</code>和<code>通道</code>的例子,</h2><p>下面讲说了一个很好的例子, 其中有携程执行中出错然后对错误的处理方式,不过具体的错误还需要在业务需求做出相对应的处理.</p>\n<p>有几个地方需要注意：for i + 协程时如果协程使用 i ，那么需要增加 i:=i 来防止多协程冲突；实际执行任务时需要用一个函数包起来，防止单个任务panic造成整个程序崩溃。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"sync\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">一个标准的协程+信道实现</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    taskChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">    TCount := <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup <span class=\"comment\">//创建一个sync.WaitGroup</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 产生任务</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++ &#123;</div><div class=\"line\">            taskChan &lt;- i</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 全部任务都输入后关闭信道，告诉工作者进程没有新任务了。</span></div><div class=\"line\">        <span class=\"built_in\">close</span>(taskChan)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 告诉 WaitGroup 有 TCount 个执行者。</span></div><div class=\"line\">    wg.Add(TCount)</div><div class=\"line\">    <span class=\"comment\">// 启动 TCount 个协程执行任务</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; TCount; i++ &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 注意：如果协程内使用了 i，必须有这一步，或者选择通过参数传递进协程。</span></div><div class=\"line\">        <span class=\"comment\">// 否则 i 会被 for 所在的协程修改，协程实际使用时值并不确定。</span></div><div class=\"line\">        i := i</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 协程结束时报告当前协程执行完毕。</span></div><div class=\"line\">            <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; wg.Done() &#125;()</div><div class=\"line\"></div><div class=\"line\">            fmt.Printf(<span class=\"string\">\"工作者 %v 启动...\\r\\n\"</span>, i)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> task := <span class=\"keyword\">range</span> taskChan &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 建立匿名函数执行任务的目的是为了捕获单个任务崩溃，防止造成整个工作者、系统崩溃。</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">                        err := <span class=\"built_in\">recover</span>()</div><div class=\"line\">                        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                            fmt.Printf(<span class=\"string\">\"任务失败：工作者i=%v, task=%v, err=%v\\r\\n\"</span>, i, task, err)</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;()</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 故意崩溃，看看是不是会造成整个系统崩溃。</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> task%<span class=\"number\">100</span>==<span class=\"number\">0</span>&#123;</div><div class=\"line\">                        <span class=\"built_in\">panic</span>(<span class=\"string\">\"故意崩溃啦\"</span>)</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 这里的 task 并不需要通过参数传递进来。</span></div><div class=\"line\">                    <span class=\"comment\">// 原因是这里是同步执行的，并不会被其它协程修改。</span></div><div class=\"line\">                    fmt.Printf(<span class=\"string\">\"任务结果=%v ，工作者id=%v, task=%v\\r\\n\"</span>,task*task,i,task)</div><div class=\"line\">                &#125;()</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            fmt.Printf(<span class=\"string\">\"工作者 %v 结束。\\r\\n\"</span>, i)</div><div class=\"line\">        &#125;()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//等待所有任务完成</span></div><div class=\"line\">    wg.Wait()</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"全部任务结束\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"panic和recover捕获运行中的错误\"><a href=\"#panic和recover捕获运行中的错误\" class=\"headerlink\" title=\"panic和recover捕获运行中的错误\"></a><code>panic</code>和<code>recover</code>捕获运行中的错误</h2><p>先来看看<code>panic</code>和<code>recover</code>的配合使用:</p>\n<p><code>panic</code>虽然官方不推荐使用, 但是有些业务需求必须要使用它来捕获<strong>运行</strong>中错误.</p>\n<blockquote>\n<p>go中可以抛出一个panic的异常，然后在defer中通过recover捕获这个异常，然后正常处理<br>在一个主进程，多个go程处理逻辑的结构中，这个很重要，如果不用recover捕获panic异常，会导致整个进程出错中断<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 程序在错误的时候才会调用defer定义的函数</span></div><div class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;     <span class=\"comment\">//必须要先声明defer，否则不能捕获到panic异常 不知道defer的可以查阅相关博客</span></div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"c\"</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>(); err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">\t\t\tfmt.Println(err)    <span class=\"comment\">//这里的err其实就是panic传入的内容，55</span></div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\tfmt.Println(<span class=\"string\">\"d\"</span>)</div><div class=\"line\">\t&#125;()</div><div class=\"line\">\tf()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"a\"</span>)</div><div class=\"line\">\t<span class=\"built_in\">panic</span>(<span class=\"number\">55</span>)</div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"b\"</span>)</div><div class=\"line\"></div><div class=\"line\">\tfmt.Println(<span class=\"string\">\"f\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>运行结果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer git:(login) ✗ go run test.go</div><div class=\"line\">a</div><div class=\"line\">c</div><div class=\"line\">55</div><div class=\"line\">d</div></pre></td></tr></table></figure></p>\n<p><code>panic</code>和<code>recover</code>只是稳固一下,是为了不懂得童鞋可以继续下面的实例</p>\n<h2 id=\"完整的一个多协程和通道的例子\"><a href=\"#完整的一个多协程和通道的例子\" class=\"headerlink\" title=\"完整的一个多协程和通道的例子,\"></a>完整的一个<code>多协程</code>和<code>通道</code>的例子,</h2><p>下面讲说了一个很好的例子, 其中有携程执行中出错然后对错误的处理方式,不过具体的错误还需要在业务需求做出相对应的处理.</p>\n<p>有几个地方需要注意：for i + 协程时如果协程使用 i ，那么需要增加 i:=i 来防止多协程冲突；实际执行任务时需要用一个函数包起来，防止单个任务panic造成整个程序崩溃。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"sync\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">一个标准的协程+信道实现</div><div class=\"line\"></div><div class=\"line\">*/</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">    taskChan := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">int</span>)</div><div class=\"line\">    TCount := <span class=\"number\">10</span></div><div class=\"line\">    <span class=\"keyword\">var</span> wg sync.WaitGroup <span class=\"comment\">//创建一个sync.WaitGroup</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 产生任务</span></div><div class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++ &#123;</div><div class=\"line\">            taskChan &lt;- i</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"comment\">// 全部任务都输入后关闭信道，告诉工作者进程没有新任务了。</span></div><div class=\"line\">        <span class=\"built_in\">close</span>(taskChan)</div><div class=\"line\">    &#125;()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 告诉 WaitGroup 有 TCount 个执行者。</span></div><div class=\"line\">    wg.Add(TCount)</div><div class=\"line\">    <span class=\"comment\">// 启动 TCount 个协程执行任务</span></div><div class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; TCount; i++ &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 注意：如果协程内使用了 i，必须有这一步，或者选择通过参数传递进协程。</span></div><div class=\"line\">        <span class=\"comment\">// 否则 i 会被 for 所在的协程修改，协程实际使用时值并不确定。</span></div><div class=\"line\">        i := i</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// 协程结束时报告当前协程执行完毕。</span></div><div class=\"line\">            <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; wg.Done() &#125;()</div><div class=\"line\"></div><div class=\"line\">            fmt.Printf(<span class=\"string\">\"工作者 %v 启动...\\r\\n\"</span>, i)</div><div class=\"line\"></div><div class=\"line\">            <span class=\"keyword\">for</span> task := <span class=\"keyword\">range</span> taskChan &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// 建立匿名函数执行任务的目的是为了捕获单个任务崩溃，防止造成整个工作者、系统崩溃。</span></div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">                        err := <span class=\"built_in\">recover</span>()</div><div class=\"line\">                        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                            fmt.Printf(<span class=\"string\">\"任务失败：工作者i=%v, task=%v, err=%v\\r\\n\"</span>, i, task, err)</div><div class=\"line\">                        &#125;</div><div class=\"line\">                    &#125;()</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 故意崩溃，看看是不是会造成整个系统崩溃。</span></div><div class=\"line\">                    <span class=\"keyword\">if</span> task%<span class=\"number\">100</span>==<span class=\"number\">0</span>&#123;</div><div class=\"line\">                        <span class=\"built_in\">panic</span>(<span class=\"string\">\"故意崩溃啦\"</span>)</div><div class=\"line\">                    &#125;</div><div class=\"line\"></div><div class=\"line\">                    <span class=\"comment\">// 这里的 task 并不需要通过参数传递进来。</span></div><div class=\"line\">                    <span class=\"comment\">// 原因是这里是同步执行的，并不会被其它协程修改。</span></div><div class=\"line\">                    fmt.Printf(<span class=\"string\">\"任务结果=%v ，工作者id=%v, task=%v\\r\\n\"</span>,task*task,i,task)</div><div class=\"line\">                &#125;()</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            fmt.Printf(<span class=\"string\">\"工作者 %v 结束。\\r\\n\"</span>, i)</div><div class=\"line\">        &#125;()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//等待所有任务完成</span></div><div class=\"line\">    wg.Wait()</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"全部任务结束\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"golang编辑器emacs","date":"2017-10-20T02:23:52.000Z","_content":"","source":"_posts/golang编辑器emacs.md","raw":"---\nlayout: post\ntitle: golang编辑器emacs\ndate: 2017-10-20 10:23:52\ntags:\n---\n","slug":"golang编辑器emacs","published":1,"updated":"2019-05-13T03:56:03.237Z","comments":1,"photos":[],"link":"","_id":"cjvluebd10019a0dmgzi8iji2","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"golang中操作json的感想","date":"2017-11-15T06:54:11.000Z","_content":"看说说我自己的学习路线, 是那种看了基本语法和语言特征就先上手,  然后在动手撸代码的过程中来发掘语言中的奇妙, 然后就有了下面的感想.\n\n> 问题来源于server端模拟client来集成`环信`来获取用户`token`的时候需要构建`request Body`来获取`token`\n\n由于自己太愚昧别人很简单就可以理解的问题,  我狠狠的看了一个上午, 在加上对语法的不熟悉还有半天的各种实验\n\n总结:\n`encoding/json`中序列化和反序列化方法都是采用映射的方式来完成, 所以在构建结构体的时候需要把类型字段规定好.类似下面:\n```golang\ntype Animal struct {\n    Name  string `json:\"name\"` // \"name\"为json中key的字段\n    Order string `json:\"order\"` // 同样, \"order\"也是json中key的字段\n}\n```\n\n**要点**:\n序列化之前和之后的**`struct`**数据**`type`**不能随便写, 必须对应下面的结构来:\n\n```golang\nbool, for JSON booleans\nfloat64, for JSON numbers\nstring, for JSON strings\n[]interface{}, for JSON arrays\nmap[string]interface{}, for JSON objects\nnil for JSON null\n```\n\n一般使用到的基本就是序列化`Marshal`和反序列化`Unmarshal`这两个方法,  基本需求就差不多够了, 如果无法满足,  可以去官网查看其它`api`\n\n### **`Marshal`**\n\n将`struct`映射成`json`\n\n需要注意的是声明`struct`的时候`tag`, 这里还有几种tag的注意事项:\n- tag 是 \"-\"，表示该字段不会输出到 JSON.\n\n- tag 中带有自定义名称，那么这个自定义名称会出现在 JSON 的字段名中，比如上面小写字母开头的 name.\n\n- tag 中带有 \"omitempty\" 选项，那么如果该字段值为空，就不会输出到JSON 串中.\n\n- 如果字段类型是 bool, string, int, int64 等，而 tag 中带有\",string\" 选项，那么该字段在输出到 JSON 时，会把该字段对应的值转换成 JSON 字符串.\n\n\n官方例子:\n\n```golang\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\n// 这里需要映射的结构体内部属性必要是大写\ntype Animal struct {\n    Name  string `json:\"name\"`  // tag中的\"name\"是json中的key值\n    Order string `json:\"order\"` // 同样\"order\"是json的key值\n}\nfunc main() {\n    var animals []Animal // 这里声明的是一个`slice`然而切片的没个`type`是`Animal`所以序列化后就是一个arrays -> [{}, {}]\n\n    animals = append(animals, Animal{Name: \"Platypus\", Order: \"Monotremata\"})\n    animals = append(animals, Animal{Name: \"Quoll\", Order: \"Dasyuromorphia\"})\n\n    jsonStr, err := json.Marshal(animals)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n\n    fmt.Println(string(jsonStr))\n}\n```\n\n打印结果:\n\n```base\n➜  blog git:(master) ✗\n[{\"name\":\"Platypus\",\"order\":\"Monotremata\"},{\"name\":\"Quoll\",\"order\":\"Dasyuromorphia\"}]\n```\n\n### **`Unmarshal`**\n\n将 JSON 串重新组装成结构体\n\n函数签名\n\n`func Unmarshal(data []byte, v interface{}) error`\n\n官方例子:\n```goalng\npackage main\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n// 由于是反序列化, 所以不需要来写tag来规定json中的key\ntype Animal struct {\n    Name  string\n    Order string\n}\nfunc main() {\n    var jsonBlob = []byte(`[\n        {\"Name\": \"Platypus\", \"Order\": \"Monotremata\"},\n        {\"Name\": \"Quoll\",    \"Order\": \"Dasyuromorphia\"}\n    ]`)\n    var animals []Animal\n    // 由于被反序列化的是`slice`, 所以序列化之后就是一个Array类型array中的item类型是Animal\n    err := json.Unmarshal(jsonBlob, &animals)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n    fmt.Printf(\"%+v\", animals)\n}\n```\n结果:\n\n```golang\n➜  imClientServer\n[{Name:Platypus Order:Monotremata} {Name:Quoll Order:Dasyuromorphia}]\n```\n\n上面例子中可以看出，结构体字段名与 JSON 里的 KEY 一一对应.\n例如 JSON 中的 KEY 是 Name，那么怎么找对应的字段呢？\n- 首先查找 tag 含有 Name 的可导出的 struct 字段(首字母大写)\n\n- 其次查找字段名是 Name 的导出字段\n\n- 最后查找类似 NAME 或者 NAmE 等这样的除了首字母之外其他大小写不敏感的导出字段\n\n**注意**：能够被赋值的字段必须是可导出字段！！\n\n> 同时 JSON 解析的时候只会解析能找得到的字段，找不到的字段会被忽略，这样的一个好处是：当你接收到一个很大的 JSON 数据结构而你却只想获取其中的部分数据的时候，你只需将你想要的数据对应的字段名大写，即可轻松解决这个问题。\n\n\n### 反序列化未知类型\n\n前面说的是，已知要解析的类型，比如说，当看到 JSON arrays 时定义一个 golang 数组进行接收数据， 看到 `JSON objects` 时定义一个 map 来接收数据，那么这个时候怎么办？答案是使用 `interface{}` 进行接收，然后配合 `type assert` 进行解析，比如：\n\n```golang\nvar f interface{} // 声明一个任意类型的f\nb := []byte(`{\"Name\":\"Wednesday\",\"Age\":6,\"Parents\":[\"Gomez\",\"Morticia\"]}`)\njson.Unmarshal(b, &f)\nfor k, v := range f.(map[string]interface{}) { // 便利f的type\n    switch vv := v.(type) {\n    case string:\n        fmt.Println(k, \"is string\", vv)\n    case int:\n        fmt.Println(k, \"is int \", vv)\n    case float64:\n        fmt.Println(k, \"is float64 \", vv)\n    case []interface{}:\n        fmt.Println(k, \"is array:\")\n        for i, j := range vv {\n            fmt.Println(i, j)\n        }\n    }\n}\n```\n结果:\n```base\n➜  imClientServer go run test.go\nName is string Wednesday\nAge is float64  6\nParents is array:\n0 Gomez\n1 Morticia\n```\n","source":"_posts/golang中操作json的感想.md","raw":"---\nlayout: post\ntitle: golang中操作json的感想\ndate: 2017-11-15 14:54:11\ntags:\n    - golang\n    - json\ncategories: \"算法\"\n---\n看说说我自己的学习路线, 是那种看了基本语法和语言特征就先上手,  然后在动手撸代码的过程中来发掘语言中的奇妙, 然后就有了下面的感想.\n\n> 问题来源于server端模拟client来集成`环信`来获取用户`token`的时候需要构建`request Body`来获取`token`\n\n由于自己太愚昧别人很简单就可以理解的问题,  我狠狠的看了一个上午, 在加上对语法的不熟悉还有半天的各种实验\n\n总结:\n`encoding/json`中序列化和反序列化方法都是采用映射的方式来完成, 所以在构建结构体的时候需要把类型字段规定好.类似下面:\n```golang\ntype Animal struct {\n    Name  string `json:\"name\"` // \"name\"为json中key的字段\n    Order string `json:\"order\"` // 同样, \"order\"也是json中key的字段\n}\n```\n\n**要点**:\n序列化之前和之后的**`struct`**数据**`type`**不能随便写, 必须对应下面的结构来:\n\n```golang\nbool, for JSON booleans\nfloat64, for JSON numbers\nstring, for JSON strings\n[]interface{}, for JSON arrays\nmap[string]interface{}, for JSON objects\nnil for JSON null\n```\n\n一般使用到的基本就是序列化`Marshal`和反序列化`Unmarshal`这两个方法,  基本需求就差不多够了, 如果无法满足,  可以去官网查看其它`api`\n\n### **`Marshal`**\n\n将`struct`映射成`json`\n\n需要注意的是声明`struct`的时候`tag`, 这里还有几种tag的注意事项:\n- tag 是 \"-\"，表示该字段不会输出到 JSON.\n\n- tag 中带有自定义名称，那么这个自定义名称会出现在 JSON 的字段名中，比如上面小写字母开头的 name.\n\n- tag 中带有 \"omitempty\" 选项，那么如果该字段值为空，就不会输出到JSON 串中.\n\n- 如果字段类型是 bool, string, int, int64 等，而 tag 中带有\",string\" 选项，那么该字段在输出到 JSON 时，会把该字段对应的值转换成 JSON 字符串.\n\n\n官方例子:\n\n```golang\npackage main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n\n// 这里需要映射的结构体内部属性必要是大写\ntype Animal struct {\n    Name  string `json:\"name\"`  // tag中的\"name\"是json中的key值\n    Order string `json:\"order\"` // 同样\"order\"是json的key值\n}\nfunc main() {\n    var animals []Animal // 这里声明的是一个`slice`然而切片的没个`type`是`Animal`所以序列化后就是一个arrays -> [{}, {}]\n\n    animals = append(animals, Animal{Name: \"Platypus\", Order: \"Monotremata\"})\n    animals = append(animals, Animal{Name: \"Quoll\", Order: \"Dasyuromorphia\"})\n\n    jsonStr, err := json.Marshal(animals)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n\n    fmt.Println(string(jsonStr))\n}\n```\n\n打印结果:\n\n```base\n➜  blog git:(master) ✗\n[{\"name\":\"Platypus\",\"order\":\"Monotremata\"},{\"name\":\"Quoll\",\"order\":\"Dasyuromorphia\"}]\n```\n\n### **`Unmarshal`**\n\n将 JSON 串重新组装成结构体\n\n函数签名\n\n`func Unmarshal(data []byte, v interface{}) error`\n\n官方例子:\n```goalng\npackage main\nimport (\n    \"encoding/json\"\n    \"fmt\"\n)\n// 由于是反序列化, 所以不需要来写tag来规定json中的key\ntype Animal struct {\n    Name  string\n    Order string\n}\nfunc main() {\n    var jsonBlob = []byte(`[\n        {\"Name\": \"Platypus\", \"Order\": \"Monotremata\"},\n        {\"Name\": \"Quoll\",    \"Order\": \"Dasyuromorphia\"}\n    ]`)\n    var animals []Animal\n    // 由于被反序列化的是`slice`, 所以序列化之后就是一个Array类型array中的item类型是Animal\n    err := json.Unmarshal(jsonBlob, &animals)\n    if err != nil {\n        fmt.Println(\"error:\", err)\n    }\n    fmt.Printf(\"%+v\", animals)\n}\n```\n结果:\n\n```golang\n➜  imClientServer\n[{Name:Platypus Order:Monotremata} {Name:Quoll Order:Dasyuromorphia}]\n```\n\n上面例子中可以看出，结构体字段名与 JSON 里的 KEY 一一对应.\n例如 JSON 中的 KEY 是 Name，那么怎么找对应的字段呢？\n- 首先查找 tag 含有 Name 的可导出的 struct 字段(首字母大写)\n\n- 其次查找字段名是 Name 的导出字段\n\n- 最后查找类似 NAME 或者 NAmE 等这样的除了首字母之外其他大小写不敏感的导出字段\n\n**注意**：能够被赋值的字段必须是可导出字段！！\n\n> 同时 JSON 解析的时候只会解析能找得到的字段，找不到的字段会被忽略，这样的一个好处是：当你接收到一个很大的 JSON 数据结构而你却只想获取其中的部分数据的时候，你只需将你想要的数据对应的字段名大写，即可轻松解决这个问题。\n\n\n### 反序列化未知类型\n\n前面说的是，已知要解析的类型，比如说，当看到 JSON arrays 时定义一个 golang 数组进行接收数据， 看到 `JSON objects` 时定义一个 map 来接收数据，那么这个时候怎么办？答案是使用 `interface{}` 进行接收，然后配合 `type assert` 进行解析，比如：\n\n```golang\nvar f interface{} // 声明一个任意类型的f\nb := []byte(`{\"Name\":\"Wednesday\",\"Age\":6,\"Parents\":[\"Gomez\",\"Morticia\"]}`)\njson.Unmarshal(b, &f)\nfor k, v := range f.(map[string]interface{}) { // 便利f的type\n    switch vv := v.(type) {\n    case string:\n        fmt.Println(k, \"is string\", vv)\n    case int:\n        fmt.Println(k, \"is int \", vv)\n    case float64:\n        fmt.Println(k, \"is float64 \", vv)\n    case []interface{}:\n        fmt.Println(k, \"is array:\")\n        for i, j := range vv {\n            fmt.Println(i, j)\n        }\n    }\n}\n```\n结果:\n```base\n➜  imClientServer go run test.go\nName is string Wednesday\nAge is float64  6\nParents is array:\n0 Gomez\n1 Morticia\n```\n","slug":"golang中操作json的感想","published":1,"updated":"2019-05-13T03:56:03.236Z","comments":1,"photos":[],"link":"","_id":"cjvluebd2001ca0dmvjo14231","content":"<p>看说说我自己的学习路线, 是那种看了基本语法和语言特征就先上手,  然后在动手撸代码的过程中来发掘语言中的奇妙, 然后就有了下面的感想.</p>\n<blockquote>\n<p>问题来源于server端模拟client来集成<code>环信</code>来获取用户<code>token</code>的时候需要构建<code>request Body</code>来获取<code>token</code></p>\n</blockquote>\n<p>由于自己太愚昧别人很简单就可以理解的问题,  我狠狠的看了一个上午, 在加上对语法的不熟悉还有半天的各种实验</p>\n<p>总结:<br><code>encoding/json</code>中序列化和反序列化方法都是采用映射的方式来完成, 所以在构建结构体的时候需要把类型字段规定好.类似下面:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span> <span class=\"comment\">// \"name\"为json中key的字段</span></div><div class=\"line\">    Order <span class=\"keyword\">string</span> <span class=\"string\">`json:\"order\"`</span> <span class=\"comment\">// 同样, \"order\"也是json中key的字段</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>要点</strong>:<br>序列化之前和之后的<strong><code>struct</code></strong>数据<strong><code>type</code></strong>不能随便写, 必须对应下面的结构来:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bool</span>, <span class=\"keyword\">for</span> JSON booleans</div><div class=\"line\"><span class=\"keyword\">float64</span>, <span class=\"keyword\">for</span> JSON numbers</div><div class=\"line\"><span class=\"keyword\">string</span>, <span class=\"keyword\">for</span> JSON strings</div><div class=\"line\">[]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"keyword\">for</span> JSON arrays</div><div class=\"line\"><span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"keyword\">for</span> JSON objects</div><div class=\"line\"><span class=\"literal\">nil</span> <span class=\"keyword\">for</span> JSON null</div></pre></td></tr></table></figure>\n<p>一般使用到的基本就是序列化<code>Marshal</code>和反序列化<code>Unmarshal</code>这两个方法,  基本需求就差不多够了, 如果无法满足,  可以去官网查看其它<code>api</code></p>\n<h3 id=\"Marshal\"><a href=\"#Marshal\" class=\"headerlink\" title=\"Marshal\"></a><strong><code>Marshal</code></strong></h3><p>将<code>struct</code>映射成<code>json</code></p>\n<p>需要注意的是声明<code>struct</code>的时候<code>tag</code>, 这里还有几种tag的注意事项:</p>\n<ul>\n<li><p>tag 是 “-“，表示该字段不会输出到 JSON.</p>\n</li>\n<li><p>tag 中带有自定义名称，那么这个自定义名称会出现在 JSON 的字段名中，比如上面小写字母开头的 name.</p>\n</li>\n<li><p>tag 中带有 “omitempty” 选项，那么如果该字段值为空，就不会输出到JSON 串中.</p>\n</li>\n<li><p>如果字段类型是 bool, string, int, int64 等，而 tag 中带有”,string” 选项，那么该字段在输出到 JSON 时，会把该字段对应的值转换成 JSON 字符串.</p>\n</li>\n</ul>\n<p>官方例子:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这里需要映射的结构体内部属性必要是大写</span></div><div class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span>  <span class=\"comment\">// tag中的\"name\"是json中的key值</span></div><div class=\"line\">    Order <span class=\"keyword\">string</span> <span class=\"string\">`json:\"order\"`</span> <span class=\"comment\">// 同样\"order\"是json的key值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> animals []Animal <span class=\"comment\">// 这里声明的是一个`slice`然而切片的没个`type`是`Animal`所以序列化后就是一个arrays -&gt; [&#123;&#125;, &#123;&#125;]</span></div><div class=\"line\"></div><div class=\"line\">    animals = <span class=\"built_in\">append</span>(animals, Animal&#123;Name: <span class=\"string\">\"Platypus\"</span>, Order: <span class=\"string\">\"Monotremata\"</span>&#125;)</div><div class=\"line\">    animals = <span class=\"built_in\">append</span>(animals, Animal&#123;Name: <span class=\"string\">\"Quoll\"</span>, Order: <span class=\"string\">\"Dasyuromorphia\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">    jsonStr, err := json.Marshal(animals)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(jsonStr))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打印结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  blog git:(master) ✗</div><div class=\"line\">[&#123;&quot;name&quot;:&quot;Platypus&quot;,&quot;order&quot;:&quot;Monotremata&quot;&#125;,&#123;&quot;name&quot;:&quot;Quoll&quot;,&quot;order&quot;:&quot;Dasyuromorphia&quot;&#125;]</div></pre></td></tr></table></figure>\n<h3 id=\"Unmarshal\"><a href=\"#Unmarshal\" class=\"headerlink\" title=\"Unmarshal\"></a><strong><code>Unmarshal</code></strong></h3><p>将 JSON 串重新组装成结构体</p>\n<p>函数签名</p>\n<p><code>func Unmarshal(data []byte, v interface{}) error</code></p>\n<p>官方例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\">import (</div><div class=\"line\">    &quot;encoding/json&quot;</div><div class=\"line\">    &quot;fmt&quot;</div><div class=\"line\">)</div><div class=\"line\">// 由于是反序列化, 所以不需要来写tag来规定json中的key</div><div class=\"line\">type Animal struct &#123;</div><div class=\"line\">    Name  string</div><div class=\"line\">    Order string</div><div class=\"line\">&#125;</div><div class=\"line\">func main() &#123;</div><div class=\"line\">    var jsonBlob = []byte(`[</div><div class=\"line\">        &#123;&quot;Name&quot;: &quot;Platypus&quot;, &quot;Order&quot;: &quot;Monotremata&quot;&#125;,</div><div class=\"line\">        &#123;&quot;Name&quot;: &quot;Quoll&quot;,    &quot;Order&quot;: &quot;Dasyuromorphia&quot;&#125;</div><div class=\"line\">    ]`)</div><div class=\"line\">    var animals []Animal</div><div class=\"line\">    // 由于被反序列化的是`slice`, 所以序列化之后就是一个Array类型array中的item类型是Animal</div><div class=\"line\">    err := json.Unmarshal(jsonBlob, &amp;animals)</div><div class=\"line\">    if err != nil &#123;</div><div class=\"line\">        fmt.Println(&quot;error:&quot;, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(&quot;%+v&quot;, animals)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结果:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer</div><div class=\"line\">[&#123;Name:Platypus Order:Monotremata&#125; &#123;Name:Quoll Order:Dasyuromorphia&#125;]</div></pre></td></tr></table></figure>\n<p>上面例子中可以看出，结构体字段名与 JSON 里的 KEY 一一对应.<br>例如 JSON 中的 KEY 是 Name，那么怎么找对应的字段呢？</p>\n<ul>\n<li><p>首先查找 tag 含有 Name 的可导出的 struct 字段(首字母大写)</p>\n</li>\n<li><p>其次查找字段名是 Name 的导出字段</p>\n</li>\n<li><p>最后查找类似 NAME 或者 NAmE 等这样的除了首字母之外其他大小写不敏感的导出字段</p>\n</li>\n</ul>\n<p><strong>注意</strong>：能够被赋值的字段必须是可导出字段！！</p>\n<blockquote>\n<p>同时 JSON 解析的时候只会解析能找得到的字段，找不到的字段会被忽略，这样的一个好处是：当你接收到一个很大的 JSON 数据结构而你却只想获取其中的部分数据的时候，你只需将你想要的数据对应的字段名大写，即可轻松解决这个问题。</p>\n</blockquote>\n<h3 id=\"反序列化未知类型\"><a href=\"#反序列化未知类型\" class=\"headerlink\" title=\"反序列化未知类型\"></a>反序列化未知类型</h3><p>前面说的是，已知要解析的类型，比如说，当看到 JSON arrays 时定义一个 golang 数组进行接收数据， 看到 <code>JSON objects</code> 时定义一个 map 来接收数据，那么这个时候怎么办？答案是使用 <code>interface{}</code> 进行接收，然后配合 <code>type assert</code> 进行解析，比如：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"comment\">// 声明一个任意类型的f</span></div><div class=\"line\">b := []<span class=\"keyword\">byte</span>(<span class=\"string\">`&#123;\"Name\":\"Wednesday\",\"Age\":6,\"Parents\":[\"Gomez\",\"Morticia\"]&#125;`</span>)</div><div class=\"line\">json.Unmarshal(b, &amp;f)</div><div class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> f.(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;) &#123; <span class=\"comment\">// 便利f的type</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> vv := v.(<span class=\"keyword\">type</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is string\"</span>, vv)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is int \"</span>, vv)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">float64</span>:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is float64 \"</span>, vv)</div><div class=\"line\">    <span class=\"keyword\">case</span> []<span class=\"keyword\">interface</span>&#123;&#125;:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is array:\"</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> i, j := <span class=\"keyword\">range</span> vv &#123;</div><div class=\"line\">            fmt.Println(i, j)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer go run test.go</div><div class=\"line\">Name is string Wednesday</div><div class=\"line\">Age is float64  6</div><div class=\"line\">Parents is array:</div><div class=\"line\">0 Gomez</div><div class=\"line\">1 Morticia</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>看说说我自己的学习路线, 是那种看了基本语法和语言特征就先上手,  然后在动手撸代码的过程中来发掘语言中的奇妙, 然后就有了下面的感想.</p>\n<blockquote>\n<p>问题来源于server端模拟client来集成<code>环信</code>来获取用户<code>token</code>的时候需要构建<code>request Body</code>来获取<code>token</code></p>\n</blockquote>\n<p>由于自己太愚昧别人很简单就可以理解的问题,  我狠狠的看了一个上午, 在加上对语法的不熟悉还有半天的各种实验</p>\n<p>总结:<br><code>encoding/json</code>中序列化和反序列化方法都是采用映射的方式来完成, 所以在构建结构体的时候需要把类型字段规定好.类似下面:<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span> <span class=\"comment\">// \"name\"为json中key的字段</span></div><div class=\"line\">    Order <span class=\"keyword\">string</span> <span class=\"string\">`json:\"order\"`</span> <span class=\"comment\">// 同样, \"order\"也是json中key的字段</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong>要点</strong>:<br>序列化之前和之后的<strong><code>struct</code></strong>数据<strong><code>type</code></strong>不能随便写, 必须对应下面的结构来:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">bool</span>, <span class=\"keyword\">for</span> JSON booleans</div><div class=\"line\"><span class=\"keyword\">float64</span>, <span class=\"keyword\">for</span> JSON numbers</div><div class=\"line\"><span class=\"keyword\">string</span>, <span class=\"keyword\">for</span> JSON strings</div><div class=\"line\">[]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"keyword\">for</span> JSON arrays</div><div class=\"line\"><span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;, <span class=\"keyword\">for</span> JSON objects</div><div class=\"line\"><span class=\"literal\">nil</span> <span class=\"keyword\">for</span> JSON null</div></pre></td></tr></table></figure>\n<p>一般使用到的基本就是序列化<code>Marshal</code>和反序列化<code>Unmarshal</code>这两个方法,  基本需求就差不多够了, 如果无法满足,  可以去官网查看其它<code>api</code></p>\n<h3 id=\"Marshal\"><a href=\"#Marshal\" class=\"headerlink\" title=\"Marshal\"></a><strong><code>Marshal</code></strong></h3><p>将<code>struct</code>映射成<code>json</code></p>\n<p>需要注意的是声明<code>struct</code>的时候<code>tag</code>, 这里还有几种tag的注意事项:</p>\n<ul>\n<li><p>tag 是 “-“，表示该字段不会输出到 JSON.</p>\n</li>\n<li><p>tag 中带有自定义名称，那么这个自定义名称会出现在 JSON 的字段名中，比如上面小写字母开头的 name.</p>\n</li>\n<li><p>tag 中带有 “omitempty” 选项，那么如果该字段值为空，就不会输出到JSON 串中.</p>\n</li>\n<li><p>如果字段类型是 bool, string, int, int64 等，而 tag 中带有”,string” 选项，那么该字段在输出到 JSON 时，会把该字段对应的值转换成 JSON 字符串.</p>\n</li>\n</ul>\n<p>官方例子:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">    <span class=\"string\">\"encoding/json\"</span></div><div class=\"line\">    <span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这里需要映射的结构体内部属性必要是大写</span></div><div class=\"line\"><span class=\"keyword\">type</span> Animal <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    Name  <span class=\"keyword\">string</span> <span class=\"string\">`json:\"name\"`</span>  <span class=\"comment\">// tag中的\"name\"是json中的key值</span></div><div class=\"line\">    Order <span class=\"keyword\">string</span> <span class=\"string\">`json:\"order\"`</span> <span class=\"comment\">// 同样\"order\"是json的key值</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> animals []Animal <span class=\"comment\">// 这里声明的是一个`slice`然而切片的没个`type`是`Animal`所以序列化后就是一个arrays -&gt; [&#123;&#125;, &#123;&#125;]</span></div><div class=\"line\"></div><div class=\"line\">    animals = <span class=\"built_in\">append</span>(animals, Animal&#123;Name: <span class=\"string\">\"Platypus\"</span>, Order: <span class=\"string\">\"Monotremata\"</span>&#125;)</div><div class=\"line\">    animals = <span class=\"built_in\">append</span>(animals, Animal&#123;Name: <span class=\"string\">\"Quoll\"</span>, Order: <span class=\"string\">\"Dasyuromorphia\"</span>&#125;)</div><div class=\"line\"></div><div class=\"line\">    jsonStr, err := json.Marshal(animals)</div><div class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">        fmt.Println(<span class=\"string\">\"error:\"</span>, err)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(jsonStr))</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>打印结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  blog git:(master) ✗</div><div class=\"line\">[&#123;&quot;name&quot;:&quot;Platypus&quot;,&quot;order&quot;:&quot;Monotremata&quot;&#125;,&#123;&quot;name&quot;:&quot;Quoll&quot;,&quot;order&quot;:&quot;Dasyuromorphia&quot;&#125;]</div></pre></td></tr></table></figure>\n<h3 id=\"Unmarshal\"><a href=\"#Unmarshal\" class=\"headerlink\" title=\"Unmarshal\"></a><strong><code>Unmarshal</code></strong></h3><p>将 JSON 串重新组装成结构体</p>\n<p>函数签名</p>\n<p><code>func Unmarshal(data []byte, v interface{}) error</code></p>\n<p>官方例子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\">import (</div><div class=\"line\">    &quot;encoding/json&quot;</div><div class=\"line\">    &quot;fmt&quot;</div><div class=\"line\">)</div><div class=\"line\">// 由于是反序列化, 所以不需要来写tag来规定json中的key</div><div class=\"line\">type Animal struct &#123;</div><div class=\"line\">    Name  string</div><div class=\"line\">    Order string</div><div class=\"line\">&#125;</div><div class=\"line\">func main() &#123;</div><div class=\"line\">    var jsonBlob = []byte(`[</div><div class=\"line\">        &#123;&quot;Name&quot;: &quot;Platypus&quot;, &quot;Order&quot;: &quot;Monotremata&quot;&#125;,</div><div class=\"line\">        &#123;&quot;Name&quot;: &quot;Quoll&quot;,    &quot;Order&quot;: &quot;Dasyuromorphia&quot;&#125;</div><div class=\"line\">    ]`)</div><div class=\"line\">    var animals []Animal</div><div class=\"line\">    // 由于被反序列化的是`slice`, 所以序列化之后就是一个Array类型array中的item类型是Animal</div><div class=\"line\">    err := json.Unmarshal(jsonBlob, &amp;animals)</div><div class=\"line\">    if err != nil &#123;</div><div class=\"line\">        fmt.Println(&quot;error:&quot;, err)</div><div class=\"line\">    &#125;</div><div class=\"line\">    fmt.Printf(&quot;%+v&quot;, animals)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结果:</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer</div><div class=\"line\">[&#123;Name:Platypus Order:Monotremata&#125; &#123;Name:Quoll Order:Dasyuromorphia&#125;]</div></pre></td></tr></table></figure>\n<p>上面例子中可以看出，结构体字段名与 JSON 里的 KEY 一一对应.<br>例如 JSON 中的 KEY 是 Name，那么怎么找对应的字段呢？</p>\n<ul>\n<li><p>首先查找 tag 含有 Name 的可导出的 struct 字段(首字母大写)</p>\n</li>\n<li><p>其次查找字段名是 Name 的导出字段</p>\n</li>\n<li><p>最后查找类似 NAME 或者 NAmE 等这样的除了首字母之外其他大小写不敏感的导出字段</p>\n</li>\n</ul>\n<p><strong>注意</strong>：能够被赋值的字段必须是可导出字段！！</p>\n<blockquote>\n<p>同时 JSON 解析的时候只会解析能找得到的字段，找不到的字段会被忽略，这样的一个好处是：当你接收到一个很大的 JSON 数据结构而你却只想获取其中的部分数据的时候，你只需将你想要的数据对应的字段名大写，即可轻松解决这个问题。</p>\n</blockquote>\n<h3 id=\"反序列化未知类型\"><a href=\"#反序列化未知类型\" class=\"headerlink\" title=\"反序列化未知类型\"></a>反序列化未知类型</h3><p>前面说的是，已知要解析的类型，比如说，当看到 JSON arrays 时定义一个 golang 数组进行接收数据， 看到 <code>JSON objects</code> 时定义一个 map 来接收数据，那么这个时候怎么办？答案是使用 <code>interface{}</code> 进行接收，然后配合 <code>type assert</code> 进行解析，比如：</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> f <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"comment\">// 声明一个任意类型的f</span></div><div class=\"line\">b := []<span class=\"keyword\">byte</span>(<span class=\"string\">`&#123;\"Name\":\"Wednesday\",\"Age\":6,\"Parents\":[\"Gomez\",\"Morticia\"]&#125;`</span>)</div><div class=\"line\">json.Unmarshal(b, &amp;f)</div><div class=\"line\"><span class=\"keyword\">for</span> k, v := <span class=\"keyword\">range</span> f.(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;) &#123; <span class=\"comment\">// 便利f的type</span></div><div class=\"line\">    <span class=\"keyword\">switch</span> vv := v.(<span class=\"keyword\">type</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">string</span>:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is string\"</span>, vv)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">int</span>:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is int \"</span>, vv)</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"keyword\">float64</span>:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is float64 \"</span>, vv)</div><div class=\"line\">    <span class=\"keyword\">case</span> []<span class=\"keyword\">interface</span>&#123;&#125;:</div><div class=\"line\">        fmt.Println(k, <span class=\"string\">\"is array:\"</span>)</div><div class=\"line\">        <span class=\"keyword\">for</span> i, j := <span class=\"keyword\">range</span> vv &#123;</div><div class=\"line\">            fmt.Println(i, j)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer go run test.go</div><div class=\"line\">Name is string Wednesday</div><div class=\"line\">Age is float64  6</div><div class=\"line\">Parents is array:</div><div class=\"line\">0 Gomez</div><div class=\"line\">1 Morticia</div></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"golang中的writer和reader","date":"2017-11-07T10:00:13.000Z","_content":"\n先来说说程序中的输入和输出\n\n`c`里面有标准输出和输入还有错误处理, 还有非常重要的管道的, 以至于它非常好扩展.\n\n那么`golang`中的`Write`和`Reader`的接口设计遵循了Unix的输入和输出, 一个程序的输出可以是另外一个程序的输入。他们的功能单一并且纯粹，这样就可以非常容易的编写程序代码，又可以通过组合的概念，让我们的程序做更多的事情。\n\n### Unix的三种输入输出输入模式\n\n```golang\nvar (\n   Stdin  = NewFile(uintptr(syscall.Stdin), \"/dev/stdin\")\n   Stdout = NewFile(uintptr(syscall.Stdout), \"/dev/stdout\")\n   Stderr = NewFile(uintptr(syscall.Stderr), \"/dev/stderr\")\n)\n```\n这三种标准的输入和输出都是一个`*File`，而`*File`恰恰就是同时实现了`io.Writer`和`io.Reader`这两个接口的类型，所以他们同时具备输入和输出的功能，既可以从里面读取数据，又可以往里面写入数据。\n\nGo标准库的io包也是基于Unix这种输入和输出的理念，大部分的接口都是扩展了`io.Writer`和`io.Reader`，大部分的类型也都选择的实现了`io.Writer`和`io.Reader`这两个接口，然后把数据的输入和输出，抽象为流的读写，所以只要实现了这两个接口，都可以使用流的读写功能。\n\n`io.Writer`和`io.Reader`两个接口的高度抽象，让我们不用再面向具体的业务，我们只关注，是读还是写，只要我们定义的方法函数可以接收这两个接口作为参数，那么我们就可以进行流的读写，而不用关心如何读，写到哪里去，这也是面向接口编程的好处。\n\n### Reader和Writer接口\n\n这两个高度抽象的接口，只有一个方法，也体现了Go接口设计的简洁性，只做一件事。\n\n```golang\n// Writer 接口包装了基本的 Write 方法。\n\n// Write 将 len(p) 个字节从 p 中写入到基本数据流中。\n// 它返回从 p 中被写入的字节数 n（0 <= n <= len(p)）以及任何遇到的引起写入提前停止的错误。\n// 若 Write 返回的 n < len(p)，它就必须返回一个非nil的错误。Write 不能修改此切片的数据，即便它是临时的。\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\n```\n\n这是`Wirter`接口的定义，它只有一个`Write`方法，接受一个`byte`的切片，返回两个值，n表示写入的字节数、err表示写入时发生的错误。\n\n从其文档注释来看，这个方法是有规范要求的，我们要想实现一个io.Writer接口，就要遵循这些规则。\n\n这些实现`io.Writer`接口的规则，所有实现了该接口的类型都要遵守，不然可能会导致莫名其妙的问题。\n\n```golang\nReader 接口包装了基本的 Read 方法。\n\n// Read 将 len(p) 个字节读取到 p 中。它返回读取的字节数 n（0 <= n <= len(p)） 以及任何遇到的错误。即使 Read 返回的 n < len(p)，它也会在调用过程中使用 p 的全部作为暂存空间。若一些数据可用但不到 len(p) 个字节，Read 会照例返回可用的东西， 而不是等待更多。\n\n// 当 Read 在成功读取 n > 0 个字节后遇到一个错误或 EOF 情况，它就会返回读取的字节数。 它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和 n == 0）。 这种一般情况的一个例子就是 Reader 在输入流结束时会返回一个非零的字节数， 可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个 Read 都应当返回 0, EOF。\n\n// 调用者应当总在考虑到错误 err 前处理 n > 0 的字节。这样做可以在读取一些字节， 以及允许的 EOF 行为后正确地处理I/O错误。\n\n// Read 的实现在 len(p) == 0 以外的情况下会阻止返回零字节的计数和 nil 错误， 调用者应将返回 0 和 nil 视作什么也没有发生；特别是它并不表示 EOF。\n\n// 实现必须不保留 p。\n\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n```\n\n这是`io.Reader`接口定义，也只有一个`Read`方法，这个方法接受一个`byte`的切片，并返回两个值，一个是读入的字节数，一个是`err`错误。\n\n- 从其注释文档看，`io.Reader`接口的规则更多。\n\n- 从其注释文档看，`io.Reader`接口的规则更多。\n\n- Read最多读取len(p)字节的数据，并保存到p。\n- 返回读取的字节数以及任何发生的错误信息\n- n要满足0 <= n <= len(p)\n- n<len(p)时，表示读取的数据不足以填满p，这时方法会立即返回，而不是等待更多的数据\n- 读取过程中遇到错误，会返回读取的字节数n以及相应的错误err\n- 在底层输入流结束时，方法会返回n>0的字节，但是err可能时EOF，也可以是nil\n- 在第6种(上面)情况下，再次调用read方法的时候，肯定会返回0,EOF\n- 调用Read方法时，如果n>0时，优先处理处理读入的数据，然后再处理错误err，EOF也要这样处理\n- Read方法不鼓励返回n=0并且err=nil的情况\n\n### 例子\n\n```golang\nimport(\n    \"bytes\"\n)\n\nfunc main() {\n    //定义零值Buffer类型变量b\n    var b bytes.Buffer\n    //使用Write方法为写入字符串\n    b.Write([]byte(\"你好\"))\n    //这个是把一个字符串拼接到Buffer里\n    fmt.Fprint(&b,\",\",\"http://www.flysnow.org\")\n    //把Buffer里的内容打印到终端控制台\n    b.WriteTo(os.Stdout)\n}\n```\n这个例子是拼接字符串到`Buffer`里，然后再输出到控制台，这个例子非常简单，但是利用了流的读写，`bytes.Buffer`是一个可变字节的类型，可以让我们很容易的对字节进行操作，比如读写，追加等。bytes.Buffer实现了io.Writer和io.Reader接口，所以我么可以很容易的进行读写操作，而不用关注具体实现。\n\n`b.Write([]byte(\"你好\"))`实现了写入一个字符串，我们把这个字符串转为一个字节切片，然后调用`Write`方法写入，这个就是`bytes.Buffer`为了实现`io.Writer`接口而实现的一个方法，可以帮我们写入数据流。\n\n```golang\n\n// Buffer 实现了Write接口\nfunc (b *Buffer) Write(p []byte) (n int, err error) {\n    b.lastRead = opInvalid\n    m := b.grow(len(p))\n    return copy(b.buf[m:], p), nil\n}\n```\n以上就是`bytes.Buffer` 实现`io.Writer`接口的方法, 最终我们看到, 我们写入的切片会被写到`b.buf`里面, 这了`b.buf[m:]`拷贝其实就是追加的意思, 不会覆盖原来的数据.\n从实现看，我们发现其实只有`b *Buffer`指针实现了`io.Writer`接口，所以我们示例代码中调用`fmt.Fprint`函数的时候，传递的是一个地址`&b`。\n\n```golang\nfunc Fprint(w io.Writer, a ...interface{}) (n int, err error) {\n    p := newPrinter()\n    p.doPrint(a)\n    n, err = w.Write(p.buf)\n    p.free()\n    return\n}\n```\n\n这是函数`fmt.Fprint`的实现,  他的功能就是为一个把数据`a`写入到一个`io.Write`接口实现了, 具体如何写入,  它是不关心的,  因为`io.Writer`会做的, 它只关心可以写入即可。`w.Write(p.buf)`调用`Wirte`方法写入。\n\n最后的`b.WriteTo(os.Stdout)`是把最终的数据输出到标准的`os.Stdout`里，以便我们查看输出，它接收一个`io.Writer`接口类型的参数，开篇我们讲过`os.Stdout`也实现了这个`io.Writer`接口，所以就可以作为参数传入。\n\n这里我们会发现，很多方法的接收参数都是`io.Writer`接口，当然还有`io.Reader`接口，这就是面向接口的编程，我们不用关注具体实现，只用关注这个接口可以做什么事情，如果我们换成输出到文件里，那么也很容易，只用把`os.File`类型作为参数即可。任何实现了该接口的类型，都可以作为参数。\n\n除了`b.WriteTo`方法外，我们还可以使用`io.Reader`接口的`Read`方法实现数据的读取.\n```golang\n    var p [100]byte\n    n,err:=b.Read(p[:])\n    fmt.Println(n,err,string(p[:n]))\n```\n这是最原始的方法，使用Read方法，n为读取的字节数，然后我们输出打印出来。\n\n因为byte.Buffer指针实现了io.Reader接口，所以我们还可以使用如下方式读取数据信息。\n\n```golang\n    data,err:=ioutil.ReadAll(&b)\n    fmt.Println(string(data),err)\n```\n\nioutil.ReadAll接口一个io.Reader接口的参数，表明可以从任何实现了io.Reader接口的类型里读取全部的数据。\n```golang\nfunc readAll(r io.Reader, capacity int64) (b []byte, err error) {\n    buf := bytes.NewBuffer(make([]byte, 0, capacity))\n    // If the buffer overflows, we will get bytes.ErrTooLarge.\n    // Return that as an error. Any other panic remains.\n    defer func() {\n        e := recover()        \n        if e == nil {\n                    return\n        }       \n        if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {\n                   err = panicErr\n        } else {\n                    panic(e)\n        }\n    }()\n    _, err = buf.ReadFrom(r)    return buf.Bytes(), err\n}\n```\n以上是ioutil.ReadAll实现的源代码，也非常简单，基本原理是创建一个byte.Buffer ,通过这个byte.Buffer的ReadFrom方法，把io.Reader里的数据读取出来，最后通过byte.Buffer的Bytes方法进行返回最终读取的字节数据信息。\n\n整个流的读取和写入已经被完全抽象啦， io包的大部分操作和类型都是基于这两个接口，当然还有http等其他牵涉到数据流、文件流等的，都可以完全用io.Writer和io.Reader接口来表示，通过这两个接口的连接，我们可以实现任何数据的读写。\n","source":"_posts/golang中的writer和reader.md","raw":"---\nlayout: post\ntitle: golang中的writer和reader\ndate: 2017-11-07 18:00:13\ntags:\n    - golang\n    - go基础\ncategories: \"算法\"\n---\n\n先来说说程序中的输入和输出\n\n`c`里面有标准输出和输入还有错误处理, 还有非常重要的管道的, 以至于它非常好扩展.\n\n那么`golang`中的`Write`和`Reader`的接口设计遵循了Unix的输入和输出, 一个程序的输出可以是另外一个程序的输入。他们的功能单一并且纯粹，这样就可以非常容易的编写程序代码，又可以通过组合的概念，让我们的程序做更多的事情。\n\n### Unix的三种输入输出输入模式\n\n```golang\nvar (\n   Stdin  = NewFile(uintptr(syscall.Stdin), \"/dev/stdin\")\n   Stdout = NewFile(uintptr(syscall.Stdout), \"/dev/stdout\")\n   Stderr = NewFile(uintptr(syscall.Stderr), \"/dev/stderr\")\n)\n```\n这三种标准的输入和输出都是一个`*File`，而`*File`恰恰就是同时实现了`io.Writer`和`io.Reader`这两个接口的类型，所以他们同时具备输入和输出的功能，既可以从里面读取数据，又可以往里面写入数据。\n\nGo标准库的io包也是基于Unix这种输入和输出的理念，大部分的接口都是扩展了`io.Writer`和`io.Reader`，大部分的类型也都选择的实现了`io.Writer`和`io.Reader`这两个接口，然后把数据的输入和输出，抽象为流的读写，所以只要实现了这两个接口，都可以使用流的读写功能。\n\n`io.Writer`和`io.Reader`两个接口的高度抽象，让我们不用再面向具体的业务，我们只关注，是读还是写，只要我们定义的方法函数可以接收这两个接口作为参数，那么我们就可以进行流的读写，而不用关心如何读，写到哪里去，这也是面向接口编程的好处。\n\n### Reader和Writer接口\n\n这两个高度抽象的接口，只有一个方法，也体现了Go接口设计的简洁性，只做一件事。\n\n```golang\n// Writer 接口包装了基本的 Write 方法。\n\n// Write 将 len(p) 个字节从 p 中写入到基本数据流中。\n// 它返回从 p 中被写入的字节数 n（0 <= n <= len(p)）以及任何遇到的引起写入提前停止的错误。\n// 若 Write 返回的 n < len(p)，它就必须返回一个非nil的错误。Write 不能修改此切片的数据，即便它是临时的。\n\ntype Writer interface {\n    Write(p []byte) (n int, err error)\n}\n```\n\n这是`Wirter`接口的定义，它只有一个`Write`方法，接受一个`byte`的切片，返回两个值，n表示写入的字节数、err表示写入时发生的错误。\n\n从其文档注释来看，这个方法是有规范要求的，我们要想实现一个io.Writer接口，就要遵循这些规则。\n\n这些实现`io.Writer`接口的规则，所有实现了该接口的类型都要遵守，不然可能会导致莫名其妙的问题。\n\n```golang\nReader 接口包装了基本的 Read 方法。\n\n// Read 将 len(p) 个字节读取到 p 中。它返回读取的字节数 n（0 <= n <= len(p)） 以及任何遇到的错误。即使 Read 返回的 n < len(p)，它也会在调用过程中使用 p 的全部作为暂存空间。若一些数据可用但不到 len(p) 个字节，Read 会照例返回可用的东西， 而不是等待更多。\n\n// 当 Read 在成功读取 n > 0 个字节后遇到一个错误或 EOF 情况，它就会返回读取的字节数。 它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和 n == 0）。 这种一般情况的一个例子就是 Reader 在输入流结束时会返回一个非零的字节数， 可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个 Read 都应当返回 0, EOF。\n\n// 调用者应当总在考虑到错误 err 前处理 n > 0 的字节。这样做可以在读取一些字节， 以及允许的 EOF 行为后正确地处理I/O错误。\n\n// Read 的实现在 len(p) == 0 以外的情况下会阻止返回零字节的计数和 nil 错误， 调用者应将返回 0 和 nil 视作什么也没有发生；特别是它并不表示 EOF。\n\n// 实现必须不保留 p。\n\ntype Reader interface {\n    Read(p []byte) (n int, err error)\n}\n```\n\n这是`io.Reader`接口定义，也只有一个`Read`方法，这个方法接受一个`byte`的切片，并返回两个值，一个是读入的字节数，一个是`err`错误。\n\n- 从其注释文档看，`io.Reader`接口的规则更多。\n\n- 从其注释文档看，`io.Reader`接口的规则更多。\n\n- Read最多读取len(p)字节的数据，并保存到p。\n- 返回读取的字节数以及任何发生的错误信息\n- n要满足0 <= n <= len(p)\n- n<len(p)时，表示读取的数据不足以填满p，这时方法会立即返回，而不是等待更多的数据\n- 读取过程中遇到错误，会返回读取的字节数n以及相应的错误err\n- 在底层输入流结束时，方法会返回n>0的字节，但是err可能时EOF，也可以是nil\n- 在第6种(上面)情况下，再次调用read方法的时候，肯定会返回0,EOF\n- 调用Read方法时，如果n>0时，优先处理处理读入的数据，然后再处理错误err，EOF也要这样处理\n- Read方法不鼓励返回n=0并且err=nil的情况\n\n### 例子\n\n```golang\nimport(\n    \"bytes\"\n)\n\nfunc main() {\n    //定义零值Buffer类型变量b\n    var b bytes.Buffer\n    //使用Write方法为写入字符串\n    b.Write([]byte(\"你好\"))\n    //这个是把一个字符串拼接到Buffer里\n    fmt.Fprint(&b,\",\",\"http://www.flysnow.org\")\n    //把Buffer里的内容打印到终端控制台\n    b.WriteTo(os.Stdout)\n}\n```\n这个例子是拼接字符串到`Buffer`里，然后再输出到控制台，这个例子非常简单，但是利用了流的读写，`bytes.Buffer`是一个可变字节的类型，可以让我们很容易的对字节进行操作，比如读写，追加等。bytes.Buffer实现了io.Writer和io.Reader接口，所以我么可以很容易的进行读写操作，而不用关注具体实现。\n\n`b.Write([]byte(\"你好\"))`实现了写入一个字符串，我们把这个字符串转为一个字节切片，然后调用`Write`方法写入，这个就是`bytes.Buffer`为了实现`io.Writer`接口而实现的一个方法，可以帮我们写入数据流。\n\n```golang\n\n// Buffer 实现了Write接口\nfunc (b *Buffer) Write(p []byte) (n int, err error) {\n    b.lastRead = opInvalid\n    m := b.grow(len(p))\n    return copy(b.buf[m:], p), nil\n}\n```\n以上就是`bytes.Buffer` 实现`io.Writer`接口的方法, 最终我们看到, 我们写入的切片会被写到`b.buf`里面, 这了`b.buf[m:]`拷贝其实就是追加的意思, 不会覆盖原来的数据.\n从实现看，我们发现其实只有`b *Buffer`指针实现了`io.Writer`接口，所以我们示例代码中调用`fmt.Fprint`函数的时候，传递的是一个地址`&b`。\n\n```golang\nfunc Fprint(w io.Writer, a ...interface{}) (n int, err error) {\n    p := newPrinter()\n    p.doPrint(a)\n    n, err = w.Write(p.buf)\n    p.free()\n    return\n}\n```\n\n这是函数`fmt.Fprint`的实现,  他的功能就是为一个把数据`a`写入到一个`io.Write`接口实现了, 具体如何写入,  它是不关心的,  因为`io.Writer`会做的, 它只关心可以写入即可。`w.Write(p.buf)`调用`Wirte`方法写入。\n\n最后的`b.WriteTo(os.Stdout)`是把最终的数据输出到标准的`os.Stdout`里，以便我们查看输出，它接收一个`io.Writer`接口类型的参数，开篇我们讲过`os.Stdout`也实现了这个`io.Writer`接口，所以就可以作为参数传入。\n\n这里我们会发现，很多方法的接收参数都是`io.Writer`接口，当然还有`io.Reader`接口，这就是面向接口的编程，我们不用关注具体实现，只用关注这个接口可以做什么事情，如果我们换成输出到文件里，那么也很容易，只用把`os.File`类型作为参数即可。任何实现了该接口的类型，都可以作为参数。\n\n除了`b.WriteTo`方法外，我们还可以使用`io.Reader`接口的`Read`方法实现数据的读取.\n```golang\n    var p [100]byte\n    n,err:=b.Read(p[:])\n    fmt.Println(n,err,string(p[:n]))\n```\n这是最原始的方法，使用Read方法，n为读取的字节数，然后我们输出打印出来。\n\n因为byte.Buffer指针实现了io.Reader接口，所以我们还可以使用如下方式读取数据信息。\n\n```golang\n    data,err:=ioutil.ReadAll(&b)\n    fmt.Println(string(data),err)\n```\n\nioutil.ReadAll接口一个io.Reader接口的参数，表明可以从任何实现了io.Reader接口的类型里读取全部的数据。\n```golang\nfunc readAll(r io.Reader, capacity int64) (b []byte, err error) {\n    buf := bytes.NewBuffer(make([]byte, 0, capacity))\n    // If the buffer overflows, we will get bytes.ErrTooLarge.\n    // Return that as an error. Any other panic remains.\n    defer func() {\n        e := recover()        \n        if e == nil {\n                    return\n        }       \n        if panicErr, ok := e.(error); ok && panicErr == bytes.ErrTooLarge {\n                   err = panicErr\n        } else {\n                    panic(e)\n        }\n    }()\n    _, err = buf.ReadFrom(r)    return buf.Bytes(), err\n}\n```\n以上是ioutil.ReadAll实现的源代码，也非常简单，基本原理是创建一个byte.Buffer ,通过这个byte.Buffer的ReadFrom方法，把io.Reader里的数据读取出来，最后通过byte.Buffer的Bytes方法进行返回最终读取的字节数据信息。\n\n整个流的读取和写入已经被完全抽象啦， io包的大部分操作和类型都是基于这两个接口，当然还有http等其他牵涉到数据流、文件流等的，都可以完全用io.Writer和io.Reader接口来表示，通过这两个接口的连接，我们可以实现任何数据的读写。\n","slug":"golang中的writer和reader","published":1,"updated":"2019-05-13T03:56:03.236Z","comments":1,"photos":[],"link":"","_id":"cjvluebd3001fa0dmkpgntx77","content":"<p>先来说说程序中的输入和输出</p>\n<p><code>c</code>里面有标准输出和输入还有错误处理, 还有非常重要的管道的, 以至于它非常好扩展.</p>\n<p>那么<code>golang</code>中的<code>Write</code>和<code>Reader</code>的接口设计遵循了Unix的输入和输出, 一个程序的输出可以是另外一个程序的输入。他们的功能单一并且纯粹，这样就可以非常容易的编写程序代码，又可以通过组合的概念，让我们的程序做更多的事情。</p>\n<h3 id=\"Unix的三种输入输出输入模式\"><a href=\"#Unix的三种输入输出输入模式\" class=\"headerlink\" title=\"Unix的三种输入输出输入模式\"></a>Unix的三种输入输出输入模式</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">   Stdin  = NewFile(<span class=\"keyword\">uintptr</span>(syscall.Stdin), <span class=\"string\">\"/dev/stdin\"</span>)</div><div class=\"line\">   Stdout = NewFile(<span class=\"keyword\">uintptr</span>(syscall.Stdout), <span class=\"string\">\"/dev/stdout\"</span>)</div><div class=\"line\">   Stderr = NewFile(<span class=\"keyword\">uintptr</span>(syscall.Stderr), <span class=\"string\">\"/dev/stderr\"</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>这三种标准的输入和输出都是一个<code>*File</code>，而<code>*File</code>恰恰就是同时实现了<code>io.Writer</code>和<code>io.Reader</code>这两个接口的类型，所以他们同时具备输入和输出的功能，既可以从里面读取数据，又可以往里面写入数据。</p>\n<p>Go标准库的io包也是基于Unix这种输入和输出的理念，大部分的接口都是扩展了<code>io.Writer</code>和<code>io.Reader</code>，大部分的类型也都选择的实现了<code>io.Writer</code>和<code>io.Reader</code>这两个接口，然后把数据的输入和输出，抽象为流的读写，所以只要实现了这两个接口，都可以使用流的读写功能。</p>\n<p><code>io.Writer</code>和<code>io.Reader</code>两个接口的高度抽象，让我们不用再面向具体的业务，我们只关注，是读还是写，只要我们定义的方法函数可以接收这两个接口作为参数，那么我们就可以进行流的读写，而不用关心如何读，写到哪里去，这也是面向接口编程的好处。</p>\n<h3 id=\"Reader和Writer接口\"><a href=\"#Reader和Writer接口\" class=\"headerlink\" title=\"Reader和Writer接口\"></a>Reader和Writer接口</h3><p>这两个高度抽象的接口，只有一个方法，也体现了Go接口设计的简洁性，只做一件事。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Writer 接口包装了基本的 Write 方法。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Write 将 len(p) 个字节从 p 中写入到基本数据流中。</span></div><div class=\"line\"><span class=\"comment\">// 它返回从 p 中被写入的字节数 n（0 &lt;= n &lt;= len(p)）以及任何遇到的引起写入提前停止的错误。</span></div><div class=\"line\"><span class=\"comment\">// 若 Write 返回的 n &lt; len(p)，它就必须返回一个非nil的错误。Write 不能修改此切片的数据，即便它是临时的。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Write(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是<code>Wirter</code>接口的定义，它只有一个<code>Write</code>方法，接受一个<code>byte</code>的切片，返回两个值，n表示写入的字节数、err表示写入时发生的错误。</p>\n<p>从其文档注释来看，这个方法是有规范要求的，我们要想实现一个io.Writer接口，就要遵循这些规则。</p>\n<p>这些实现<code>io.Writer</code>接口的规则，所有实现了该接口的类型都要遵守，不然可能会导致莫名其妙的问题。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Reader 接口包装了基本的 Read 方法。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Read 将 len(p) 个字节读取到 p 中。它返回读取的字节数 n（0 &lt;= n &lt;= len(p)） 以及任何遇到的错误。即使 Read 返回的 n &lt; len(p)，它也会在调用过程中使用 p 的全部作为暂存空间。若一些数据可用但不到 len(p) 个字节，Read 会照例返回可用的东西， 而不是等待更多。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当 Read 在成功读取 n &gt; 0 个字节后遇到一个错误或 EOF 情况，它就会返回读取的字节数。 它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和 n == 0）。 这种一般情况的一个例子就是 Reader 在输入流结束时会返回一个非零的字节数， 可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个 Read 都应当返回 0, EOF。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用者应当总在考虑到错误 err 前处理 n &gt; 0 的字节。这样做可以在读取一些字节， 以及允许的 EOF 行为后正确地处理I/O错误。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Read 的实现在 len(p) == 0 以外的情况下会阻止返回零字节的计数和 nil 错误， 调用者应将返回 0 和 nil 视作什么也没有发生；特别是它并不表示 EOF。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现必须不保留 p。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Read(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是<code>io.Reader</code>接口定义，也只有一个<code>Read</code>方法，这个方法接受一个<code>byte</code>的切片，并返回两个值，一个是读入的字节数，一个是<code>err</code>错误。</p>\n<ul>\n<li><p>从其注释文档看，<code>io.Reader</code>接口的规则更多。</p>\n</li>\n<li><p>从其注释文档看，<code>io.Reader</code>接口的规则更多。</p>\n</li>\n<li><p>Read最多读取len(p)字节的数据，并保存到p。</p>\n</li>\n<li>返回读取的字节数以及任何发生的错误信息</li>\n<li>n要满足0 &lt;= n &lt;= len(p)</li>\n<li>n&lt;len(p)时，表示读取的数据不足以填满p，这时方法会立即返回，而不是等待更多的数据</li>\n<li>读取过程中遇到错误，会返回读取的字节数n以及相应的错误err</li>\n<li>在底层输入流结束时，方法会返回n&gt;0的字节，但是err可能时EOF，也可以是nil</li>\n<li>在第6种(上面)情况下，再次调用read方法的时候，肯定会返回0,EOF</li>\n<li>调用Read方法时，如果n&gt;0时，优先处理处理读入的数据，然后再处理错误err，EOF也要这样处理</li>\n<li>Read方法不鼓励返回n=0并且err=nil的情况</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span>(</div><div class=\"line\">    <span class=\"string\">\"bytes\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//定义零值Buffer类型变量b</span></div><div class=\"line\">    <span class=\"keyword\">var</span> b bytes.Buffer</div><div class=\"line\">    <span class=\"comment\">//使用Write方法为写入字符串</span></div><div class=\"line\">    b.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"你好\"</span>))</div><div class=\"line\">    <span class=\"comment\">//这个是把一个字符串拼接到Buffer里</span></div><div class=\"line\">    fmt.Fprint(&amp;b,<span class=\"string\">\",\"</span>,<span class=\"string\">\"http://www.flysnow.org\"</span>)</div><div class=\"line\">    <span class=\"comment\">//把Buffer里的内容打印到终端控制台</span></div><div class=\"line\">    b.WriteTo(os.Stdout)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子是拼接字符串到<code>Buffer</code>里，然后再输出到控制台，这个例子非常简单，但是利用了流的读写，<code>bytes.Buffer</code>是一个可变字节的类型，可以让我们很容易的对字节进行操作，比如读写，追加等。bytes.Buffer实现了io.Writer和io.Reader接口，所以我么可以很容易的进行读写操作，而不用关注具体实现。</p>\n<p><code>b.Write([]byte(&quot;你好&quot;))</code>实现了写入一个字符串，我们把这个字符串转为一个字节切片，然后调用<code>Write</code>方法写入，这个就是<code>bytes.Buffer</code>为了实现<code>io.Writer</code>接口而实现的一个方法，可以帮我们写入数据流。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Buffer 实现了Write接口</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Buffer)</span> <span class=\"title\">Write</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</div><div class=\"line\">    b.lastRead = opInvalid</div><div class=\"line\">    m := b.grow(<span class=\"built_in\">len</span>(p))</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">copy</span>(b.buf[m:], p), <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上就是<code>bytes.Buffer</code> 实现<code>io.Writer</code>接口的方法, 最终我们看到, 我们写入的切片会被写到<code>b.buf</code>里面, 这了<code>b.buf[m:]</code>拷贝其实就是追加的意思, 不会覆盖原来的数据.<br>从实现看，我们发现其实只有<code>b *Buffer</code>指针实现了<code>io.Writer</code>接口，所以我们示例代码中调用<code>fmt.Fprint</code>函数的时候，传递的是一个地址<code>&amp;b</code>。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fprint</span><span class=\"params\">(w io.Writer, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</div><div class=\"line\">    p := newPrinter()</div><div class=\"line\">    p.doPrint(a)</div><div class=\"line\">    n, err = w.Write(p.buf)</div><div class=\"line\">    p.free()</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是函数<code>fmt.Fprint</code>的实现,  他的功能就是为一个把数据<code>a</code>写入到一个<code>io.Write</code>接口实现了, 具体如何写入,  它是不关心的,  因为<code>io.Writer</code>会做的, 它只关心可以写入即可。<code>w.Write(p.buf)</code>调用<code>Wirte</code>方法写入。</p>\n<p>最后的<code>b.WriteTo(os.Stdout)</code>是把最终的数据输出到标准的<code>os.Stdout</code>里，以便我们查看输出，它接收一个<code>io.Writer</code>接口类型的参数，开篇我们讲过<code>os.Stdout</code>也实现了这个<code>io.Writer</code>接口，所以就可以作为参数传入。</p>\n<p>这里我们会发现，很多方法的接收参数都是<code>io.Writer</code>接口，当然还有<code>io.Reader</code>接口，这就是面向接口的编程，我们不用关注具体实现，只用关注这个接口可以做什么事情，如果我们换成输出到文件里，那么也很容易，只用把<code>os.File</code>类型作为参数即可。任何实现了该接口的类型，都可以作为参数。</p>\n<p>除了<code>b.WriteTo</code>方法外，我们还可以使用<code>io.Reader</code>接口的<code>Read</code>方法实现数据的读取.<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p [<span class=\"number\">100</span>]<span class=\"keyword\">byte</span></div><div class=\"line\">n,err:=b.Read(p[:])</div><div class=\"line\">fmt.Println(n,err,<span class=\"keyword\">string</span>(p[:n]))</div></pre></td></tr></table></figure></p>\n<p>这是最原始的方法，使用Read方法，n为读取的字节数，然后我们输出打印出来。</p>\n<p>因为byte.Buffer指针实现了io.Reader接口，所以我们还可以使用如下方式读取数据信息。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">data,err:=ioutil.ReadAll(&amp;b)</div><div class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(data),err)</div></pre></td></tr></table></figure>\n<p>ioutil.ReadAll接口一个io.Reader接口的参数，表明可以从任何实现了io.Reader接口的类型里读取全部的数据。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readAll</span><span class=\"params\">(r io.Reader, capacity <span class=\"keyword\">int64</span>)</span> <span class=\"params\">(b []<span class=\"keyword\">byte</span>, err error)</span></span> &#123;</div><div class=\"line\">    buf := bytes.NewBuffer(<span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>, capacity))</div><div class=\"line\">    <span class=\"comment\">// If the buffer overflows, we will get bytes.ErrTooLarge.</span></div><div class=\"line\">    <span class=\"comment\">// Return that as an error. Any other panic remains.</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        e := <span class=\"built_in\">recover</span>()        </div><div class=\"line\">        <span class=\"keyword\">if</span> e == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;       </div><div class=\"line\">        <span class=\"keyword\">if</span> panicErr, ok := e.(error); ok &amp;&amp; panicErr == bytes.ErrTooLarge &#123;</div><div class=\"line\">                   err = panicErr</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">panic</span>(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\">    _, err = buf.ReadFrom(r)    <span class=\"keyword\">return</span> buf.Bytes(), err</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上是ioutil.ReadAll实现的源代码，也非常简单，基本原理是创建一个byte.Buffer ,通过这个byte.Buffer的ReadFrom方法，把io.Reader里的数据读取出来，最后通过byte.Buffer的Bytes方法进行返回最终读取的字节数据信息。</p>\n<p>整个流的读取和写入已经被完全抽象啦， io包的大部分操作和类型都是基于这两个接口，当然还有http等其他牵涉到数据流、文件流等的，都可以完全用io.Writer和io.Reader接口来表示，通过这两个接口的连接，我们可以实现任何数据的读写。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>先来说说程序中的输入和输出</p>\n<p><code>c</code>里面有标准输出和输入还有错误处理, 还有非常重要的管道的, 以至于它非常好扩展.</p>\n<p>那么<code>golang</code>中的<code>Write</code>和<code>Reader</code>的接口设计遵循了Unix的输入和输出, 一个程序的输出可以是另外一个程序的输入。他们的功能单一并且纯粹，这样就可以非常容易的编写程序代码，又可以通过组合的概念，让我们的程序做更多的事情。</p>\n<h3 id=\"Unix的三种输入输出输入模式\"><a href=\"#Unix的三种输入输出输入模式\" class=\"headerlink\" title=\"Unix的三种输入输出输入模式\"></a>Unix的三种输入输出输入模式</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> (</div><div class=\"line\">   Stdin  = NewFile(<span class=\"keyword\">uintptr</span>(syscall.Stdin), <span class=\"string\">\"/dev/stdin\"</span>)</div><div class=\"line\">   Stdout = NewFile(<span class=\"keyword\">uintptr</span>(syscall.Stdout), <span class=\"string\">\"/dev/stdout\"</span>)</div><div class=\"line\">   Stderr = NewFile(<span class=\"keyword\">uintptr</span>(syscall.Stderr), <span class=\"string\">\"/dev/stderr\"</span>)</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<p>这三种标准的输入和输出都是一个<code>*File</code>，而<code>*File</code>恰恰就是同时实现了<code>io.Writer</code>和<code>io.Reader</code>这两个接口的类型，所以他们同时具备输入和输出的功能，既可以从里面读取数据，又可以往里面写入数据。</p>\n<p>Go标准库的io包也是基于Unix这种输入和输出的理念，大部分的接口都是扩展了<code>io.Writer</code>和<code>io.Reader</code>，大部分的类型也都选择的实现了<code>io.Writer</code>和<code>io.Reader</code>这两个接口，然后把数据的输入和输出，抽象为流的读写，所以只要实现了这两个接口，都可以使用流的读写功能。</p>\n<p><code>io.Writer</code>和<code>io.Reader</code>两个接口的高度抽象，让我们不用再面向具体的业务，我们只关注，是读还是写，只要我们定义的方法函数可以接收这两个接口作为参数，那么我们就可以进行流的读写，而不用关心如何读，写到哪里去，这也是面向接口编程的好处。</p>\n<h3 id=\"Reader和Writer接口\"><a href=\"#Reader和Writer接口\" class=\"headerlink\" title=\"Reader和Writer接口\"></a>Reader和Writer接口</h3><p>这两个高度抽象的接口，只有一个方法，也体现了Go接口设计的简洁性，只做一件事。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Writer 接口包装了基本的 Write 方法。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Write 将 len(p) 个字节从 p 中写入到基本数据流中。</span></div><div class=\"line\"><span class=\"comment\">// 它返回从 p 中被写入的字节数 n（0 &lt;= n &lt;= len(p)）以及任何遇到的引起写入提前停止的错误。</span></div><div class=\"line\"><span class=\"comment\">// 若 Write 返回的 n &lt; len(p)，它就必须返回一个非nil的错误。Write 不能修改此切片的数据，即便它是临时的。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Writer <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Write(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是<code>Wirter</code>接口的定义，它只有一个<code>Write</code>方法，接受一个<code>byte</code>的切片，返回两个值，n表示写入的字节数、err表示写入时发生的错误。</p>\n<p>从其文档注释来看，这个方法是有规范要求的，我们要想实现一个io.Writer接口，就要遵循这些规则。</p>\n<p>这些实现<code>io.Writer</code>接口的规则，所有实现了该接口的类型都要遵守，不然可能会导致莫名其妙的问题。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">Reader 接口包装了基本的 Read 方法。</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Read 将 len(p) 个字节读取到 p 中。它返回读取的字节数 n（0 &lt;= n &lt;= len(p)） 以及任何遇到的错误。即使 Read 返回的 n &lt; len(p)，它也会在调用过程中使用 p 的全部作为暂存空间。若一些数据可用但不到 len(p) 个字节，Read 会照例返回可用的东西， 而不是等待更多。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 当 Read 在成功读取 n &gt; 0 个字节后遇到一个错误或 EOF 情况，它就会返回读取的字节数。 它会从相同的调用中返回（非nil的）错误或从随后的调用中返回错误（和 n == 0）。 这种一般情况的一个例子就是 Reader 在输入流结束时会返回一个非零的字节数， 可能的返回不是 err == EOF 就是 err == nil。无论如何，下一个 Read 都应当返回 0, EOF。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用者应当总在考虑到错误 err 前处理 n &gt; 0 的字节。这样做可以在读取一些字节， 以及允许的 EOF 行为后正确地处理I/O错误。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Read 的实现在 len(p) == 0 以外的情况下会阻止返回零字节的计数和 nil 错误， 调用者应将返回 0 和 nil 视作什么也没有发生；特别是它并不表示 EOF。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 实现必须不保留 p。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    Read(p []<span class=\"keyword\">byte</span>) (n <span class=\"keyword\">int</span>, err error)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是<code>io.Reader</code>接口定义，也只有一个<code>Read</code>方法，这个方法接受一个<code>byte</code>的切片，并返回两个值，一个是读入的字节数，一个是<code>err</code>错误。</p>\n<ul>\n<li><p>从其注释文档看，<code>io.Reader</code>接口的规则更多。</p>\n</li>\n<li><p>从其注释文档看，<code>io.Reader</code>接口的规则更多。</p>\n</li>\n<li><p>Read最多读取len(p)字节的数据，并保存到p。</p>\n</li>\n<li>返回读取的字节数以及任何发生的错误信息</li>\n<li>n要满足0 &lt;= n &lt;= len(p)</li>\n<li>n&lt;len(p)时，表示读取的数据不足以填满p，这时方法会立即返回，而不是等待更多的数据</li>\n<li>读取过程中遇到错误，会返回读取的字节数n以及相应的错误err</li>\n<li>在底层输入流结束时，方法会返回n&gt;0的字节，但是err可能时EOF，也可以是nil</li>\n<li>在第6种(上面)情况下，再次调用read方法的时候，肯定会返回0,EOF</li>\n<li>调用Read方法时，如果n&gt;0时，优先处理处理读入的数据，然后再处理错误err，EOF也要这样处理</li>\n<li>Read方法不鼓励返回n=0并且err=nil的情况</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span>(</div><div class=\"line\">    <span class=\"string\">\"bytes\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//定义零值Buffer类型变量b</span></div><div class=\"line\">    <span class=\"keyword\">var</span> b bytes.Buffer</div><div class=\"line\">    <span class=\"comment\">//使用Write方法为写入字符串</span></div><div class=\"line\">    b.Write([]<span class=\"keyword\">byte</span>(<span class=\"string\">\"你好\"</span>))</div><div class=\"line\">    <span class=\"comment\">//这个是把一个字符串拼接到Buffer里</span></div><div class=\"line\">    fmt.Fprint(&amp;b,<span class=\"string\">\",\"</span>,<span class=\"string\">\"http://www.flysnow.org\"</span>)</div><div class=\"line\">    <span class=\"comment\">//把Buffer里的内容打印到终端控制台</span></div><div class=\"line\">    b.WriteTo(os.Stdout)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个例子是拼接字符串到<code>Buffer</code>里，然后再输出到控制台，这个例子非常简单，但是利用了流的读写，<code>bytes.Buffer</code>是一个可变字节的类型，可以让我们很容易的对字节进行操作，比如读写，追加等。bytes.Buffer实现了io.Writer和io.Reader接口，所以我么可以很容易的进行读写操作，而不用关注具体实现。</p>\n<p><code>b.Write([]byte(&quot;你好&quot;))</code>实现了写入一个字符串，我们把这个字符串转为一个字节切片，然后调用<code>Write</code>方法写入，这个就是<code>bytes.Buffer</code>为了实现<code>io.Writer</code>接口而实现的一个方法，可以帮我们写入数据流。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Buffer 实现了Write接口</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(b *Buffer)</span> <span class=\"title\">Write</span><span class=\"params\">(p []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</div><div class=\"line\">    b.lastRead = opInvalid</div><div class=\"line\">    m := b.grow(<span class=\"built_in\">len</span>(p))</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">copy</span>(b.buf[m:], p), <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>以上就是<code>bytes.Buffer</code> 实现<code>io.Writer</code>接口的方法, 最终我们看到, 我们写入的切片会被写到<code>b.buf</code>里面, 这了<code>b.buf[m:]</code>拷贝其实就是追加的意思, 不会覆盖原来的数据.<br>从实现看，我们发现其实只有<code>b *Buffer</code>指针实现了<code>io.Writer</code>接口，所以我们示例代码中调用<code>fmt.Fprint</code>函数的时候，传递的是一个地址<code>&amp;b</code>。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Fprint</span><span class=\"params\">(w io.Writer, a ...<span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"params\">(n <span class=\"keyword\">int</span>, err error)</span></span> &#123;</div><div class=\"line\">    p := newPrinter()</div><div class=\"line\">    p.doPrint(a)</div><div class=\"line\">    n, err = w.Write(p.buf)</div><div class=\"line\">    p.free()</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这是函数<code>fmt.Fprint</code>的实现,  他的功能就是为一个把数据<code>a</code>写入到一个<code>io.Write</code>接口实现了, 具体如何写入,  它是不关心的,  因为<code>io.Writer</code>会做的, 它只关心可以写入即可。<code>w.Write(p.buf)</code>调用<code>Wirte</code>方法写入。</p>\n<p>最后的<code>b.WriteTo(os.Stdout)</code>是把最终的数据输出到标准的<code>os.Stdout</code>里，以便我们查看输出，它接收一个<code>io.Writer</code>接口类型的参数，开篇我们讲过<code>os.Stdout</code>也实现了这个<code>io.Writer</code>接口，所以就可以作为参数传入。</p>\n<p>这里我们会发现，很多方法的接收参数都是<code>io.Writer</code>接口，当然还有<code>io.Reader</code>接口，这就是面向接口的编程，我们不用关注具体实现，只用关注这个接口可以做什么事情，如果我们换成输出到文件里，那么也很容易，只用把<code>os.File</code>类型作为参数即可。任何实现了该接口的类型，都可以作为参数。</p>\n<p>除了<code>b.WriteTo</code>方法外，我们还可以使用<code>io.Reader</code>接口的<code>Read</code>方法实现数据的读取.<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> p [<span class=\"number\">100</span>]<span class=\"keyword\">byte</span></div><div class=\"line\">n,err:=b.Read(p[:])</div><div class=\"line\">fmt.Println(n,err,<span class=\"keyword\">string</span>(p[:n]))</div></pre></td></tr></table></figure></p>\n<p>这是最原始的方法，使用Read方法，n为读取的字节数，然后我们输出打印出来。</p>\n<p>因为byte.Buffer指针实现了io.Reader接口，所以我们还可以使用如下方式读取数据信息。</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">data,err:=ioutil.ReadAll(&amp;b)</div><div class=\"line\">fmt.Println(<span class=\"keyword\">string</span>(data),err)</div></pre></td></tr></table></figure>\n<p>ioutil.ReadAll接口一个io.Reader接口的参数，表明可以从任何实现了io.Reader接口的类型里读取全部的数据。<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readAll</span><span class=\"params\">(r io.Reader, capacity <span class=\"keyword\">int64</span>)</span> <span class=\"params\">(b []<span class=\"keyword\">byte</span>, err error)</span></span> &#123;</div><div class=\"line\">    buf := bytes.NewBuffer(<span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"number\">0</span>, capacity))</div><div class=\"line\">    <span class=\"comment\">// If the buffer overflows, we will get bytes.ErrTooLarge.</span></div><div class=\"line\">    <span class=\"comment\">// Return that as an error. Any other panic remains.</span></div><div class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        e := <span class=\"built_in\">recover</span>()        </div><div class=\"line\">        <span class=\"keyword\">if</span> e == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">return</span></div><div class=\"line\">        &#125;       </div><div class=\"line\">        <span class=\"keyword\">if</span> panicErr, ok := e.(error); ok &amp;&amp; panicErr == bytes.ErrTooLarge &#123;</div><div class=\"line\">                   err = panicErr</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">panic</span>(e)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;()</div><div class=\"line\">    _, err = buf.ReadFrom(r)    <span class=\"keyword\">return</span> buf.Bytes(), err</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>以上是ioutil.ReadAll实现的源代码，也非常简单，基本原理是创建一个byte.Buffer ,通过这个byte.Buffer的ReadFrom方法，把io.Reader里的数据读取出来，最后通过byte.Buffer的Bytes方法进行返回最终读取的字节数据信息。</p>\n<p>整个流的读取和写入已经被完全抽象啦， io包的大部分操作和类型都是基于这两个接口，当然还有http等其他牵涉到数据流、文件流等的，都可以完全用io.Writer和io.Reader接口来表示，通过这两个接口的连接，我们可以实现任何数据的读写。</p>\n"},{"layout":"post","title":"go中的interface理解","date":"2017-10-21T08:35:08.000Z","_content":"\n刚开始学习`go`看了语法之后觉得`interface`理解不了, 然后也不清楚什么情况下来使用这个接口, 所以在网上就翻来翻去, 找到一个比较亲民的理解, \n```javascript\n// TODO: channel和interface使用场景\n```\n\n## 在之前先看一下`func`的一些基础定义\n在golang中定义函数的方式\n```golang\nfunc (p myType ) funcName ( a, b int , c string ) ( r , s int ) {\n    return\n}\n```\n- 关键字——func\n- 方法名——funcName\n- 入参——— a,b int,b string\n- 返回值—— r,s int\n- 函数体—— {}\n\n这里具体说一下**`(p myType)`**\n在`Go`中通过给函数标明所属类型，来给该类型定义方法, 也就是通过函数来给类型扩展方法, 上面的`p myType`表示给myType扩展funcName方法`p myType`不是必须的。如果没有，则纯粹是一个函数，通过包名称访问。packageName.funcationName\n\n## `interface`\n如果一只鸟长得像鸭子，走起路来像鸭子，叫起来也像鸭子，那么就把这只鸟叫做鸭子；\n\n- 如果一个结构体绑定的方法包含接口的所有方法,即认为实现了该接口\n- 将对象赋值给接口时,会发生拷贝,而接口的存储是指向这个复制的指针,复制的无法修改原来状态,也无法获取指针\n\ngolang中的interface就是上面这个意思，如果你定义了一个struct，它里面的方法和属性都和interface中的一样，那么可以说，这个struct实现这个interface,上代码\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype s struct {\n    //定义一个s类型，有一个属性i是int的\n\ti int\n}\n\nfunc (this *s) Get() int {\n    //Get方法获得i属性\n\treturn this.i\n}\n\nfunc (this *s) Put(v int) {\n    //Put方法设置i属性\n\tthis.i = v\n}\n\ntype I interface {\n    //定义一个接口类型，里面有Get方法与Put方法\n\tGet() int\n\tPut(int)\n}\n\nfunc main() {\n\tvar S s\n    //申请一个S变量，他是s类型的值\n\tf(&S)\n}\n\nfunc f(my I) {\n    //这里的my保存了接口类型的值，因为s实现了I，所以传递的my虽然是个I类型，但是可以当作s类型来使用\n\tmy.Put(999)\n\tfmt.Println(my.Get())\n}\n```\n\n上面例子中f()虽然需要一个I类型的值,  但是s类型已经现式implement了I类型的接口(s类型实现了I接口要求的所有函数), 所以同样传入取地址的S`&S`变量同样可以调用方法\n\n这种方式有一个专业的说法(非侵入式接口)\n\n非侵入式接口一个很重要的好处就是去掉了繁杂的继承体系，我们看许大神在《go语言编程》一书中作的总结：\n- Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、 Java、 C# 类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是啥含义就足够了.\n- 实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才 合理。接口由使用方按需定义，而不用事前规划.\n- 不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦 合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口.\n\n\n首先golang不支持面向对象思想, 它只能使用`interface`来模拟继承, 本质就是组合, 也可以通过`interface`来实现多态\n\n**上面是对`interface`的类型理解**\n\n**下面说一下在函数中的使用**:\n\n在编写程序的时候会有传入函数的参数不确定的情况,或者`return`不确定参数, 那么我们就可以使用**空接口**来代替你所使用到的类型, 比如`int string float64 []interface error`等不同的类型\n如果返回不同的类型就会导致编译出错, 但是你还需要使用不同的类型\n\n```golang\n// ToStr传入空接口用来代替任何类型\nfunc ToStr(i interface{}) string {\n    // 使用fmt中的Sprintf函数来把Interface转换成了String\n    return fmt.Sprintf(\"%v\", i)\n}\nToStr(1)\nToStr(float64(1.234254354))\n// 传入不同类型 编译不会报错\n```\n打印结果:\n```base\n➜  imClientServer go run test.go\nstr: 1, str2: 1.234254354%\n```\n\n同样传入参数和返回内容都可以使用`interface{}`来代替任何类型\n\n```golang\n// 传入任何类型 返回slice任何类型\nfunc ToSlice(arr interface{}) []interface{} {\n  v := reflect.ValueOf(arr)\n  if v.Kind() != reflect.Slice {\n    panic(\"toslice arr not slice\")\n  }\n  l := v.Len()\n  ret := make([]interface{}, l)\n  for i := 0; i < l; i++ {\n    ret[i] = v.Index(i).Interface()\n  }\n  return ret\n}\n```\n","source":"_posts/go中的interface理解.md","raw":"---\nlayout: post\ntitle: go中的interface理解\ndate: 2017-10-21 16:35:08\ntags:\n    - go\n    - interface\ncategories: \"算法\"\n---\n\n刚开始学习`go`看了语法之后觉得`interface`理解不了, 然后也不清楚什么情况下来使用这个接口, 所以在网上就翻来翻去, 找到一个比较亲民的理解, \n```javascript\n// TODO: channel和interface使用场景\n```\n\n## 在之前先看一下`func`的一些基础定义\n在golang中定义函数的方式\n```golang\nfunc (p myType ) funcName ( a, b int , c string ) ( r , s int ) {\n    return\n}\n```\n- 关键字——func\n- 方法名——funcName\n- 入参——— a,b int,b string\n- 返回值—— r,s int\n- 函数体—— {}\n\n这里具体说一下**`(p myType)`**\n在`Go`中通过给函数标明所属类型，来给该类型定义方法, 也就是通过函数来给类型扩展方法, 上面的`p myType`表示给myType扩展funcName方法`p myType`不是必须的。如果没有，则纯粹是一个函数，通过包名称访问。packageName.funcationName\n\n## `interface`\n如果一只鸟长得像鸭子，走起路来像鸭子，叫起来也像鸭子，那么就把这只鸟叫做鸭子；\n\n- 如果一个结构体绑定的方法包含接口的所有方法,即认为实现了该接口\n- 将对象赋值给接口时,会发生拷贝,而接口的存储是指向这个复制的指针,复制的无法修改原来状态,也无法获取指针\n\ngolang中的interface就是上面这个意思，如果你定义了一个struct，它里面的方法和属性都和interface中的一样，那么可以说，这个struct实现这个interface,上代码\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\ntype s struct {\n    //定义一个s类型，有一个属性i是int的\n\ti int\n}\n\nfunc (this *s) Get() int {\n    //Get方法获得i属性\n\treturn this.i\n}\n\nfunc (this *s) Put(v int) {\n    //Put方法设置i属性\n\tthis.i = v\n}\n\ntype I interface {\n    //定义一个接口类型，里面有Get方法与Put方法\n\tGet() int\n\tPut(int)\n}\n\nfunc main() {\n\tvar S s\n    //申请一个S变量，他是s类型的值\n\tf(&S)\n}\n\nfunc f(my I) {\n    //这里的my保存了接口类型的值，因为s实现了I，所以传递的my虽然是个I类型，但是可以当作s类型来使用\n\tmy.Put(999)\n\tfmt.Println(my.Get())\n}\n```\n\n上面例子中f()虽然需要一个I类型的值,  但是s类型已经现式implement了I类型的接口(s类型实现了I接口要求的所有函数), 所以同样传入取地址的S`&S`变量同样可以调用方法\n\n这种方式有一个专业的说法(非侵入式接口)\n\n非侵入式接口一个很重要的好处就是去掉了繁杂的继承体系，我们看许大神在《go语言编程》一书中作的总结：\n- Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、 Java、 C# 类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是啥含义就足够了.\n- 实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才 合理。接口由使用方按需定义，而不用事前规划.\n- 不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦 合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口.\n\n\n首先golang不支持面向对象思想, 它只能使用`interface`来模拟继承, 本质就是组合, 也可以通过`interface`来实现多态\n\n**上面是对`interface`的类型理解**\n\n**下面说一下在函数中的使用**:\n\n在编写程序的时候会有传入函数的参数不确定的情况,或者`return`不确定参数, 那么我们就可以使用**空接口**来代替你所使用到的类型, 比如`int string float64 []interface error`等不同的类型\n如果返回不同的类型就会导致编译出错, 但是你还需要使用不同的类型\n\n```golang\n// ToStr传入空接口用来代替任何类型\nfunc ToStr(i interface{}) string {\n    // 使用fmt中的Sprintf函数来把Interface转换成了String\n    return fmt.Sprintf(\"%v\", i)\n}\nToStr(1)\nToStr(float64(1.234254354))\n// 传入不同类型 编译不会报错\n```\n打印结果:\n```base\n➜  imClientServer go run test.go\nstr: 1, str2: 1.234254354%\n```\n\n同样传入参数和返回内容都可以使用`interface{}`来代替任何类型\n\n```golang\n// 传入任何类型 返回slice任何类型\nfunc ToSlice(arr interface{}) []interface{} {\n  v := reflect.ValueOf(arr)\n  if v.Kind() != reflect.Slice {\n    panic(\"toslice arr not slice\")\n  }\n  l := v.Len()\n  ret := make([]interface{}, l)\n  for i := 0; i < l; i++ {\n    ret[i] = v.Index(i).Interface()\n  }\n  return ret\n}\n```\n","slug":"go中的interface理解","published":1,"updated":"2019-05-13T03:56:03.237Z","comments":1,"photos":[],"link":"","_id":"cjvluebd4001ia0dm3ieypxhh","content":"<p>刚开始学习<code>go</code>看了语法之后觉得<code>interface</code>理解不了, 然后也不清楚什么情况下来使用这个接口, 所以在网上就翻来翻去, 找到一个比较亲民的理解,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> channel和interface使用场景</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"在之前先看一下func的一些基础定义\"><a href=\"#在之前先看一下func的一些基础定义\" class=\"headerlink\" title=\"在之前先看一下func的一些基础定义\"></a>在之前先看一下<code>func</code>的一些基础定义</h2><p>在golang中定义函数的方式<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p myType )</span> <span class=\"title\">funcName</span> <span class=\"params\">( a, b <span class=\"keyword\">int</span> , c <span class=\"keyword\">string</span> )</span> <span class=\"params\">( r , s <span class=\"keyword\">int</span> )</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>关键字——func</li>\n<li>方法名——funcName</li>\n<li>入参——— a,b int,b string</li>\n<li>返回值—— r,s int</li>\n<li>函数体—— {}</li>\n</ul>\n<p>这里具体说一下<strong><code>(p myType)</code></strong><br>在<code>Go</code>中通过给函数标明所属类型，来给该类型定义方法, 也就是通过函数来给类型扩展方法, 上面的<code>p myType</code>表示给myType扩展funcName方法<code>p myType</code>不是必须的。如果没有，则纯粹是一个函数，通过包名称访问。packageName.funcationName</p>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a><code>interface</code></h2><p>如果一只鸟长得像鸭子，走起路来像鸭子，叫起来也像鸭子，那么就把这只鸟叫做鸭子；</p>\n<ul>\n<li>如果一个结构体绑定的方法包含接口的所有方法,即认为实现了该接口</li>\n<li>将对象赋值给接口时,会发生拷贝,而接口的存储是指向这个复制的指针,复制的无法修改原来状态,也无法获取指针</li>\n</ul>\n<p>golang中的interface就是上面这个意思，如果你定义了一个struct，它里面的方法和属性都和interface中的一样，那么可以说，这个struct实现这个interface,上代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> s <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//定义一个s类型，有一个属性i是int的</span></div><div class=\"line\">\ti <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *s)</span> <span class=\"title\">Get</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//Get方法获得i属性</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> this.i</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *s)</span> <span class=\"title\">Put</span><span class=\"params\">(v <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//Put方法设置i属性</span></div><div class=\"line\">\tthis.i = v</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//定义一个接口类型，里面有Get方法与Put方法</span></div><div class=\"line\">\tGet() <span class=\"keyword\">int</span></div><div class=\"line\">\tPut(<span class=\"keyword\">int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> S s</div><div class=\"line\">    <span class=\"comment\">//申请一个S变量，他是s类型的值</span></div><div class=\"line\">\tf(&amp;S)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(my I)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//这里的my保存了接口类型的值，因为s实现了I，所以传递的my虽然是个I类型，但是可以当作s类型来使用</span></div><div class=\"line\">\tmy.Put(<span class=\"number\">999</span>)</div><div class=\"line\">\tfmt.Println(my.Get())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面例子中f()虽然需要一个I类型的值,  但是s类型已经现式implement了I类型的接口(s类型实现了I接口要求的所有函数), 所以同样传入取地址的S<code>&amp;S</code>变量同样可以调用方法</p>\n<p>这种方式有一个专业的说法(非侵入式接口)</p>\n<p>非侵入式接口一个很重要的好处就是去掉了繁杂的继承体系，我们看许大神在《go语言编程》一书中作的总结：</p>\n<ul>\n<li>Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、 Java、 C# 类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是啥含义就足够了.</li>\n<li>实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才 合理。接口由使用方按需定义，而不用事前规划.</li>\n<li>不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦 合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口.</li>\n</ul>\n<p>首先golang不支持面向对象思想, 它只能使用<code>interface</code>来模拟继承, 本质就是组合, 也可以通过<code>interface</code>来实现多态</p>\n<p><strong>上面是对<code>interface</code>的类型理解</strong></p>\n<p><strong>下面说一下在函数中的使用</strong>:</p>\n<p>在编写程序的时候会有传入函数的参数不确定的情况,或者<code>return</code>不确定参数, 那么我们就可以使用<strong>空接口</strong>来代替你所使用到的类型, 比如<code>int string float64 []interface error</code>等不同的类型<br>如果返回不同的类型就会导致编译出错, 但是你还需要使用不同的类型</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ToStr传入空接口用来代替任何类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToStr</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用fmt中的Sprintf函数来把Interface转换成了String</span></div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%v\"</span>, i)</div><div class=\"line\">&#125;</div><div class=\"line\">ToStr(<span class=\"number\">1</span>)</div><div class=\"line\">ToStr(<span class=\"keyword\">float64</span>(<span class=\"number\">1.234254354</span>))</div><div class=\"line\"><span class=\"comment\">// 传入不同类型 编译不会报错</span></div></pre></td></tr></table></figure>\n<p>打印结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer go run test.go</div><div class=\"line\">str: 1, str2: 1.234254354%</div></pre></td></tr></table></figure></p>\n<p>同样传入参数和返回内容都可以使用<code>interface{}</code>来代替任何类型</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 传入任何类型 返回slice任何类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToSlice</span><span class=\"params\">(arr <span class=\"keyword\">interface</span>&#123;&#125;)</span> []<span class=\"title\">interface</span></span>&#123;&#125; &#123;</div><div class=\"line\">  v := reflect.ValueOf(arr)</div><div class=\"line\">  <span class=\"keyword\">if</span> v.Kind() != reflect.Slice &#123;</div><div class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"toslice arr not slice\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  l := v.Len()</div><div class=\"line\">  ret := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, l)</div><div class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l; i++ &#123;</div><div class=\"line\">    ret[i] = v.Index(i).Interface()</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>刚开始学习<code>go</code>看了语法之后觉得<code>interface</code>理解不了, 然后也不清楚什么情况下来使用这个接口, 所以在网上就翻来翻去, 找到一个比较亲民的理解,<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> channel和interface使用场景</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"在之前先看一下func的一些基础定义\"><a href=\"#在之前先看一下func的一些基础定义\" class=\"headerlink\" title=\"在之前先看一下func的一些基础定义\"></a>在之前先看一下<code>func</code>的一些基础定义</h2><p>在golang中定义函数的方式<br><figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p myType )</span> <span class=\"title\">funcName</span> <span class=\"params\">( a, b <span class=\"keyword\">int</span> , c <span class=\"keyword\">string</span> )</span> <span class=\"params\">( r , s <span class=\"keyword\">int</span> )</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>关键字——func</li>\n<li>方法名——funcName</li>\n<li>入参——— a,b int,b string</li>\n<li>返回值—— r,s int</li>\n<li>函数体—— {}</li>\n</ul>\n<p>这里具体说一下<strong><code>(p myType)</code></strong><br>在<code>Go</code>中通过给函数标明所属类型，来给该类型定义方法, 也就是通过函数来给类型扩展方法, 上面的<code>p myType</code>表示给myType扩展funcName方法<code>p myType</code>不是必须的。如果没有，则纯粹是一个函数，通过包名称访问。packageName.funcationName</p>\n<h2 id=\"interface\"><a href=\"#interface\" class=\"headerlink\" title=\"interface\"></a><code>interface</code></h2><p>如果一只鸟长得像鸭子，走起路来像鸭子，叫起来也像鸭子，那么就把这只鸟叫做鸭子；</p>\n<ul>\n<li>如果一个结构体绑定的方法包含接口的所有方法,即认为实现了该接口</li>\n<li>将对象赋值给接口时,会发生拷贝,而接口的存储是指向这个复制的指针,复制的无法修改原来状态,也无法获取指针</li>\n</ul>\n<p>golang中的interface就是上面这个意思，如果你定义了一个struct，它里面的方法和属性都和interface中的一样，那么可以说，这个struct实现这个interface,上代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">package</span> main</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> (</div><div class=\"line\">\t<span class=\"string\">\"fmt\"</span></div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> s <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//定义一个s类型，有一个属性i是int的</span></div><div class=\"line\">\ti <span class=\"keyword\">int</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *s)</span> <span class=\"title\">Get</span><span class=\"params\">()</span> <span class=\"title\">int</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//Get方法获得i属性</span></div><div class=\"line\">\t<span class=\"keyword\">return</span> this.i</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(this *s)</span> <span class=\"title\">Put</span><span class=\"params\">(v <span class=\"keyword\">int</span>)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//Put方法设置i属性</span></div><div class=\"line\">\tthis.i = v</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</div><div class=\"line\">    <span class=\"comment\">//定义一个接口类型，里面有Get方法与Put方法</span></div><div class=\"line\">\tGet() <span class=\"keyword\">int</span></div><div class=\"line\">\tPut(<span class=\"keyword\">int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> S s</div><div class=\"line\">    <span class=\"comment\">//申请一个S变量，他是s类型的值</span></div><div class=\"line\">\tf(&amp;S)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">f</span><span class=\"params\">(my I)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">//这里的my保存了接口类型的值，因为s实现了I，所以传递的my虽然是个I类型，但是可以当作s类型来使用</span></div><div class=\"line\">\tmy.Put(<span class=\"number\">999</span>)</div><div class=\"line\">\tfmt.Println(my.Get())</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面例子中f()虽然需要一个I类型的值,  但是s类型已经现式implement了I类型的接口(s类型实现了I接口要求的所有函数), 所以同样传入取地址的S<code>&amp;S</code>变量同样可以调用方法</p>\n<p>这种方式有一个专业的说法(非侵入式接口)</p>\n<p>非侵入式接口一个很重要的好处就是去掉了繁杂的继承体系，我们看许大神在《go语言编程》一书中作的总结：</p>\n<ul>\n<li>Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少C++、 Java、 C# 类库的继承树图。在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是啥含义就足够了.</li>\n<li>实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才 合理。接口由使用方按需定义，而不用事前规划.</li>\n<li>不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦 合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口.</li>\n</ul>\n<p>首先golang不支持面向对象思想, 它只能使用<code>interface</code>来模拟继承, 本质就是组合, 也可以通过<code>interface</code>来实现多态</p>\n<p><strong>上面是对<code>interface</code>的类型理解</strong></p>\n<p><strong>下面说一下在函数中的使用</strong>:</p>\n<p>在编写程序的时候会有传入函数的参数不确定的情况,或者<code>return</code>不确定参数, 那么我们就可以使用<strong>空接口</strong>来代替你所使用到的类型, 比如<code>int string float64 []interface error</code>等不同的类型<br>如果返回不同的类型就会导致编译出错, 但是你还需要使用不同的类型</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ToStr传入空接口用来代替任何类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToStr</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span> <span class=\"title\">string</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 使用fmt中的Sprintf函数来把Interface转换成了String</span></div><div class=\"line\">    <span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">\"%v\"</span>, i)</div><div class=\"line\">&#125;</div><div class=\"line\">ToStr(<span class=\"number\">1</span>)</div><div class=\"line\">ToStr(<span class=\"keyword\">float64</span>(<span class=\"number\">1.234254354</span>))</div><div class=\"line\"><span class=\"comment\">// 传入不同类型 编译不会报错</span></div></pre></td></tr></table></figure>\n<p>打印结果:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜  imClientServer go run test.go</div><div class=\"line\">str: 1, str2: 1.234254354%</div></pre></td></tr></table></figure></p>\n<p>同样传入参数和返回内容都可以使用<code>interface{}</code>来代替任何类型</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 传入任何类型 返回slice任何类型</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ToSlice</span><span class=\"params\">(arr <span class=\"keyword\">interface</span>&#123;&#125;)</span> []<span class=\"title\">interface</span></span>&#123;&#125; &#123;</div><div class=\"line\">  v := reflect.ValueOf(arr)</div><div class=\"line\">  <span class=\"keyword\">if</span> v.Kind() != reflect.Slice &#123;</div><div class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"toslice arr not slice\"</span>)</div><div class=\"line\">  &#125;</div><div class=\"line\">  l := v.Len()</div><div class=\"line\">  ret := <span class=\"built_in\">make</span>([]<span class=\"keyword\">interface</span>&#123;&#125;, l)</div><div class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; l; i++ &#123;</div><div class=\"line\">    ret[i] = v.Index(i).Interface()</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> ret</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"title":"hexo添加自己域名","date":"2017-06-12T02:09:35.000Z","comments":0,"_content":"\n### 折腾由来:\n> 前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.\n> 进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了[angely.me](angely.me)恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB\n\n<!-- more -->\n\n## 然后解析域名, 地址`userName.github.io`, 通过CNAME方式解析, 看起来是这样的\n{% asset_img admin.png 解析之后图解 %}\n\n## 自己域名有了, 开始配置\n\n直接修改config\n\n```coffeescript\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://angely.me/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\nroot字段配置不正确会导致blog静态文件download 404\n\n\n\n> 给项目 github pages 添加CNAME文件, 内容就是自己域名,`angely.me`\n> 因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后`hexo d -g`到github项目内\n\n```base\n➜ touch CNAME\n➜ vim CNAME\n➜ ga .\n➜ gcm '提交commint 备注'\n➜ git push origin master\n```\n\nga -> git add\ngcm -> git commint -m\n","source":"_posts/hexo添加自己域名.md","raw":"---\ntitle: hexo添加自己域名\ndate: 2017-06-12 10:09:35\ncategories: \"hexo\"\ntags:\n    - hexo\n    - next主题\ncomments: false\n---\n\n### 折腾由来:\n> 前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.\n> 进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了[angely.me](angely.me)恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB\n\n<!-- more -->\n\n## 然后解析域名, 地址`userName.github.io`, 通过CNAME方式解析, 看起来是这样的\n{% asset_img admin.png 解析之后图解 %}\n\n## 自己域名有了, 开始配置\n\n直接修改config\n\n```coffeescript\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://angely.me/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\nroot字段配置不正确会导致blog静态文件download 404\n\n\n\n> 给项目 github pages 添加CNAME文件, 内容就是自己域名,`angely.me`\n> 因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后`hexo d -g`到github项目内\n\n```base\n➜ touch CNAME\n➜ vim CNAME\n➜ ga .\n➜ gcm '提交commint 备注'\n➜ git push origin master\n```\n\nga -> git add\ngcm -> git commint -m\n","slug":"hexo添加自己域名","published":1,"updated":"2019-05-13T03:56:03.237Z","layout":"post","photos":[],"link":"","_id":"cjvluebd5001ma0dm8jk5wtlx","content":"<h3 id=\"折腾由来\"><a href=\"#折腾由来\" class=\"headerlink\" title=\"折腾由来:\"></a>折腾由来:</h3><blockquote>\n<p>前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.<br>进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了<a href=\"angely.me\">angely.me</a>恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\"><a href=\"#然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\" class=\"headerlink\" title=\"然后解析域名, 地址userName.github.io, 通过CNAME方式解析, 看起来是这样的\"></a>然后解析域名, 地址<code>userName.github.io</code>, 通过CNAME方式解析, 看起来是这样的</h2><img src=\"/2017/06/12/hexo添加自己域名/admin.png\" alt=\"解析之后图解\" title=\"解析之后图解\">\n<h2 id=\"自己域名有了-开始配置\"><a href=\"#自己域名有了-开始配置\" class=\"headerlink\" title=\"自己域名有了, 开始配置\"></a>自己域名有了, 开始配置</h2><p>直接修改config</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http:<span class=\"regexp\">//</span>angely.me/</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year<span class=\"regexp\">/:month/</span>:day<span class=\"regexp\">/:title/</span></div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n<p>root字段配置不正确会导致blog静态文件download 404</p>\n<blockquote>\n<p>给项目 github pages 添加CNAME文件, 内容就是自己域名,<code>angely.me</code><br>因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后<code>hexo d -g</code>到github项目内</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ touch CNAME</div><div class=\"line\">➜ vim CNAME</div><div class=\"line\">➜ ga .</div><div class=\"line\">➜ gcm &apos;提交commint 备注&apos;</div><div class=\"line\">➜ git push origin master</div></pre></td></tr></table></figure>\n<p>ga -&gt; git add<br>gcm -&gt; git commint -m</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"折腾由来\"><a href=\"#折腾由来\" class=\"headerlink\" title=\"折腾由来:\"></a>折腾由来:</h3><blockquote>\n<p>前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.<br>进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了<a href=\"angely.me\">angely.me</a>恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB</p>\n</blockquote>","more":"<h2 id=\"然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\"><a href=\"#然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\" class=\"headerlink\" title=\"然后解析域名, 地址userName.github.io, 通过CNAME方式解析, 看起来是这样的\"></a>然后解析域名, 地址<code>userName.github.io</code>, 通过CNAME方式解析, 看起来是这样的</h2><img src=\"/2017/06/12/hexo添加自己域名/admin.png\" alt=\"解析之后图解\" title=\"解析之后图解\">\n<h2 id=\"自己域名有了-开始配置\"><a href=\"#自己域名有了-开始配置\" class=\"headerlink\" title=\"自己域名有了, 开始配置\"></a>自己域名有了, 开始配置</h2><p>直接修改config</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http:<span class=\"regexp\">//</span>angely.me/</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year<span class=\"regexp\">/:month/</span>:day<span class=\"regexp\">/:title/</span></div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n<p>root字段配置不正确会导致blog静态文件download 404</p>\n<blockquote>\n<p>给项目 github pages 添加CNAME文件, 内容就是自己域名,<code>angely.me</code><br>因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后<code>hexo d -g</code>到github项目内</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ touch CNAME</div><div class=\"line\">➜ vim CNAME</div><div class=\"line\">➜ ga .</div><div class=\"line\">➜ gcm &apos;提交commint 备注&apos;</div><div class=\"line\">➜ git push origin master</div></pre></td></tr></table></figure>\n<p>ga -&gt; git add<br>gcm -&gt; git commint -m</p>"},{"layout":"post","title":"iphone和safari浏览器中关于Date对象的兼容","date":"2017-11-09T09:42:18.000Z","_content":"\n今天公司遇到一个很奇怪的问题,  是微信端的商城,  促销板块需要来显示出`倒计时`, 后端传过来一个`2032-04-23 12:12:32`格式的数据,  然后前端来显示其倒计时\n\n因为用到了`new Date(stringDate)`结果iphone就不显示了,  找了一下午,  在加上调试不方便,  真的很烦人,\n\n原来是苹果不支持`stringDate`这种解析,  还需要吧`stringDate`转换成数组然后逐个传入\n\n```javascript\nfunction getDateForStringDate(strDate){\n      //切割年月日与时分秒称为数组\n      var s = strDate.split(\" \");\n      var s1 = s[0].split(\"-\");\n      var s2 = s[1].split(\":\");\n      if(s2.length==2){\n        s2.push(\"00\");\n      }\n      return new Date(s1[0],s1[1]-1,s1[2],s2[0],s2[1],s2[2]);\n    }\nfunction clock(t){\n    var n = new Date().getTime(),//取得当前毫秒数\n        c = t - n;//得到时间差\n    if(c<=0){\n        document.getElementById(\"jstimerBox\").innerHTML ='活动已经结束';\n        // clearInterval(window['timer']);//清除计时器\n        return;\n    }\n    var ds = 60*60*24*1000,\n        d = parseInt(c/ds),\n        h = parseInt((c-d*ds)/(3600*1000)),\n        m = parseInt((c - d*ds - h*3600*1000)/(60*1000)),\n        s = parseInt((c-d*ds-h*3600*1000-m*60*1000)/1000);\n        document.getElementById(\"jstimerBox\").innerHTML = d + '天' + h + '时' + m + '分' + s + '秒';\n}\n\nclock(getDateForStringDate(\"2013-11-22 00:12:32\")) // safari是可以兼容的\n```\n\n","source":"_posts/iphone和safari浏览器中关于Date对象的兼容.md","raw":"---\nlayout: post\ntitle: iphone和safari浏览器中关于Date对象的兼容\ndate: 2017-11-09 17:42:18\ntags:\n    - Date\n    - 时间转换\ncategories: \"算法\"\n---\n\n今天公司遇到一个很奇怪的问题,  是微信端的商城,  促销板块需要来显示出`倒计时`, 后端传过来一个`2032-04-23 12:12:32`格式的数据,  然后前端来显示其倒计时\n\n因为用到了`new Date(stringDate)`结果iphone就不显示了,  找了一下午,  在加上调试不方便,  真的很烦人,\n\n原来是苹果不支持`stringDate`这种解析,  还需要吧`stringDate`转换成数组然后逐个传入\n\n```javascript\nfunction getDateForStringDate(strDate){\n      //切割年月日与时分秒称为数组\n      var s = strDate.split(\" \");\n      var s1 = s[0].split(\"-\");\n      var s2 = s[1].split(\":\");\n      if(s2.length==2){\n        s2.push(\"00\");\n      }\n      return new Date(s1[0],s1[1]-1,s1[2],s2[0],s2[1],s2[2]);\n    }\nfunction clock(t){\n    var n = new Date().getTime(),//取得当前毫秒数\n        c = t - n;//得到时间差\n    if(c<=0){\n        document.getElementById(\"jstimerBox\").innerHTML ='活动已经结束';\n        // clearInterval(window['timer']);//清除计时器\n        return;\n    }\n    var ds = 60*60*24*1000,\n        d = parseInt(c/ds),\n        h = parseInt((c-d*ds)/(3600*1000)),\n        m = parseInt((c - d*ds - h*3600*1000)/(60*1000)),\n        s = parseInt((c-d*ds-h*3600*1000-m*60*1000)/1000);\n        document.getElementById(\"jstimerBox\").innerHTML = d + '天' + h + '时' + m + '分' + s + '秒';\n}\n\nclock(getDateForStringDate(\"2013-11-22 00:12:32\")) // safari是可以兼容的\n```\n\n","slug":"iphone和safari浏览器中关于Date对象的兼容","published":1,"updated":"2019-05-13T03:56:03.240Z","comments":1,"photos":[],"link":"","_id":"cjvluebd7001pa0dmczi95sns","content":"<p>今天公司遇到一个很奇怪的问题,  是微信端的商城,  促销板块需要来显示出<code>倒计时</code>, 后端传过来一个<code>2032-04-23 12:12:32</code>格式的数据,  然后前端来显示其倒计时</p>\n<p>因为用到了<code>new Date(stringDate)</code>结果iphone就不显示了,  找了一下午,  在加上调试不方便,  真的很烦人,</p>\n<p>原来是苹果不支持<code>stringDate</code>这种解析,  还需要吧<code>stringDate</code>转换成数组然后逐个传入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDateForStringDate</span>(<span class=\"params\">strDate</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//切割年月日与时分秒称为数组</span></div><div class=\"line\">      <span class=\"keyword\">var</span> s = strDate.split(<span class=\"string\">\" \"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> s1 = s[<span class=\"number\">0</span>].split(<span class=\"string\">\"-\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> s2 = s[<span class=\"number\">1</span>].split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span>(s2.length==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        s2.push(<span class=\"string\">\"00\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(s1[<span class=\"number\">0</span>],s1[<span class=\"number\">1</span>]<span class=\"number\">-1</span>,s1[<span class=\"number\">2</span>],s2[<span class=\"number\">0</span>],s2[<span class=\"number\">1</span>],s2[<span class=\"number\">2</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clock</span>(<span class=\"params\">t</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),<span class=\"comment\">//取得当前毫秒数</span></div><div class=\"line\">        c = t - n;<span class=\"comment\">//得到时间差</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(c&lt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jstimerBox\"</span>).innerHTML =<span class=\"string\">'活动已经结束'</span>;</div><div class=\"line\">        <span class=\"comment\">// clearInterval(window['timer']);//清除计时器</span></div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ds = <span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>*<span class=\"number\">1000</span>,</div><div class=\"line\">        d = <span class=\"built_in\">parseInt</span>(c/ds),</div><div class=\"line\">        h = <span class=\"built_in\">parseInt</span>((c-d*ds)/(<span class=\"number\">3600</span>*<span class=\"number\">1000</span>)),</div><div class=\"line\">        m = <span class=\"built_in\">parseInt</span>((c - d*ds - h*<span class=\"number\">3600</span>*<span class=\"number\">1000</span>)/(<span class=\"number\">60</span>*<span class=\"number\">1000</span>)),</div><div class=\"line\">        s = <span class=\"built_in\">parseInt</span>((c-d*ds-h*<span class=\"number\">3600</span>*<span class=\"number\">1000</span>-m*<span class=\"number\">60</span>*<span class=\"number\">1000</span>)/<span class=\"number\">1000</span>);</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jstimerBox\"</span>).innerHTML = d + <span class=\"string\">'天'</span> + h + <span class=\"string\">'时'</span> + m + <span class=\"string\">'分'</span> + s + <span class=\"string\">'秒'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">clock(getDateForStringDate(<span class=\"string\">\"2013-11-22 00:12:32\"</span>)) <span class=\"comment\">// safari是可以兼容的</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>今天公司遇到一个很奇怪的问题,  是微信端的商城,  促销板块需要来显示出<code>倒计时</code>, 后端传过来一个<code>2032-04-23 12:12:32</code>格式的数据,  然后前端来显示其倒计时</p>\n<p>因为用到了<code>new Date(stringDate)</code>结果iphone就不显示了,  找了一下午,  在加上调试不方便,  真的很烦人,</p>\n<p>原来是苹果不支持<code>stringDate</code>这种解析,  还需要吧<code>stringDate</code>转换成数组然后逐个传入</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDateForStringDate</span>(<span class=\"params\">strDate</span>)</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//切割年月日与时分秒称为数组</span></div><div class=\"line\">      <span class=\"keyword\">var</span> s = strDate.split(<span class=\"string\">\" \"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> s1 = s[<span class=\"number\">0</span>].split(<span class=\"string\">\"-\"</span>);</div><div class=\"line\">      <span class=\"keyword\">var</span> s2 = s[<span class=\"number\">1</span>].split(<span class=\"string\">\":\"</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span>(s2.length==<span class=\"number\">2</span>)&#123;</div><div class=\"line\">        s2.push(<span class=\"string\">\"00\"</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(s1[<span class=\"number\">0</span>],s1[<span class=\"number\">1</span>]<span class=\"number\">-1</span>,s1[<span class=\"number\">2</span>],s2[<span class=\"number\">0</span>],s2[<span class=\"number\">1</span>],s2[<span class=\"number\">2</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clock</span>(<span class=\"params\">t</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> n = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTime(),<span class=\"comment\">//取得当前毫秒数</span></div><div class=\"line\">        c = t - n;<span class=\"comment\">//得到时间差</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(c&lt;=<span class=\"number\">0</span>)&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jstimerBox\"</span>).innerHTML =<span class=\"string\">'活动已经结束'</span>;</div><div class=\"line\">        <span class=\"comment\">// clearInterval(window['timer']);//清除计时器</span></div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ds = <span class=\"number\">60</span>*<span class=\"number\">60</span>*<span class=\"number\">24</span>*<span class=\"number\">1000</span>,</div><div class=\"line\">        d = <span class=\"built_in\">parseInt</span>(c/ds),</div><div class=\"line\">        h = <span class=\"built_in\">parseInt</span>((c-d*ds)/(<span class=\"number\">3600</span>*<span class=\"number\">1000</span>)),</div><div class=\"line\">        m = <span class=\"built_in\">parseInt</span>((c - d*ds - h*<span class=\"number\">3600</span>*<span class=\"number\">1000</span>)/(<span class=\"number\">60</span>*<span class=\"number\">1000</span>)),</div><div class=\"line\">        s = <span class=\"built_in\">parseInt</span>((c-d*ds-h*<span class=\"number\">3600</span>*<span class=\"number\">1000</span>-m*<span class=\"number\">60</span>*<span class=\"number\">1000</span>)/<span class=\"number\">1000</span>);</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"jstimerBox\"</span>).innerHTML = d + <span class=\"string\">'天'</span> + h + <span class=\"string\">'时'</span> + m + <span class=\"string\">'分'</span> + s + <span class=\"string\">'秒'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">clock(getDateForStringDate(<span class=\"string\">\"2013-11-22 00:12:32\"</span>)) <span class=\"comment\">// safari是可以兼容的</span></div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"httpie嵌套json和发送数组","date":"2017-11-21T09:57:06.000Z","_content":"\n\n今天遇到一个需求是这样子的,\n\n{% asset_img httpie.png httpie结构需求 %}\n\n由于不好查,  所以这里贴出来.\n官网结果:\n\n```base\n➜ imClientServer git:(login) http POST http://localhost:8080/sendmsg target_type=users target:='[\"u1\", \"u2\", \"u3\"]' from=admin msg:='{\"type\":\"txt\",\"msg\":\"这才是消息内容\"}'\n```\n\n\n后台接受到的结果映射json\n```base\n\"content\": {\n    \"from\": \"admin\",\n    \"msg\": {\n        \"msg\": \"这才是消息内容\",\n        \"type\": \"txt\"\n    },\n    \"target\": [\n        \"u1\",\n        \"u2\",\n        \"u3\"\n    ],\n    \"target_type\": \"users\"\n}\n```\n","source":"_posts/httpie技巧.md","raw":"---\nlayout: post\ntitle: httpie嵌套json和发送数组\ndate: 2017-11-21 17:57:06\ntags:\n    - httpie\n    - 接口测试json\ncategories: \"httpie\"\n---\n\n\n今天遇到一个需求是这样子的,\n\n{% asset_img httpie.png httpie结构需求 %}\n\n由于不好查,  所以这里贴出来.\n官网结果:\n\n```base\n➜ imClientServer git:(login) http POST http://localhost:8080/sendmsg target_type=users target:='[\"u1\", \"u2\", \"u3\"]' from=admin msg:='{\"type\":\"txt\",\"msg\":\"这才是消息内容\"}'\n```\n\n\n后台接受到的结果映射json\n```base\n\"content\": {\n    \"from\": \"admin\",\n    \"msg\": {\n        \"msg\": \"这才是消息内容\",\n        \"type\": \"txt\"\n    },\n    \"target\": [\n        \"u1\",\n        \"u2\",\n        \"u3\"\n    ],\n    \"target_type\": \"users\"\n}\n```\n","slug":"httpie技巧","published":1,"updated":"2019-05-13T03:56:03.238Z","comments":1,"photos":[],"link":"","_id":"cjvluebd8001ua0dmc2q2ftdl","content":"<p>今天遇到一个需求是这样子的,</p>\n<img src=\"/2017/11/21/httpie技巧/httpie.png\" alt=\"httpie结构需求\" title=\"httpie结构需求\">\n<p>由于不好查,  所以这里贴出来.<br>官网结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ imClientServer git:(login) http POST http://localhost:8080/sendmsg target_type=users target:=&apos;[&quot;u1&quot;, &quot;u2&quot;, &quot;u3&quot;]&apos; from=admin msg:=&apos;&#123;&quot;type&quot;:&quot;txt&quot;,&quot;msg&quot;:&quot;这才是消息内容&quot;&#125;&apos;</div></pre></td></tr></table></figure>\n<p>后台接受到的结果映射json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;content&quot;: &#123;</div><div class=\"line\">    &quot;from&quot;: &quot;admin&quot;,</div><div class=\"line\">    &quot;msg&quot;: &#123;</div><div class=\"line\">        &quot;msg&quot;: &quot;这才是消息内容&quot;,</div><div class=\"line\">        &quot;type&quot;: &quot;txt&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;target&quot;: [</div><div class=\"line\">        &quot;u1&quot;,</div><div class=\"line\">        &quot;u2&quot;,</div><div class=\"line\">        &quot;u3&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;target_type&quot;: &quot;users&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天遇到一个需求是这样子的,</p>\n<img src=\"/2017/11/21/httpie技巧/httpie.png\" alt=\"httpie结构需求\" title=\"httpie结构需求\">\n<p>由于不好查,  所以这里贴出来.<br>官网结果:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ imClientServer git:(login) http POST http://localhost:8080/sendmsg target_type=users target:=&apos;[&quot;u1&quot;, &quot;u2&quot;, &quot;u3&quot;]&apos; from=admin msg:=&apos;&#123;&quot;type&quot;:&quot;txt&quot;,&quot;msg&quot;:&quot;这才是消息内容&quot;&#125;&apos;</div></pre></td></tr></table></figure>\n<p>后台接受到的结果映射json<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;content&quot;: &#123;</div><div class=\"line\">    &quot;from&quot;: &quot;admin&quot;,</div><div class=\"line\">    &quot;msg&quot;: &#123;</div><div class=\"line\">        &quot;msg&quot;: &quot;这才是消息内容&quot;,</div><div class=\"line\">        &quot;type&quot;: &quot;txt&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;target&quot;: [</div><div class=\"line\">        &quot;u1&quot;,</div><div class=\"line\">        &quot;u2&quot;,</div><div class=\"line\">        &quot;u3&quot;</div><div class=\"line\">    ],</div><div class=\"line\">    &quot;target_type&quot;: &quot;users&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"layout":"post","title":"javascript中正则的直白理解","date":"2018-04-21T10:11:46.000Z","_content":"\n# 创建方法\n- 构造函数方式\n- 正则表达式直接量方式\n\n## 正则表达式直接量方式\n\n`var expression=/pattern/flags`\n正则表达式的模式（pattern）部分：\n\n## 构造函数方式\n`var pattern = new RegExp(\"\")`\n\n\n由此可见创建一个正则表达式是很容易的,  较为困难的任务是用正则表达式描述字符的模式, 也就是上面`pattern`部分\n\n目前就以直接量方式介绍.\n\n## flags几种规则\n- i（表示忽略匹配的字母大小写）\n- g（表示匹配全局）\n- m（表示多行匹配）\n\n例子\n```javascript\nvar reg = new RegExp(\"a\",\"i\");//以忽略字母大小写的形式进行匹配\nvar reg2 = /a/i;//以忽略字母大小写的形式进行匹配\n```\n\n这里不具体介绍RegExp对象下的方法, 如果有需求请查阅mdn\n\n遇到元字符需转义\n\njs正则表达式中的元字符有：( [ { \\ ^ $ | ) ? * + .  当要用到这些字符时要在前面加“ \\ \"\n\n### js正则表达式的一些预定义的特殊字符\n| 字符 | 描述 |\n| ------ | ------ |\n| \\n | 换行 |\n| \\r | 回车 |\n|   \\t|     制表符|\n|   \\f |    换页符 |\n|   \\cX|      与X对应的控制字符 |\n|   \\b |    退格符(BackSpace) |\n|   \\v |    垂直制表符 |\n|   \\0 |    空字符(\"\")  |\n\n### js正则表达式的一些预定义类\n\n|符号简写| 符号 | 文字描述|\n|-------|-----|--------|\n| \\d   | [0-9]            |   匹配数字                            |\n| \\D   | [^0-9]           |   匹配非数字字符                      |\n| \\s   | [ \\n\\r\\t\\f\\x0B]  |   匹配一个空白字符                    |\n| \\S   | [^ \\n\\r\\t\\f\\x0B] | 　匹配一个非空白字符                  |\n| \\w   | [a-zA-Z0-9_]     |   匹配字母数字和下划线                |\n| \\W   | [^a-zA-Z0-9_]    |   匹配除字母数字下划线之外的字符      |\n\n\n\n### **js正则表达式的量词**(使用的频率高)\n|符号|描述|\n|---|----|\n|*　　|　  表示前面紧跟着的字符至少有0个或者多个   |\n|+　　|　 表示前面紧跟着的字符至少有1个或者多个    |\n|？　　|　 表示前面紧跟着的字符只有0个或者1个      |\n|{n}  |     表示前面紧跟着的字符有n个            |\n|{n,m}|   表示前面紧跟着的字符在n和m个之间        |\n|{n,} |     表示前面紧跟着的字符至少有n个        |\n\n### js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\n\n1. 在使用正则匹配字符串时，一般地，当要匹配的字符串为'aaabbbccc'，/a+/匹配的是aaa，此为贪婪量词（即想要匹配更多的字符），而通过在\"+\"号后面加上\"?\"可变为惰性量词，此时只匹配字符串中的第一个a\n\n2. 一般地，当我们在正则表达式中加上一个括号时表示括号里的内容为要捕获的分组，比如：/^[a-zA-Z]+(\\d+)$/，如果在括号里的内容前面加上\"?:\"时则表示此分组为非捕获组，即在最后返回的数组中不存在这个分组\n\n3. 关于捕获组，在正则表达式中通过RegExp访问$1,$2,$3....$9，可以获取第一个，第二个...第九个捕获组的内容\n\n4. 捕获出现在特定字符之前的字符,只有当字符后面跟着某个特定字符才去捕获它，相应的就有负向前瞻，表示当字符后面不跟着特定字符才去捕获它，正向前瞻在要指定的字符前加上\"?=\"，负向前瞻则是加上\"?!\"\n","source":"_posts/javascript中正则的直白理解.md","raw":"---\nlayout: post\ntitle: javascript中正则的直白理解\ndate: 2018-04-21 18:11:46\ntags:\n    - RegExp\n    - js正则\ncategories: \"正则\"\n---\n\n# 创建方法\n- 构造函数方式\n- 正则表达式直接量方式\n\n## 正则表达式直接量方式\n\n`var expression=/pattern/flags`\n正则表达式的模式（pattern）部分：\n\n## 构造函数方式\n`var pattern = new RegExp(\"\")`\n\n\n由此可见创建一个正则表达式是很容易的,  较为困难的任务是用正则表达式描述字符的模式, 也就是上面`pattern`部分\n\n目前就以直接量方式介绍.\n\n## flags几种规则\n- i（表示忽略匹配的字母大小写）\n- g（表示匹配全局）\n- m（表示多行匹配）\n\n例子\n```javascript\nvar reg = new RegExp(\"a\",\"i\");//以忽略字母大小写的形式进行匹配\nvar reg2 = /a/i;//以忽略字母大小写的形式进行匹配\n```\n\n这里不具体介绍RegExp对象下的方法, 如果有需求请查阅mdn\n\n遇到元字符需转义\n\njs正则表达式中的元字符有：( [ { \\ ^ $ | ) ? * + .  当要用到这些字符时要在前面加“ \\ \"\n\n### js正则表达式的一些预定义的特殊字符\n| 字符 | 描述 |\n| ------ | ------ |\n| \\n | 换行 |\n| \\r | 回车 |\n|   \\t|     制表符|\n|   \\f |    换页符 |\n|   \\cX|      与X对应的控制字符 |\n|   \\b |    退格符(BackSpace) |\n|   \\v |    垂直制表符 |\n|   \\0 |    空字符(\"\")  |\n\n### js正则表达式的一些预定义类\n\n|符号简写| 符号 | 文字描述|\n|-------|-----|--------|\n| \\d   | [0-9]            |   匹配数字                            |\n| \\D   | [^0-9]           |   匹配非数字字符                      |\n| \\s   | [ \\n\\r\\t\\f\\x0B]  |   匹配一个空白字符                    |\n| \\S   | [^ \\n\\r\\t\\f\\x0B] | 　匹配一个非空白字符                  |\n| \\w   | [a-zA-Z0-9_]     |   匹配字母数字和下划线                |\n| \\W   | [^a-zA-Z0-9_]    |   匹配除字母数字下划线之外的字符      |\n\n\n\n### **js正则表达式的量词**(使用的频率高)\n|符号|描述|\n|---|----|\n|*　　|　  表示前面紧跟着的字符至少有0个或者多个   |\n|+　　|　 表示前面紧跟着的字符至少有1个或者多个    |\n|？　　|　 表示前面紧跟着的字符只有0个或者1个      |\n|{n}  |     表示前面紧跟着的字符有n个            |\n|{n,m}|   表示前面紧跟着的字符在n和m个之间        |\n|{n,} |     表示前面紧跟着的字符至少有n个        |\n\n### js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\n\n1. 在使用正则匹配字符串时，一般地，当要匹配的字符串为'aaabbbccc'，/a+/匹配的是aaa，此为贪婪量词（即想要匹配更多的字符），而通过在\"+\"号后面加上\"?\"可变为惰性量词，此时只匹配字符串中的第一个a\n\n2. 一般地，当我们在正则表达式中加上一个括号时表示括号里的内容为要捕获的分组，比如：/^[a-zA-Z]+(\\d+)$/，如果在括号里的内容前面加上\"?:\"时则表示此分组为非捕获组，即在最后返回的数组中不存在这个分组\n\n3. 关于捕获组，在正则表达式中通过RegExp访问$1,$2,$3....$9，可以获取第一个，第二个...第九个捕获组的内容\n\n4. 捕获出现在特定字符之前的字符,只有当字符后面跟着某个特定字符才去捕获它，相应的就有负向前瞻，表示当字符后面不跟着特定字符才去捕获它，正向前瞻在要指定的字符前加上\"?=\"，负向前瞻则是加上\"?!\"\n","slug":"javascript中正则的直白理解","published":1,"updated":"2019-05-13T03:56:03.240Z","comments":1,"photos":[],"link":"","_id":"cjvluebd9001wa0dmgsjhznxa","content":"<h1 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h1><ul>\n<li>构造函数方式</li>\n<li>正则表达式直接量方式</li>\n</ul>\n<h2 id=\"正则表达式直接量方式\"><a href=\"#正则表达式直接量方式\" class=\"headerlink\" title=\"正则表达式直接量方式\"></a>正则表达式直接量方式</h2><p><code>var expression=/pattern/flags</code><br>正则表达式的模式（pattern）部分：</p>\n<h2 id=\"构造函数方式\"><a href=\"#构造函数方式\" class=\"headerlink\" title=\"构造函数方式\"></a>构造函数方式</h2><p><code>var pattern = new RegExp(&quot;&quot;)</code></p>\n<p>由此可见创建一个正则表达式是很容易的,  较为困难的任务是用正则表达式描述字符的模式, 也就是上面<code>pattern</code>部分</p>\n<p>目前就以直接量方式介绍.</p>\n<h2 id=\"flags几种规则\"><a href=\"#flags几种规则\" class=\"headerlink\" title=\"flags几种规则\"></a>flags几种规则</h2><ul>\n<li>i（表示忽略匹配的字母大小写）</li>\n<li>g（表示匹配全局）</li>\n<li>m（表示多行匹配）</li>\n</ul>\n<p>例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"i\"</span>);<span class=\"comment\">//以忽略字母大小写的形式进行匹配</span></div><div class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/a/i</span>;<span class=\"comment\">//以忽略字母大小写的形式进行匹配</span></div></pre></td></tr></table></figure></p>\n<p>这里不具体介绍RegExp对象下的方法, 如果有需求请查阅mdn</p>\n<p>遇到元字符需转义</p>\n<p>js正则表达式中的元字符有：( [ { \\ ^ $ | ) ? * + .  当要用到这些字符时要在前面加“ \\ “</p>\n<h3 id=\"js正则表达式的一些预定义的特殊字符\"><a href=\"#js正则表达式的一些预定义的特殊字符\" class=\"headerlink\" title=\"js正则表达式的一些预定义的特殊字符\"></a>js正则表达式的一些预定义的特殊字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页符</td>\n</tr>\n<tr>\n<td>\\cX</td>\n<td>与X对应的控制字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格符(BackSpace)</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表符</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>空字符(“”)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"js正则表达式的一些预定义类\"><a href=\"#js正则表达式的一些预定义类\" class=\"headerlink\" title=\"js正则表达式的一些预定义类\"></a>js正则表达式的一些预定义类</h3><table>\n<thead>\n<tr>\n<th>符号简写</th>\n<th>符号</th>\n<th>文字描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>[0-9]</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>匹配非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[ \\n\\r\\t\\f\\x0B]</td>\n<td>匹配一个空白字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^ \\n\\r\\t\\f\\x0B]</td>\n<td>　匹配一个非空白字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z0-9_]</td>\n<td>匹配字母数字和下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z0-9_]</td>\n<td>匹配除字母数字下划线之外的字符</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"js正则表达式的量词-使用的频率高\"><a href=\"#js正则表达式的量词-使用的频率高\" class=\"headerlink\" title=\"js正则表达式的量词(使用的频率高)\"></a><strong>js正则表达式的量词</strong>(使用的频率高)</h3><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*　　</td>\n<td>　  表示前面紧跟着的字符至少有0个或者多个</td>\n</tr>\n<tr>\n<td>+　　</td>\n<td>　 表示前面紧跟着的字符至少有1个或者多个</td>\n</tr>\n<tr>\n<td>？　　</td>\n<td>　 表示前面紧跟着的字符只有0个或者1个</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>表示前面紧跟着的字符有n个</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>表示前面紧跟着的字符在n和m个之间</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>表示前面紧跟着的字符至少有n个</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\"><a href=\"#js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\" class=\"headerlink\" title=\"js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\"></a>js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻</h3><ol>\n<li><p>在使用正则匹配字符串时，一般地，当要匹配的字符串为’aaabbbccc’，/a+/匹配的是aaa，此为贪婪量词（即想要匹配更多的字符），而通过在”+”号后面加上”?”可变为惰性量词，此时只匹配字符串中的第一个a</p>\n</li>\n<li><p>一般地，当我们在正则表达式中加上一个括号时表示括号里的内容为要捕获的分组，比如：/^[a-zA-Z]+(\\d+)$/，如果在括号里的内容前面加上”?:”时则表示此分组为非捕获组，即在最后返回的数组中不存在这个分组</p>\n</li>\n<li><p>关于捕获组，在正则表达式中通过RegExp访问$1,$2,$3….$9，可以获取第一个，第二个…第九个捕获组的内容</p>\n</li>\n<li><p>捕获出现在特定字符之前的字符,只有当字符后面跟着某个特定字符才去捕获它，相应的就有负向前瞻，表示当字符后面不跟着特定字符才去捕获它，正向前瞻在要指定的字符前加上”?=”，负向前瞻则是加上”?!”</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"创建方法\"><a href=\"#创建方法\" class=\"headerlink\" title=\"创建方法\"></a>创建方法</h1><ul>\n<li>构造函数方式</li>\n<li>正则表达式直接量方式</li>\n</ul>\n<h2 id=\"正则表达式直接量方式\"><a href=\"#正则表达式直接量方式\" class=\"headerlink\" title=\"正则表达式直接量方式\"></a>正则表达式直接量方式</h2><p><code>var expression=/pattern/flags</code><br>正则表达式的模式（pattern）部分：</p>\n<h2 id=\"构造函数方式\"><a href=\"#构造函数方式\" class=\"headerlink\" title=\"构造函数方式\"></a>构造函数方式</h2><p><code>var pattern = new RegExp(&quot;&quot;)</code></p>\n<p>由此可见创建一个正则表达式是很容易的,  较为困难的任务是用正则表达式描述字符的模式, 也就是上面<code>pattern</code>部分</p>\n<p>目前就以直接量方式介绍.</p>\n<h2 id=\"flags几种规则\"><a href=\"#flags几种规则\" class=\"headerlink\" title=\"flags几种规则\"></a>flags几种规则</h2><ul>\n<li>i（表示忽略匹配的字母大小写）</li>\n<li>g（表示匹配全局）</li>\n<li>m（表示多行匹配）</li>\n</ul>\n<p>例子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"a\"</span>,<span class=\"string\">\"i\"</span>);<span class=\"comment\">//以忽略字母大小写的形式进行匹配</span></div><div class=\"line\"><span class=\"keyword\">var</span> reg2 = <span class=\"regexp\">/a/i</span>;<span class=\"comment\">//以忽略字母大小写的形式进行匹配</span></div></pre></td></tr></table></figure></p>\n<p>这里不具体介绍RegExp对象下的方法, 如果有需求请查阅mdn</p>\n<p>遇到元字符需转义</p>\n<p>js正则表达式中的元字符有：( [ { \\ ^ $ | ) ? * + .  当要用到这些字符时要在前面加“ \\ “</p>\n<h3 id=\"js正则表达式的一些预定义的特殊字符\"><a href=\"#js正则表达式的一些预定义的特殊字符\" class=\"headerlink\" title=\"js正则表达式的一些预定义的特殊字符\"></a>js正则表达式的一些预定义的特殊字符</h3><table>\n<thead>\n<tr>\n<th>字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页符</td>\n</tr>\n<tr>\n<td>\\cX</td>\n<td>与X对应的控制字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格符(BackSpace)</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>垂直制表符</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>空字符(“”)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"js正则表达式的一些预定义类\"><a href=\"#js正则表达式的一些预定义类\" class=\"headerlink\" title=\"js正则表达式的一些预定义类\"></a>js正则表达式的一些预定义类</h3><table>\n<thead>\n<tr>\n<th>符号简写</th>\n<th>符号</th>\n<th>文字描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>[0-9]</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>[^0-9]</td>\n<td>匹配非数字字符</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>[ \\n\\r\\t\\f\\x0B]</td>\n<td>匹配一个空白字符</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>[^ \\n\\r\\t\\f\\x0B]</td>\n<td>　匹配一个非空白字符</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>[a-zA-Z0-9_]</td>\n<td>匹配字母数字和下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>[^a-zA-Z0-9_]</td>\n<td>匹配除字母数字下划线之外的字符</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"js正则表达式的量词-使用的频率高\"><a href=\"#js正则表达式的量词-使用的频率高\" class=\"headerlink\" title=\"js正则表达式的量词(使用的频率高)\"></a><strong>js正则表达式的量词</strong>(使用的频率高)</h3><table>\n<thead>\n<tr>\n<th>符号</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*　　</td>\n<td>　  表示前面紧跟着的字符至少有0个或者多个</td>\n</tr>\n<tr>\n<td>+　　</td>\n<td>　 表示前面紧跟着的字符至少有1个或者多个</td>\n</tr>\n<tr>\n<td>？　　</td>\n<td>　 表示前面紧跟着的字符只有0个或者1个</td>\n</tr>\n<tr>\n<td>{n}</td>\n<td>表示前面紧跟着的字符有n个</td>\n</tr>\n<tr>\n<td>{n,m}</td>\n<td>表示前面紧跟着的字符在n和m个之间</td>\n</tr>\n<tr>\n<td>{n,}</td>\n<td>表示前面紧跟着的字符至少有n个</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\"><a href=\"#js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\" class=\"headerlink\" title=\"js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻\"></a>js正则表达式的贪婪量词与惰性量词，捕获与非捕获组，正向前瞻</h3><ol>\n<li><p>在使用正则匹配字符串时，一般地，当要匹配的字符串为’aaabbbccc’，/a+/匹配的是aaa，此为贪婪量词（即想要匹配更多的字符），而通过在”+”号后面加上”?”可变为惰性量词，此时只匹配字符串中的第一个a</p>\n</li>\n<li><p>一般地，当我们在正则表达式中加上一个括号时表示括号里的内容为要捕获的分组，比如：/^[a-zA-Z]+(\\d+)$/，如果在括号里的内容前面加上”?:”时则表示此分组为非捕获组，即在最后返回的数组中不存在这个分组</p>\n</li>\n<li><p>关于捕获组，在正则表达式中通过RegExp访问$1,$2,$3….$9，可以获取第一个，第二个…第九个捕获组的内容</p>\n</li>\n<li><p>捕获出现在特定字符之前的字符,只有当字符后面跟着某个特定字符才去捕获它，相应的就有负向前瞻，表示当字符后面不跟着特定字符才去捕获它，正向前瞻在要指定的字符前加上”?=”，负向前瞻则是加上”?!”</p>\n</li>\n</ol>\n"},{"title":"javascript中异步执行的方法以及异步的开源库介绍","date":"2017-07-28T14:33:59.000Z","_content":"## 异步执行方法\n写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下`javascript`中的异步\n\n```base\nA: 嘿，哥们儿，快点！\nB: 我要三分钟，你先等着，完了叫你~\nA: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~\nC: 嗯！\n...\n```\n<!-- more -->\n\n由于 `javascript` 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.\n好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  `javascirpt`执行模式分为两种: 同步 or 异步\n\n所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.\n\n比如我们经常用到的`ajax`\n\n    接下来就说一下js中经常使用异步的几种方法\n\n### 1. 回调函数\n\n这是个最基本的方法就是吧方法通过回调函数来传入函数, \n\n假设这个有两个方法\n```\nf1();\nf2();\n```\nf1()是一个比较耗时的任务, 可以重构f1, 吧`f2`当做参数传入`f1`\n\n```javascript\nfunction f1(callback){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　callback();\n　　　　}, 1000);\n　　}\n\nf1(f2); //执行代码\n\n```\n上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.\n\n### 2. 事件监听\n\n这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. \n\n```javascript\n// 这个jQuery的事件写法, 也是浏览器中的事件写法\nf1.on('down', f2); // 这里是f1绑定了事件, 回调是f2;\n// 就是当f1发生`down`时间之后就执行f2方法\n```\n接着看监听时间\n```javascript\nlet f1 = () => {\n    setTimeout( () => {\n        f1.trigger('down'); // 粗发`down`事件, 从而开始执行f2.\n    }, 1000);\n}\n```\n这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现[模块化](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n### 3. 发布 / 订阅\n请移驾到这篇, 专门介绍观察者模式 [这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样](http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/)(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)\n\n这个不多说,  放一个`jQuery`一个插件的栗子\n\n```\n    jQuery.subscribe(\"down\", f2); // 订阅down事件\n```\n\n```\n　　function f1(){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　jQuery.publish(\"done\"); // 发布down事件\n　　　　}, 1000);\n　　}\n```\n\n## 4. Promise\n`Promise`在js里面很重要,在promise之前需要看看异步的操作流程控制,\n也就是异步操作多了,  我们应该怎么去处理他的流程;\n\n## 异步操作的流程控制\n如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化\n\n```javascript\nfunction async(arg, callback) {\n    console.log(`参数为${arg}, 2秒后反悔结果`);\n    setTimeout(() => { callback(arg * 2); }, 2000);\n}\n```\n\n`async`函数是个异步函数, 每次2秒后才能执行完毕.\n\n```javascript\nfunction final (value) {\n    console.log(`完成: ${value}`);\n}\n// async函数全部执行完毕才能执行final\n```\n如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数\n```javascript\nasync(1, function(value){\n  async(value, function(value){\n    async(value, function(value){\n      async(value, function(value){\n          async(value, function(value){\n          // 全部执行完了.\n          async(value, final);\n        });\n      });\n    });\n  });\n});\n```\n全部在回调中执行....是不是狠难看明白, 之后会很难维护\n\n### 1. 异步中的串行执行\n我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。\n```\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nfunction series(item) {\n  if(item) {\n    async( item, function(result) {\n      results.push(result);\n      // 返回调用自身\n      return series(items.shift());\n    });\n  } else {\n    return final(results);\n  }\n}\n// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。\nseries(items.shift());\n```\n上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。\n\n### 2. 并行执行\n流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nitems.forEach(function(item) {\n  async(item, function(result){\n    results.push(result);\n    if(results.length == items.length) {\n      // 全部执行完毕\n      final(results);\n    }\n  })\n});\n```\n上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。\n\n并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。\n\n### 3. 并行余串行的结合\n所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。\n\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nlet running = 0;\nlet limit = 2;\n\nfunction launcher() {\n  while(running < limit && items.length > 0) {\n    let item = items.shift();\n    async(item, function(result) {\n      results.push(result);\n      running--;\n      if(items.length > 0) {\n        launcher();\n      } else if(running == 0) {\n        final(results);\n      }\n    });\n    running++;\n  }\n}\n\nlauncher();\n```\n上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。\n\n并行和串行执行代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n## 4. Promise 对象\n\n这个比较复杂[先付上mdn地址](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n{% asset_img promise.png 官方的这个图我认识很容易看懂 %}\n\n想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)\n\n\n不难看出, `promise` 类似一个协议.通过这个协议来操作你的业务逻辑代码,\npromise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据\n它的链式调用可以让你的代码更容易阅读,\n\n```javascript\nf1().then(f2)\n    .catch(f3)\n// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑\n```\n\n修改f1代码\n\n```javascript\n　　let f1 = () => {\n　　　　var dfd = $.Deferred();\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　dfd.resolve();\n　　　　}, 500);\n　　　　return dfd.promise;\n　　}\n```\n\n最终在`javascript`中异步函数使用`Async/Await` [请移驾到这篇](http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/)\n\n## 今天介绍3种`javascript`异步开源库\n\n- jQuery Deferred\n- Q.js\n- Koajs\n\n### jQuery中的`Deferred`对象\n\n因为现在很少使用jQuery, 所以不怎么使用这个, [阮老师写的文章](http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html)\n\n`jQuery`版本在1.5.0以上就可以使用这个对象了\n\n### Q.js\n\n[附上文档](http://documentup.com/kriskowal/q/)\n同样支持遵循 [Promises/A+](https://promisesaplus.com/#point-1)\n`q.js`比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健\n\n```javascript\n// 看看这个回调地狱\nstep1(function (value1) {\n    step2(value1, function(value2) {\n        step3(value2, function(value3) {\n            step4(value3, function(value4) {\n                // Do something with value4\n            });\n        });\n    });\n});\n```\n\n使用`Qjs`之后的代码\n\n```javascript\nQ.fcall(promisedStep1)\n.then(promisedStep2)\n.then(promisedStep3)\n.then(promisedStep4)\n.then(function (value4) {\n    // Do something with value4\n})\n.catch(function (error) {\n    // Handle any error from all above steps\n})\n.done();\n```\n\n### `Koajs`\n\n[github](https://github.com/koajs/koa)\n[中文官网](http://koa.bootcss.com/)\n","source":"_posts/javascript异步开源库.md","raw":"---\ntitle: javascript中异步执行的方法以及异步的开源库介绍\ndate: 2017-07-28 22:33:59\ncategories: \"javascript\"\ntags:\n    - js异步\n    - javascript\n---\n## 异步执行方法\n写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下`javascript`中的异步\n\n```base\nA: 嘿，哥们儿，快点！\nB: 我要三分钟，你先等着，完了叫你~\nA: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~\nC: 嗯！\n...\n```\n<!-- more -->\n\n由于 `javascript` 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.\n好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  `javascirpt`执行模式分为两种: 同步 or 异步\n\n所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.\n\n比如我们经常用到的`ajax`\n\n    接下来就说一下js中经常使用异步的几种方法\n\n### 1. 回调函数\n\n这是个最基本的方法就是吧方法通过回调函数来传入函数, \n\n假设这个有两个方法\n```\nf1();\nf2();\n```\nf1()是一个比较耗时的任务, 可以重构f1, 吧`f2`当做参数传入`f1`\n\n```javascript\nfunction f1(callback){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　callback();\n　　　　}, 1000);\n　　}\n\nf1(f2); //执行代码\n\n```\n上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.\n\n### 2. 事件监听\n\n这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. \n\n```javascript\n// 这个jQuery的事件写法, 也是浏览器中的事件写法\nf1.on('down', f2); // 这里是f1绑定了事件, 回调是f2;\n// 就是当f1发生`down`时间之后就执行f2方法\n```\n接着看监听时间\n```javascript\nlet f1 = () => {\n    setTimeout( () => {\n        f1.trigger('down'); // 粗发`down`事件, 从而开始执行f2.\n    }, 1000);\n}\n```\n这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现[模块化](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n### 3. 发布 / 订阅\n请移驾到这篇, 专门介绍观察者模式 [这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样](http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/)(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)\n\n这个不多说,  放一个`jQuery`一个插件的栗子\n\n```\n    jQuery.subscribe(\"down\", f2); // 订阅down事件\n```\n\n```\n　　function f1(){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　jQuery.publish(\"done\"); // 发布down事件\n　　　　}, 1000);\n　　}\n```\n\n## 4. Promise\n`Promise`在js里面很重要,在promise之前需要看看异步的操作流程控制,\n也就是异步操作多了,  我们应该怎么去处理他的流程;\n\n## 异步操作的流程控制\n如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化\n\n```javascript\nfunction async(arg, callback) {\n    console.log(`参数为${arg}, 2秒后反悔结果`);\n    setTimeout(() => { callback(arg * 2); }, 2000);\n}\n```\n\n`async`函数是个异步函数, 每次2秒后才能执行完毕.\n\n```javascript\nfunction final (value) {\n    console.log(`完成: ${value}`);\n}\n// async函数全部执行完毕才能执行final\n```\n如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数\n```javascript\nasync(1, function(value){\n  async(value, function(value){\n    async(value, function(value){\n      async(value, function(value){\n          async(value, function(value){\n          // 全部执行完了.\n          async(value, final);\n        });\n      });\n    });\n  });\n});\n```\n全部在回调中执行....是不是狠难看明白, 之后会很难维护\n\n### 1. 异步中的串行执行\n我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。\n```\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nfunction series(item) {\n  if(item) {\n    async( item, function(result) {\n      results.push(result);\n      // 返回调用自身\n      return series(items.shift());\n    });\n  } else {\n    return final(results);\n  }\n}\n// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。\nseries(items.shift());\n```\n上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。\n\n### 2. 并行执行\n流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nitems.forEach(function(item) {\n  async(item, function(result){\n    results.push(result);\n    if(results.length == items.length) {\n      // 全部执行完毕\n      final(results);\n    }\n  })\n});\n```\n上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。\n\n并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。\n\n### 3. 并行余串行的结合\n所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。\n\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nlet running = 0;\nlet limit = 2;\n\nfunction launcher() {\n  while(running < limit && items.length > 0) {\n    let item = items.shift();\n    async(item, function(result) {\n      results.push(result);\n      running--;\n      if(items.length > 0) {\n        launcher();\n      } else if(running == 0) {\n        final(results);\n      }\n    });\n    running++;\n  }\n}\n\nlauncher();\n```\n上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。\n\n并行和串行执行代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n## 4. Promise 对象\n\n这个比较复杂[先付上mdn地址](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n{% asset_img promise.png 官方的这个图我认识很容易看懂 %}\n\n想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)\n\n\n不难看出, `promise` 类似一个协议.通过这个协议来操作你的业务逻辑代码,\npromise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据\n它的链式调用可以让你的代码更容易阅读,\n\n```javascript\nf1().then(f2)\n    .catch(f3)\n// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑\n```\n\n修改f1代码\n\n```javascript\n　　let f1 = () => {\n　　　　var dfd = $.Deferred();\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　dfd.resolve();\n　　　　}, 500);\n　　　　return dfd.promise;\n　　}\n```\n\n最终在`javascript`中异步函数使用`Async/Await` [请移驾到这篇](http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/)\n\n## 今天介绍3种`javascript`异步开源库\n\n- jQuery Deferred\n- Q.js\n- Koajs\n\n### jQuery中的`Deferred`对象\n\n因为现在很少使用jQuery, 所以不怎么使用这个, [阮老师写的文章](http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html)\n\n`jQuery`版本在1.5.0以上就可以使用这个对象了\n\n### Q.js\n\n[附上文档](http://documentup.com/kriskowal/q/)\n同样支持遵循 [Promises/A+](https://promisesaplus.com/#point-1)\n`q.js`比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健\n\n```javascript\n// 看看这个回调地狱\nstep1(function (value1) {\n    step2(value1, function(value2) {\n        step3(value2, function(value3) {\n            step4(value3, function(value4) {\n                // Do something with value4\n            });\n        });\n    });\n});\n```\n\n使用`Qjs`之后的代码\n\n```javascript\nQ.fcall(promisedStep1)\n.then(promisedStep2)\n.then(promisedStep3)\n.then(promisedStep4)\n.then(function (value4) {\n    // Do something with value4\n})\n.catch(function (error) {\n    // Handle any error from all above steps\n})\n.done();\n```\n\n### `Koajs`\n\n[github](https://github.com/koajs/koa)\n[中文官网](http://koa.bootcss.com/)\n","slug":"javascript异步开源库","published":1,"updated":"2019-05-13T03:56:03.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebda001ya0dm1bre3fnw","content":"<h2 id=\"异步执行方法\"><a href=\"#异步执行方法\" class=\"headerlink\" title=\"异步执行方法\"></a>异步执行方法</h2><p>写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下<code>javascript</code>中的异步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A: 嘿，哥们儿，快点！</div><div class=\"line\">B: 我要三分钟，你先等着，完了叫你~</div><div class=\"line\">A: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~</div><div class=\"line\">C: 嗯！</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>由于 <code>javascript</code> 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.<br>好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  <code>javascirpt</code>执行模式分为两种: 同步 or 异步</p>\n<p>所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.</p>\n<p>比如我们经常用到的<code>ajax</code></p>\n<pre><code>接下来就说一下js中经常使用异步的几种方法\n</code></pre><h3 id=\"1-回调函数\"><a href=\"#1-回调函数\" class=\"headerlink\" title=\"1. 回调函数\"></a>1. 回调函数</h3><p>这是个最基本的方法就是吧方法通过回调函数来传入函数, </p>\n<p>假设这个有两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1();</div><div class=\"line\">f2();</div></pre></td></tr></table></figure></p>\n<p>f1()是一个比较耗时的任务, 可以重构f1, 吧<code>f2</code>当做参数传入<code>f1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　callback();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">f1(f2); <span class=\"comment\">//执行代码</span></div></pre></td></tr></table></figure>\n<p>上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.</p>\n<h3 id=\"2-事件监听\"><a href=\"#2-事件监听\" class=\"headerlink\" title=\"2. 事件监听\"></a>2. 事件监听</h3><p>这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个jQuery的事件写法, 也是浏览器中的事件写法</span></div><div class=\"line\">f1.on(<span class=\"string\">'down'</span>, f2); <span class=\"comment\">// 这里是f1绑定了事件, 回调是f2;</span></div><div class=\"line\"><span class=\"comment\">// 就是当f1发生`down`时间之后就执行f2方法</span></div></pre></td></tr></table></figure>\n<p>接着看监听时间<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        f1.trigger(<span class=\"string\">'down'</span>); <span class=\"comment\">// 粗发`down`事件, 从而开始执行f2.</span></div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现<a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"external\">模块化</a><br>缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h3 id=\"3-发布-订阅\"><a href=\"#3-发布-订阅\" class=\"headerlink\" title=\"3. 发布 / 订阅\"></a>3. 发布 / 订阅</h3><p>请移驾到这篇, 专门介绍观察者模式 <a href=\"http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/\">这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样</a>(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)</p>\n<p>这个不多说,  放一个<code>jQuery</code>一个插件的栗子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.subscribe(&quot;down&quot;, f2); // 订阅down事件</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　function f1()&#123;</div><div class=\"line\">　　　　setTimeout(function () &#123;</div><div class=\"line\">　　　　　　// f1的任务代码</div><div class=\"line\">　　　　　　jQuery.publish(&quot;done&quot;); // 发布down事件</div><div class=\"line\">　　　　&#125;, 1000);</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-Promise\"><a href=\"#4-Promise\" class=\"headerlink\" title=\"4. Promise\"></a>4. Promise</h2><p><code>Promise</code>在js里面很重要,在promise之前需要看看异步的操作流程控制,<br>也就是异步操作多了,  我们应该怎么去处理他的流程;</p>\n<h2 id=\"异步操作的流程控制\"><a href=\"#异步操作的流程控制\" class=\"headerlink\" title=\"异步操作的流程控制\"></a>异步操作的流程控制</h2><p>如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async</span>(<span class=\"params\">arg, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`参数为<span class=\"subst\">$&#123;arg&#125;</span>, 2秒后反悔结果`</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; callback(arg * <span class=\"number\">2</span>); &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>async</code>函数是个异步函数, 每次2秒后才能执行完毕.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">final</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`完成: <span class=\"subst\">$&#123;value&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// async函数全部执行完毕才能执行final</span></div></pre></td></tr></table></figure>\n<p>如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>(<span class=\"number\">1</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 全部执行完了.</span></div><div class=\"line\">          <span class=\"keyword\">async</span>(value, final);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>全部在回调中执行….是不是狠难看明白, 之后会很难维护</p>\n<h3 id=\"1-异步中的串行执行\"><a href=\"#1-异步中的串行执行\" class=\"headerlink\" title=\"1. 异步中的串行执行\"></a>1. 异步中的串行执行</h3><p>我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let items = [ 1, 2, 3, 4, 5, 6 ];</div><div class=\"line\">let results = [];</div><div class=\"line\">function series(item) &#123;</div><div class=\"line\">  if(item) &#123;</div><div class=\"line\">    async( item, function(result) &#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      // 返回调用自身</div><div class=\"line\">      return series(items.shift());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    return final(results);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</div><div class=\"line\">series(items.shift());</div></pre></td></tr></table></figure></p>\n<p>上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。</p>\n<h3 id=\"2-并行执行\"><a href=\"#2-并行执行\" class=\"headerlink\" title=\"2. 并行执行\"></a>2. 并行执行</h3><p>流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\">items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">    results.push(result);</div><div class=\"line\">    <span class=\"keyword\">if</span>(results.length == items.length) &#123;</div><div class=\"line\">      <span class=\"comment\">// 全部执行完毕</span></div><div class=\"line\">      final(results);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。</p>\n<p>并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。</p>\n<h3 id=\"3-并行余串行的结合\"><a href=\"#3-并行余串行的结合\" class=\"headerlink\" title=\"3. 并行余串行的结合\"></a>3. 并行余串行的结合</h3><p>所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\"><span class=\"keyword\">let</span> running = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> limit = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">launcher</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span>(running &lt; limit &amp;&amp; items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> item = items.shift();</div><div class=\"line\">    <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      running--;</div><div class=\"line\">      <span class=\"keyword\">if</span>(items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        launcher();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(running == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        final(results);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    running++;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">launcher();</div></pre></td></tr></table></figure>\n<p>上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。</p>\n<p>并行和串行执行代码总汇</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h2 id=\"4-Promise-对象\"><a href=\"#4-Promise-对象\" class=\"headerlink\" title=\"4. Promise 对象\"></a>4. Promise 对象</h2><p>这个比较复杂<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">先付上mdn地址</a></p>\n<img src=\"/2017/07/28/javascript异步开源库/promise.png\" alt=\"官方的这个图我认识很容易看懂\" title=\"官方的这个图我认识很容易看懂\">\n<p>想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)</p>\n<p>不难看出, <code>promise</code> 类似一个协议.通过这个协议来操作你的业务逻辑代码,<br>promise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据<br>它的链式调用可以让你的代码更容易阅读,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1().then(f2)</div><div class=\"line\">    .catch(f3)</div><div class=\"line\"><span class=\"comment\">// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑</span></div></pre></td></tr></table></figure>\n<p>修改f1代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> dfd = $.Deferred();</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　dfd.resolve();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">500</span>);</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> dfd.promise;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>最终在<code>javascript</code>中异步函数使用<code>Async/Await</code> <a href=\"http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/\">请移驾到这篇</a></p>\n<h2 id=\"今天介绍3种javascript异步开源库\"><a href=\"#今天介绍3种javascript异步开源库\" class=\"headerlink\" title=\"今天介绍3种javascript异步开源库\"></a>今天介绍3种<code>javascript</code>异步开源库</h2><ul>\n<li>jQuery Deferred</li>\n<li>Q.js</li>\n<li>Koajs</li>\n</ul>\n<h3 id=\"jQuery中的Deferred对象\"><a href=\"#jQuery中的Deferred对象\" class=\"headerlink\" title=\"jQuery中的Deferred对象\"></a>jQuery中的<code>Deferred</code>对象</h3><p>因为现在很少使用jQuery, 所以不怎么使用这个, <a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\" target=\"_blank\" rel=\"external\">阮老师写的文章</a></p>\n<p><code>jQuery</code>版本在1.5.0以上就可以使用这个对象了</p>\n<h3 id=\"Q-js\"><a href=\"#Q-js\" class=\"headerlink\" title=\"Q.js\"></a>Q.js</h3><p><a href=\"http://documentup.com/kriskowal/q/\" target=\"_blank\" rel=\"external\">附上文档</a><br>同样支持遵循 <a href=\"https://promisesaplus.com/#point-1\" target=\"_blank\" rel=\"external\">Promises/A+</a><br><code>q.js</code>比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 看看这个回调地狱</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">    step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">        step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">            step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用<code>Qjs</code>之后的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q.fcall(promisedStep1)</div><div class=\"line\">.then(promisedStep2)</div><div class=\"line\">.then(promisedStep3)</div><div class=\"line\">.then(promisedStep4)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from all above steps</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.done();</div></pre></td></tr></table></figure>\n<h3 id=\"Koajs\"><a href=\"#Koajs\" class=\"headerlink\" title=\"Koajs\"></a><code>Koajs</code></h3><p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"external\">github</a><br><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"external\">中文官网</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"异步执行方法\"><a href=\"#异步执行方法\" class=\"headerlink\" title=\"异步执行方法\"></a>异步执行方法</h2><p>写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下<code>javascript</code>中的异步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A: 嘿，哥们儿，快点！</div><div class=\"line\">B: 我要三分钟，你先等着，完了叫你~</div><div class=\"line\">A: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~</div><div class=\"line\">C: 嗯！</div><div class=\"line\">...</div></pre></td></tr></table></figure>","more":"<p>由于 <code>javascript</code> 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.<br>好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  <code>javascirpt</code>执行模式分为两种: 同步 or 异步</p>\n<p>所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.</p>\n<p>比如我们经常用到的<code>ajax</code></p>\n<pre><code>接下来就说一下js中经常使用异步的几种方法\n</code></pre><h3 id=\"1-回调函数\"><a href=\"#1-回调函数\" class=\"headerlink\" title=\"1. 回调函数\"></a>1. 回调函数</h3><p>这是个最基本的方法就是吧方法通过回调函数来传入函数, </p>\n<p>假设这个有两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1();</div><div class=\"line\">f2();</div></pre></td></tr></table></figure></p>\n<p>f1()是一个比较耗时的任务, 可以重构f1, 吧<code>f2</code>当做参数传入<code>f1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　callback();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">f1(f2); <span class=\"comment\">//执行代码</span></div></pre></td></tr></table></figure>\n<p>上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.</p>\n<h3 id=\"2-事件监听\"><a href=\"#2-事件监听\" class=\"headerlink\" title=\"2. 事件监听\"></a>2. 事件监听</h3><p>这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个jQuery的事件写法, 也是浏览器中的事件写法</span></div><div class=\"line\">f1.on(<span class=\"string\">'down'</span>, f2); <span class=\"comment\">// 这里是f1绑定了事件, 回调是f2;</span></div><div class=\"line\"><span class=\"comment\">// 就是当f1发生`down`时间之后就执行f2方法</span></div></pre></td></tr></table></figure>\n<p>接着看监听时间<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        f1.trigger(<span class=\"string\">'down'</span>); <span class=\"comment\">// 粗发`down`事件, 从而开始执行f2.</span></div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现<a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"external\">模块化</a><br>缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h3 id=\"3-发布-订阅\"><a href=\"#3-发布-订阅\" class=\"headerlink\" title=\"3. 发布 / 订阅\"></a>3. 发布 / 订阅</h3><p>请移驾到这篇, 专门介绍观察者模式 <a href=\"http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/\">这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样</a>(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)</p>\n<p>这个不多说,  放一个<code>jQuery</code>一个插件的栗子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.subscribe(&quot;down&quot;, f2); // 订阅down事件</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　function f1()&#123;</div><div class=\"line\">　　　　setTimeout(function () &#123;</div><div class=\"line\">　　　　　　// f1的任务代码</div><div class=\"line\">　　　　　　jQuery.publish(&quot;done&quot;); // 发布down事件</div><div class=\"line\">　　　　&#125;, 1000);</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-Promise\"><a href=\"#4-Promise\" class=\"headerlink\" title=\"4. Promise\"></a>4. Promise</h2><p><code>Promise</code>在js里面很重要,在promise之前需要看看异步的操作流程控制,<br>也就是异步操作多了,  我们应该怎么去处理他的流程;</p>\n<h2 id=\"异步操作的流程控制\"><a href=\"#异步操作的流程控制\" class=\"headerlink\" title=\"异步操作的流程控制\"></a>异步操作的流程控制</h2><p>如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async</span>(<span class=\"params\">arg, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`参数为<span class=\"subst\">$&#123;arg&#125;</span>, 2秒后反悔结果`</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; callback(arg * <span class=\"number\">2</span>); &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>async</code>函数是个异步函数, 每次2秒后才能执行完毕.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">final</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`完成: <span class=\"subst\">$&#123;value&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// async函数全部执行完毕才能执行final</span></div></pre></td></tr></table></figure>\n<p>如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>(<span class=\"number\">1</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 全部执行完了.</span></div><div class=\"line\">          <span class=\"keyword\">async</span>(value, final);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>全部在回调中执行….是不是狠难看明白, 之后会很难维护</p>\n<h3 id=\"1-异步中的串行执行\"><a href=\"#1-异步中的串行执行\" class=\"headerlink\" title=\"1. 异步中的串行执行\"></a>1. 异步中的串行执行</h3><p>我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let items = [ 1, 2, 3, 4, 5, 6 ];</div><div class=\"line\">let results = [];</div><div class=\"line\">function series(item) &#123;</div><div class=\"line\">  if(item) &#123;</div><div class=\"line\">    async( item, function(result) &#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      // 返回调用自身</div><div class=\"line\">      return series(items.shift());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    return final(results);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</div><div class=\"line\">series(items.shift());</div></pre></td></tr></table></figure></p>\n<p>上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。</p>\n<h3 id=\"2-并行执行\"><a href=\"#2-并行执行\" class=\"headerlink\" title=\"2. 并行执行\"></a>2. 并行执行</h3><p>流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\">items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">    results.push(result);</div><div class=\"line\">    <span class=\"keyword\">if</span>(results.length == items.length) &#123;</div><div class=\"line\">      <span class=\"comment\">// 全部执行完毕</span></div><div class=\"line\">      final(results);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。</p>\n<p>并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。</p>\n<h3 id=\"3-并行余串行的结合\"><a href=\"#3-并行余串行的结合\" class=\"headerlink\" title=\"3. 并行余串行的结合\"></a>3. 并行余串行的结合</h3><p>所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\"><span class=\"keyword\">let</span> running = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> limit = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">launcher</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span>(running &lt; limit &amp;&amp; items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> item = items.shift();</div><div class=\"line\">    <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      running--;</div><div class=\"line\">      <span class=\"keyword\">if</span>(items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        launcher();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(running == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        final(results);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    running++;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">launcher();</div></pre></td></tr></table></figure>\n<p>上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。</p>\n<p>并行和串行执行代码总汇</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h2 id=\"4-Promise-对象\"><a href=\"#4-Promise-对象\" class=\"headerlink\" title=\"4. Promise 对象\"></a>4. Promise 对象</h2><p>这个比较复杂<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">先付上mdn地址</a></p>\n<img src=\"/2017/07/28/javascript异步开源库/promise.png\" alt=\"官方的这个图我认识很容易看懂\" title=\"官方的这个图我认识很容易看懂\">\n<p>想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)</p>\n<p>不难看出, <code>promise</code> 类似一个协议.通过这个协议来操作你的业务逻辑代码,<br>promise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据<br>它的链式调用可以让你的代码更容易阅读,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1().then(f2)</div><div class=\"line\">    .catch(f3)</div><div class=\"line\"><span class=\"comment\">// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑</span></div></pre></td></tr></table></figure>\n<p>修改f1代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> dfd = $.Deferred();</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　dfd.resolve();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">500</span>);</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> dfd.promise;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>最终在<code>javascript</code>中异步函数使用<code>Async/Await</code> <a href=\"http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/\">请移驾到这篇</a></p>\n<h2 id=\"今天介绍3种javascript异步开源库\"><a href=\"#今天介绍3种javascript异步开源库\" class=\"headerlink\" title=\"今天介绍3种javascript异步开源库\"></a>今天介绍3种<code>javascript</code>异步开源库</h2><ul>\n<li>jQuery Deferred</li>\n<li>Q.js</li>\n<li>Koajs</li>\n</ul>\n<h3 id=\"jQuery中的Deferred对象\"><a href=\"#jQuery中的Deferred对象\" class=\"headerlink\" title=\"jQuery中的Deferred对象\"></a>jQuery中的<code>Deferred</code>对象</h3><p>因为现在很少使用jQuery, 所以不怎么使用这个, <a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\" target=\"_blank\" rel=\"external\">阮老师写的文章</a></p>\n<p><code>jQuery</code>版本在1.5.0以上就可以使用这个对象了</p>\n<h3 id=\"Q-js\"><a href=\"#Q-js\" class=\"headerlink\" title=\"Q.js\"></a>Q.js</h3><p><a href=\"http://documentup.com/kriskowal/q/\" target=\"_blank\" rel=\"external\">附上文档</a><br>同样支持遵循 <a href=\"https://promisesaplus.com/#point-1\" target=\"_blank\" rel=\"external\">Promises/A+</a><br><code>q.js</code>比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 看看这个回调地狱</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">    step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">        step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">            step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用<code>Qjs</code>之后的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q.fcall(promisedStep1)</div><div class=\"line\">.then(promisedStep2)</div><div class=\"line\">.then(promisedStep3)</div><div class=\"line\">.then(promisedStep4)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from all above steps</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.done();</div></pre></td></tr></table></figure>\n<h3 id=\"Koajs\"><a href=\"#Koajs\" class=\"headerlink\" title=\"Koajs\"></a><code>Koajs</code></h3><p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"external\">github</a><br><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"external\">中文官网</a></p>"},{"title":"js中工厂模式","date":"2017-08-03T08:25:38.000Z","_content":"\n\n代码演示\n","source":"_posts/js中工厂模式.md","raw":"---\ntitle: js中工厂模式\ndate: 2017-08-03 16:25:38\ntags:\n    - 设计模式\n    - 工厂模式\n    - js\ncategories: \"设计模式\"\n---\n\n\n代码演示\n","slug":"js中工厂模式","published":1,"updated":"2019-05-13T03:56:03.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebdc0023a0dmnhy08u7x","content":"<p>代码演示</p>\n","site":{"data":{}},"excerpt":"","more":"<p>代码演示</p>\n"},{"layout":"post","title":"js实现多种括号匹配的解题思路","date":"2017-08-17T09:28:17.000Z","_content":"## 前言:\n>这几天工作中项目不是很忙,  也真是这样, 我们组中不知道怎么就开始在`codewars`上面刷题了.我也不例外, 就和他们一起来玩耍这个游戏.\n>然而在昨天的时候遇到一个题:\n\n## 解决问题\n要求要求匹配`()[]{}`着三种括号的匹配,函数返回一个匹配的`boole`值\n\n### 方法1: 模拟出栈入栈来实现\n我在网上查的是通过模拟栈的方式来解决, 因为每次`()`**左括号**要匹配成功, 必须有一个相对应的**右括号**这样才能功能匹配,\n如果没有相对于的**有括号**就匹配失败,利用**出栈, 入栈**的理解刚好可以和这个想吻合, 遇到**左括号**入栈遇到**有括号**出栈, 随后检测栈中有没有元素.\n通过上面思路我们来写代码\n```javascript\nfunction groupCheck (s)  {\n  if (s.length % 2 !== 0) return false;\n  let len = s.length,\n      res = [];\n  for(let i = 0; i < len; i++) {\n    switch(s[i]){\n    case '(':res.push(1);break; // 由于括号有3中, 所以我们给他们每一种打上标签 , 出栈的时候对应标签选择出栈;\n    case '[':res.push(2);break;\n    case '{':res.push(3);break;\n    case ')':if(res[res.length - 1] !== 1) return false;res.pop();break;\n    case ']':if(res[res.length - 1] !== 2) return false;res.pop();break;\n    case '}':if(res[res.length - 1] !== 3) return false;res.pop();break;\n    }\n  }\n  return res.length == 0;\n}\ngroupCheck('()[{}()[{}]]');\n// return 结果为true;\n```\n这种方法代码看起来不是很简便, 是因为我当时写完之后, 看到'最佳实践'只有4行代码,  才恍然大悟,\n\n### 方法2: 正则匹配然后替换\n\n这个方法总体思路也是使用模拟出入栈的方式来检测栈中内容, 而这个方式看起来更简单, 更高效, 直接操作的字符串, 不是数组,  所以实际意义上, 并不是模拟出入栈, 只是借鉴了这种想法.\n```javascript\nfunction groupCheck(s){\n   var r = /\\{\\}|\\[\\]|\\(\\)/; // 使用正则来匹配是否一对括号.\n   while(r.test(s)) // 知道没有匹配括号为止\n     s = s.replace(r, ''); // 把匹配中的括号替换为空字符串;\n   return !s.length;\n }\ngroupCheck('()[{}()[{}]]');\n// return 结果为true;\n```\n","source":"_posts/js中模拟栈的操作.md","raw":"---\nlayout: post\ntitle: js实现多种括号匹配的解题思路\ndate: 2017-08-17 17:28:17\ntags:\n    - 正则\n    - 模拟栈\ncategories: \"字符串操作\"\n---\n## 前言:\n>这几天工作中项目不是很忙,  也真是这样, 我们组中不知道怎么就开始在`codewars`上面刷题了.我也不例外, 就和他们一起来玩耍这个游戏.\n>然而在昨天的时候遇到一个题:\n\n## 解决问题\n要求要求匹配`()[]{}`着三种括号的匹配,函数返回一个匹配的`boole`值\n\n### 方法1: 模拟出栈入栈来实现\n我在网上查的是通过模拟栈的方式来解决, 因为每次`()`**左括号**要匹配成功, 必须有一个相对应的**右括号**这样才能功能匹配,\n如果没有相对于的**有括号**就匹配失败,利用**出栈, 入栈**的理解刚好可以和这个想吻合, 遇到**左括号**入栈遇到**有括号**出栈, 随后检测栈中有没有元素.\n通过上面思路我们来写代码\n```javascript\nfunction groupCheck (s)  {\n  if (s.length % 2 !== 0) return false;\n  let len = s.length,\n      res = [];\n  for(let i = 0; i < len; i++) {\n    switch(s[i]){\n    case '(':res.push(1);break; // 由于括号有3中, 所以我们给他们每一种打上标签 , 出栈的时候对应标签选择出栈;\n    case '[':res.push(2);break;\n    case '{':res.push(3);break;\n    case ')':if(res[res.length - 1] !== 1) return false;res.pop();break;\n    case ']':if(res[res.length - 1] !== 2) return false;res.pop();break;\n    case '}':if(res[res.length - 1] !== 3) return false;res.pop();break;\n    }\n  }\n  return res.length == 0;\n}\ngroupCheck('()[{}()[{}]]');\n// return 结果为true;\n```\n这种方法代码看起来不是很简便, 是因为我当时写完之后, 看到'最佳实践'只有4行代码,  才恍然大悟,\n\n### 方法2: 正则匹配然后替换\n\n这个方法总体思路也是使用模拟出入栈的方式来检测栈中内容, 而这个方式看起来更简单, 更高效, 直接操作的字符串, 不是数组,  所以实际意义上, 并不是模拟出入栈, 只是借鉴了这种想法.\n```javascript\nfunction groupCheck(s){\n   var r = /\\{\\}|\\[\\]|\\(\\)/; // 使用正则来匹配是否一对括号.\n   while(r.test(s)) // 知道没有匹配括号为止\n     s = s.replace(r, ''); // 把匹配中的括号替换为空字符串;\n   return !s.length;\n }\ngroupCheck('()[{}()[{}]]');\n// return 结果为true;\n```\n","slug":"js中模拟栈的操作","published":1,"updated":"2019-05-13T03:56:03.241Z","comments":1,"photos":[],"link":"","_id":"cjvluebdd0026a0dmo5nol9s6","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言:\"></a>前言:</h2><blockquote>\n<p>这几天工作中项目不是很忙,  也真是这样, 我们组中不知道怎么就开始在<code>codewars</code>上面刷题了.我也不例外, 就和他们一起来玩耍这个游戏.<br>然而在昨天的时候遇到一个题:</p>\n</blockquote>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><p>要求要求匹配<code>()[]{}</code>着三种括号的匹配,函数返回一个匹配的<code>boole</code>值</p>\n<h3 id=\"方法1-模拟出栈入栈来实现\"><a href=\"#方法1-模拟出栈入栈来实现\" class=\"headerlink\" title=\"方法1: 模拟出栈入栈来实现\"></a>方法1: 模拟出栈入栈来实现</h3><p>我在网上查的是通过模拟栈的方式来解决, 因为每次<code>()</code><strong>左括号</strong>要匹配成功, 必须有一个相对应的<strong>右括号</strong>这样才能功能匹配,<br>如果没有相对于的<strong>有括号</strong>就匹配失败,利用<strong>出栈, 入栈</strong>的理解刚好可以和这个想吻合, 遇到<strong>左括号</strong>入栈遇到<strong>有括号</strong>出栈, 随后检测栈中有没有元素.<br>通过上面思路我们来写代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupCheck</span> (<span class=\"params\">s</span>)  </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (s.length % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> len = s.length,</div><div class=\"line\">      res = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(s[i])&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'('</span>:res.push(<span class=\"number\">1</span>);<span class=\"keyword\">break</span>; <span class=\"comment\">// 由于括号有3中, 所以我们给他们每一种打上标签 , 出栈的时候对应标签选择出栈;</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'['</span>:res.push(<span class=\"number\">2</span>);<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'&#123;'</span>:res.push(<span class=\"number\">3</span>);<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">')'</span>:<span class=\"keyword\">if</span>(res[res.length - <span class=\"number\">1</span>] !== <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;res.pop();<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">']'</span>:<span class=\"keyword\">if</span>(res[res.length - <span class=\"number\">1</span>] !== <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;res.pop();<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'&#125;'</span>:<span class=\"keyword\">if</span>(res[res.length - <span class=\"number\">1</span>] !== <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;res.pop();<span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res.length == <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">groupCheck(<span class=\"string\">'()[&#123;&#125;()[&#123;&#125;]]'</span>);</div><div class=\"line\"><span class=\"comment\">// return 结果为true;</span></div></pre></td></tr></table></figure></p>\n<p>这种方法代码看起来不是很简便, 是因为我当时写完之后, 看到’最佳实践’只有4行代码,  才恍然大悟,</p>\n<h3 id=\"方法2-正则匹配然后替换\"><a href=\"#方法2-正则匹配然后替换\" class=\"headerlink\" title=\"方法2: 正则匹配然后替换\"></a>方法2: 正则匹配然后替换</h3><p>这个方法总体思路也是使用模拟出入栈的方式来检测栈中内容, 而这个方式看起来更简单, 更高效, 直接操作的字符串, 不是数组,  所以实际意义上, 并不是模拟出入栈, 只是借鉴了这种想法.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupCheck</span>(<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> r = <span class=\"regexp\">/\\&#123;\\&#125;|\\[\\]|\\(\\)/</span>; <span class=\"comment\">// 使用正则来匹配是否一对括号.</span></div><div class=\"line\">   <span class=\"keyword\">while</span>(r.test(s)) <span class=\"comment\">// 知道没有匹配括号为止</span></div><div class=\"line\">     s = s.replace(r, <span class=\"string\">''</span>); <span class=\"comment\">// 把匹配中的括号替换为空字符串;</span></div><div class=\"line\">   <span class=\"keyword\">return</span> !s.length;</div><div class=\"line\"> &#125;</div><div class=\"line\">groupCheck(<span class=\"string\">'()[&#123;&#125;()[&#123;&#125;]]'</span>);</div><div class=\"line\"><span class=\"comment\">// return 结果为true;</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言:\"></a>前言:</h2><blockquote>\n<p>这几天工作中项目不是很忙,  也真是这样, 我们组中不知道怎么就开始在<code>codewars</code>上面刷题了.我也不例外, 就和他们一起来玩耍这个游戏.<br>然而在昨天的时候遇到一个题:</p>\n</blockquote>\n<h2 id=\"解决问题\"><a href=\"#解决问题\" class=\"headerlink\" title=\"解决问题\"></a>解决问题</h2><p>要求要求匹配<code>()[]{}</code>着三种括号的匹配,函数返回一个匹配的<code>boole</code>值</p>\n<h3 id=\"方法1-模拟出栈入栈来实现\"><a href=\"#方法1-模拟出栈入栈来实现\" class=\"headerlink\" title=\"方法1: 模拟出栈入栈来实现\"></a>方法1: 模拟出栈入栈来实现</h3><p>我在网上查的是通过模拟栈的方式来解决, 因为每次<code>()</code><strong>左括号</strong>要匹配成功, 必须有一个相对应的<strong>右括号</strong>这样才能功能匹配,<br>如果没有相对于的<strong>有括号</strong>就匹配失败,利用<strong>出栈, 入栈</strong>的理解刚好可以和这个想吻合, 遇到<strong>左括号</strong>入栈遇到<strong>有括号</strong>出栈, 随后检测栈中有没有元素.<br>通过上面思路我们来写代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupCheck</span> (<span class=\"params\">s</span>)  </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (s.length % <span class=\"number\">2</span> !== <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> len = s.length,</div><div class=\"line\">      res = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span>(s[i])&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'('</span>:res.push(<span class=\"number\">1</span>);<span class=\"keyword\">break</span>; <span class=\"comment\">// 由于括号有3中, 所以我们给他们每一种打上标签 , 出栈的时候对应标签选择出栈;</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'['</span>:res.push(<span class=\"number\">2</span>);<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'&#123;'</span>:res.push(<span class=\"number\">3</span>);<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">')'</span>:<span class=\"keyword\">if</span>(res[res.length - <span class=\"number\">1</span>] !== <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;res.pop();<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">']'</span>:<span class=\"keyword\">if</span>(res[res.length - <span class=\"number\">1</span>] !== <span class=\"number\">2</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;res.pop();<span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">'&#125;'</span>:<span class=\"keyword\">if</span>(res[res.length - <span class=\"number\">1</span>] !== <span class=\"number\">3</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;res.pop();<span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> res.length == <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">groupCheck(<span class=\"string\">'()[&#123;&#125;()[&#123;&#125;]]'</span>);</div><div class=\"line\"><span class=\"comment\">// return 结果为true;</span></div></pre></td></tr></table></figure></p>\n<p>这种方法代码看起来不是很简便, 是因为我当时写完之后, 看到’最佳实践’只有4行代码,  才恍然大悟,</p>\n<h3 id=\"方法2-正则匹配然后替换\"><a href=\"#方法2-正则匹配然后替换\" class=\"headerlink\" title=\"方法2: 正则匹配然后替换\"></a>方法2: 正则匹配然后替换</h3><p>这个方法总体思路也是使用模拟出入栈的方式来检测栈中内容, 而这个方式看起来更简单, 更高效, 直接操作的字符串, 不是数组,  所以实际意义上, 并不是模拟出入栈, 只是借鉴了这种想法.<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">groupCheck</span>(<span class=\"params\">s</span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">var</span> r = <span class=\"regexp\">/\\&#123;\\&#125;|\\[\\]|\\(\\)/</span>; <span class=\"comment\">// 使用正则来匹配是否一对括号.</span></div><div class=\"line\">   <span class=\"keyword\">while</span>(r.test(s)) <span class=\"comment\">// 知道没有匹配括号为止</span></div><div class=\"line\">     s = s.replace(r, <span class=\"string\">''</span>); <span class=\"comment\">// 把匹配中的括号替换为空字符串;</span></div><div class=\"line\">   <span class=\"keyword\">return</span> !s.length;</div><div class=\"line\"> &#125;</div><div class=\"line\">groupCheck(<span class=\"string\">'()[&#123;&#125;()[&#123;&#125;]]'</span>);</div><div class=\"line\"><span class=\"comment\">// return 结果为true;</span></div></pre></td></tr></table></figure></p>\n"},{"title":"js中的mixin","date":"2017-08-07T08:43:23.000Z","_content":"\n## es5 中的`mixin`模式\n\n熟悉 JavaScript 的同学应该对 mixin 模式并不陌生。我们说 JavaScript / ES5 的继承模型是基于单一原型链的继承模型，通常情况下，在 JavaScript 实践中完全用原型链来实现继承式的代码复用，是远远不能满足需求的。因此实战中，我们的代码抽象基本上都是采用混合的模式, 基友原型继承, 也有ixin组合.\n\n那什么是 mixin 呢？ 最基本的 mixin 其实就是简单地**将一个对象的属性复制给另一个对象**：\n\n```javascript\nfunction mixin(targetObject, method) {\n  for(let key in method) {\n    targetObject[key] = method[key];\n  }\n}\n\nlet person = {name: 'liyuan', age: 26};\nlet student = {grade: 1};\nmixin(student, person);\n```\n上面的代码做的事情很简单，就是枚举出一个对象的所有属性，然后将这些属性添加到另一个对象上去。\n\n有时候，我们需要将多个对象的属性 mixin 到一个对象上去：\n\n```javascript\nlet dest = { name: 'liyuan'};\n[methed1, methed2].forEach( methed => {\n  mixin(dest, methed);\n})\n```\n每次都用 `forEach` 操作显然很繁琐，因此通常情况下， mixin 考虑支持操作多个对象：\n\n```javascript\nfunction mixin(...objs) {\n  return objs.reduce( (dest, src) => {\n    for(let key in src) {\n      dest[key] = src[key];\n    }\n    return dest;\n  });\n}\n\nlet dest = mixin({name: 'liyaun'}, {age: 26});\n```\n在许多框架中，都有 `mixin` 的类似实现， jQuery 的 `extend`、YUI 有好几个类似 mixin 的 API，lodash 中有 _.mixin 方法，npm 中的 [mixin](https://www.npmjs.com/package/mixin) 模块每个月有上千的下载。\n\n恩, 关于es5的mixin就说这么多吧,  因为我现在基本只写es6\n\n总结:\n\n从一定程度上，`mixin` 弥补了 `JavaScript` 单一原型链的缺陷，可以实现类似于多重继承的效果。在上面的例子里，我们让 `Employee` “继承” `Person`，同时也“继承” Serializable。有趣的是我们通过 mixin Serializable 让 Employee 拥有了 stringify 和 parse 两个方法，同时我们改写了 Employee 实例的 `toString` 方法。\n\n```javascript\nvar employee = new Employee(\"jane\",25,\"f\",1,1000);\nvar employee2 = Employee.parse( employee +\"\"); //通过序列化反序列化复制对象\n\nconsole.log(employee2,\n    employee2 instanceof Employee,    //true\n    employee2 instanceof Person,    //true\n    employee == employee2);        //false\n```\n\n```javascript\nfunction mixin(...objs){\n    return objs.reduce((dest, src) => {\n        for (var key in src) {\n            dest[key] = src[key]\n        }\n        return dest;\n    });\n}\n\nfunction createWithPrototype(Cls){\n    var P = function(){};\n    P.prototype = Cls.prototype;\n    return new P();\n}\n\nfunction Person(name, age, gender){\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\nfunction Employee(name, age, gender, level, salary){\n    Person.call(this, name, age, gender);\n    this.level = level;\n    this.salary = salary;\n}\n\nEmployee.prototype = createWithPrototype(Person);\n\nmixin(Employee.prototype, {\n    getSalary: function(){\n        return this.salary;\n    }\n});\n\nfunction Serializable(Cls, serializer){\n    mixin(Cls, serializer);\n    this.toString = function(){\n        return Cls.stringify(this);\n    }\n}\n\nmixin(Employee.prototype, new Serializable(Employee, {\n        parse: function(str){\n            var data = JSON.parse(str);\n            return new Employee(\n                data.name,\n                data.age,\n                data.gender,\n                data.level,\n                data.salary\n            );\n        },\n        stringify: function(employee){\n            return JSON.stringify({\n                name: employee.name,\n                age: employee.age,\n                gender: employee.gender,\n                level: employee.level,\n                salary: employee.salary\n            });\n        }\n    })\n);\n```\n> [好的文章是直的保留下来的](https://www.h5jun.com/post/mixin-in-es6.html)\n","source":"_posts/js中的mixin.md","raw":"---\ntitle: js中的mixin\ndate: 2017-08-07 16:43:23\ntags:\n    - es6\n    - mixin\n---\n\n## es5 中的`mixin`模式\n\n熟悉 JavaScript 的同学应该对 mixin 模式并不陌生。我们说 JavaScript / ES5 的继承模型是基于单一原型链的继承模型，通常情况下，在 JavaScript 实践中完全用原型链来实现继承式的代码复用，是远远不能满足需求的。因此实战中，我们的代码抽象基本上都是采用混合的模式, 基友原型继承, 也有ixin组合.\n\n那什么是 mixin 呢？ 最基本的 mixin 其实就是简单地**将一个对象的属性复制给另一个对象**：\n\n```javascript\nfunction mixin(targetObject, method) {\n  for(let key in method) {\n    targetObject[key] = method[key];\n  }\n}\n\nlet person = {name: 'liyuan', age: 26};\nlet student = {grade: 1};\nmixin(student, person);\n```\n上面的代码做的事情很简单，就是枚举出一个对象的所有属性，然后将这些属性添加到另一个对象上去。\n\n有时候，我们需要将多个对象的属性 mixin 到一个对象上去：\n\n```javascript\nlet dest = { name: 'liyuan'};\n[methed1, methed2].forEach( methed => {\n  mixin(dest, methed);\n})\n```\n每次都用 `forEach` 操作显然很繁琐，因此通常情况下， mixin 考虑支持操作多个对象：\n\n```javascript\nfunction mixin(...objs) {\n  return objs.reduce( (dest, src) => {\n    for(let key in src) {\n      dest[key] = src[key];\n    }\n    return dest;\n  });\n}\n\nlet dest = mixin({name: 'liyaun'}, {age: 26});\n```\n在许多框架中，都有 `mixin` 的类似实现， jQuery 的 `extend`、YUI 有好几个类似 mixin 的 API，lodash 中有 _.mixin 方法，npm 中的 [mixin](https://www.npmjs.com/package/mixin) 模块每个月有上千的下载。\n\n恩, 关于es5的mixin就说这么多吧,  因为我现在基本只写es6\n\n总结:\n\n从一定程度上，`mixin` 弥补了 `JavaScript` 单一原型链的缺陷，可以实现类似于多重继承的效果。在上面的例子里，我们让 `Employee` “继承” `Person`，同时也“继承” Serializable。有趣的是我们通过 mixin Serializable 让 Employee 拥有了 stringify 和 parse 两个方法，同时我们改写了 Employee 实例的 `toString` 方法。\n\n```javascript\nvar employee = new Employee(\"jane\",25,\"f\",1,1000);\nvar employee2 = Employee.parse( employee +\"\"); //通过序列化反序列化复制对象\n\nconsole.log(employee2,\n    employee2 instanceof Employee,    //true\n    employee2 instanceof Person,    //true\n    employee == employee2);        //false\n```\n\n```javascript\nfunction mixin(...objs){\n    return objs.reduce((dest, src) => {\n        for (var key in src) {\n            dest[key] = src[key]\n        }\n        return dest;\n    });\n}\n\nfunction createWithPrototype(Cls){\n    var P = function(){};\n    P.prototype = Cls.prototype;\n    return new P();\n}\n\nfunction Person(name, age, gender){\n    this.name = name;\n    this.age = age;\n    this.gender = gender;\n}\n\nfunction Employee(name, age, gender, level, salary){\n    Person.call(this, name, age, gender);\n    this.level = level;\n    this.salary = salary;\n}\n\nEmployee.prototype = createWithPrototype(Person);\n\nmixin(Employee.prototype, {\n    getSalary: function(){\n        return this.salary;\n    }\n});\n\nfunction Serializable(Cls, serializer){\n    mixin(Cls, serializer);\n    this.toString = function(){\n        return Cls.stringify(this);\n    }\n}\n\nmixin(Employee.prototype, new Serializable(Employee, {\n        parse: function(str){\n            var data = JSON.parse(str);\n            return new Employee(\n                data.name,\n                data.age,\n                data.gender,\n                data.level,\n                data.salary\n            );\n        },\n        stringify: function(employee){\n            return JSON.stringify({\n                name: employee.name,\n                age: employee.age,\n                gender: employee.gender,\n                level: employee.level,\n                salary: employee.salary\n            });\n        }\n    })\n);\n```\n> [好的文章是直的保留下来的](https://www.h5jun.com/post/mixin-in-es6.html)\n","slug":"js中的mixin","published":1,"updated":"2019-05-13T03:56:03.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebde0029a0dmpluqx3j8","content":"<h2 id=\"es5-中的mixin模式\"><a href=\"#es5-中的mixin模式\" class=\"headerlink\" title=\"es5 中的mixin模式\"></a>es5 中的<code>mixin</code>模式</h2><p>熟悉 JavaScript 的同学应该对 mixin 模式并不陌生。我们说 JavaScript / ES5 的继承模型是基于单一原型链的继承模型，通常情况下，在 JavaScript 实践中完全用原型链来实现继承式的代码复用，是远远不能满足需求的。因此实战中，我们的代码抽象基本上都是采用混合的模式, 基友原型继承, 也有ixin组合.</p>\n<p>那什么是 mixin 呢？ 最基本的 mixin 其实就是简单地<strong>将一个对象的属性复制给另一个对象</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">targetObject, method</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> method) &#123;</div><div class=\"line\">    targetObject[key] = method[key];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> person = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'liyuan'</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> student = &#123;<span class=\"attr\">grade</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\">mixin(student, person);</div></pre></td></tr></table></figure>\n<p>上面的代码做的事情很简单，就是枚举出一个对象的所有属性，然后将这些属性添加到另一个对象上去。</p>\n<p>有时候，我们需要将多个对象的属性 mixin 到一个对象上去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> dest = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'liyuan'</span>&#125;;</div><div class=\"line\">[methed1, methed2].forEach( <span class=\"function\"><span class=\"params\">methed</span> =&gt;</span> &#123;</div><div class=\"line\">  mixin(dest, methed);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>每次都用 <code>forEach</code> 操作显然很繁琐，因此通常情况下， mixin 考虑支持操作多个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">...objs</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> objs.reduce( <span class=\"function\">(<span class=\"params\">dest, src</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> src) &#123;</div><div class=\"line\">      dest[key] = src[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> dest;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> dest = mixin(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'liyaun'</span>&#125;, &#123;<span class=\"attr\">age</span>: <span class=\"number\">26</span>&#125;);</div></pre></td></tr></table></figure>\n<p>在许多框架中，都有 <code>mixin</code> 的类似实现， jQuery 的 <code>extend</code>、YUI 有好几个类似 mixin 的 API，lodash 中有 _.mixin 方法，npm 中的 <a href=\"https://www.npmjs.com/package/mixin\" target=\"_blank\" rel=\"external\">mixin</a> 模块每个月有上千的下载。</p>\n<p>恩, 关于es5的mixin就说这么多吧,  因为我现在基本只写es6</p>\n<p>总结:</p>\n<p>从一定程度上，<code>mixin</code> 弥补了 <code>JavaScript</code> 单一原型链的缺陷，可以实现类似于多重继承的效果。在上面的例子里，我们让 <code>Employee</code> “继承” <code>Person</code>，同时也“继承” Serializable。有趣的是我们通过 mixin Serializable 让 Employee 拥有了 stringify 和 parse 两个方法，同时我们改写了 Employee 实例的 <code>toString</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> employee = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"jane\"</span>,<span class=\"number\">25</span>,<span class=\"string\">\"f\"</span>,<span class=\"number\">1</span>,<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> employee2 = Employee.parse( employee +<span class=\"string\">\"\"</span>); <span class=\"comment\">//通过序列化反序列化复制对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(employee2,</div><div class=\"line\">    employee2 <span class=\"keyword\">instanceof</span> Employee,    <span class=\"comment\">//true</span></div><div class=\"line\">    employee2 <span class=\"keyword\">instanceof</span> Person,    <span class=\"comment\">//true</span></div><div class=\"line\">    employee == employee2);        <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">...objs</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> objs.reduce(<span class=\"function\">(<span class=\"params\">dest, src</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> src) &#123;</div><div class=\"line\">            dest[key] = src[key]</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> dest;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWithPrototype</span>(<span class=\"params\">Cls</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> P = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    P.prototype = Cls.prototype;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> P();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, gender</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.gender = gender;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, age, gender, level, salary</span>)</span>&#123;</div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name, age, gender);</div><div class=\"line\">    <span class=\"keyword\">this</span>.level = level;</div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee.prototype = createWithPrototype(Person);</div><div class=\"line\"></div><div class=\"line\">mixin(Employee.prototype, &#123;</div><div class=\"line\">    <span class=\"attr\">getSalary</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salary;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Serializable</span>(<span class=\"params\">Cls, serializer</span>)</span>&#123;</div><div class=\"line\">    mixin(Cls, serializer);</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Cls.stringify(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mixin(Employee.prototype, <span class=\"keyword\">new</span> Serializable(Employee, &#123;</div><div class=\"line\">        <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(str);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Employee(</div><div class=\"line\">                data.name,</div><div class=\"line\">                data.age,</div><div class=\"line\">                data.gender,</div><div class=\"line\">                data.level,</div><div class=\"line\">                data.salary</div><div class=\"line\">            );</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">stringify</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">employee</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: employee.name,</div><div class=\"line\">                <span class=\"attr\">age</span>: employee.age,</div><div class=\"line\">                <span class=\"attr\">gender</span>: employee.gender,</div><div class=\"line\">                <span class=\"attr\">level</span>: employee.level,</div><div class=\"line\">                <span class=\"attr\">salary</span>: employee.salary</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://www.h5jun.com/post/mixin-in-es6.html\" target=\"_blank\" rel=\"external\">好的文章是直的保留下来的</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"es5-中的mixin模式\"><a href=\"#es5-中的mixin模式\" class=\"headerlink\" title=\"es5 中的mixin模式\"></a>es5 中的<code>mixin</code>模式</h2><p>熟悉 JavaScript 的同学应该对 mixin 模式并不陌生。我们说 JavaScript / ES5 的继承模型是基于单一原型链的继承模型，通常情况下，在 JavaScript 实践中完全用原型链来实现继承式的代码复用，是远远不能满足需求的。因此实战中，我们的代码抽象基本上都是采用混合的模式, 基友原型继承, 也有ixin组合.</p>\n<p>那什么是 mixin 呢？ 最基本的 mixin 其实就是简单地<strong>将一个对象的属性复制给另一个对象</strong>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">targetObject, method</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> method) &#123;</div><div class=\"line\">    targetObject[key] = method[key];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> person = &#123;<span class=\"attr\">name</span>: <span class=\"string\">'liyuan'</span>, <span class=\"attr\">age</span>: <span class=\"number\">26</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> student = &#123;<span class=\"attr\">grade</span>: <span class=\"number\">1</span>&#125;;</div><div class=\"line\">mixin(student, person);</div></pre></td></tr></table></figure>\n<p>上面的代码做的事情很简单，就是枚举出一个对象的所有属性，然后将这些属性添加到另一个对象上去。</p>\n<p>有时候，我们需要将多个对象的属性 mixin 到一个对象上去：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> dest = &#123; <span class=\"attr\">name</span>: <span class=\"string\">'liyuan'</span>&#125;;</div><div class=\"line\">[methed1, methed2].forEach( <span class=\"function\"><span class=\"params\">methed</span> =&gt;</span> &#123;</div><div class=\"line\">  mixin(dest, methed);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>每次都用 <code>forEach</code> 操作显然很繁琐，因此通常情况下， mixin 考虑支持操作多个对象：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">...objs</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> objs.reduce( <span class=\"function\">(<span class=\"params\">dest, src</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> src) &#123;</div><div class=\"line\">      dest[key] = src[key];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> dest;</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> dest = mixin(&#123;<span class=\"attr\">name</span>: <span class=\"string\">'liyaun'</span>&#125;, &#123;<span class=\"attr\">age</span>: <span class=\"number\">26</span>&#125;);</div></pre></td></tr></table></figure>\n<p>在许多框架中，都有 <code>mixin</code> 的类似实现， jQuery 的 <code>extend</code>、YUI 有好几个类似 mixin 的 API，lodash 中有 _.mixin 方法，npm 中的 <a href=\"https://www.npmjs.com/package/mixin\" target=\"_blank\" rel=\"external\">mixin</a> 模块每个月有上千的下载。</p>\n<p>恩, 关于es5的mixin就说这么多吧,  因为我现在基本只写es6</p>\n<p>总结:</p>\n<p>从一定程度上，<code>mixin</code> 弥补了 <code>JavaScript</code> 单一原型链的缺陷，可以实现类似于多重继承的效果。在上面的例子里，我们让 <code>Employee</code> “继承” <code>Person</code>，同时也“继承” Serializable。有趣的是我们通过 mixin Serializable 让 Employee 拥有了 stringify 和 parse 两个方法，同时我们改写了 Employee 实例的 <code>toString</code> 方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> employee = <span class=\"keyword\">new</span> Employee(<span class=\"string\">\"jane\"</span>,<span class=\"number\">25</span>,<span class=\"string\">\"f\"</span>,<span class=\"number\">1</span>,<span class=\"number\">1000</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> employee2 = Employee.parse( employee +<span class=\"string\">\"\"</span>); <span class=\"comment\">//通过序列化反序列化复制对象</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(employee2,</div><div class=\"line\">    employee2 <span class=\"keyword\">instanceof</span> Employee,    <span class=\"comment\">//true</span></div><div class=\"line\">    employee2 <span class=\"keyword\">instanceof</span> Person,    <span class=\"comment\">//true</span></div><div class=\"line\">    employee == employee2);        <span class=\"comment\">//false</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">...objs</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> objs.reduce(<span class=\"function\">(<span class=\"params\">dest, src</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> src) &#123;</div><div class=\"line\">            dest[key] = src[key]</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> dest;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createWithPrototype</span>(<span class=\"params\">Cls</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> P = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">    P.prototype = Cls.prototype;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> P();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, gender</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.gender = gender;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Employee</span>(<span class=\"params\">name, age, gender, level, salary</span>)</span>&#123;</div><div class=\"line\">    Person.call(<span class=\"keyword\">this</span>, name, age, gender);</div><div class=\"line\">    <span class=\"keyword\">this</span>.level = level;</div><div class=\"line\">    <span class=\"keyword\">this</span>.salary = salary;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Employee.prototype = createWithPrototype(Person);</div><div class=\"line\"></div><div class=\"line\">mixin(Employee.prototype, &#123;</div><div class=\"line\">    <span class=\"attr\">getSalary</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.salary;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Serializable</span>(<span class=\"params\">Cls, serializer</span>)</span>&#123;</div><div class=\"line\">    mixin(Cls, serializer);</div><div class=\"line\">    <span class=\"keyword\">this</span>.toString = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Cls.stringify(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">mixin(Employee.prototype, <span class=\"keyword\">new</span> Serializable(Employee, &#123;</div><div class=\"line\">        <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.parse(str);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Employee(</div><div class=\"line\">                data.name,</div><div class=\"line\">                data.age,</div><div class=\"line\">                data.gender,</div><div class=\"line\">                data.level,</div><div class=\"line\">                data.salary</div><div class=\"line\">            );</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">stringify</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">employee</span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">JSON</span>.stringify(&#123;</div><div class=\"line\">                <span class=\"attr\">name</span>: employee.name,</div><div class=\"line\">                <span class=\"attr\">age</span>: employee.age,</div><div class=\"line\">                <span class=\"attr\">gender</span>: employee.gender,</div><div class=\"line\">                <span class=\"attr\">level</span>: employee.level,</div><div class=\"line\">                <span class=\"attr\">salary</span>: employee.salary</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"https://www.h5jun.com/post/mixin-in-es6.html\" target=\"_blank\" rel=\"external\">好的文章是直的保留下来的</a></p>\n</blockquote>\n"},{"layout":"post","title":"js中的yield的理解","date":"2018-02-05T02:21:50.000Z","_content":"\n> Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。\n> Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。\n> 执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。\n> 形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function 关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态 （ yield 在英语里的意思就是“产出”）。\n> ```javascript\nfunction* helloWorldGenerator () {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n```\n\n想看全文 [阮一峰大大原文地址](http://es6.ruanyifeng.com/#docs/generator)\n","source":"_posts/js中的yield的理解.md","raw":"---\nlayout: post\ntitle: js中的yield的理解\ndate: 2018-02-05 10:21:50\ntags:\n    - yeild\n    - es6\ncategories: \"es6中的yield\"\n---\n\n> Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。\n> Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。\n> 执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。\n> 形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function 关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态 （ yield 在英语里的意思就是“产出”）。\n> ```javascript\nfunction* helloWorldGenerator () {\n  yield 'hello';\n  yield 'world';\n  return 'ending';\n}\n\nvar hw = helloWorldGenerator();\n```\n\n想看全文 [阮一峰大大原文地址](http://es6.ruanyifeng.com/#docs/generator)\n","slug":"js中的yield的理解","published":1,"updated":"2019-05-13T03:56:03.242Z","comments":1,"photos":[],"link":"","_id":"cjvluebdf002ba0dm5aebb8p0","content":"<blockquote>\n<p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。<br>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。<br>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。<br>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function 关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态 （ yield 在英语里的意思就是“产出”）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>想看全文 <a href=\"http://es6.ruanyifeng.com/#docs/generator\" target=\"_blank\" rel=\"external\">阮一峰大大原文地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。本章详细介绍 Generator 函数的语法和 API，它的异步编程应用请看《Generator 函数的异步应用》一章。<br>Generator 函数有多种理解角度。语法上，首先可以把它理解成，Generator 函数是一个状态机，封装了多个内部状态。<br>执行 Generator 函数会返回一个遍历器对象，也就是说，Generator 函数除了状态机，还是一个遍历器对象生成函数。返回的遍历器对象，可以依次遍历 Generator 函数内部的每一个状态。<br>形式上，Generator 函数是一个普通函数，但是有两个特征。一是，function 关键字与函数名之间有一个星号；二是，函数体内部使用yield表达式，定义不同的内部状态 （ yield 在英语里的意思就是“产出”）。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">helloWorldGenerator</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'hello'</span>;</div><div class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">'world'</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">'ending'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> hw = helloWorldGenerator();</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>想看全文 <a href=\"http://es6.ruanyifeng.com/#docs/generator\" target=\"_blank\" rel=\"external\">阮一峰大大原文地址</a></p>\n"},{"title":"js中的观察者模式示例以及使用","date":"2017-07-26T07:08:51.000Z","_content":"\n### 介绍\n\n观察者模式，也叫订阅-发布模式。\n顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,\n这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。\n<!-- more -->\n今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,\n\n订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,\n发布, 就是把缓存在数组中的那写函数列表执行.\n具体看代码\n\n<!-- more -->\n\n```javascript\n/*\n最终, 我们需要的操作的数据应该是:\n{\n    eventType: [fn, fn, fn...]\n}\n*/\nclass Event {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n    console.log(this.eventList);\n  }\n\n  trigger (key) {\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.map(n => fns[i]());\n  }\n}\n\nlet test = new EVent();\ntest.listen('loginSouccess', () => console.log('登出成功, 拿到用户数据'));\ntest.listen('loginSouccess', () => console.log('再次登录'));\ntest.trigger('loginSouccess');// 订阅需要触发的事件\n```\n\n在listen()之后打印出来的event\n```base\n[object Object] {\n  loginSouccess: [function () {\nreturn window.runnerWindow.proxyConsole.log('登出成功, 拿到用户数据');\n}]\n}\n```\n我来简单试一下上面这段代码.\nlisten方法就是订阅(缓存), tergger方法就是发布(执行)\n这就是最简单的一个订阅-发布者模式.\n\n明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子\n\n现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.\n那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口\n\n1. login登录接口.\n2. 根据登录接口返回的id, 调取头像接口.\n3. 更具登录接口返回的id, 调取消息列表接口.\n\n一般情况下:\n```javascript\n$.ajax({\n  url:'http://ajax.login.com',\n  dataType:'json',\n  success:function(data){\n    getAvatar(data.id);\n    getMsg(data.id);\n    ....\n  }\n});\n```\n这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数\n\n添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,\n\n这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。\n\n如何解耦 ? 就是利用订阅发布模式.\n我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。\n\n具体代码实现在文章最后, 如果看不懂,  可以回到这里\n\n应为使用的es6语法,  所以直接, 哪里需要哪里`import`就可以愉快的使用了,\n\n### 发布-订阅没问题了,  现在看看取消订阅\n\n直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,\n\n```javascript\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n```\n\n我们要做的就是把remove方法放到Event对象中\n```javascript\nclass Login {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n  }\n\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      console.log('0',this.eventList);\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n  trigger (key) {\n    console.log(this.eventList);\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.forEach((n,i) => fns[i]());\n  }\n}\n\nfunction loginSouccess () {console.log('登录成功')}\nfunction loginSouccess2 () {console.log('再次登录')}\nlet test = new Login();\ntest.listen('loginSouccess', loginSouccess);\ntest.listen('loginSouccess', loginSouccess2);\ntest.remove('loginSouccess',loginSouccess2);\ntest.trigger('loginSouccess');\n```\n\n[这里是发布订阅模式的多种是现](https://msdn.microsoft.com/en-us/magazine/hh201955.aspx)\n\n### 代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n### 深入理解\n\n这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码...\n\n还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,\n\n需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。\n\n监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)\n\n用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。\n\nwhile循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。\n\n而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。\n\n监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。\n\n监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。\n\nsocket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。\n\n比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？\n\nsocket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。\n\n> [设计模式总的几种简单示例](https://zhuanlan.zhihu.com/p/24980136)\n> [原文地址](https://zhuanlan.zhihu.com/p/24453252)\n","source":"_posts/js中的观察者模式示例以及使用.md","raw":"---\ntitle: js中的观察者模式示例以及使用\ndate: 2017-07-26 15:08:51\ntags:\n    - javascript\n    - 观察者模式\n    - es6\n---\n\n### 介绍\n\n观察者模式，也叫订阅-发布模式。\n顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,\n这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。\n<!-- more -->\n今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,\n\n订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,\n发布, 就是把缓存在数组中的那写函数列表执行.\n具体看代码\n\n<!-- more -->\n\n```javascript\n/*\n最终, 我们需要的操作的数据应该是:\n{\n    eventType: [fn, fn, fn...]\n}\n*/\nclass Event {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n    console.log(this.eventList);\n  }\n\n  trigger (key) {\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.map(n => fns[i]());\n  }\n}\n\nlet test = new EVent();\ntest.listen('loginSouccess', () => console.log('登出成功, 拿到用户数据'));\ntest.listen('loginSouccess', () => console.log('再次登录'));\ntest.trigger('loginSouccess');// 订阅需要触发的事件\n```\n\n在listen()之后打印出来的event\n```base\n[object Object] {\n  loginSouccess: [function () {\nreturn window.runnerWindow.proxyConsole.log('登出成功, 拿到用户数据');\n}]\n}\n```\n我来简单试一下上面这段代码.\nlisten方法就是订阅(缓存), tergger方法就是发布(执行)\n这就是最简单的一个订阅-发布者模式.\n\n明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子\n\n现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.\n那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口\n\n1. login登录接口.\n2. 根据登录接口返回的id, 调取头像接口.\n3. 更具登录接口返回的id, 调取消息列表接口.\n\n一般情况下:\n```javascript\n$.ajax({\n  url:'http://ajax.login.com',\n  dataType:'json',\n  success:function(data){\n    getAvatar(data.id);\n    getMsg(data.id);\n    ....\n  }\n});\n```\n这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数\n\n添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,\n\n这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。\n\n如何解耦 ? 就是利用订阅发布模式.\n我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。\n\n具体代码实现在文章最后, 如果看不懂,  可以回到这里\n\n应为使用的es6语法,  所以直接, 哪里需要哪里`import`就可以愉快的使用了,\n\n### 发布-订阅没问题了,  现在看看取消订阅\n\n直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,\n\n```javascript\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n```\n\n我们要做的就是把remove方法放到Event对象中\n```javascript\nclass Login {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n  }\n\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      console.log('0',this.eventList);\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n  trigger (key) {\n    console.log(this.eventList);\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.forEach((n,i) => fns[i]());\n  }\n}\n\nfunction loginSouccess () {console.log('登录成功')}\nfunction loginSouccess2 () {console.log('再次登录')}\nlet test = new Login();\ntest.listen('loginSouccess', loginSouccess);\ntest.listen('loginSouccess', loginSouccess2);\ntest.remove('loginSouccess',loginSouccess2);\ntest.trigger('loginSouccess');\n```\n\n[这里是发布订阅模式的多种是现](https://msdn.microsoft.com/en-us/magazine/hh201955.aspx)\n\n### 代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n### 深入理解\n\n这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码...\n\n还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,\n\n需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。\n\n监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)\n\n用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。\n\nwhile循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。\n\n而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。\n\n监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。\n\n监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。\n\nsocket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。\n\n比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？\n\nsocket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。\n\n> [设计模式总的几种简单示例](https://zhuanlan.zhihu.com/p/24980136)\n> [原文地址](https://zhuanlan.zhihu.com/p/24453252)\n","slug":"js中的观察者模式示例以及使用","published":1,"updated":"2019-05-13T03:56:03.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebdh002fa0dmen1hkr34","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>观察者模式，也叫订阅-发布模式。<br>顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,<br>这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。<br><a id=\"more\"></a><br>今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,</p>\n<p>订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,<br>发布, 就是把缓存在数组中的那写函数列表执行.<br>具体看代码</p>\n<!-- more -->\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">最终, 我们需要的操作的数据应该是:</div><div class=\"line\">&#123;</div><div class=\"line\">    eventType: [fn, fn, fn...]</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> EVent();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功, 拿到用户数据'</span>));</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>));</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);<span class=\"comment\">// 订阅需要触发的事件</span></div></pre></td></tr></table></figure>\n<p>在listen()之后打印出来的event<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[object Object] &#123;</div><div class=\"line\">  loginSouccess: [function () &#123;</div><div class=\"line\">return window.runnerWindow.proxyConsole.log(&apos;登出成功, 拿到用户数据&apos;);</div><div class=\"line\">&#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我来简单试一下上面这段代码.<br>listen方法就是订阅(缓存), tergger方法就是发布(执行)<br>这就是最简单的一个订阅-发布者模式.</p>\n<p>明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子</p>\n<p>现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.<br>那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口</p>\n<ol>\n<li>login登录接口.</li>\n<li>根据登录接口返回的id, 调取头像接口.</li>\n<li>更具登录接口返回的id, 调取消息列表接口.</li>\n</ol>\n<p>一般情况下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">'http://ajax.login.com'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>:<span class=\"string\">'json'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    getAvatar(data.id);</div><div class=\"line\">    getMsg(data.id);</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数</p>\n<p>添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,</p>\n<p>这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。</p>\n<p>如何解耦 ? 就是利用订阅发布模式.<br>我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。</p>\n<p>具体代码实现在文章最后, 如果看不懂,  可以回到这里</p>\n<p>应为使用的es6语法,  所以直接, 哪里需要哪里<code>import</code>就可以愉快的使用了,</p>\n<h3 id=\"发布-订阅没问题了-现在看看取消订阅\"><a href=\"#发布-订阅没问题了-现在看看取消订阅\" class=\"headerlink\" title=\"发布-订阅没问题了,  现在看看取消订阅\"></a>发布-订阅没问题了,  现在看看取消订阅</h3><p>直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove ( key, fn) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">    fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">    <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">    <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">    fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">        fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要做的就是把remove方法放到Event对象中<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  remove ( key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">      fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">      <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">      <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'0'</span>,<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">      fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">          fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.forEach(<span class=\"function\">(<span class=\"params\">n,i</span>) =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess2</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>)&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Login();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess);</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess2);</div><div class=\"line\">test.remove(<span class=\"string\">'loginSouccess'</span>,loginSouccess2);</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://msdn.microsoft.com/en-us/magazine/hh201955.aspx\" target=\"_blank\" rel=\"external\">这里是发布订阅模式的多种是现</a></p>\n<h3 id=\"代码总汇\"><a href=\"#代码总汇\" class=\"headerlink\" title=\"代码总汇\"></a>代码总汇</h3><p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h3 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h3><p>这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码…</p>\n<p>还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,</p>\n<p>需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。</p>\n<p>监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)</p>\n<p>用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。</p>\n<p>while循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。</p>\n<p>而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。</p>\n<p>监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。</p>\n<p>监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。</p>\n<p>socket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。</p>\n<p>比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？</p>\n<p>socket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24980136\" target=\"_blank\" rel=\"external\">设计模式总的几种简单示例</a><br><a href=\"https://zhuanlan.zhihu.com/p/24453252\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>观察者模式，也叫订阅-发布模式。<br>顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,<br>这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。<br>","more":"<br>今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,</p>\n<p>订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,<br>发布, 就是把缓存在数组中的那写函数列表执行.<br>具体看代码</p>\n<!-- more -->\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">最终, 我们需要的操作的数据应该是:</div><div class=\"line\">&#123;</div><div class=\"line\">    eventType: [fn, fn, fn...]</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> EVent();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功, 拿到用户数据'</span>));</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>));</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);<span class=\"comment\">// 订阅需要触发的事件</span></div></pre></td></tr></table></figure>\n<p>在listen()之后打印出来的event<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[object Object] &#123;</div><div class=\"line\">  loginSouccess: [function () &#123;</div><div class=\"line\">return window.runnerWindow.proxyConsole.log(&apos;登出成功, 拿到用户数据&apos;);</div><div class=\"line\">&#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我来简单试一下上面这段代码.<br>listen方法就是订阅(缓存), tergger方法就是发布(执行)<br>这就是最简单的一个订阅-发布者模式.</p>\n<p>明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子</p>\n<p>现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.<br>那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口</p>\n<ol>\n<li>login登录接口.</li>\n<li>根据登录接口返回的id, 调取头像接口.</li>\n<li>更具登录接口返回的id, 调取消息列表接口.</li>\n</ol>\n<p>一般情况下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">'http://ajax.login.com'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>:<span class=\"string\">'json'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    getAvatar(data.id);</div><div class=\"line\">    getMsg(data.id);</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数</p>\n<p>添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,</p>\n<p>这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。</p>\n<p>如何解耦 ? 就是利用订阅发布模式.<br>我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。</p>\n<p>具体代码实现在文章最后, 如果看不懂,  可以回到这里</p>\n<p>应为使用的es6语法,  所以直接, 哪里需要哪里<code>import</code>就可以愉快的使用了,</p>\n<h3 id=\"发布-订阅没问题了-现在看看取消订阅\"><a href=\"#发布-订阅没问题了-现在看看取消订阅\" class=\"headerlink\" title=\"发布-订阅没问题了,  现在看看取消订阅\"></a>发布-订阅没问题了,  现在看看取消订阅</h3><p>直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove ( key, fn) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">    fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">    <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">    <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">    fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">        fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要做的就是把remove方法放到Event对象中<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  remove ( key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">      fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">      <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">      <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'0'</span>,<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">      fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">          fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.forEach(<span class=\"function\">(<span class=\"params\">n,i</span>) =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess2</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>)&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Login();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess);</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess2);</div><div class=\"line\">test.remove(<span class=\"string\">'loginSouccess'</span>,loginSouccess2);</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://msdn.microsoft.com/en-us/magazine/hh201955.aspx\" target=\"_blank\" rel=\"external\">这里是发布订阅模式的多种是现</a></p>\n<h3 id=\"代码总汇\"><a href=\"#代码总汇\" class=\"headerlink\" title=\"代码总汇\"></a>代码总汇</h3><p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h3 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h3><p>这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码…</p>\n<p>还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,</p>\n<p>需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。</p>\n<p>监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)</p>\n<p>用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。</p>\n<p>while循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。</p>\n<p>而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。</p>\n<p>监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。</p>\n<p>监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。</p>\n<p>socket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。</p>\n<p>比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？</p>\n<p>socket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24980136\" target=\"_blank\" rel=\"external\">设计模式总的几种简单示例</a><br><a href=\"https://zhuanlan.zhihu.com/p/24453252\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>"},{"layout":"post","title":"js使用jsonp方式解决跨域问题","date":"2018-07-04T08:35:37.000Z","_content":"\n跨域的安全限制都是对浏览器端来说的，服务器端是不存在跨域安全限制的。\n\n浏览器的同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。\n\n如果协议，端口和主机对于两个页面是相同的，则两个页面具有相同的源，否则就是不同源的。\n\n如果要在js里发起跨域请求，则要进行一些特殊处理了。或者，你可以把请求发到自己的服务端，再通过后台代码发起请求，再将数据返回前端。\n\n这里讲下使用jquery的jsonp如何发起跨域请求及其原理。\n\n \n\n先看下准备环境：两个端口不一样，构成跨域请求的条件。\n\n获取数据：获取数据的端口为9090\n\n{% asset_img 1.png 跨域1 %}\n\n请求数据：请求数据的端口为8080\n\n{% asset_img 2.png 跨域1 %}\n\n1. **先看下直接发起ajax请求会怎么样**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n<script src=\"https://code.jquery.com/jquery-2.2.4.js\"></script>\n\n<input id=\"btn\" type=\"button\" value=\"跨域获取数据\" />\n<textarea id=\"text\" style=\"width: 400px; height: 100px;\"></textarea>\n  <script>\n  $(document).ready(function () {\n            $(\"#btn\").click(function () {\n                 $.ajax({\n                    url: 'http://www.quanqiuwa.com:3001',\n                     type: 'GET',\n                     success: function (data) {\n                         $(text).val(data);\n                     },\n                   error: function (xhr) {\n                     console.log(xhr)\n                   }\n                });\n            });\n         });\n  </script>\n</body>\n</html>\n```\n\n请求的结果如下图：可以看到跨域请求因为浏览器的同源策略被拦截了。\n\n{% asset_img 2.png 跨域1 %}\n\n2.**接下来看如何发起跨域请求。解决跨域请求的方式有很多，这里只说一下jquery的jsop方式及其原理。**\n\n> 首先我们需要明白，在页面上直接发起一个跨域的ajax请求是不可以的，但是，在页面上引入不同域上的js脚本却是可以的，就像你可以在自己的页面上使用<img src=\"\"> 标签来随意显示某个域上的图片一样。\n\n比如我在8080端口的页面上请求一个9090端口的图片：可以看到直接通过src跨域请求是可以的。\n下面是可以请求回来图片内容的.\n{% asset_img 5.png 跨域1 %}\n\n3.**那么看下如何使用`<script src=\"\">`来完成一个跨域请求：**\n\n　　当点击\"跨域获取数据\"的按钮时，添加一个`<script>`标签，用于发起跨域请求；注意看请求地址后面带了一个`callback=showData`的参数；\n\n　　`showData`即是回调函数名称，传到后台，用于包裹数据。数据返回到前端后，就是`showData(result)`的形式，因为是script脚本，所以自动调用showData函数，而`result`就是`showData`的参数。\n\n　　至此，我们算是跨域把数据请求回来了，但是比较麻烦，需要自己写脚本发起请求，然后写个回调函数处理数据，不是很方便。\n\n```js\nfunction showData (result) {\n             var data = JSON.stringify(result); //json对象转成字符串\n             $(\"#text\").val(data);\n         }\n \n         $(document).ready(function () {\n    \n            $(\"#btn\").click(function () {\n                 //向头部输入一个脚本，该脚本发起一个跨域请求\n                 $(\"head\").append(\"<script src='http://www.quanqiuwa.com:3001/update'><\\/script>\");\n             });\n \n         });\n```\n\n{% asset_img 6.png 跨域1 %}\n\n\n4.**再来看jquery的jsonp方式跨域请求：**\n服务端代码不变，js代码如下：最简单的方式，只需配置一个`dataType:'jsonp'`，就可以发起一个跨域请求。jsonp指定服务器返回的数据类型为jsonp格式，可以看发起的请求路径，自动带了一个`callback=xxx`，`xxx`是`jquery`随机生成的一个回调函数名称。\n\n这里的`success`就跟上面的`showData`一样，如果有`success`函数则默认`success()`作为回调函数。\n\n```\n$.ajax({\n                     url: \"http://localhost:9090/student\",\n                     type: \"GET\",\n                     dataType: \"jsonp\", //指定服务器返回的数据类型\n                     success: function (data) {\n                         var result = JSON.stringify(data); //json对象转成字符串\n                         $(\"#text\").val(result);\n                     }\n                 });\n```\n\n懒得copy了,\n> [原文](https://www.cnblogs.com/chiangchou/p/jsonp.html)\n","source":"_posts/js使用jsonp方式解决跨域问题.md","raw":"---\nlayout: post\ntitle: js使用jsonp方式解决跨域问题\ndate: 2018-07-04 16:35:37\ntags:\n    - jsonp\n    - 跨域\ncategories: \"算法\"\n---\n\n跨域的安全限制都是对浏览器端来说的，服务器端是不存在跨域安全限制的。\n\n浏览器的同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。\n\n如果协议，端口和主机对于两个页面是相同的，则两个页面具有相同的源，否则就是不同源的。\n\n如果要在js里发起跨域请求，则要进行一些特殊处理了。或者，你可以把请求发到自己的服务端，再通过后台代码发起请求，再将数据返回前端。\n\n这里讲下使用jquery的jsonp如何发起跨域请求及其原理。\n\n \n\n先看下准备环境：两个端口不一样，构成跨域请求的条件。\n\n获取数据：获取数据的端口为9090\n\n{% asset_img 1.png 跨域1 %}\n\n请求数据：请求数据的端口为8080\n\n{% asset_img 2.png 跨域1 %}\n\n1. **先看下直接发起ajax请求会怎么样**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>JS Bin</title>\n</head>\n<body>\n<script src=\"https://code.jquery.com/jquery-2.2.4.js\"></script>\n\n<input id=\"btn\" type=\"button\" value=\"跨域获取数据\" />\n<textarea id=\"text\" style=\"width: 400px; height: 100px;\"></textarea>\n  <script>\n  $(document).ready(function () {\n            $(\"#btn\").click(function () {\n                 $.ajax({\n                    url: 'http://www.quanqiuwa.com:3001',\n                     type: 'GET',\n                     success: function (data) {\n                         $(text).val(data);\n                     },\n                   error: function (xhr) {\n                     console.log(xhr)\n                   }\n                });\n            });\n         });\n  </script>\n</body>\n</html>\n```\n\n请求的结果如下图：可以看到跨域请求因为浏览器的同源策略被拦截了。\n\n{% asset_img 2.png 跨域1 %}\n\n2.**接下来看如何发起跨域请求。解决跨域请求的方式有很多，这里只说一下jquery的jsop方式及其原理。**\n\n> 首先我们需要明白，在页面上直接发起一个跨域的ajax请求是不可以的，但是，在页面上引入不同域上的js脚本却是可以的，就像你可以在自己的页面上使用<img src=\"\"> 标签来随意显示某个域上的图片一样。\n\n比如我在8080端口的页面上请求一个9090端口的图片：可以看到直接通过src跨域请求是可以的。\n下面是可以请求回来图片内容的.\n{% asset_img 5.png 跨域1 %}\n\n3.**那么看下如何使用`<script src=\"\">`来完成一个跨域请求：**\n\n　　当点击\"跨域获取数据\"的按钮时，添加一个`<script>`标签，用于发起跨域请求；注意看请求地址后面带了一个`callback=showData`的参数；\n\n　　`showData`即是回调函数名称，传到后台，用于包裹数据。数据返回到前端后，就是`showData(result)`的形式，因为是script脚本，所以自动调用showData函数，而`result`就是`showData`的参数。\n\n　　至此，我们算是跨域把数据请求回来了，但是比较麻烦，需要自己写脚本发起请求，然后写个回调函数处理数据，不是很方便。\n\n```js\nfunction showData (result) {\n             var data = JSON.stringify(result); //json对象转成字符串\n             $(\"#text\").val(data);\n         }\n \n         $(document).ready(function () {\n    \n            $(\"#btn\").click(function () {\n                 //向头部输入一个脚本，该脚本发起一个跨域请求\n                 $(\"head\").append(\"<script src='http://www.quanqiuwa.com:3001/update'><\\/script>\");\n             });\n \n         });\n```\n\n{% asset_img 6.png 跨域1 %}\n\n\n4.**再来看jquery的jsonp方式跨域请求：**\n服务端代码不变，js代码如下：最简单的方式，只需配置一个`dataType:'jsonp'`，就可以发起一个跨域请求。jsonp指定服务器返回的数据类型为jsonp格式，可以看发起的请求路径，自动带了一个`callback=xxx`，`xxx`是`jquery`随机生成的一个回调函数名称。\n\n这里的`success`就跟上面的`showData`一样，如果有`success`函数则默认`success()`作为回调函数。\n\n```\n$.ajax({\n                     url: \"http://localhost:9090/student\",\n                     type: \"GET\",\n                     dataType: \"jsonp\", //指定服务器返回的数据类型\n                     success: function (data) {\n                         var result = JSON.stringify(data); //json对象转成字符串\n                         $(\"#text\").val(result);\n                     }\n                 });\n```\n\n懒得copy了,\n> [原文](https://www.cnblogs.com/chiangchou/p/jsonp.html)\n","slug":"js使用jsonp方式解决跨域问题","published":1,"updated":"2019-05-13T03:56:03.242Z","comments":1,"photos":[],"link":"","_id":"cjvluebdi002ga0dme1vtn4kw","content":"<p>跨域的安全限制都是对浏览器端来说的，服务器端是不存在跨域安全限制的。</p>\n<p>浏览器的同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。</p>\n<p>如果协议，端口和主机对于两个页面是相同的，则两个页面具有相同的源，否则就是不同源的。</p>\n<p>如果要在js里发起跨域请求，则要进行一些特殊处理了。或者，你可以把请求发到自己的服务端，再通过后台代码发起请求，再将数据返回前端。</p>\n<p>这里讲下使用jquery的jsonp如何发起跨域请求及其原理。</p>\n<p>先看下准备环境：两个端口不一样，构成跨域请求的条件。</p>\n<p>获取数据：获取数据的端口为9090</p>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/1.png\" alt=\"跨域1\" title=\"跨域1\">\n<p>请求数据：请求数据的端口为8080</p>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/2.png\" alt=\"跨域1\" title=\"跨域1\">\n<ol>\n<li><strong>先看下直接发起ajax请求会怎么样</strong></li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-2.2.4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"跨域获取数据\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 400px; height: 100px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">\"#btn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                 $.ajax(&#123;</div><div class=\"line\">                    <span class=\"attr\">url</span>: <span class=\"string\">'http://www.quanqiuwa.com:3001'</span>,</div><div class=\"line\">                     <span class=\"attr\">type</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">                     <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                         $(text).val(data);</div><div class=\"line\">                     &#125;,</div><div class=\"line\">                   <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">                     <span class=\"built_in\">console</span>.log(xhr)</div><div class=\"line\">                   &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">         &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>请求的结果如下图：可以看到跨域请求因为浏览器的同源策略被拦截了。</p>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/2.png\" alt=\"跨域1\" title=\"跨域1\">\n<p>2.<strong>接下来看如何发起跨域请求。解决跨域请求的方式有很多，这里只说一下jquery的jsop方式及其原理。</strong></p>\n<blockquote>\n<p>首先我们需要明白，在页面上直接发起一个跨域的ajax请求是不可以的，但是，在页面上引入不同域上的js脚本却是可以的，就像你可以在自己的页面上使用<img src=\"\"> 标签来随意显示某个域上的图片一样。</p>\n</blockquote>\n<p>比如我在8080端口的页面上请求一个9090端口的图片：可以看到直接通过src跨域请求是可以的。<br>下面是可以请求回来图片内容的.<br><img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/5.png\" alt=\"跨域1\" title=\"跨域1\"></p>\n<p>3.<strong>那么看下如何使用<code>&lt;script src=&quot;&quot;&gt;</code>来完成一个跨域请求：</strong></p>\n<p>　　当点击”跨域获取数据”的按钮时，添加一个<code>&lt;script&gt;</code>标签，用于发起跨域请求；注意看请求地址后面带了一个<code>callback=showData</code>的参数；</p>\n<p>　　<code>showData</code>即是回调函数名称，传到后台，用于包裹数据。数据返回到前端后，就是<code>showData(result)</code>的形式，因为是script脚本，所以自动调用showData函数，而<code>result</code>就是<code>showData</code>的参数。</p>\n<p>　　至此，我们算是跨域把数据请求回来了，但是比较麻烦，需要自己写脚本发起请求，然后写个回调函数处理数据，不是很方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showData</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">             <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.stringify(result); <span class=\"comment\">//json对象转成字符串</span></div><div class=\"line\">             $(<span class=\"string\">\"#text\"</span>).val(data);</div><div class=\"line\">         &#125;</div><div class=\"line\"> </div><div class=\"line\">         $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">            $(<span class=\"string\">\"#btn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                 <span class=\"comment\">//向头部输入一个脚本，该脚本发起一个跨域请求</span></div><div class=\"line\">                 $(<span class=\"string\">\"head\"</span>).append(<span class=\"string\">\"&lt;script src='http://www.quanqiuwa.com:3001/update'&gt;&lt;\\/script&gt;\"</span>);</div><div class=\"line\">             &#125;);</div><div class=\"line\"> </div><div class=\"line\">         &#125;);</div></pre></td></tr></table></figure>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/6.png\" alt=\"跨域1\" title=\"跨域1\">\n<p>4.<strong>再来看jquery的jsonp方式跨域请求：</strong><br>服务端代码不变，js代码如下：最简单的方式，只需配置一个<code>dataType:&#39;jsonp&#39;</code>，就可以发起一个跨域请求。jsonp指定服务器返回的数据类型为jsonp格式，可以看发起的请求路径，自动带了一个<code>callback=xxx</code>，<code>xxx</code>是<code>jquery</code>随机生成的一个回调函数名称。</p>\n<p>这里的<code>success</code>就跟上面的<code>showData</code>一样，如果有<code>success</code>函数则默认<code>success()</code>作为回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">                     url: &quot;http://localhost:9090/student&quot;,</div><div class=\"line\">                     type: &quot;GET&quot;,</div><div class=\"line\">                     dataType: &quot;jsonp&quot;, //指定服务器返回的数据类型</div><div class=\"line\">                     success: function (data) &#123;</div><div class=\"line\">                         var result = JSON.stringify(data); //json对象转成字符串</div><div class=\"line\">                         $(&quot;#text&quot;).val(result);</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;);</div></pre></td></tr></table></figure>\n<p>懒得copy了,</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/chiangchou/p/jsonp.html\" target=\"_blank\" rel=\"external\">原文</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>跨域的安全限制都是对浏览器端来说的，服务器端是不存在跨域安全限制的。</p>\n<p>浏览器的同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。</p>\n<p>如果协议，端口和主机对于两个页面是相同的，则两个页面具有相同的源，否则就是不同源的。</p>\n<p>如果要在js里发起跨域请求，则要进行一些特殊处理了。或者，你可以把请求发到自己的服务端，再通过后台代码发起请求，再将数据返回前端。</p>\n<p>这里讲下使用jquery的jsonp如何发起跨域请求及其原理。</p>\n<p>先看下准备环境：两个端口不一样，构成跨域请求的条件。</p>\n<p>获取数据：获取数据的端口为9090</p>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/1.png\" alt=\"跨域1\" title=\"跨域1\">\n<p>请求数据：请求数据的端口为8080</p>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/2.png\" alt=\"跨域1\" title=\"跨域1\">\n<ol>\n<li><strong>先看下直接发起ajax请求会怎么样</strong></li>\n</ol>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>JS Bin<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://code.jquery.com/jquery-2.2.4.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"跨域获取数据\"</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 400px; height: 100px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">  $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            $(<span class=\"string\">\"#btn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                 $.ajax(&#123;</div><div class=\"line\">                    <span class=\"attr\">url</span>: <span class=\"string\">'http://www.quanqiuwa.com:3001'</span>,</div><div class=\"line\">                     <span class=\"attr\">type</span>: <span class=\"string\">'GET'</span>,</div><div class=\"line\">                     <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">                         $(text).val(data);</div><div class=\"line\">                     &#125;,</div><div class=\"line\">                   <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</div><div class=\"line\">                     <span class=\"built_in\">console</span>.log(xhr)</div><div class=\"line\">                   &#125;</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;);</div><div class=\"line\">         &#125;);</div><div class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>请求的结果如下图：可以看到跨域请求因为浏览器的同源策略被拦截了。</p>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/2.png\" alt=\"跨域1\" title=\"跨域1\">\n<p>2.<strong>接下来看如何发起跨域请求。解决跨域请求的方式有很多，这里只说一下jquery的jsop方式及其原理。</strong></p>\n<blockquote>\n<p>首先我们需要明白，在页面上直接发起一个跨域的ajax请求是不可以的，但是，在页面上引入不同域上的js脚本却是可以的，就像你可以在自己的页面上使用<img src=\"\"> 标签来随意显示某个域上的图片一样。</p>\n</blockquote>\n<p>比如我在8080端口的页面上请求一个9090端口的图片：可以看到直接通过src跨域请求是可以的。<br>下面是可以请求回来图片内容的.<br><img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/5.png\" alt=\"跨域1\" title=\"跨域1\"></p>\n<p>3.<strong>那么看下如何使用<code>&lt;script src=&quot;&quot;&gt;</code>来完成一个跨域请求：</strong></p>\n<p>　　当点击”跨域获取数据”的按钮时，添加一个<code>&lt;script&gt;</code>标签，用于发起跨域请求；注意看请求地址后面带了一个<code>callback=showData</code>的参数；</p>\n<p>　　<code>showData</code>即是回调函数名称，传到后台，用于包裹数据。数据返回到前端后，就是<code>showData(result)</code>的形式，因为是script脚本，所以自动调用showData函数，而<code>result</code>就是<code>showData</code>的参数。</p>\n<p>　　至此，我们算是跨域把数据请求回来了，但是比较麻烦，需要自己写脚本发起请求，然后写个回调函数处理数据，不是很方便。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showData</span> (<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">             <span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.stringify(result); <span class=\"comment\">//json对象转成字符串</span></div><div class=\"line\">             $(<span class=\"string\">\"#text\"</span>).val(data);</div><div class=\"line\">         &#125;</div><div class=\"line\"> </div><div class=\"line\">         $(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">            $(<span class=\"string\">\"#btn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                 <span class=\"comment\">//向头部输入一个脚本，该脚本发起一个跨域请求</span></div><div class=\"line\">                 $(<span class=\"string\">\"head\"</span>).append(<span class=\"string\">\"&lt;script src='http://www.quanqiuwa.com:3001/update'&gt;&lt;\\/script&gt;\"</span>);</div><div class=\"line\">             &#125;);</div><div class=\"line\"> </div><div class=\"line\">         &#125;);</div></pre></td></tr></table></figure>\n<img src=\"/2018/07/04/js使用jsonp方式解决跨域问题/6.png\" alt=\"跨域1\" title=\"跨域1\">\n<p>4.<strong>再来看jquery的jsonp方式跨域请求：</strong><br>服务端代码不变，js代码如下：最简单的方式，只需配置一个<code>dataType:&#39;jsonp&#39;</code>，就可以发起一个跨域请求。jsonp指定服务器返回的数据类型为jsonp格式，可以看发起的请求路径，自动带了一个<code>callback=xxx</code>，<code>xxx</code>是<code>jquery</code>随机生成的一个回调函数名称。</p>\n<p>这里的<code>success</code>就跟上面的<code>showData</code>一样，如果有<code>success</code>函数则默认<code>success()</code>作为回调函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">                     url: &quot;http://localhost:9090/student&quot;,</div><div class=\"line\">                     type: &quot;GET&quot;,</div><div class=\"line\">                     dataType: &quot;jsonp&quot;, //指定服务器返回的数据类型</div><div class=\"line\">                     success: function (data) &#123;</div><div class=\"line\">                         var result = JSON.stringify(data); //json对象转成字符串</div><div class=\"line\">                         $(&quot;#text&quot;).val(result);</div><div class=\"line\">                     &#125;</div><div class=\"line\">                 &#125;);</div></pre></td></tr></table></figure>\n<p>懒得copy了,</p>\n<blockquote>\n<p><a href=\"https://www.cnblogs.com/chiangchou/p/jsonp.html\" target=\"_blank\" rel=\"external\">原文</a></p>\n</blockquote>\n"},{"layout":"post","title":"linux常用命令","date":"2017-10-17T01:55:33.000Z","_content":"\n> [先把查询的地址放出来](http://man.linuxde.net/)\n\n## 基础\n\n### 认识操作环境\n\n{% asset_img linux_role.png 命令行基础格式, 有些工具会吧样式改变, 不过也无妨 %}\n\n- root：当前登陆的用户名\n- @分隔符\n- chensiqi：主机名\n- ～：当前路径位置\n\n### Linux系统命令操作语法的格式\n\n{% asset_img baseBg.png 语法 %}\n\n- 一般情况下命令中的[]表示可选，既命令的参数及文件是可选的。\n- 参数选项===>一个命令的不同的功能（不同的条件）\n\n{% asset_img base01.png 书写例子 %}\n\n\n> 了解了基本用法之后就可以用命令行来解决一些问题, 配合参数就可以几乎是无所不能了\n\n","source":"_posts/linux常用命令.md","raw":"---\nlayout: post\ntitle: linux常用命令\ndate: 2017-10-17 09:55:33\ntags:\n    - linux\n    - linux常规\ncategories: \"linux命令\"\n---\n\n> [先把查询的地址放出来](http://man.linuxde.net/)\n\n## 基础\n\n### 认识操作环境\n\n{% asset_img linux_role.png 命令行基础格式, 有些工具会吧样式改变, 不过也无妨 %}\n\n- root：当前登陆的用户名\n- @分隔符\n- chensiqi：主机名\n- ～：当前路径位置\n\n### Linux系统命令操作语法的格式\n\n{% asset_img baseBg.png 语法 %}\n\n- 一般情况下命令中的[]表示可选，既命令的参数及文件是可选的。\n- 参数选项===>一个命令的不同的功能（不同的条件）\n\n{% asset_img base01.png 书写例子 %}\n\n\n> 了解了基本用法之后就可以用命令行来解决一些问题, 配合参数就可以几乎是无所不能了\n\n","slug":"linux常用命令","published":1,"updated":"2019-05-13T03:56:03.247Z","comments":1,"photos":[],"link":"","_id":"cjvluebdj002ka0dmqp5p9ttd","content":"<blockquote>\n<p><a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"external\">先把查询的地址放出来</a></p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"认识操作环境\"><a href=\"#认识操作环境\" class=\"headerlink\" title=\"认识操作环境\"></a>认识操作环境</h3><img src=\"/2017/10/17/linux常用命令/linux_role.png\" alt=\"命令行基础格式, 有些工具会吧样式改变, 不过也无妨\" title=\"命令行基础格式, 有些工具会吧样式改变, 不过也无妨\">\n<ul>\n<li>root：当前登陆的用户名</li>\n<li>@分隔符</li>\n<li>chensiqi：主机名</li>\n<li>～：当前路径位置</li>\n</ul>\n<h3 id=\"Linux系统命令操作语法的格式\"><a href=\"#Linux系统命令操作语法的格式\" class=\"headerlink\" title=\"Linux系统命令操作语法的格式\"></a>Linux系统命令操作语法的格式</h3><img src=\"/2017/10/17/linux常用命令/baseBg.png\" alt=\"语法\" title=\"语法\">\n<ul>\n<li>一般情况下命令中的[]表示可选，既命令的参数及文件是可选的。</li>\n<li>参数选项===&gt;一个命令的不同的功能（不同的条件）</li>\n</ul>\n<img src=\"/2017/10/17/linux常用命令/base01.png\" alt=\"书写例子\" title=\"书写例子\">\n<blockquote>\n<p>了解了基本用法之后就可以用命令行来解决一些问题, 配合参数就可以几乎是无所不能了</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"http://man.linuxde.net/\" target=\"_blank\" rel=\"external\">先把查询的地址放出来</a></p>\n</blockquote>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"认识操作环境\"><a href=\"#认识操作环境\" class=\"headerlink\" title=\"认识操作环境\"></a>认识操作环境</h3><img src=\"/2017/10/17/linux常用命令/linux_role.png\" alt=\"命令行基础格式, 有些工具会吧样式改变, 不过也无妨\" title=\"命令行基础格式, 有些工具会吧样式改变, 不过也无妨\">\n<ul>\n<li>root：当前登陆的用户名</li>\n<li>@分隔符</li>\n<li>chensiqi：主机名</li>\n<li>～：当前路径位置</li>\n</ul>\n<h3 id=\"Linux系统命令操作语法的格式\"><a href=\"#Linux系统命令操作语法的格式\" class=\"headerlink\" title=\"Linux系统命令操作语法的格式\"></a>Linux系统命令操作语法的格式</h3><img src=\"/2017/10/17/linux常用命令/baseBg.png\" alt=\"语法\" title=\"语法\">\n<ul>\n<li>一般情况下命令中的[]表示可选，既命令的参数及文件是可选的。</li>\n<li>参数选项===&gt;一个命令的不同的功能（不同的条件）</li>\n</ul>\n<img src=\"/2017/10/17/linux常用命令/base01.png\" alt=\"书写例子\" title=\"书写例子\">\n<blockquote>\n<p>了解了基本用法之后就可以用命令行来解决一些问题, 配合参数就可以几乎是无所不能了</p>\n</blockquote>\n"},{"title":"mac下更新node方法","date":"2017-07-25T10:04:30.000Z","_content":"\n千万别使用`brew upgrade node`来升级`node`\n\n<!-- more -->\n\n第一步，先查看本机node.js版本：\n\n`$ node -v`\n\n第二步，清除node.js的cache：\n\n`$ sudo npm cache clean -f`\n\n第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 \"n\"\n\n`$ sudo npm install -g n`\n\n第四步，安装最新版本的node.js\n\n`$ sudo n stable`\n\n第五步，再次查看本机的node.js版本：\n\n`$ node -v`\n","source":"_posts/mac下更新node和npm.md","raw":"---\ntitle: mac下更新node方法\ndate: 2017-07-25 18:04:30\ntags:\n    - node\n---\n\n千万别使用`brew upgrade node`来升级`node`\n\n<!-- more -->\n\n第一步，先查看本机node.js版本：\n\n`$ node -v`\n\n第二步，清除node.js的cache：\n\n`$ sudo npm cache clean -f`\n\n第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 \"n\"\n\n`$ sudo npm install -g n`\n\n第四步，安装最新版本的node.js\n\n`$ sudo n stable`\n\n第五步，再次查看本机的node.js版本：\n\n`$ node -v`\n","slug":"mac下更新node和npm","published":1,"updated":"2019-05-13T03:56:03.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebdk002la0dmmhrsmq31","content":"<p>千万别使用<code>brew upgrade node</code>来升级<code>node</code></p>\n<a id=\"more\"></a>\n<p>第一步，先查看本机node.js版本：</p>\n<p><code>$ node -v</code></p>\n<p>第二步，清除node.js的cache：</p>\n<p><code>$ sudo npm cache clean -f</code></p>\n<p>第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 “n”</p>\n<p><code>$ sudo npm install -g n</code></p>\n<p>第四步，安装最新版本的node.js</p>\n<p><code>$ sudo n stable</code></p>\n<p>第五步，再次查看本机的node.js版本：</p>\n<p><code>$ node -v</code></p>\n","site":{"data":{}},"excerpt":"<p>千万别使用<code>brew upgrade node</code>来升级<code>node</code></p>","more":"<p>第一步，先查看本机node.js版本：</p>\n<p><code>$ node -v</code></p>\n<p>第二步，清除node.js的cache：</p>\n<p><code>$ sudo npm cache clean -f</code></p>\n<p>第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 “n”</p>\n<p><code>$ sudo npm install -g n</code></p>\n<p>第四步，安装最新版本的node.js</p>\n<p><code>$ sudo n stable</code></p>\n<p>第五步，再次查看本机的node.js版本：</p>\n<p><code>$ node -v</code></p>"},{"title":"js移触屏滑动事件","date":"2017-06-07T01:22:00.000Z","type":"categories","_content":"\n主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件\n\n## 介绍\n\n- touchstart: 手指放到屏幕上时触发\n- touchmove: 手指在屏幕上滑动式触发\n- touchend: 手指离开屏幕时触发\n- touchcancel: 系统取消touch事件的时候粗发\n\n如果有偏差请到 这里查看详细[javascritp mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches)\n\n<!-- more -->\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // Invoke the appropriate handler depending on thew\n  // number of touch points.\n  switch (e.touches.length) {\n    case 1: handle_one_touch(e); break;\n    case 2: handle_two_touches(e); break;\n    case 3: handle_three_touches(e); break;\n    default: console.log(\"Not supported\"); break;\n  }\n},\nfalse);\n```\n\n### 具体说一下触发后生成的event事件 通过回调传递过去\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // e.touches 当前屏幕上所有手指的列表\n  // e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches\n  // e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches\n  // 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：\n  // clientX / clientY:      触摸点相对浏览器窗口的位置\n  // pageX / pageY:       触摸点相对于页面的位置\n  // screenX  /  screenY:    触摸点相对于屏幕的位置\n  // identifier:        touch对象的ID\n}\n }, false);\n```\n\n具体事件看来下, 接下来就做一个小小的demo来加深下理解\n\n### html结构\n\n```html\n<div id=\"common_wrap\" class=\"common-wrap\">\n    <h4 class=\"common-kit__h4\">在区域内向左右滑动</h4>\n        <!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 -->\n        <ul class=\"common-kit__list\" id=\"mask\" style=\"left:0px\">\n            <li><a href=\"javascript:;\">111</a></li>\n            <li><a href=\"javascript:;\">222</a></li>\n            <li><a href=\"javascript:;\">333</a></li>\n            <li><a href=\"javascript:;\">444</a></li>\n            <li><a href=\"javascript:;\">555</a></li>\n            <li><a href=\"javascript:;\">666</a></li>\n        </ul>\n</div>\n```\n\n### 具体样式实现代码\n\n```css\n.common-wrap{\n    width: 100%;\n    height: 105px;\n    border-bottom: 8px solid #eee;\n}\n.common-kit__h4{\n    font-size: 14px;\n    margin-top: 17px;\n    margin-left: 8px;\n    letter-spacing: 0.2px;\n}\n.common-kit{\n    width: 100%;\n    position: relative;\n}\n.common-kit__list{\n    width: 558px;\n    position: absolute;\n    margin-top: 10px;\n    height: 80px;\n}\n.common-kit__list li{\n    position: relative;\n    list-style: none;\n    width: 80px;\n    height: 80px;\n    background-color: #eee;\n    float: left;\n    margin-left: 13px;\n}\n.common-kit__list li a{\n    text-decoration: none;\n    font-size: 12px;\n    position: absolute;\n    top:50%;\n    transform:translateY(-50%);\n    text-align: center;\n    padding: 0px 12px;\n}\n.common-kit__list li:first-child{\n    margin-left: 8px;\n}\n```\n\n### js代码实现以及注释原理\n\n```javascript\nfunction slidecommonkit(){\n\n    const mask = document.getElementById('mask');\n    const common_kit__list=document.querySelector('.common-kit__list');\n    const startPosition, endPosition, deltaX, deltaY, moveLength;\n    let commonkitLeft;\n\n    /*手指按下瞬间触发touchstart事件*/\n    mask.addEventListener('touchstart', e => {\n        commonkitLeft=parseInt(common_kit__list.style.left);\n        const touch = e.targetTouches[0];  //targetTouches位于当前DOM元素上的手指动作的列表\n        startPosition = {   //取屏幕上第一个手指相对于页面的坐标\n            x: touch.pageX,\n            y: touch.pageY\n        }\n    });\n\n    /*手指移动触发touchmove事件*/\n    mask.addEventListener('touchmove', function (e) {\n        var touch = e.targetTouches[0];\n        endPosition = {\n            x: touch.pageX,\n            y: touch.pageY\n        }\n\n        deltaX = endPosition.x - startPosition.x;   //移动到最后的坐标x - 开始时的坐标x\n        moveLength = Math.abs(deltaX);   //获得移动的x方向的距离\n\n        /*向左移动的函数*/\n        var swipeLeft=function(){\n            if( deltaX<(-30) ){   //这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动\n\n                if(Math.abs(commonkitLeft)+moveLength > ( common_kit__list.offsetWidth-window.innerWidth ) ){   //判断临界值\n                    common_kit__list.style.left=window.innerWidth-common_kit__list.offsetWidth+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft-moveLength+'px';  //上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）\n                }\n            }\n        }\n        swipeLeft();   //执行该函数\n\n        /*向右移动的函数*/\n        var swipeRight=function(){\n            if( deltaX>30 ){\n                /*主要是逻辑*/\n                if( commonkitLeft + moveLength > 0  ){\n                    common_kit__list.style.left=0+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft+moveLength+'px';\n                }\n            }\n        }\n        swipeRight();\n\n    });\n\n};\n\nslidecommonkit();\n```\n","source":"_posts/js移触屏滑动事件.md","raw":"---\ntitle: js移触屏滑动事件\ndate: 2017-06-07 09:22:00\ncategories: web前端\ntags:\n  - h5\ntype: \"categories\"\n---\n\n主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件\n\n## 介绍\n\n- touchstart: 手指放到屏幕上时触发\n- touchmove: 手指在屏幕上滑动式触发\n- touchend: 手指离开屏幕时触发\n- touchcancel: 系统取消touch事件的时候粗发\n\n如果有偏差请到 这里查看详细[javascritp mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches)\n\n<!-- more -->\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // Invoke the appropriate handler depending on thew\n  // number of touch points.\n  switch (e.touches.length) {\n    case 1: handle_one_touch(e); break;\n    case 2: handle_two_touches(e); break;\n    case 3: handle_three_touches(e); break;\n    default: console.log(\"Not supported\"); break;\n  }\n},\nfalse);\n```\n\n### 具体说一下触发后生成的event事件 通过回调传递过去\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // e.touches 当前屏幕上所有手指的列表\n  // e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches\n  // e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches\n  // 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：\n  // clientX / clientY:      触摸点相对浏览器窗口的位置\n  // pageX / pageY:       触摸点相对于页面的位置\n  // screenX  /  screenY:    触摸点相对于屏幕的位置\n  // identifier:        touch对象的ID\n}\n }, false);\n```\n\n具体事件看来下, 接下来就做一个小小的demo来加深下理解\n\n### html结构\n\n```html\n<div id=\"common_wrap\" class=\"common-wrap\">\n    <h4 class=\"common-kit__h4\">在区域内向左右滑动</h4>\n        <!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 -->\n        <ul class=\"common-kit__list\" id=\"mask\" style=\"left:0px\">\n            <li><a href=\"javascript:;\">111</a></li>\n            <li><a href=\"javascript:;\">222</a></li>\n            <li><a href=\"javascript:;\">333</a></li>\n            <li><a href=\"javascript:;\">444</a></li>\n            <li><a href=\"javascript:;\">555</a></li>\n            <li><a href=\"javascript:;\">666</a></li>\n        </ul>\n</div>\n```\n\n### 具体样式实现代码\n\n```css\n.common-wrap{\n    width: 100%;\n    height: 105px;\n    border-bottom: 8px solid #eee;\n}\n.common-kit__h4{\n    font-size: 14px;\n    margin-top: 17px;\n    margin-left: 8px;\n    letter-spacing: 0.2px;\n}\n.common-kit{\n    width: 100%;\n    position: relative;\n}\n.common-kit__list{\n    width: 558px;\n    position: absolute;\n    margin-top: 10px;\n    height: 80px;\n}\n.common-kit__list li{\n    position: relative;\n    list-style: none;\n    width: 80px;\n    height: 80px;\n    background-color: #eee;\n    float: left;\n    margin-left: 13px;\n}\n.common-kit__list li a{\n    text-decoration: none;\n    font-size: 12px;\n    position: absolute;\n    top:50%;\n    transform:translateY(-50%);\n    text-align: center;\n    padding: 0px 12px;\n}\n.common-kit__list li:first-child{\n    margin-left: 8px;\n}\n```\n\n### js代码实现以及注释原理\n\n```javascript\nfunction slidecommonkit(){\n\n    const mask = document.getElementById('mask');\n    const common_kit__list=document.querySelector('.common-kit__list');\n    const startPosition, endPosition, deltaX, deltaY, moveLength;\n    let commonkitLeft;\n\n    /*手指按下瞬间触发touchstart事件*/\n    mask.addEventListener('touchstart', e => {\n        commonkitLeft=parseInt(common_kit__list.style.left);\n        const touch = e.targetTouches[0];  //targetTouches位于当前DOM元素上的手指动作的列表\n        startPosition = {   //取屏幕上第一个手指相对于页面的坐标\n            x: touch.pageX,\n            y: touch.pageY\n        }\n    });\n\n    /*手指移动触发touchmove事件*/\n    mask.addEventListener('touchmove', function (e) {\n        var touch = e.targetTouches[0];\n        endPosition = {\n            x: touch.pageX,\n            y: touch.pageY\n        }\n\n        deltaX = endPosition.x - startPosition.x;   //移动到最后的坐标x - 开始时的坐标x\n        moveLength = Math.abs(deltaX);   //获得移动的x方向的距离\n\n        /*向左移动的函数*/\n        var swipeLeft=function(){\n            if( deltaX<(-30) ){   //这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动\n\n                if(Math.abs(commonkitLeft)+moveLength > ( common_kit__list.offsetWidth-window.innerWidth ) ){   //判断临界值\n                    common_kit__list.style.left=window.innerWidth-common_kit__list.offsetWidth+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft-moveLength+'px';  //上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）\n                }\n            }\n        }\n        swipeLeft();   //执行该函数\n\n        /*向右移动的函数*/\n        var swipeRight=function(){\n            if( deltaX>30 ){\n                /*主要是逻辑*/\n                if( commonkitLeft + moveLength > 0  ){\n                    common_kit__list.style.left=0+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft+moveLength+'px';\n                }\n            }\n        }\n        swipeRight();\n\n    });\n\n};\n\nslidecommonkit();\n```\n","slug":"js移触屏滑动事件","published":1,"updated":"2019-05-13T03:56:03.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebdl002na0dmidvgu29w","content":"<p>主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>touchstart: 手指放到屏幕上时触发</li>\n<li>touchmove: 手指在屏幕上滑动式触发</li>\n<li>touchend: 手指离开屏幕时触发</li>\n<li>touchcancel: 系统取消touch事件的时候粗发</li>\n</ul>\n<p>如果有偏差请到 这里查看详细<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches\" target=\"_blank\" rel=\"external\">javascritp mdn</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Invoke the appropriate handler depending on thew</span></div><div class=\"line\">  <span class=\"comment\">// number of touch points.</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (e.touches.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: handle_one_touch(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: handle_two_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: handle_three_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not supported\"</span>); <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"具体说一下触发后生成的event事件-通过回调传递过去\"><a href=\"#具体说一下触发后生成的event事件-通过回调传递过去\" class=\"headerlink\" title=\"具体说一下触发后生成的event事件 通过回调传递过去\"></a>具体说一下触发后生成的event事件 通过回调传递过去</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// e.touches 当前屏幕上所有手指的列表</span></div><div class=\"line\">  <span class=\"comment\">// e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：</span></div><div class=\"line\">  <span class=\"comment\">// clientX / clientY:      触摸点相对浏览器窗口的位置</span></div><div class=\"line\">  <span class=\"comment\">// pageX / pageY:       触摸点相对于页面的位置</span></div><div class=\"line\">  <span class=\"comment\">// screenX  /  screenY:    触摸点相对于屏幕的位置</span></div><div class=\"line\">  <span class=\"comment\">// identifier:        touch对象的ID</span></div><div class=\"line\">&#125;</div><div class=\"line\"> &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>具体事件看来下, 接下来就做一个小小的demo来加深下理解</p>\n<h3 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"common_wrap\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__h4\"</span>&gt;</span>在区域内向左右滑动<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__list\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mask\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"left:0px\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>555<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"具体样式实现代码\"><a href=\"#具体样式实现代码\" class=\"headerlink\" title=\"具体样式实现代码\"></a>具体样式实现代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.common-wrap</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">105px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">8px</span> solid <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__h4</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">17px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">558px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"js代码实现以及注释原理\"><a href=\"#js代码实现以及注释原理\" class=\"headerlink\" title=\"js代码实现以及注释原理\"></a>js代码实现以及注释原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slidecommonkit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> mask = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mask'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> common_kit__list=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.common-kit__list'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> startPosition, endPosition, deltaX, deltaY, moveLength;</div><div class=\"line\">    <span class=\"keyword\">let</span> commonkitLeft;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指按下瞬间触发touchstart事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">        commonkitLeft=<span class=\"built_in\">parseInt</span>(common_kit__list.style.left);</div><div class=\"line\">        <span class=\"keyword\">const</span> touch = e.targetTouches[<span class=\"number\">0</span>];  <span class=\"comment\">//targetTouches位于当前DOM元素上的手指动作的列表</span></div><div class=\"line\">        startPosition = &#123;   <span class=\"comment\">//取屏幕上第一个手指相对于页面的坐标</span></div><div class=\"line\">            x: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指移动触发touchmove事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touch = e.targetTouches[<span class=\"number\">0</span>];</div><div class=\"line\">        endPosition = &#123;</div><div class=\"line\">            <span class=\"attr\">x</span>: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        deltaX = endPosition.x - startPosition.x;   <span class=\"comment\">//移动到最后的坐标x - 开始时的坐标x</span></div><div class=\"line\">        moveLength = <span class=\"built_in\">Math</span>.abs(deltaX);   <span class=\"comment\">//获得移动的x方向的距离</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向左移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeLeft=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&lt;(<span class=\"number\">-30</span>) )&#123;   <span class=\"comment\">//这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(commonkitLeft)+moveLength &gt; ( common_kit__list.offsetWidth-<span class=\"built_in\">window</span>.innerWidth ) )&#123;   <span class=\"comment\">//判断临界值</span></div><div class=\"line\">                    common_kit__list.style.left=<span class=\"built_in\">window</span>.innerWidth-common_kit__list.offsetWidth+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft-moveLength+<span class=\"string\">'px'</span>;  <span class=\"comment\">//上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeLeft();   <span class=\"comment\">//执行该函数</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向右移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeRight=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&gt;<span class=\"number\">30</span> )&#123;</div><div class=\"line\">                <span class=\"comment\">/*主要是逻辑*/</span></div><div class=\"line\">                <span class=\"keyword\">if</span>( commonkitLeft + moveLength &gt; <span class=\"number\">0</span>  )&#123;</div><div class=\"line\">                    common_kit__list.style.left=<span class=\"number\">0</span>+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft+moveLength+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeRight();</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">slidecommonkit();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>touchstart: 手指放到屏幕上时触发</li>\n<li>touchmove: 手指在屏幕上滑动式触发</li>\n<li>touchend: 手指离开屏幕时触发</li>\n<li>touchcancel: 系统取消touch事件的时候粗发</li>\n</ul>\n<p>如果有偏差请到 这里查看详细<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches\" target=\"_blank\" rel=\"external\">javascritp mdn</a></p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Invoke the appropriate handler depending on thew</span></div><div class=\"line\">  <span class=\"comment\">// number of touch points.</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (e.touches.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: handle_one_touch(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: handle_two_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: handle_three_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not supported\"</span>); <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"具体说一下触发后生成的event事件-通过回调传递过去\"><a href=\"#具体说一下触发后生成的event事件-通过回调传递过去\" class=\"headerlink\" title=\"具体说一下触发后生成的event事件 通过回调传递过去\"></a>具体说一下触发后生成的event事件 通过回调传递过去</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// e.touches 当前屏幕上所有手指的列表</span></div><div class=\"line\">  <span class=\"comment\">// e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：</span></div><div class=\"line\">  <span class=\"comment\">// clientX / clientY:      触摸点相对浏览器窗口的位置</span></div><div class=\"line\">  <span class=\"comment\">// pageX / pageY:       触摸点相对于页面的位置</span></div><div class=\"line\">  <span class=\"comment\">// screenX  /  screenY:    触摸点相对于屏幕的位置</span></div><div class=\"line\">  <span class=\"comment\">// identifier:        touch对象的ID</span></div><div class=\"line\">&#125;</div><div class=\"line\"> &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>具体事件看来下, 接下来就做一个小小的demo来加深下理解</p>\n<h3 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"common_wrap\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__h4\"</span>&gt;</span>在区域内向左右滑动<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__list\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mask\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"left:0px\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>555<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"具体样式实现代码\"><a href=\"#具体样式实现代码\" class=\"headerlink\" title=\"具体样式实现代码\"></a>具体样式实现代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.common-wrap</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">105px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">8px</span> solid <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__h4</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">17px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">558px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"js代码实现以及注释原理\"><a href=\"#js代码实现以及注释原理\" class=\"headerlink\" title=\"js代码实现以及注释原理\"></a>js代码实现以及注释原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slidecommonkit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> mask = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mask'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> common_kit__list=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.common-kit__list'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> startPosition, endPosition, deltaX, deltaY, moveLength;</div><div class=\"line\">    <span class=\"keyword\">let</span> commonkitLeft;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指按下瞬间触发touchstart事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">        commonkitLeft=<span class=\"built_in\">parseInt</span>(common_kit__list.style.left);</div><div class=\"line\">        <span class=\"keyword\">const</span> touch = e.targetTouches[<span class=\"number\">0</span>];  <span class=\"comment\">//targetTouches位于当前DOM元素上的手指动作的列表</span></div><div class=\"line\">        startPosition = &#123;   <span class=\"comment\">//取屏幕上第一个手指相对于页面的坐标</span></div><div class=\"line\">            x: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指移动触发touchmove事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touch = e.targetTouches[<span class=\"number\">0</span>];</div><div class=\"line\">        endPosition = &#123;</div><div class=\"line\">            <span class=\"attr\">x</span>: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        deltaX = endPosition.x - startPosition.x;   <span class=\"comment\">//移动到最后的坐标x - 开始时的坐标x</span></div><div class=\"line\">        moveLength = <span class=\"built_in\">Math</span>.abs(deltaX);   <span class=\"comment\">//获得移动的x方向的距离</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向左移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeLeft=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&lt;(<span class=\"number\">-30</span>) )&#123;   <span class=\"comment\">//这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(commonkitLeft)+moveLength &gt; ( common_kit__list.offsetWidth-<span class=\"built_in\">window</span>.innerWidth ) )&#123;   <span class=\"comment\">//判断临界值</span></div><div class=\"line\">                    common_kit__list.style.left=<span class=\"built_in\">window</span>.innerWidth-common_kit__list.offsetWidth+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft-moveLength+<span class=\"string\">'px'</span>;  <span class=\"comment\">//上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeLeft();   <span class=\"comment\">//执行该函数</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向右移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeRight=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&gt;<span class=\"number\">30</span> )&#123;</div><div class=\"line\">                <span class=\"comment\">/*主要是逻辑*/</span></div><div class=\"line\">                <span class=\"keyword\">if</span>( commonkitLeft + moveLength &gt; <span class=\"number\">0</span>  )&#123;</div><div class=\"line\">                    common_kit__list.style.left=<span class=\"number\">0</span>+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft+moveLength+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeRight();</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">slidecommonkit();</div></pre></td></tr></table></figure>"},{"layout":"post","title":"node使用node-smushit命令行来压缩你的图片","date":"2018-03-12T02:44:34.000Z","_content":"\n个人不习惯在线对图片进行压缩, 所以就用命令行来解决这个问题, 这里选择node, 当然还有很多语言来做这件事.\n\n\n> [github项目地址](https://github.com/colorhook/node-smushit)\n\n安装:\n\n`npm install -g node-smushit`\n\n安装后就可以使用`smushit -h`来查看相关参数\n\n\nexample:\n压缩images目录的图片, 如果需要遍历子目录请加`- R`参数\n`smushit images`\n\n\n压缩单个文件,`user-default.png`\n\n`smushit user-default.png`\n","source":"_posts/node使用node-smushit命令行来压缩你的图片.md","raw":"---\nlayout: post\ntitle: node使用node-smushit命令行来压缩你的图片\ndate: 2018-03-12 10:44:34\ntags:\n    - node\n    - 压缩图片\n    - smushit\ncategories: \"算法\"\n---\n\n个人不习惯在线对图片进行压缩, 所以就用命令行来解决这个问题, 这里选择node, 当然还有很多语言来做这件事.\n\n\n> [github项目地址](https://github.com/colorhook/node-smushit)\n\n安装:\n\n`npm install -g node-smushit`\n\n安装后就可以使用`smushit -h`来查看相关参数\n\n\nexample:\n压缩images目录的图片, 如果需要遍历子目录请加`- R`参数\n`smushit images`\n\n\n压缩单个文件,`user-default.png`\n\n`smushit user-default.png`\n","slug":"node使用node-smushit命令行来压缩你的图片","published":1,"updated":"2019-05-13T03:56:03.255Z","comments":1,"photos":[],"link":"","_id":"cjvluebdn002ra0dmb7m9nznc","content":"<p>个人不习惯在线对图片进行压缩, 所以就用命令行来解决这个问题, 这里选择node, 当然还有很多语言来做这件事.</p>\n<blockquote>\n<p><a href=\"https://github.com/colorhook/node-smushit\" target=\"_blank\" rel=\"external\">github项目地址</a></p>\n</blockquote>\n<p>安装:</p>\n<p><code>npm install -g node-smushit</code></p>\n<p>安装后就可以使用<code>smushit -h</code>来查看相关参数</p>\n<p>example:<br>压缩images目录的图片, 如果需要遍历子目录请加<code>- R</code>参数<br><code>smushit images</code></p>\n<p>压缩单个文件,<code>user-default.png</code></p>\n<p><code>smushit user-default.png</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>个人不习惯在线对图片进行压缩, 所以就用命令行来解决这个问题, 这里选择node, 当然还有很多语言来做这件事.</p>\n<blockquote>\n<p><a href=\"https://github.com/colorhook/node-smushit\" target=\"_blank\" rel=\"external\">github项目地址</a></p>\n</blockquote>\n<p>安装:</p>\n<p><code>npm install -g node-smushit</code></p>\n<p>安装后就可以使用<code>smushit -h</code>来查看相关参数</p>\n<p>example:<br>压缩images目录的图片, 如果需要遍历子目录请加<code>- R</code>参数<br><code>smushit images</code></p>\n<p>压缩单个文件,<code>user-default.png</code></p>\n<p><code>smushit user-default.png</code></p>\n"},{"layout":"post","title":"linux系统文件夹介绍","date":"2017-10-17T02:51:00.000Z","_content":"\n之前配置环境的时候遇到mac文件夹里面放的什么文件有点怀疑,  然后就有了这个,  不过是linux的文件夹常规...基本上是一样的.\n\n### `/home`\n\n普通用户的家目录（$HOME目录。\n\n> 在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。\n\n### `/root`\n\n用户root的$HOME目录\n\n> 系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。\n\n### `/etc`\n\n全局的配置文件存放目录。\n\n> 系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。\n\n### `/usr`\n\n这个目录中包含了命令库文件和在通常操作中不会修改的文件。\n\n> 这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。\n\n### `/usr/lib`\n\n目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。\n\n> 这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。\n\n### `/usr/bin`\n\n一般使用者使用并且不是系统自检等所必需可执行文件的目录。\n\n> 此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。\n\n### `/usr/sbin`\n\n管理员使用的非系统必须的可执行文件存放目录。\n\n> 此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。\n\n\n### `/usr/share`\n\n存放共享文件的目录。\n\n> 在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。\n\n### `/usr/include`\n\nC程序语言编译使用的头文件。\n\n> linux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。\n\n\n### `/usr/local`\n\n安装本地程序的一般默认路径。\n\n> 当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。\n\n### `/opt`\n\n可择的文件目录。\n\n> 这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。\n\n### `/media`\n\n挂载的媒体设备目录。\n\n> 挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。\n\n### `/var`\n\n内容经常变化的目录。\n\n> 此目录下文件的大小可能会改变， 如缓冲文件， 日志文件， 缓存文件， 等一般都存放在这里。\n\n### `/tmp`\n\n临时文件目录。\n\n> 该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。\n","source":"_posts/linux系统文件夹介绍.md","raw":"---\nlayout: post\ntitle: linux系统文件夹介绍\ndate: 2017-10-17 10:51:00\ntags:\n    - linux\n    - linux常规\ncategories: \"linux命令\"\n---\n\n之前配置环境的时候遇到mac文件夹里面放的什么文件有点怀疑,  然后就有了这个,  不过是linux的文件夹常规...基本上是一样的.\n\n### `/home`\n\n普通用户的家目录（$HOME目录。\n\n> 在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。\n\n### `/root`\n\n用户root的$HOME目录\n\n> 系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。\n\n### `/etc`\n\n全局的配置文件存放目录。\n\n> 系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。\n\n### `/usr`\n\n这个目录中包含了命令库文件和在通常操作中不会修改的文件。\n\n> 这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。\n\n### `/usr/lib`\n\n目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。\n\n> 这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。\n\n### `/usr/bin`\n\n一般使用者使用并且不是系统自检等所必需可执行文件的目录。\n\n> 此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。\n\n### `/usr/sbin`\n\n管理员使用的非系统必须的可执行文件存放目录。\n\n> 此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。\n\n\n### `/usr/share`\n\n存放共享文件的目录。\n\n> 在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。\n\n### `/usr/include`\n\nC程序语言编译使用的头文件。\n\n> linux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。\n\n\n### `/usr/local`\n\n安装本地程序的一般默认路径。\n\n> 当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。\n\n### `/opt`\n\n可择的文件目录。\n\n> 这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。\n\n### `/media`\n\n挂载的媒体设备目录。\n\n> 挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。\n\n### `/var`\n\n内容经常变化的目录。\n\n> 此目录下文件的大小可能会改变， 如缓冲文件， 日志文件， 缓存文件， 等一般都存放在这里。\n\n### `/tmp`\n\n临时文件目录。\n\n> 该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。\n","slug":"linux系统文件夹介绍","published":1,"updated":"2019-05-13T03:56:03.254Z","comments":1,"photos":[],"link":"","_id":"cjvluebdo002ta0dmlc97jeb3","content":"<p>之前配置环境的时候遇到mac文件夹里面放的什么文件有点怀疑,  然后就有了这个,  不过是linux的文件夹常规…基本上是一样的.</p>\n<h3 id=\"home\"><a href=\"#home\" class=\"headerlink\" title=\"/home\"></a><code>/home</code></h3><p>普通用户的家目录（$HOME目录。</p>\n<blockquote>\n<p>在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。</p>\n</blockquote>\n<h3 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"/root\"></a><code>/root</code></h3><p>用户root的$HOME目录</p>\n<blockquote>\n<p>系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。</p>\n</blockquote>\n<h3 id=\"etc\"><a href=\"#etc\" class=\"headerlink\" title=\"/etc\"></a><code>/etc</code></h3><p>全局的配置文件存放目录。</p>\n<blockquote>\n<p>系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。</p>\n</blockquote>\n<h3 id=\"usr\"><a href=\"#usr\" class=\"headerlink\" title=\"/usr\"></a><code>/usr</code></h3><p>这个目录中包含了命令库文件和在通常操作中不会修改的文件。</p>\n<blockquote>\n<p>这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。</p>\n</blockquote>\n<h3 id=\"usr-lib\"><a href=\"#usr-lib\" class=\"headerlink\" title=\"/usr/lib\"></a><code>/usr/lib</code></h3><p>目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。</p>\n<blockquote>\n<p>这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。</p>\n</blockquote>\n<h3 id=\"usr-bin\"><a href=\"#usr-bin\" class=\"headerlink\" title=\"/usr/bin\"></a><code>/usr/bin</code></h3><p>一般使用者使用并且不是系统自检等所必需可执行文件的目录。</p>\n<blockquote>\n<p>此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。</p>\n</blockquote>\n<h3 id=\"usr-sbin\"><a href=\"#usr-sbin\" class=\"headerlink\" title=\"/usr/sbin\"></a><code>/usr/sbin</code></h3><p>管理员使用的非系统必须的可执行文件存放目录。</p>\n<blockquote>\n<p>此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。</p>\n</blockquote>\n<h3 id=\"usr-share\"><a href=\"#usr-share\" class=\"headerlink\" title=\"/usr/share\"></a><code>/usr/share</code></h3><p>存放共享文件的目录。</p>\n<blockquote>\n<p>在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。</p>\n</blockquote>\n<h3 id=\"usr-include\"><a href=\"#usr-include\" class=\"headerlink\" title=\"/usr/include\"></a><code>/usr/include</code></h3><p>C程序语言编译使用的头文件。</p>\n<blockquote>\n<p>linux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。</p>\n</blockquote>\n<h3 id=\"usr-local\"><a href=\"#usr-local\" class=\"headerlink\" title=\"/usr/local\"></a><code>/usr/local</code></h3><p>安装本地程序的一般默认路径。</p>\n<blockquote>\n<p>当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。</p>\n</blockquote>\n<h3 id=\"opt\"><a href=\"#opt\" class=\"headerlink\" title=\"/opt\"></a><code>/opt</code></h3><p>可择的文件目录。</p>\n<blockquote>\n<p>这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。</p>\n</blockquote>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"/media\"></a><code>/media</code></h3><p>挂载的媒体设备目录。</p>\n<blockquote>\n<p>挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。</p>\n</blockquote>\n<h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"/var\"></a><code>/var</code></h3><p>内容经常变化的目录。</p>\n<blockquote>\n<p>此目录下文件的大小可能会改变， 如缓冲文件， 日志文件， 缓存文件， 等一般都存放在这里。</p>\n</blockquote>\n<h3 id=\"tmp\"><a href=\"#tmp\" class=\"headerlink\" title=\"/tmp\"></a><code>/tmp</code></h3><p>临时文件目录。</p>\n<blockquote>\n<p>该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>之前配置环境的时候遇到mac文件夹里面放的什么文件有点怀疑,  然后就有了这个,  不过是linux的文件夹常规…基本上是一样的.</p>\n<h3 id=\"home\"><a href=\"#home\" class=\"headerlink\" title=\"/home\"></a><code>/home</code></h3><p>普通用户的家目录（$HOME目录。</p>\n<blockquote>\n<p>在Linux机器上，用户主目录通常直接或间接地置在此目录下。其结构通常由本地机的管理员来决定。通常而言，系统的每个用户都自己的家目录，目录以用户名作为名字存放在/home下面（例如quietheart用户，其家目录的名字为/home/quietheart。该目录中保存了绝大多数的用户文件(用户自己的配置文件，定制文件，文档，数据等)，root用户除外（参见后面的/root目录。由于这个目录包含了用户实际的数据，通常系统管理员为这个目录单独挂载一个独立的磁盘分区，这样这个目录的文件系统格式就可能和其他目录不一样了（尽管表面上看，这个目录还是属于根目录的一棵子树上），有利于数据的维护。</p>\n</blockquote>\n<h3 id=\"root\"><a href=\"#root\" class=\"headerlink\" title=\"/root\"></a><code>/root</code></h3><p>用户root的$HOME目录</p>\n<blockquote>\n<p>系统管理员(就是root用户或超级用户)的主目录比较特殊，不存放在/home中，而是直接放在/root目录下了。</p>\n</blockquote>\n<h3 id=\"etc\"><a href=\"#etc\" class=\"headerlink\" title=\"/etc\"></a><code>/etc</code></h3><p>全局的配置文件存放目录。</p>\n<blockquote>\n<p>系统和程序一般都可以通过修改相应的配置文件，来进行配置。例如，要配置系统开机的时候启动那些程序，配置某个程序启动的时候显示什么样的风格等等。通常这些配置文件都集中存放在/etc目录中，所以想要配置什么东西的话，可以在/etc下面寻找我们可能需要修改的文件。一些大型套件，如X11，在 /etc 下它们自己的子目录。系统配置文件可以放在这里或在 /usr/etc。 不过所程序总是在 /etc 目录下查找所需的配置文件，你也可以将这些文件链接到目录 /usr/etc。另外，还一个需要注意的常见现象就是，当某个程序在某个用户下运行的时候，可能会在该用户的家目录中生成一个配置文件（一般这个文件最开始就是/etc下相应配置文件的拷贝，存放相应于“当前用户”的配置，这样当前用户可以通过配置这个家目录的配置文件，来改变程序的行为，并且这个行为只是该用户特的。原因就是：一般来说一个程序启动，如果需要读取一些配置文件的话，它会首先读取当前用户家目录的配置文件，如果存在就使用；如果不存在它就到/etc下读取全局的配置文件进而启动程序。就是这个配置文件不自动生成，我们手动在自己的家目录中创建一个文件的话，也有许多程序会首先读取到这个家目录的文件并且以它的配置作为启动的选项（例如我们可以在家目录中创建vim程序的配置文件.vimrc，来配置自己的vim程序。</p>\n</blockquote>\n<h3 id=\"usr\"><a href=\"#usr\" class=\"headerlink\" title=\"/usr\"></a><code>/usr</code></h3><p>这个目录中包含了命令库文件和在通常操作中不会修改的文件。</p>\n<blockquote>\n<p>这个目录对于系统来说也是一个非常重要的目录，其地位类似Windows上面的”Program Files”目录（请原谅我可能这样做比较不太恰当^_^。安装程序的时候，默认就是安装在此文件内部某个子文件夹内。输入命令后系统默认执行/usr/bin下的程序（当然，前提是这个目录的路径已经被添加到了系统的环境变量中。此目录通常也会挂载一个独立的磁盘分区，它应保存共享只读类文件，这样它可以被运行Linux的不同主机挂载。</p>\n</blockquote>\n<h3 id=\"usr-lib\"><a href=\"#usr-lib\" class=\"headerlink\" title=\"/usr/lib\"></a><code>/usr/lib</code></h3><p>目标库文件，包括动态连接库加上一些通常不是直接调用的可执行文件的存放位置。</p>\n<blockquote>\n<p>这个目录功能类似/lib目录，理说，这里存放的文件应该是/bin目录下程序所需要的库文件的存放地，也不排除一些例外的情况。</p>\n</blockquote>\n<h3 id=\"usr-bin\"><a href=\"#usr-bin\" class=\"headerlink\" title=\"/usr/bin\"></a><code>/usr/bin</code></h3><p>一般使用者使用并且不是系统自检等所必需可执行文件的目录。</p>\n<blockquote>\n<p>此目录相当于根文件系统下的对应目录（/bin，非启动系统，非修复系统以及非本地安装的程序一般都放在此目录下。</p>\n</blockquote>\n<h3 id=\"usr-sbin\"><a href=\"#usr-sbin\" class=\"headerlink\" title=\"/usr/sbin\"></a><code>/usr/sbin</code></h3><p>管理员使用的非系统必须的可执行文件存放目录。</p>\n<blockquote>\n<p>此目录相当于根文件系统下的对应目录（/sbin，保存系统管理程序的二进制文件，并且这些文件不是系统启动或文件系统挂载 /usr 目录或修复系统所必需的。</p>\n</blockquote>\n<h3 id=\"usr-share\"><a href=\"#usr-share\" class=\"headerlink\" title=\"/usr/share\"></a><code>/usr/share</code></h3><p>存放共享文件的目录。</p>\n<blockquote>\n<p>在此目录下不同的子目录中保存了同一个操作系统在不同构架下工作时特定应用程序的共享数据(例如程序文档信息)。使用者可以找到通常放在 /usr/doc 或 /usr/lib 或 /usr/man 目录下的这些类似数据。</p>\n</blockquote>\n<h3 id=\"usr-include\"><a href=\"#usr-include\" class=\"headerlink\" title=\"/usr/include\"></a><code>/usr/include</code></h3><p>C程序语言编译使用的头文件。</p>\n<blockquote>\n<p>linux下开发和编译应用程序所需要的头文件一般都存放在这里，通过头文件来使用某些库函数。默认来说这个路径被添加到了环境变量中，这样编译开发程序的时候编译器会自动搜索这个路径，从中找到你的程序中可能包含的头文件。</p>\n</blockquote>\n<h3 id=\"usr-local\"><a href=\"#usr-local\" class=\"headerlink\" title=\"/usr/local\"></a><code>/usr/local</code></h3><p>安装本地程序的一般默认路径。</p>\n<blockquote>\n<p>当我们下载一个程序源代码，编译并且安装的时候，如果不特别指定安装的程序路径，那么默认会将程序相关的文件安装到这个目录的对应目录下。例如，安装的程序可执行文件被安装（安装实质就是复制到了/usr/local/bin下面，此程序（可执行文件所需要依赖的库文件被安装到了/usr/local/lib目录下，被安装的软件如果是某个开发库（例如Qt，Gtk等那么相应的头文件可能就被安装到了/usr/local/include中等等。也就是说，这个目录存放的内容，一般都是我们后来自己安装的软件的默认路径，如果择了这个默认路径作为软件的安装路径，被安装的软件的所文件都限制在这个目录中，其中的子目录就相应于根目录的子目录。</p>\n</blockquote>\n<h3 id=\"opt\"><a href=\"#opt\" class=\"headerlink\" title=\"/opt\"></a><code>/opt</code></h3><p>可择的文件目录。</p>\n<blockquote>\n<p>这个目录表示的是可择的意思，些自定义软件包或者第方工具，就可以安装在这里。比如在Fedora Core 5.0中，OpenOffice就是安装在这里。些我们自己编译的软件包，就可以安装在这个目录中；通过源码包安装的软件，可以把它们的安装路径设置成/opt这样来安装。这个目录的作用一点类似/usr/local。</p>\n</blockquote>\n<h3 id=\"media\"><a href=\"#media\" class=\"headerlink\" title=\"/media\"></a><code>/media</code></h3><p>挂载的媒体设备目录。</p>\n<blockquote>\n<p>挂载的媒体设备目录，一般外部设备挂载到这里，例如cdrom等。比如我们插入一个U盘，我们一般会发现，Linux自动在这个目录下建立一个disk目录，然后把U盘挂载到这个disk目录上，通过访问这个disk来访问U盘。</p>\n</blockquote>\n<h3 id=\"var\"><a href=\"#var\" class=\"headerlink\" title=\"/var\"></a><code>/var</code></h3><p>内容经常变化的目录。</p>\n<blockquote>\n<p>此目录下文件的大小可能会改变， 如缓冲文件， 日志文件， 缓存文件， 等一般都存放在这里。</p>\n</blockquote>\n<h3 id=\"tmp\"><a href=\"#tmp\" class=\"headerlink\" title=\"/tmp\"></a><code>/tmp</code></h3><p>临时文件目录。</p>\n<blockquote>\n<p>该目录存放系统中的一些临时文件，文件可能会被系统自动清空。的系统直接把tmpfs类型的文件系统挂载到这个目录上，tmpfs文件系统由Linux内核支持，在这个文件系统中的数据，实际上是内存中的，由于内存的数据断电易失，当系统重新启动的时候我们就会发现这个目录被清空了。</p>\n</blockquote>\n"},{"title":"react-native中android环境问题","date":"2017-06-13T02:37:51.000Z","comments":0,"_content":"\n### react-native 中android环境总是报错\n\n记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制\n\n<!-- more -->\n\n具体问题之后解释\n\n```base\n* What went wrong:\nA problem occurred evaluating project ':app'.\n> java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 11.564 secs\nCould not install the app on the device, read the error above for details.\nMake sure you have an Android emulator running or a device connected and have\nset up your Android development environment:\nhttps://facebook.github.io/react-native/docs/android-setup.html\n```\n\n### 解决办法\n\n> 项目主要针对自己环境解决对应bug, 如果不知道, 请run `react-native run-android debug`来查看具体出错原因\n> 由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了\n\n\n```javascritp\nandroid: {\n    compileSdkVersion 23\n    buildToolsVersion \"25.0.0\"\n    ...\n}\n```\n","source":"_posts/react-native中android环境问题.md","raw":"---\ntitle: react-native中android环境问题\ndate: 2017-06-13 10:37:51\ntags:\n  - react-native\n  - RN-android\ncategories: \"react-native踩坑记\"\ncomments: false\n---\n\n### react-native 中android环境总是报错\n\n记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制\n\n<!-- more -->\n\n具体问题之后解释\n\n```base\n* What went wrong:\nA problem occurred evaluating project ':app'.\n> java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 11.564 secs\nCould not install the app on the device, read the error above for details.\nMake sure you have an Android emulator running or a device connected and have\nset up your Android development environment:\nhttps://facebook.github.io/react-native/docs/android-setup.html\n```\n\n### 解决办法\n\n> 项目主要针对自己环境解决对应bug, 如果不知道, 请run `react-native run-android debug`来查看具体出错原因\n> 由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了\n\n\n```javascritp\nandroid: {\n    compileSdkVersion 23\n    buildToolsVersion \"25.0.0\"\n    ...\n}\n```\n","slug":"react-native中android环境问题","published":1,"updated":"2019-05-13T03:56:03.256Z","layout":"post","photos":[],"link":"","_id":"cjvluebdr002wa0dmjvekpebj","content":"<h3 id=\"react-native-中android环境总是报错\"><a href=\"#react-native-中android环境总是报错\" class=\"headerlink\" title=\"react-native 中android环境总是报错\"></a>react-native 中android环境总是报错</h3><p>记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制</p>\n<a id=\"more\"></a>\n<p>具体问题之后解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* What went wrong:</div><div class=\"line\">A problem occurred evaluating project &apos;:app&apos;.</div><div class=\"line\">&gt; java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0</div><div class=\"line\"></div><div class=\"line\">* Try:</div><div class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class=\"line\"></div><div class=\"line\">BUILD FAILED</div><div class=\"line\"></div><div class=\"line\">Total time: 11.564 secs</div><div class=\"line\">Could not install the app on the device, read the error above for details.</div><div class=\"line\">Make sure you have an Android emulator running or a device connected and have</div><div class=\"line\">set up your Android development environment:</div><div class=\"line\">https://facebook.github.io/react-native/docs/android-setup.html</div></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><blockquote>\n<p>项目主要针对自己环境解决对应bug, 如果不知道, 请run <code>react-native run-android debug</code>来查看具体出错原因<br>由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android: &#123;</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    buildToolsVersion &quot;25.0.0&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"react-native-中android环境总是报错\"><a href=\"#react-native-中android环境总是报错\" class=\"headerlink\" title=\"react-native 中android环境总是报错\"></a>react-native 中android环境总是报错</h3><p>记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制</p>","more":"<p>具体问题之后解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* What went wrong:</div><div class=\"line\">A problem occurred evaluating project &apos;:app&apos;.</div><div class=\"line\">&gt; java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0</div><div class=\"line\"></div><div class=\"line\">* Try:</div><div class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class=\"line\"></div><div class=\"line\">BUILD FAILED</div><div class=\"line\"></div><div class=\"line\">Total time: 11.564 secs</div><div class=\"line\">Could not install the app on the device, read the error above for details.</div><div class=\"line\">Make sure you have an Android emulator running or a device connected and have</div><div class=\"line\">set up your Android development environment:</div><div class=\"line\">https://facebook.github.io/react-native/docs/android-setup.html</div></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><blockquote>\n<p>项目主要针对自己环境解决对应bug, 如果不知道, 请run <code>react-native run-android debug</code>来查看具体出错原因<br>由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android: &#123;</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    buildToolsVersion &quot;25.0.0&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"react-native中手指滑动事件介绍","date":"2017-09-07T06:49:59.000Z","_content":"","source":"_posts/react-native中手指滑动事件介绍.md","raw":"---\nlayout: post\ntitle: react-native中手指滑动事件介绍\ndate: 2017-09-07 14:49:59\ntags:\n---\n","slug":"react-native中手指滑动事件介绍","published":1,"updated":"2019-05-13T03:56:03.256Z","comments":1,"photos":[],"link":"","_id":"cjvluebds002ya0dmvw8gtvfe","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react-native地区选择器","date":"2017-06-22T03:34:16.000Z","_content":"","source":"_posts/react-native地区选择器.md","raw":"---\ntitle: react-native地区选择器\ndate: 2017-06-22 11:34:16\ntags:\n---\n","slug":"react-native地区选择器","published":1,"updated":"2019-05-13T03:56:03.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebdt0032a0dmuhg4y2nj","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"react-native导航的那些事","date":"2017-09-02T01:22:45.000Z","_content":"\n## 库的选择\n> react-native在0.43之后就不更新`navagator`组件, 官方给出了一个`react-navagation`库, 当然除了这个还有`react-native-navigator`, 之前使用的是后者, 在写我这个聊天工具的时候因为要兼容`android`和`ios`后者配置起来总是有一些小问题,  然后就退出了`react-native-navigator`阵营, 当然,想对来说 后者好理解一点, \n\n### `react-navigation`\n\n> 先占坑, 有时间在说[官网](https://reactnavigation.org/docs/navigators/tab)\n> [中文资料](https://segmentfault.com/a/1190000009877220#articleHeader3)\n\n","source":"_posts/react-native导航的那些事.md","raw":"---\nlayout: post\ntitle: react-native导航的那些事\ndate: 2017-09-02 09:22:45\ntags:\n    - react-native\n---\n\n## 库的选择\n> react-native在0.43之后就不更新`navagator`组件, 官方给出了一个`react-navagation`库, 当然除了这个还有`react-native-navigator`, 之前使用的是后者, 在写我这个聊天工具的时候因为要兼容`android`和`ios`后者配置起来总是有一些小问题,  然后就退出了`react-native-navigator`阵营, 当然,想对来说 后者好理解一点, \n\n### `react-navigation`\n\n> 先占坑, 有时间在说[官网](https://reactnavigation.org/docs/navigators/tab)\n> [中文资料](https://segmentfault.com/a/1190000009877220#articleHeader3)\n\n","slug":"react-native导航的那些事","published":1,"updated":"2019-05-13T03:56:03.256Z","comments":1,"photos":[],"link":"","_id":"cjvluebdv0034a0dm9gbi8s6d","content":"<h2 id=\"库的选择\"><a href=\"#库的选择\" class=\"headerlink\" title=\"库的选择\"></a>库的选择</h2><blockquote>\n<p>react-native在0.43之后就不更新<code>navagator</code>组件, 官方给出了一个<code>react-navagation</code>库, 当然除了这个还有<code>react-native-navigator</code>, 之前使用的是后者, 在写我这个聊天工具的时候因为要兼容<code>android</code>和<code>ios</code>后者配置起来总是有一些小问题,  然后就退出了<code>react-native-navigator</code>阵营, 当然,想对来说 后者好理解一点, </p>\n</blockquote>\n<h3 id=\"react-navigation\"><a href=\"#react-navigation\" class=\"headerlink\" title=\"react-navigation\"></a><code>react-navigation</code></h3><blockquote>\n<p>先占坑, 有时间在说<a href=\"https://reactnavigation.org/docs/navigators/tab\" target=\"_blank\" rel=\"external\">官网</a><br><a href=\"https://segmentfault.com/a/1190000009877220#articleHeader3\" target=\"_blank\" rel=\"external\">中文资料</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"库的选择\"><a href=\"#库的选择\" class=\"headerlink\" title=\"库的选择\"></a>库的选择</h2><blockquote>\n<p>react-native在0.43之后就不更新<code>navagator</code>组件, 官方给出了一个<code>react-navagation</code>库, 当然除了这个还有<code>react-native-navigator</code>, 之前使用的是后者, 在写我这个聊天工具的时候因为要兼容<code>android</code>和<code>ios</code>后者配置起来总是有一些小问题,  然后就退出了<code>react-native-navigator</code>阵营, 当然,想对来说 后者好理解一点, </p>\n</blockquote>\n<h3 id=\"react-navigation\"><a href=\"#react-navigation\" class=\"headerlink\" title=\"react-navigation\"></a><code>react-navigation</code></h3><blockquote>\n<p>先占坑, 有时间在说<a href=\"https://reactnavigation.org/docs/navigators/tab\" target=\"_blank\" rel=\"external\">官网</a><br><a href=\"https://segmentfault.com/a/1190000009877220#articleHeader3\" target=\"_blank\" rel=\"external\">中文资料</a></p>\n</blockquote>\n"},{"title":"react-redux小型项目感受","date":"2017-06-06T01:25:43.000Z","_content":"\n## 前言\n\n> 前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的\n> 后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的\n\n<!-- more -->\n","source":"_posts/react-redux小型项目感受.md","raw":"---\ntitle: react-redux小型项目感受\ndate: 2017-06-06 09:25:43\ntags:\n  - react\n  - redux\n---\n\n## 前言\n\n> 前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的\n> 后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的\n\n<!-- more -->\n","slug":"react-redux小型项目感受","published":1,"updated":"2019-05-13T03:56:03.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebdw0039a0dmdwiqhnvz","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的<br>后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的</p>\n</blockquote>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的<br>后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的</p>\n</blockquote>","more":""},{"title":"react-native开发中常见的坑","date":"2017-06-29T02:45:26.000Z","_content":"\n\n### [前人总结](http://www.jianshu.com/p/98c8f2a970eb)\n","source":"_posts/react-native开发中常见的坑.md","raw":"---\ntitle: react-native开发中常见的坑\ndate: 2017-06-29 10:45:26\ntags:\n---\n\n\n### [前人总结](http://www.jianshu.com/p/98c8f2a970eb)\n","slug":"react-native开发中常见的坑","published":1,"updated":"2019-05-13T03:56:03.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebdy003ba0dm1wliox0g","content":"<h3 id=\"前人总结\"><a href=\"#前人总结\" class=\"headerlink\" title=\"前人总结\"></a><a href=\"http://www.jianshu.com/p/98c8f2a970eb\" target=\"_blank\" rel=\"external\">前人总结</a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前人总结\"><a href=\"#前人总结\" class=\"headerlink\" title=\"前人总结\"></a><a href=\"http://www.jianshu.com/p/98c8f2a970eb\" target=\"_blank\" rel=\"external\">前人总结</a></h3>"},{"layout":"post","title":"react16.3中带来的巨大改变","date":"2018-04-09T01:05:28.000Z","_content":"\n## Context API\n\nContext API总是很让人迷惑。这个API是官方的，但是官方又不希望开发者们使用这个API，说是这个API会在以后发生改变。现在就是那个改变的时刻。新的API已经被merge了。而且它看起来更加的“用户友好”了。尤其是你不得不使用redux、mobx的时候，可以选择新的Context API实现更加简单的状态管理。\n\n新的API用起来非常的简单：`React.createContext()`，这样就创建了两个组件：\n\n```javascript\nimport {createContext} from 'react';\n\nconst ThemeContext = createContext({\n  background: 'yellow',\n  color: 'white'\n});\n```\n\n调用`createContext`方法会返回两个对象，一个是`Provider`来代替`redux`中的`Provider`，一个是`Consumer`。\n\n那个Provider是一个特殊的组件。它可以用来给子树里的组件提供数据。一个例子：\n\n```javascript\nclass Application extends React.Component {\n  render() {\n    <ThemeContext.Provider value={{background: 'black', color: 'white'}}>\n      <Header />\n      <Main />\n      <Footer />\n    </ThemeContext.Provider>\n  }\n}\n```\n\n上例展示了如何传递“theme” context的。当然这些值可以是动态的（比如，基于this.state）。\n\n下一步就是使用Consumer。\n```javascript\nconst Header = () => {\n  <ThemeContext.Consumer>\n    {(context) => {\n      return (\n        <div style={{background: context.background, color: context.color}}>\n          Welcome!\n        </div>\n      );\n    }}\n  </ThemeContext.Consumer>\n}\n```\n\n如果在`render Consumer`的时候没有嵌套在一个`Provider`里面。那么就会使用`createContext`方法调用的时候设置的默认值。\n\n### 注意:\n\n- Consumer必须可以访问到同一个Context组件。如果你要创建一个新的context，用的是同样的入参，那么这个新建的context的数据是不可访问的。因此，可以把Context当做一个组件，它可以创建一次，然后可以export，可以import。\n- 这个新的语法用了`function as child`模式（有时也叫做`render prop`模式）。如果不是很熟悉这个模式，那么推荐你看一下这些[文章](https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9).\n- 新的API不再要求你声明contextProps了。\n\nContext传递的数据和Context.Provider组件的value属性是一样的。对Provider数据的修改会引起所有的消费者（consumer）重绘。\n\n\n## 新的生命周期方法\n\n参考这个[RFC](https://github.com/reactjs/rfcs/blob/master/text/0006-static-lifecycle-methods.md)。新的声明周期方法会被引入，而旧的会被废弃。\n\n这一改变主要是为了强制推行最佳实践。你可以看看[这篇文章](https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d)来了解一下为什么这些生命周期方法会变得很诡异。这些最佳模式在React 16的异步绘制模式(Async Mode)下显得非常重要。\n\n## 废弃的方法：\n\n- componentWillMount--使用componentDidMount代替\n- componentWillUpdate--使用componentDidUpdate代替\n- componentWillReceiveProps--使用一个新的方法：static getDerivedStateFromProps来代替。\n\n不过这些并不会立刻发生，他们可以用到React 16.4。在React 17里将被彻底移除。如果你开启了StrictMode或者AsyncMode，可以通过这样的方式来使用，但是会收到警告：\n\n- UNSAFE_componentWillMount\n- UNSAFE_componentWillReceiveProps\n- UNSAFE_componentWillUpdate\n\n\n## static getDerivedStateFromProps\n\n当componentWillReceiveProps我们需要其他的方式根据props的变动更新state。社区决定引入一个新的static方法来处理这个问题。\n\n什么是静态方法？一个静态方法就是存在于类内，而不是类的实例内的方法。静态方法访问不到this，并且在声明的时候有static关键字在前面修饰。\n\n但是，问题来了。既然这个方法没有办法访问this，那么如何调用this.setState呢？答案就是，不调用。这个方法直接返回需要更新的state的数据，或者返回null，如果没有什么需要更新的话。\n\n```javascript\nstatic getDerivedStateFromProps(nextProps, prevState) {\n  if(nextProps.currentRow === prevState.lastRow) {\n    return null;\n  }\n\n  return {\n    lastRow: nextProps.currentRow,\n    isCrollingDown: nextProps.curentRow > prevState.lastRow\n  }\n}\n```\n\n调用这个方法和之前调用this.setState的效果是一样的。只会修改这些返回的值，如果是null的话则不修改state。state的其他值都会保留。\n\n\n## 值得注意的事\n\n你需要定义初始state的值。无论是在constructor里，或者是类属性。否则会报警告。\n\n这个方法getDerivedStateFromProps()会在第一次挂载和重绘的时候都会调用到，因此你基本不用在constructor里根据传入的props来setState。\n\n如果定义了getDerivedStateFromProps后，又定义了componentWillReceiveProps。那么，只有前者会被调用，并且你会收到一个警告。\n\n一般你会使用一个回调来保证某些代码实在state更新之后才被调用的。那么，请把这些代码都移到componentDidUpdate里。\n\n如果你不喜欢使用static关键字，那么你可以这样：\n\n```javascript\nComponentName.getDerivedStateFromProps = (nextProps, prevState) => {\n  // Your code here\n}\n```\n\n### Static Mode\n\n严格模式是一个新的方式来确保你的代码是按照最佳实践开发的。它实际是一个在React.StrictMode下的组件。它可以用在你的组件树的任何一部分上。\n\n```javascript\nimport {StrictMode} from 'react'\n\nclass Application extends React.Component {\n  render() {\n    return (\n      <StrictMode>\n        <Context.Provider value={{background: 'black', color: 'white'}}>\n          <Header />\n          <Main />\n          <Footer />\n        </Context.Provider>\n      </StrictMode>\n    );\n  }\n}\n```\n\n如果一个在StricMode子树里的组件使用了componentWillMount方法，那么你会看到一个报错消息。\n\n### Async Mode\n\n异步模式在React.unsafe_AsyncMode下。使用AsncMode也会打开StrictMode模式下的警告。\n\n如果你想学习更多异步模式的内容，你可以在下面的地方看到更多的文章和示例：\n\n- [https://build-mbfootjxoo.now.sh](https://build-mbfootjxoo.now.sh)\n- [https://github.com/koba04/react-fiber-resources](https://github.com/koba04/react-fiber-resources)\n","source":"_posts/react16-3中带来的巨大改变.md","raw":"---\nlayout: post\ntitle: react16.3中带来的巨大改变\ndate: 2018-04-09 09:05:28\ntags:\n    - react\n    - react16.3\ncategories: \"react\"\n---\n\n## Context API\n\nContext API总是很让人迷惑。这个API是官方的，但是官方又不希望开发者们使用这个API，说是这个API会在以后发生改变。现在就是那个改变的时刻。新的API已经被merge了。而且它看起来更加的“用户友好”了。尤其是你不得不使用redux、mobx的时候，可以选择新的Context API实现更加简单的状态管理。\n\n新的API用起来非常的简单：`React.createContext()`，这样就创建了两个组件：\n\n```javascript\nimport {createContext} from 'react';\n\nconst ThemeContext = createContext({\n  background: 'yellow',\n  color: 'white'\n});\n```\n\n调用`createContext`方法会返回两个对象，一个是`Provider`来代替`redux`中的`Provider`，一个是`Consumer`。\n\n那个Provider是一个特殊的组件。它可以用来给子树里的组件提供数据。一个例子：\n\n```javascript\nclass Application extends React.Component {\n  render() {\n    <ThemeContext.Provider value={{background: 'black', color: 'white'}}>\n      <Header />\n      <Main />\n      <Footer />\n    </ThemeContext.Provider>\n  }\n}\n```\n\n上例展示了如何传递“theme” context的。当然这些值可以是动态的（比如，基于this.state）。\n\n下一步就是使用Consumer。\n```javascript\nconst Header = () => {\n  <ThemeContext.Consumer>\n    {(context) => {\n      return (\n        <div style={{background: context.background, color: context.color}}>\n          Welcome!\n        </div>\n      );\n    }}\n  </ThemeContext.Consumer>\n}\n```\n\n如果在`render Consumer`的时候没有嵌套在一个`Provider`里面。那么就会使用`createContext`方法调用的时候设置的默认值。\n\n### 注意:\n\n- Consumer必须可以访问到同一个Context组件。如果你要创建一个新的context，用的是同样的入参，那么这个新建的context的数据是不可访问的。因此，可以把Context当做一个组件，它可以创建一次，然后可以export，可以import。\n- 这个新的语法用了`function as child`模式（有时也叫做`render prop`模式）。如果不是很熟悉这个模式，那么推荐你看一下这些[文章](https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9).\n- 新的API不再要求你声明contextProps了。\n\nContext传递的数据和Context.Provider组件的value属性是一样的。对Provider数据的修改会引起所有的消费者（consumer）重绘。\n\n\n## 新的生命周期方法\n\n参考这个[RFC](https://github.com/reactjs/rfcs/blob/master/text/0006-static-lifecycle-methods.md)。新的声明周期方法会被引入，而旧的会被废弃。\n\n这一改变主要是为了强制推行最佳实践。你可以看看[这篇文章](https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d)来了解一下为什么这些生命周期方法会变得很诡异。这些最佳模式在React 16的异步绘制模式(Async Mode)下显得非常重要。\n\n## 废弃的方法：\n\n- componentWillMount--使用componentDidMount代替\n- componentWillUpdate--使用componentDidUpdate代替\n- componentWillReceiveProps--使用一个新的方法：static getDerivedStateFromProps来代替。\n\n不过这些并不会立刻发生，他们可以用到React 16.4。在React 17里将被彻底移除。如果你开启了StrictMode或者AsyncMode，可以通过这样的方式来使用，但是会收到警告：\n\n- UNSAFE_componentWillMount\n- UNSAFE_componentWillReceiveProps\n- UNSAFE_componentWillUpdate\n\n\n## static getDerivedStateFromProps\n\n当componentWillReceiveProps我们需要其他的方式根据props的变动更新state。社区决定引入一个新的static方法来处理这个问题。\n\n什么是静态方法？一个静态方法就是存在于类内，而不是类的实例内的方法。静态方法访问不到this，并且在声明的时候有static关键字在前面修饰。\n\n但是，问题来了。既然这个方法没有办法访问this，那么如何调用this.setState呢？答案就是，不调用。这个方法直接返回需要更新的state的数据，或者返回null，如果没有什么需要更新的话。\n\n```javascript\nstatic getDerivedStateFromProps(nextProps, prevState) {\n  if(nextProps.currentRow === prevState.lastRow) {\n    return null;\n  }\n\n  return {\n    lastRow: nextProps.currentRow,\n    isCrollingDown: nextProps.curentRow > prevState.lastRow\n  }\n}\n```\n\n调用这个方法和之前调用this.setState的效果是一样的。只会修改这些返回的值，如果是null的话则不修改state。state的其他值都会保留。\n\n\n## 值得注意的事\n\n你需要定义初始state的值。无论是在constructor里，或者是类属性。否则会报警告。\n\n这个方法getDerivedStateFromProps()会在第一次挂载和重绘的时候都会调用到，因此你基本不用在constructor里根据传入的props来setState。\n\n如果定义了getDerivedStateFromProps后，又定义了componentWillReceiveProps。那么，只有前者会被调用，并且你会收到一个警告。\n\n一般你会使用一个回调来保证某些代码实在state更新之后才被调用的。那么，请把这些代码都移到componentDidUpdate里。\n\n如果你不喜欢使用static关键字，那么你可以这样：\n\n```javascript\nComponentName.getDerivedStateFromProps = (nextProps, prevState) => {\n  // Your code here\n}\n```\n\n### Static Mode\n\n严格模式是一个新的方式来确保你的代码是按照最佳实践开发的。它实际是一个在React.StrictMode下的组件。它可以用在你的组件树的任何一部分上。\n\n```javascript\nimport {StrictMode} from 'react'\n\nclass Application extends React.Component {\n  render() {\n    return (\n      <StrictMode>\n        <Context.Provider value={{background: 'black', color: 'white'}}>\n          <Header />\n          <Main />\n          <Footer />\n        </Context.Provider>\n      </StrictMode>\n    );\n  }\n}\n```\n\n如果一个在StricMode子树里的组件使用了componentWillMount方法，那么你会看到一个报错消息。\n\n### Async Mode\n\n异步模式在React.unsafe_AsyncMode下。使用AsncMode也会打开StrictMode模式下的警告。\n\n如果你想学习更多异步模式的内容，你可以在下面的地方看到更多的文章和示例：\n\n- [https://build-mbfootjxoo.now.sh](https://build-mbfootjxoo.now.sh)\n- [https://github.com/koba04/react-fiber-resources](https://github.com/koba04/react-fiber-resources)\n","slug":"react16-3中带来的巨大改变","published":1,"updated":"2019-05-13T03:56:03.257Z","comments":1,"photos":[],"link":"","_id":"cjvluebdz003fa0dmzg10dbqu","content":"<h2 id=\"Context-API\"><a href=\"#Context-API\" class=\"headerlink\" title=\"Context API\"></a>Context API</h2><p>Context API总是很让人迷惑。这个API是官方的，但是官方又不希望开发者们使用这个API，说是这个API会在以后发生改变。现在就是那个改变的时刻。新的API已经被merge了。而且它看起来更加的“用户友好”了。尤其是你不得不使用redux、mobx的时候，可以选择新的Context API实现更加简单的状态管理。</p>\n<p>新的API用起来非常的简单：<code>React.createContext()</code>，这样就创建了两个组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;createContext&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ThemeContext = createContext(&#123;</div><div class=\"line\">  <span class=\"attr\">background</span>: <span class=\"string\">'yellow'</span>,</div><div class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">'white'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>调用<code>createContext</code>方法会返回两个对象，一个是<code>Provider</code>来代替<code>redux</code>中的<code>Provider</code>，一个是<code>Consumer</code>。</p>\n<p>那个Provider是一个特殊的组件。它可以用来给子树里的组件提供数据。一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    &lt;ThemeContext.Provider value=&#123;&#123;<span class=\"attr\">background</span>: <span class=\"string\">'black'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'white'</span>&#125;&#125;&gt;</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span></span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Main</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Footer</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上例展示了如何传递“theme” context的。当然这些值可以是动态的（比如，基于this.state）。</p>\n<p>下一步就是使用Consumer。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">  &lt;ThemeContext.Consumer&gt;</div><div class=\"line\">    &#123;(context) =&gt; &#123;</div><div class=\"line\">      return (</div><div class=\"line\">        &lt;div style=&#123;&#123;background: context.background, color: context.color&#125;&#125;&gt;</div><div class=\"line\">          Welcome!</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      );</div><div class=\"line\">    &#125;&#125;</div><div class=\"line\">  &lt;/ThemeContext.Consumer&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果在<code>render Consumer</code>的时候没有嵌套在一个<code>Provider</code>里面。那么就会使用<code>createContext</code>方法调用的时候设置的默认值。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><ul>\n<li>Consumer必须可以访问到同一个Context组件。如果你要创建一个新的context，用的是同样的入参，那么这个新建的context的数据是不可访问的。因此，可以把Context当做一个组件，它可以创建一次，然后可以export，可以import。</li>\n<li>这个新的语法用了<code>function as child</code>模式（有时也叫做<code>render prop</code>模式）。如果不是很熟悉这个模式，那么推荐你看一下这些<a href=\"https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9\" target=\"_blank\" rel=\"external\">文章</a>.</li>\n<li>新的API不再要求你声明contextProps了。</li>\n</ul>\n<p>Context传递的数据和Context.Provider组件的value属性是一样的。对Provider数据的修改会引起所有的消费者（consumer）重绘。</p>\n<h2 id=\"新的生命周期方法\"><a href=\"#新的生命周期方法\" class=\"headerlink\" title=\"新的生命周期方法\"></a>新的生命周期方法</h2><p>参考这个<a href=\"https://github.com/reactjs/rfcs/blob/master/text/0006-static-lifecycle-methods.md\" target=\"_blank\" rel=\"external\">RFC</a>。新的声明周期方法会被引入，而旧的会被废弃。</p>\n<p>这一改变主要是为了强制推行最佳实践。你可以看看<a href=\"https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d\" target=\"_blank\" rel=\"external\">这篇文章</a>来了解一下为什么这些生命周期方法会变得很诡异。这些最佳模式在React 16的异步绘制模式(Async Mode)下显得非常重要。</p>\n<h2 id=\"废弃的方法：\"><a href=\"#废弃的方法：\" class=\"headerlink\" title=\"废弃的方法：\"></a>废弃的方法：</h2><ul>\n<li>componentWillMount–使用componentDidMount代替</li>\n<li>componentWillUpdate–使用componentDidUpdate代替</li>\n<li>componentWillReceiveProps–使用一个新的方法：static getDerivedStateFromProps来代替。</li>\n</ul>\n<p>不过这些并不会立刻发生，他们可以用到React 16.4。在React 17里将被彻底移除。如果你开启了StrictMode或者AsyncMode，可以通过这样的方式来使用，但是会收到警告：</p>\n<ul>\n<li>UNSAFE_componentWillMount</li>\n<li>UNSAFE_componentWillReceiveProps</li>\n<li>UNSAFE_componentWillUpdate</li>\n</ul>\n<h2 id=\"static-getDerivedStateFromProps\"><a href=\"#static-getDerivedStateFromProps\" class=\"headerlink\" title=\"static getDerivedStateFromProps\"></a>static getDerivedStateFromProps</h2><p>当componentWillReceiveProps我们需要其他的方式根据props的变动更新state。社区决定引入一个新的static方法来处理这个问题。</p>\n<p>什么是静态方法？一个静态方法就是存在于类内，而不是类的实例内的方法。静态方法访问不到this，并且在声明的时候有static关键字在前面修饰。</p>\n<p>但是，问题来了。既然这个方法没有办法访问this，那么如何调用this.setState呢？答案就是，不调用。这个方法直接返回需要更新的state的数据，或者返回null，如果没有什么需要更新的话。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(nextProps.currentRow === prevState.lastRow) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">lastRow</span>: nextProps.currentRow,</div><div class=\"line\">    <span class=\"attr\">isCrollingDown</span>: nextProps.curentRow &gt; prevState.lastRow</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用这个方法和之前调用this.setState的效果是一样的。只会修改这些返回的值，如果是null的话则不修改state。state的其他值都会保留。</p>\n<h2 id=\"值得注意的事\"><a href=\"#值得注意的事\" class=\"headerlink\" title=\"值得注意的事\"></a>值得注意的事</h2><p>你需要定义初始state的值。无论是在constructor里，或者是类属性。否则会报警告。</p>\n<p>这个方法getDerivedStateFromProps()会在第一次挂载和重绘的时候都会调用到，因此你基本不用在constructor里根据传入的props来setState。</p>\n<p>如果定义了getDerivedStateFromProps后，又定义了componentWillReceiveProps。那么，只有前者会被调用，并且你会收到一个警告。</p>\n<p>一般你会使用一个回调来保证某些代码实在state更新之后才被调用的。那么，请把这些代码都移到componentDidUpdate里。</p>\n<p>如果你不喜欢使用static关键字，那么你可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ComponentName.getDerivedStateFromProps = <span class=\"function\">(<span class=\"params\">nextProps, prevState</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Your code here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Static-Mode\"><a href=\"#Static-Mode\" class=\"headerlink\" title=\"Static Mode\"></a>Static Mode</h3><p>严格模式是一个新的方式来确保你的代码是按照最佳实践开发的。它实际是一个在React.StrictMode下的组件。它可以用在你的组件树的任何一部分上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;StrictMode&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;background:</span> '<span class=\"attr\">black</span>', <span class=\"attr\">color:</span> '<span class=\"attr\">white</span>'&#125;&#125;&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Main</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Footer</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果一个在StricMode子树里的组件使用了componentWillMount方法，那么你会看到一个报错消息。</p>\n<h3 id=\"Async-Mode\"><a href=\"#Async-Mode\" class=\"headerlink\" title=\"Async Mode\"></a>Async Mode</h3><p>异步模式在React.unsafe_AsyncMode下。使用AsncMode也会打开StrictMode模式下的警告。</p>\n<p>如果你想学习更多异步模式的内容，你可以在下面的地方看到更多的文章和示例：</p>\n<ul>\n<li><a href=\"https://build-mbfootjxoo.now.sh\" target=\"_blank\" rel=\"external\">https://build-mbfootjxoo.now.sh</a></li>\n<li><a href=\"https://github.com/koba04/react-fiber-resources\" target=\"_blank\" rel=\"external\">https://github.com/koba04/react-fiber-resources</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Context-API\"><a href=\"#Context-API\" class=\"headerlink\" title=\"Context API\"></a>Context API</h2><p>Context API总是很让人迷惑。这个API是官方的，但是官方又不希望开发者们使用这个API，说是这个API会在以后发生改变。现在就是那个改变的时刻。新的API已经被merge了。而且它看起来更加的“用户友好”了。尤其是你不得不使用redux、mobx的时候，可以选择新的Context API实现更加简单的状态管理。</p>\n<p>新的API用起来非常的简单：<code>React.createContext()</code>，这样就创建了两个组件：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;createContext&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> ThemeContext = createContext(&#123;</div><div class=\"line\">  <span class=\"attr\">background</span>: <span class=\"string\">'yellow'</span>,</div><div class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">'white'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>调用<code>createContext</code>方法会返回两个对象，一个是<code>Provider</code>来代替<code>redux</code>中的<code>Provider</code>，一个是<code>Consumer</code>。</p>\n<p>那个Provider是一个特殊的组件。它可以用来给子树里的组件提供数据。一个例子：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    &lt;ThemeContext.Provider value=&#123;&#123;<span class=\"attr\">background</span>: <span class=\"string\">'black'</span>, <span class=\"attr\">color</span>: <span class=\"string\">'white'</span>&#125;&#125;&gt;</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span></span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Main</span> /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Footer</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ThemeContext.Provider</span>&gt;</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上例展示了如何传递“theme” context的。当然这些值可以是动态的（比如，基于this.state）。</p>\n<p>下一步就是使用Consumer。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">const Header = () =&gt; &#123;</div><div class=\"line\">  &lt;ThemeContext.Consumer&gt;</div><div class=\"line\">    &#123;(context) =&gt; &#123;</div><div class=\"line\">      return (</div><div class=\"line\">        &lt;div style=&#123;&#123;background: context.background, color: context.color&#125;&#125;&gt;</div><div class=\"line\">          Welcome!</div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      );</div><div class=\"line\">    &#125;&#125;</div><div class=\"line\">  &lt;/ThemeContext.Consumer&gt;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>如果在<code>render Consumer</code>的时候没有嵌套在一个<code>Provider</code>里面。那么就会使用<code>createContext</code>方法调用的时候设置的默认值。</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意:\"></a>注意:</h3><ul>\n<li>Consumer必须可以访问到同一个Context组件。如果你要创建一个新的context，用的是同样的入参，那么这个新建的context的数据是不可访问的。因此，可以把Context当做一个组件，它可以创建一次，然后可以export，可以import。</li>\n<li>这个新的语法用了<code>function as child</code>模式（有时也叫做<code>render prop</code>模式）。如果不是很熟悉这个模式，那么推荐你看一下这些<a href=\"https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9\" target=\"_blank\" rel=\"external\">文章</a>.</li>\n<li>新的API不再要求你声明contextProps了。</li>\n</ul>\n<p>Context传递的数据和Context.Provider组件的value属性是一样的。对Provider数据的修改会引起所有的消费者（consumer）重绘。</p>\n<h2 id=\"新的生命周期方法\"><a href=\"#新的生命周期方法\" class=\"headerlink\" title=\"新的生命周期方法\"></a>新的生命周期方法</h2><p>参考这个<a href=\"https://github.com/reactjs/rfcs/blob/master/text/0006-static-lifecycle-methods.md\" target=\"_blank\" rel=\"external\">RFC</a>。新的声明周期方法会被引入，而旧的会被废弃。</p>\n<p>这一改变主要是为了强制推行最佳实践。你可以看看<a href=\"https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d\" target=\"_blank\" rel=\"external\">这篇文章</a>来了解一下为什么这些生命周期方法会变得很诡异。这些最佳模式在React 16的异步绘制模式(Async Mode)下显得非常重要。</p>\n<h2 id=\"废弃的方法：\"><a href=\"#废弃的方法：\" class=\"headerlink\" title=\"废弃的方法：\"></a>废弃的方法：</h2><ul>\n<li>componentWillMount–使用componentDidMount代替</li>\n<li>componentWillUpdate–使用componentDidUpdate代替</li>\n<li>componentWillReceiveProps–使用一个新的方法：static getDerivedStateFromProps来代替。</li>\n</ul>\n<p>不过这些并不会立刻发生，他们可以用到React 16.4。在React 17里将被彻底移除。如果你开启了StrictMode或者AsyncMode，可以通过这样的方式来使用，但是会收到警告：</p>\n<ul>\n<li>UNSAFE_componentWillMount</li>\n<li>UNSAFE_componentWillReceiveProps</li>\n<li>UNSAFE_componentWillUpdate</li>\n</ul>\n<h2 id=\"static-getDerivedStateFromProps\"><a href=\"#static-getDerivedStateFromProps\" class=\"headerlink\" title=\"static getDerivedStateFromProps\"></a>static getDerivedStateFromProps</h2><p>当componentWillReceiveProps我们需要其他的方式根据props的变动更新state。社区决定引入一个新的static方法来处理这个问题。</p>\n<p>什么是静态方法？一个静态方法就是存在于类内，而不是类的实例内的方法。静态方法访问不到this，并且在声明的时候有static关键字在前面修饰。</p>\n<p>但是，问题来了。既然这个方法没有办法访问this，那么如何调用this.setState呢？答案就是，不调用。这个方法直接返回需要更新的state的数据，或者返回null，如果没有什么需要更新的话。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</div><div class=\"line\">  <span class=\"keyword\">if</span>(nextProps.currentRow === prevState.lastRow) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">lastRow</span>: nextProps.currentRow,</div><div class=\"line\">    <span class=\"attr\">isCrollingDown</span>: nextProps.curentRow &gt; prevState.lastRow</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>调用这个方法和之前调用this.setState的效果是一样的。只会修改这些返回的值，如果是null的话则不修改state。state的其他值都会保留。</p>\n<h2 id=\"值得注意的事\"><a href=\"#值得注意的事\" class=\"headerlink\" title=\"值得注意的事\"></a>值得注意的事</h2><p>你需要定义初始state的值。无论是在constructor里，或者是类属性。否则会报警告。</p>\n<p>这个方法getDerivedStateFromProps()会在第一次挂载和重绘的时候都会调用到，因此你基本不用在constructor里根据传入的props来setState。</p>\n<p>如果定义了getDerivedStateFromProps后，又定义了componentWillReceiveProps。那么，只有前者会被调用，并且你会收到一个警告。</p>\n<p>一般你会使用一个回调来保证某些代码实在state更新之后才被调用的。那么，请把这些代码都移到componentDidUpdate里。</p>\n<p>如果你不喜欢使用static关键字，那么你可以这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ComponentName.getDerivedStateFromProps = <span class=\"function\">(<span class=\"params\">nextProps, prevState</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"comment\">// Your code here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Static-Mode\"><a href=\"#Static-Mode\" class=\"headerlink\" title=\"Static Mode\"></a>Static Mode</h3><p>严格模式是一个新的方式来确保你的代码是按照最佳实践开发的。它实际是一个在React.StrictMode下的组件。它可以用在你的组件树的任何一部分上。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;StrictMode&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Application</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">StrictMode</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Context.Provider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;background:</span> '<span class=\"attr\">black</span>', <span class=\"attr\">color:</span> '<span class=\"attr\">white</span>'&#125;&#125;&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Main</span> /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">Footer</span> /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Context.Provider</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">StrictMode</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如果一个在StricMode子树里的组件使用了componentWillMount方法，那么你会看到一个报错消息。</p>\n<h3 id=\"Async-Mode\"><a href=\"#Async-Mode\" class=\"headerlink\" title=\"Async Mode\"></a>Async Mode</h3><p>异步模式在React.unsafe_AsyncMode下。使用AsncMode也会打开StrictMode模式下的警告。</p>\n<p>如果你想学习更多异步模式的内容，你可以在下面的地方看到更多的文章和示例：</p>\n<ul>\n<li><a href=\"https://build-mbfootjxoo.now.sh\" target=\"_blank\" rel=\"external\">https://build-mbfootjxoo.now.sh</a></li>\n<li><a href=\"https://github.com/koba04/react-fiber-resources\" target=\"_blank\" rel=\"external\">https://github.com/koba04/react-fiber-resources</a></li>\n</ul>\n"},{"title":"react-native构建踩坑","date":"2017-06-09T06:10:59.000Z","_content":"\n## react-native run-ios 构建失败\n\n> 记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.\n> 在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题\n\n<!-- more -->\n\n构建错误信息\n\n```base\n** BUILD FAILED **\n\n\nThe following commands produced analyzer issues:\n\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c\n(2 commands with analyzer issues)\n\nThe following build commands failed:\n    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh\n(1 failure)\n\nInstalling build/Build/Products/Debug-iphonesimulator/temp.app\nAn error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):\nFailed to install the requested application\nAn application bundle was not found at the provided path.\nProvide a valid path to the desired application bundle.\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n\nCommand failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n```\n\n当前版本\n> 查看package.jsonn\n\n```json\n\"react\": \"16.0.0-alpha.12\",\n\"react-native\": \"0.45.0\"\n```\n\n> 把node-modules rm之后 把package.json改成下面版本就可以了\n\n```json\n \"dependencies\": {\n     \"react\": \"16.0.0-alpha.6\",\n     \"react-native\": \"0.44.3\"\n }\n```\n\n之后再`yarn install`\n","source":"_posts/react-native构建踩坑.md","raw":"---\ntitle: react-native构建踩坑\ndate: 2017-06-09 14:10:59\ntags:\n  - react-native\ncategories: react-native\n---\n\n## react-native run-ios 构建失败\n\n> 记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.\n> 在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题\n\n<!-- more -->\n\n构建错误信息\n\n```base\n** BUILD FAILED **\n\n\nThe following commands produced analyzer issues:\n\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c\n(2 commands with analyzer issues)\n\nThe following build commands failed:\n    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh\n(1 failure)\n\nInstalling build/Build/Products/Debug-iphonesimulator/temp.app\nAn error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):\nFailed to install the requested application\nAn application bundle was not found at the provided path.\nProvide a valid path to the desired application bundle.\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n\nCommand failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n```\n\n当前版本\n> 查看package.jsonn\n\n```json\n\"react\": \"16.0.0-alpha.12\",\n\"react-native\": \"0.45.0\"\n```\n\n> 把node-modules rm之后 把package.json改成下面版本就可以了\n\n```json\n \"dependencies\": {\n     \"react\": \"16.0.0-alpha.6\",\n     \"react-native\": \"0.44.3\"\n }\n```\n\n之后再`yarn install`\n","slug":"react-native构建踩坑","published":1,"updated":"2019-05-13T03:56:03.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebe0003ia0dmcyubk46v","content":"<h2 id=\"react-native-run-ios-构建失败\"><a href=\"#react-native-run-ios-构建失败\" class=\"headerlink\" title=\"react-native run-ios 构建失败\"></a>react-native run-ios 构建失败</h2><blockquote>\n<p>记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.<br>在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>构建错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">** BUILD FAILED **</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">The following commands produced analyzer issues:</div><div class=\"line\"></div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c</div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c</div><div class=\"line\">(2 commands with analyzer issues)</div><div class=\"line\"></div><div class=\"line\">The following build commands failed:</div><div class=\"line\">    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh</div><div class=\"line\">(1 failure)</div><div class=\"line\"></div><div class=\"line\">Installing build/Build/Products/Debug-iphonesimulator/temp.app</div><div class=\"line\">An error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):</div><div class=\"line\">Failed to install the requested application</div><div class=\"line\">An application bundle was not found at the provided path.</div><div class=\"line\">Provide a valid path to the desired application bundle.</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div><div class=\"line\"></div><div class=\"line\">Command failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div></pre></td></tr></table></figure>\n<p>当前版本</p>\n<blockquote>\n<p>查看package.jsonn</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"react\": \"16.0.0-alpha.12\",</div><div class=\"line\">\"react-native\": \"0.45.0\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把node-modules rm之后 把package.json改成下面版本就可以了</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"react\": \"16.0.0-alpha.6\",</div><div class=\"line\">    \"react-native\": \"0.44.3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后再<code>yarn install</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"react-native-run-ios-构建失败\"><a href=\"#react-native-run-ios-构建失败\" class=\"headerlink\" title=\"react-native run-ios 构建失败\"></a>react-native run-ios 构建失败</h2><blockquote>\n<p>记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.<br>在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题</p>\n</blockquote>","more":"<p>构建错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">** BUILD FAILED **</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">The following commands produced analyzer issues:</div><div class=\"line\"></div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c</div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c</div><div class=\"line\">(2 commands with analyzer issues)</div><div class=\"line\"></div><div class=\"line\">The following build commands failed:</div><div class=\"line\">    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh</div><div class=\"line\">(1 failure)</div><div class=\"line\"></div><div class=\"line\">Installing build/Build/Products/Debug-iphonesimulator/temp.app</div><div class=\"line\">An error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):</div><div class=\"line\">Failed to install the requested application</div><div class=\"line\">An application bundle was not found at the provided path.</div><div class=\"line\">Provide a valid path to the desired application bundle.</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div><div class=\"line\"></div><div class=\"line\">Command failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div></pre></td></tr></table></figure>\n<p>当前版本</p>\n<blockquote>\n<p>查看package.jsonn</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"react\": \"16.0.0-alpha.12\",</div><div class=\"line\">\"react-native\": \"0.45.0\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把node-modules rm之后 把package.json改成下面版本就可以了</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"react\": \"16.0.0-alpha.6\",</div><div class=\"line\">    \"react-native\": \"0.44.3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后再<code>yarn install</code></p>"},{"title":"react中的高阶组件","date":"2017-07-31T03:04:14.000Z","_content":"","source":"_posts/react中的高阶组件.md","raw":"---\ntitle: react中的高阶组件\ndate: 2017-07-31 11:04:14\ntags:\n---\n","slug":"react中的高阶组件","published":1,"updated":"2019-05-13T03:56:03.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebe1003la0dmrbsixc8e","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react中setState的使用","date":"2017-07-08T08:29:38.000Z","_content":"\n## 我认为`this.setState`是react中最常用的API了.\n\n如果不明白`this.setState`是什么, [请移驾官网查看具体api](https://facebook.github.io/react/)\n\n<!-- more -->\n\n```javascript\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>Seconds Elapsed: {this.state.secondsElapsed}</div>\n    );\n  }\n}\n\nReactDOM.render(<Timer />, mountNode);\n```\n\n先看看`this.setState`是干什么的\n\n{% asset_img this.setState.png setState流程图 %}\n\n这里有必要说一下, `this.setState`是异步调用,\n如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数\n\n\n\n","source":"_posts/react中setState的使用.md","raw":"---\ntitle: react中setState的使用\ndate: 2017-07-08 16:29:38\ntags:\n    - react\n    - setState\n---\n\n## 我认为`this.setState`是react中最常用的API了.\n\n如果不明白`this.setState`是什么, [请移驾官网查看具体api](https://facebook.github.io/react/)\n\n<!-- more -->\n\n```javascript\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>Seconds Elapsed: {this.state.secondsElapsed}</div>\n    );\n  }\n}\n\nReactDOM.render(<Timer />, mountNode);\n```\n\n先看看`this.setState`是干什么的\n\n{% asset_img this.setState.png setState流程图 %}\n\n这里有必要说一下, `this.setState`是异步调用,\n如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数\n\n\n\n","slug":"react中setState的使用","published":1,"updated":"2019-05-13T03:56:03.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebe3003pa0dm8h4n9z7a","content":"<h2 id=\"我认为this-setState是react中最常用的API了\"><a href=\"#我认为this-setState是react中最常用的API了\" class=\"headerlink\" title=\"我认为this.setState是react中最常用的API了.\"></a>我认为<code>this.setState</code>是react中最常用的API了.</h2><p>如果不明白<code>this.setState</code>是什么, <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">请移驾官网查看具体api</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">secondsElapsed</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  tick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">secondsElapsed</span>: prevState.secondsElapsed + <span class=\"number\">1</span></div><div class=\"line\">    &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<p>先看看<code>this.setState</code>是干什么的</p>\n<img src=\"/2017/07/08/react中setState的使用/this.setState.png\" alt=\"setState流程图\" title=\"setState流程图\">\n<p>这里有必要说一下, <code>this.setState</code>是异步调用,<br>如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"我认为this-setState是react中最常用的API了\"><a href=\"#我认为this-setState是react中最常用的API了\" class=\"headerlink\" title=\"我认为this.setState是react中最常用的API了.\"></a>我认为<code>this.setState</code>是react中最常用的API了.</h2><p>如果不明白<code>this.setState</code>是什么, <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">请移驾官网查看具体api</a></p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">secondsElapsed</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  tick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">secondsElapsed</span>: prevState.secondsElapsed + <span class=\"number\">1</span></div><div class=\"line\">    &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<p>先看看<code>this.setState</code>是干什么的</p>\n<img src=\"/2017/07/08/react中setState的使用/this.setState.png\" alt=\"setState流程图\" title=\"setState流程图\">\n<p>这里有必要说一下, <code>this.setState</code>是异步调用,<br>如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数</p>"},{"title":"react使用感受","date":"2017-06-10T08:23:21.000Z","comments":0,"_content":"\n{% asset_img react.png react 官网 %}\n\n<!-- more -->\n\n## react感受\n\n记得刚开始接触[react](https://facebook.github.io/react/)的时候还是在前年那时候react版本还在零点几,\ngithub上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下...\n现在想起来也挺庆幸能认识上个工作的同事.[送上github传送门](https://github.com/yuffiy)(也是现在的同事)\n\n> 当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习\n> qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽\n\n### webpack打包\n\n这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,\n需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多[]()webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.\n顺便插一句:\n\n> 编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.\n\nwebpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看<<慕课网>>里面的webpack视屏, 讲的很清晰\n\n### react state和props的设计\n\n#### state和props的区别\n\n下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议\n\n> 每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。\n> 所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.\n> props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量\n\nreact刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能\n父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境\n\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理。\n> 之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo\n> 好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解\n\n### 附上官网counter案例\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n> 后续 -> react配合redux开发手机端页面感受\n","source":"_posts/react使用感受.md","raw":"---\ntitle: react使用感受\ndate: 2017-06-10 16:23:21\ntags:\ncategories: \"blog\"\ncomments: false\n---\n\n{% asset_img react.png react 官网 %}\n\n<!-- more -->\n\n## react感受\n\n记得刚开始接触[react](https://facebook.github.io/react/)的时候还是在前年那时候react版本还在零点几,\ngithub上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下...\n现在想起来也挺庆幸能认识上个工作的同事.[送上github传送门](https://github.com/yuffiy)(也是现在的同事)\n\n> 当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习\n> qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽\n\n### webpack打包\n\n这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,\n需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多[]()webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.\n顺便插一句:\n\n> 编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.\n\nwebpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看<<慕课网>>里面的webpack视屏, 讲的很清晰\n\n### react state和props的设计\n\n#### state和props的区别\n\n下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议\n\n> 每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。\n> 所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.\n> props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量\n\nreact刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能\n父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境\n\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理。\n> 之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo\n> 好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解\n\n### 附上官网counter案例\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n> 后续 -> react配合redux开发手机端页面感受\n","slug":"react使用感受","published":1,"updated":"2019-05-13T03:56:03.261Z","layout":"post","photos":[],"link":"","_id":"cjvluebe4003sa0dmevuuk9xn","content":"<img src=\"/2017/06/10/react使用感受/react.png\" alt=\"react 官网\" title=\"react 官网\">\n<a id=\"more\"></a>\n<h2 id=\"react感受\"><a href=\"#react感受\" class=\"headerlink\" title=\"react感受\"></a>react感受</h2><p>记得刚开始接触<a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">react</a>的时候还是在前年那时候react版本还在零点几,<br>github上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下…<br>现在想起来也挺庆幸能认识上个工作的同事.<a href=\"https://github.com/yuffiy\" target=\"_blank\" rel=\"external\">送上github传送门</a>(也是现在的同事)</p>\n<blockquote>\n<p>当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习<br>qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽</p>\n</blockquote>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,<br>需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多<a href=\"\"></a>webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.<br>顺便插一句:</p>\n<blockquote>\n<p>编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.</p>\n</blockquote>\n<p>webpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看&lt;&lt;慕课网&gt;&gt;里面的webpack视屏, 讲的很清晰</p>\n<h3 id=\"react-state和props的设计\"><a href=\"#react-state和props的设计\" class=\"headerlink\" title=\"react state和props的设计\"></a>react state和props的设计</h3><h4 id=\"state和props的区别\"><a href=\"#state和props的区别\" class=\"headerlink\" title=\"state和props的区别\"></a>state和props的区别</h4><p>下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议</p>\n<blockquote>\n<p>每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。<br>所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.<br>props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量</p>\n</blockquote>\n<p>react刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能<br>父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。<br>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解</p>\n</blockquote>\n<h3 id=\"附上官网counter案例\"><a href=\"#附上官网counter案例\" class=\"headerlink\" title=\"附上官网counter案例\"></a>附上官网counter案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>后续 -&gt; react配合redux开发手机端页面感受</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/10/react使用感受/react.png\" alt=\"react 官网\" title=\"react 官网\">","more":"<h2 id=\"react感受\"><a href=\"#react感受\" class=\"headerlink\" title=\"react感受\"></a>react感受</h2><p>记得刚开始接触<a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">react</a>的时候还是在前年那时候react版本还在零点几,<br>github上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下…<br>现在想起来也挺庆幸能认识上个工作的同事.<a href=\"https://github.com/yuffiy\" target=\"_blank\" rel=\"external\">送上github传送门</a>(也是现在的同事)</p>\n<blockquote>\n<p>当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习<br>qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽</p>\n</blockquote>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,<br>需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多<a href=\"\"></a>webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.<br>顺便插一句:</p>\n<blockquote>\n<p>编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.</p>\n</blockquote>\n<p>webpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看&lt;&lt;慕课网&gt;&gt;里面的webpack视屏, 讲的很清晰</p>\n<h3 id=\"react-state和props的设计\"><a href=\"#react-state和props的设计\" class=\"headerlink\" title=\"react state和props的设计\"></a>react state和props的设计</h3><h4 id=\"state和props的区别\"><a href=\"#state和props的区别\" class=\"headerlink\" title=\"state和props的区别\"></a>state和props的区别</h4><p>下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议</p>\n<blockquote>\n<p>每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。<br>所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.<br>props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量</p>\n</blockquote>\n<p>react刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能<br>父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。<br>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解</p>\n</blockquote>\n<h3 id=\"附上官网counter案例\"><a href=\"#附上官网counter案例\" class=\"headerlink\" title=\"附上官网counter案例\"></a>附上官网counter案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>后续 -&gt; react配合redux开发手机端页面感受</p>\n</blockquote>"},{"title":"react中高阶组件的使用以及技巧","date":"2017-07-24T08:33:04.000Z","_content":"\n{% asset_img react-hoc.png 高阶组件抽象表单功能而非UI %}\n\n[写的不错, 先转载, 之后在写自己的学习成果](https://zhuanlan.zhihu.com/p/27434557)\n\n<!-- more -->\n\n这篇文章完全就是为了更好的理解React中的高阶组件,\n\n### 高阶组件和高阶函数的定义\n\n高阶函数\n接受函数作为参数, 或者输入另一个函数的一类函数,  被称为高阶函数.\n\n对于高阶组件\n接受一个组件作为参数,  这个组件,  可以是纯函数组件也可以`class extends Component`组件. 输出一个新的React组件的组件,  更通俗地描述为，**高阶组件**通过包裹（wrapped）被传入的React组件，经过一系列处理，最终返回一个相对增强（enhanced）的React\n高阶组件是`React`中复用组件逻辑的一种进阶技巧,  他是一种技巧,  并不是什么特别高大上的一种API,  而是一种`React`组件设计理念,  众多的React库已经表明了, 这一设计的价值.例如`React-Redux`\n\n### 实现一个简单的高阶组件\n\n下面我们来实现一个简单的高阶组件(函数),  它接受一个React组件,  然后返回一个增强版的组件\n\n```javascript\n\nexport default function WithHeader(WrappedComponent) {\n  return class HOC extends Component {\n    render () {\n      return (\n        <div>\n          <div className=\"demo-header\">\n            这里是标题\n          </div>\n          <WrappedComponent {...this.props} />\n        </div>\n      );\n    }\n  };\n}\n```\n\n大家可以看出这个组件的效果,  就是给传入的组件添加了一个标题,  但是这个效果我们也可以用其他的方法来实现, 下面说为什么这样设计,  也就是高阶函数的设计优点.\n\n接下来, 我们来使用这个高阶组件,  用来强化之前被作为参数传入的组件\n\n```javascript\n@WithHeader\nexport class Demo extends Component {\n  render () {\n    return (\n      <div>\n        这是一个普通组件\n      </div>\n    );\n  }\n}\n```\n在这里使用了ES7里的`decorator`，来提升写法上的优雅，但是实际上它只是一个语法糖，下面这种写法也是可以的。\n```javascript\nconst EnhanceDemo = WithHeader(Demoe);\n```\n\n随后，观察React组件树发生了什么变化，如图所示，可以发现Demo组件被HOC组件包裹起来了，符合了高阶组件的预期，即组件是层层包裹起来的，如同洋葱一样。\n\n{% asset_img hoc1.png 被强化的高阶组件 %}\n\n因为高阶组件最终`return`了一个明为`HOC`的组件,\n所以在多次使用高阶组件之后, 在调试的时候会看到一大推`HOC`组件, 所以要做一个点小的优化, 就是在使用高阶组件包裹后,  应该保留原有的名称,  这样调试才会有好.\n\n我们改写一些上面的高阶组件代码, 增加了`getDisplayName`函数以及静态属性`displayName`, 这个静态属性就是为了查看组件名称的. 这是在去观察呢`DOM Tree`\n\n```javascript\nfunction getDisplayName(component) {\n  return component.displayName || component.name || 'Component';\n}\n\nexport default function ( WrappedComponent ) {\n  return class HOC extends Component {\n    static displayName = `HOC(${getDisplayName(WrappedComponent)})`\n    render () {\n      return (\n        <div>\n          <div>这里是标题</div>\n          <WrappedComponent { ...this.props} />\n        </div>\n      );\n    }\n  };\n}\n```\n这样,  给每个需要增强的组件添加一个静态属性查看组件的名字\n\n{% asset_img hoc2.png 添加静态名称属性 %}\n\n\n#### 总结\n> 上面这个例子里高阶组件只做了一件事, 就是给传入组件添加一个标题样式 ,  这个组件可以是任何一个添加次逻辑的组件上面,  值需要被高阶组件装饰即可.\n> 由此可以看出, 高阶组件的主要功能是封装并抽离组件的通用逻辑, 让此部分逻辑在组件之间更好的复用.\n\n### 高阶组件的进阶用法\n\n#### 1. 组件参数\n\n还是上面这个例子为例,  词高阶函数仅仅只是展示了标题内容`这里是标题`这个名称, 但是为了更好的抽象, 标题内容可以作为参数来获取, 如下面方式调用\n\n```javascript\n// 如果传入参数, 则传入的参数将作为组件的标题呈现\n@WithHeader('Demo')\nexport default class Demo extends Component {\n  render () {\n    return (\n      //...\n    );\n  }\n}\n```\n`WithHeader`需要改写层如下形式, 它接受一个参数, 然后反悔一个高阶组件(函数).\n```javascript\nexport default function (title) {\n  return function (WrappedComponent) {\n    return class HOC extends Component {\n      render () {\n        return (\n          <div>\n            <div className=\"demoe-header\">\n              { title ? title : '这里是标题'}\n            </div>\n            <WrappedComponent { ...this.props } />\n          </div>\n        );\n      }\n    };\n  };\n}\n```\n配合上es6写法可以更加简介\n```javascript\nexport const MyComponent = (title) => (WrappedComponent) => class HOC extends Component {\n  render () {\n    return (\n      <div>\n        <div className=\"demoe-header\">\n          { title ? title : '这里是标题'}\n        </div>\n        <WrappedComponent { ...this.props } />\n      </div>\n    );\n  }\n}\n```\n调用:\n```javascript\nMyComponent('参数传入标图')(Demo);\n```\n上面这个高阶组件能够对`WrappedComponent`组件内的`props`进行操作, 提取`WrappedComponent`中的`state`以及使用其他原属来包裹`WrappedComponent`。`Props Proxy` 作为一层代理，会发生隔离，因此传入 `WrappedComponent` 的 `ref` 将无法访问到其本身(!这里我还没有理解为什么)，需在 `Props Proxy` 内完成中转，具体可参考以下代码，`react-redux` 也是这样实现的。\n\n\n进阶:\n\n```javascript\nfunction getDisplayName(component) {\n  return component.displayName || component.name || 'Component';\n}\n\nexport const ppHOC = WrappedComponent => class PP extends Component {\n  // 添加静态显示名称属性\n  static displayName = `HOC(${WrappedComponent.displayName})`;\n  getWrappedInstance () {\n    return this.wrappedInstance;\n  }\n  // 实现ref的访问\n  setWrappedInstance (ref) {\n    this.wrappedInstance = ref;\n  }\n  render () {\n    return (\n      <WrappedComponent\n          {\n          // 注意这里是一个对象\n          ...this.props\n        ref: this.setWrappedInstance.bind(this)\n          }\n        />\n    );\n  }\n}\n@ppHOC\nclass Example extends React.Component {\n  static displayName = 'Example';\n  handleClick() { ... }\n  ...\n}\nclass App extends React.Component {\n  handleClick() {\n    this.refs.example.getWrappedInstance().handleClick();\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick.bind(this)}>按钮</button>\n        <Example ref=\"example\" />\n      </div>\n    );\n  }\n}\n```\n\n归纳:\n#### HOC的使用范围对比\nHOC 范式 compose(render)(state) 与父组件（Parent Component）的范式 render(render(state))，如果完全利用 HOC 来实现 React 的 implement，将操作与 view 分离，也未尝不可，但却不优雅。HOC 本质上是统一功能抽象，强调逻辑与 UI 分离。但在实际开发中，前端无法逃离 DOM ，而逻辑与 DOM 的相关性主要呈现 3 种关联形式：\n\n- 与 DOM 相关，建议使用父组件，类似于原生 HTML 编写\n- 与 DOM 不相关，如校验、权限、请求发送、数据转换这类，通过数据变化间接控制 DOM，可以使用 HOC 抽象\n- 交叉的部分，DOM 相关，但可以做到完全内聚，即这些 DOM 不会和外部有关联，均可\n\nHOC 适合做 DOM 不相关又是多个组件共性的操作。如 Form 中，validator 校验操作就是纯数据操作的，放到了 HOC 中。但 validator 信息没有放到 HOC 中。但如果能把 Error 信息展示这些逻辑能够完全隔离，也可以放到 HOC 中（可结合下一小节 Form 具体实践详细了解）。\n\n```javascript\nconnect(props => ({\n  usersFetch: `/users?status=${props.status}&page=${props.page}`,\n  userStatsFetch: { url: `/users/stats`, force: true }\n}))(UsersList)\n```\n\n### HOC 的具体实践\nHOC 在真实场景下的运行非常多，之前笔者在 基于Decorator的组件扩展实践 一文中也提过使用高阶组件将更细粒度的组件组合成 Selector 与 Search。结合精读文章，这次让我们通过 Form 组件的抽象来表现 HOC 具有的良好扩展机制。\n\nForm 中会包含各种不同的组件, 常用的有Input, Selector, Chackbox, 等等, 也会有根据业务需求加入自定义组件. form 灵活多变,  从功能上面, 表单验证可能未单组件校验, 也可能为全表单校验, 可能未常规校验, 比如: 非空, 输入限制, 也可能需要与服务端配合, 甚至需要根据业务特点进行定制, 从UI上看, 检验结果显示的位置, 可能在组件下方, 也可能在组件上方.\n\n如果直接漏写form表单, 无意识机械而又重复的, 将`Form`中组件的`validator`, 把value, validator 产生的error信息储存到`state`或`redux store`中, 然后在`view`层完成显示. 这样的具体操作可能都是相同的, 可以进行复用, 只是我们面对的是不同的组件, 不同的validator, 不同的`view`而已. 对于Form而言, 既要满足通用, 又要满足部分个性化的需求, 以往单纯的配置话只会让使用瑜伽繁琐, 我们只需要休想的是Form功能而非UI,  因此通过HOC正对Form的功能进行提取就成为了必然.\n\n至于 HOC 在 Form 上的具体实现，首先将表单中的组件（Input、Selector...）与相应 validator 与组件值回调函数名（trigger）传入 Decorator，将 validator 与 trigger 相绑定。Decorator 完成\n了各种不同组件与 From 内置 Store 间 value 的传递、校验功能的抽象，即精读文章中提到 Props Proxy 方式的其中两种作用：提取state 与 操作props\n[form库](https://github.com/react-component/form)的实现方式就是这种\n```javascript\nimport { createForm } from 'rc-form';\n\nclass Form extends React.Component {\n  submit = () => {\n    this.props.form.validateFields((error, value) => {\n      console.log(error, value);\n    });\n  }\n\n  render() {\n    const { getFieldError, getFieldDecorator } = this.props.form;\n    const errors = getFieldError('required');\n    return (\n      <div>\n        {getFieldDecorator('required', {\n          rules: [{ required: true }],\n        })(<Input />)}\n        {errors ? errors.join(',') : null}\n        <button onClick={this.submit}>submit</button>\n      </div>\n    );\n  }\n}\n\nexport createForm()(Form);\n```\n\n觉得有必要说一下高阶函数和函数传参的区别,  同样,  函数传参也同样能达到效果, 为什么高阶函数就使用起来很方便\n\n\n> [参考文章](https://zhuanlan.zhihu.com/p/27434557)\n> [参考文章](https://yq.aliyun.com/articles/149115?utm_content=m_27063)\n","source":"_posts/react中高阶组件的使用以及技巧.md","raw":"---\ntitle: react中高阶组件的使用以及技巧\ndate: 2017-07-24 16:33:04\ntags:\n    - react-native\n    - react\n    - 高阶组件\n---\n\n{% asset_img react-hoc.png 高阶组件抽象表单功能而非UI %}\n\n[写的不错, 先转载, 之后在写自己的学习成果](https://zhuanlan.zhihu.com/p/27434557)\n\n<!-- more -->\n\n这篇文章完全就是为了更好的理解React中的高阶组件,\n\n### 高阶组件和高阶函数的定义\n\n高阶函数\n接受函数作为参数, 或者输入另一个函数的一类函数,  被称为高阶函数.\n\n对于高阶组件\n接受一个组件作为参数,  这个组件,  可以是纯函数组件也可以`class extends Component`组件. 输出一个新的React组件的组件,  更通俗地描述为，**高阶组件**通过包裹（wrapped）被传入的React组件，经过一系列处理，最终返回一个相对增强（enhanced）的React\n高阶组件是`React`中复用组件逻辑的一种进阶技巧,  他是一种技巧,  并不是什么特别高大上的一种API,  而是一种`React`组件设计理念,  众多的React库已经表明了, 这一设计的价值.例如`React-Redux`\n\n### 实现一个简单的高阶组件\n\n下面我们来实现一个简单的高阶组件(函数),  它接受一个React组件,  然后返回一个增强版的组件\n\n```javascript\n\nexport default function WithHeader(WrappedComponent) {\n  return class HOC extends Component {\n    render () {\n      return (\n        <div>\n          <div className=\"demo-header\">\n            这里是标题\n          </div>\n          <WrappedComponent {...this.props} />\n        </div>\n      );\n    }\n  };\n}\n```\n\n大家可以看出这个组件的效果,  就是给传入的组件添加了一个标题,  但是这个效果我们也可以用其他的方法来实现, 下面说为什么这样设计,  也就是高阶函数的设计优点.\n\n接下来, 我们来使用这个高阶组件,  用来强化之前被作为参数传入的组件\n\n```javascript\n@WithHeader\nexport class Demo extends Component {\n  render () {\n    return (\n      <div>\n        这是一个普通组件\n      </div>\n    );\n  }\n}\n```\n在这里使用了ES7里的`decorator`，来提升写法上的优雅，但是实际上它只是一个语法糖，下面这种写法也是可以的。\n```javascript\nconst EnhanceDemo = WithHeader(Demoe);\n```\n\n随后，观察React组件树发生了什么变化，如图所示，可以发现Demo组件被HOC组件包裹起来了，符合了高阶组件的预期，即组件是层层包裹起来的，如同洋葱一样。\n\n{% asset_img hoc1.png 被强化的高阶组件 %}\n\n因为高阶组件最终`return`了一个明为`HOC`的组件,\n所以在多次使用高阶组件之后, 在调试的时候会看到一大推`HOC`组件, 所以要做一个点小的优化, 就是在使用高阶组件包裹后,  应该保留原有的名称,  这样调试才会有好.\n\n我们改写一些上面的高阶组件代码, 增加了`getDisplayName`函数以及静态属性`displayName`, 这个静态属性就是为了查看组件名称的. 这是在去观察呢`DOM Tree`\n\n```javascript\nfunction getDisplayName(component) {\n  return component.displayName || component.name || 'Component';\n}\n\nexport default function ( WrappedComponent ) {\n  return class HOC extends Component {\n    static displayName = `HOC(${getDisplayName(WrappedComponent)})`\n    render () {\n      return (\n        <div>\n          <div>这里是标题</div>\n          <WrappedComponent { ...this.props} />\n        </div>\n      );\n    }\n  };\n}\n```\n这样,  给每个需要增强的组件添加一个静态属性查看组件的名字\n\n{% asset_img hoc2.png 添加静态名称属性 %}\n\n\n#### 总结\n> 上面这个例子里高阶组件只做了一件事, 就是给传入组件添加一个标题样式 ,  这个组件可以是任何一个添加次逻辑的组件上面,  值需要被高阶组件装饰即可.\n> 由此可以看出, 高阶组件的主要功能是封装并抽离组件的通用逻辑, 让此部分逻辑在组件之间更好的复用.\n\n### 高阶组件的进阶用法\n\n#### 1. 组件参数\n\n还是上面这个例子为例,  词高阶函数仅仅只是展示了标题内容`这里是标题`这个名称, 但是为了更好的抽象, 标题内容可以作为参数来获取, 如下面方式调用\n\n```javascript\n// 如果传入参数, 则传入的参数将作为组件的标题呈现\n@WithHeader('Demo')\nexport default class Demo extends Component {\n  render () {\n    return (\n      //...\n    );\n  }\n}\n```\n`WithHeader`需要改写层如下形式, 它接受一个参数, 然后反悔一个高阶组件(函数).\n```javascript\nexport default function (title) {\n  return function (WrappedComponent) {\n    return class HOC extends Component {\n      render () {\n        return (\n          <div>\n            <div className=\"demoe-header\">\n              { title ? title : '这里是标题'}\n            </div>\n            <WrappedComponent { ...this.props } />\n          </div>\n        );\n      }\n    };\n  };\n}\n```\n配合上es6写法可以更加简介\n```javascript\nexport const MyComponent = (title) => (WrappedComponent) => class HOC extends Component {\n  render () {\n    return (\n      <div>\n        <div className=\"demoe-header\">\n          { title ? title : '这里是标题'}\n        </div>\n        <WrappedComponent { ...this.props } />\n      </div>\n    );\n  }\n}\n```\n调用:\n```javascript\nMyComponent('参数传入标图')(Demo);\n```\n上面这个高阶组件能够对`WrappedComponent`组件内的`props`进行操作, 提取`WrappedComponent`中的`state`以及使用其他原属来包裹`WrappedComponent`。`Props Proxy` 作为一层代理，会发生隔离，因此传入 `WrappedComponent` 的 `ref` 将无法访问到其本身(!这里我还没有理解为什么)，需在 `Props Proxy` 内完成中转，具体可参考以下代码，`react-redux` 也是这样实现的。\n\n\n进阶:\n\n```javascript\nfunction getDisplayName(component) {\n  return component.displayName || component.name || 'Component';\n}\n\nexport const ppHOC = WrappedComponent => class PP extends Component {\n  // 添加静态显示名称属性\n  static displayName = `HOC(${WrappedComponent.displayName})`;\n  getWrappedInstance () {\n    return this.wrappedInstance;\n  }\n  // 实现ref的访问\n  setWrappedInstance (ref) {\n    this.wrappedInstance = ref;\n  }\n  render () {\n    return (\n      <WrappedComponent\n          {\n          // 注意这里是一个对象\n          ...this.props\n        ref: this.setWrappedInstance.bind(this)\n          }\n        />\n    );\n  }\n}\n@ppHOC\nclass Example extends React.Component {\n  static displayName = 'Example';\n  handleClick() { ... }\n  ...\n}\nclass App extends React.Component {\n  handleClick() {\n    this.refs.example.getWrappedInstance().handleClick();\n  }\n  render() {\n    return (\n      <div>\n        <button onClick={this.handleClick.bind(this)}>按钮</button>\n        <Example ref=\"example\" />\n      </div>\n    );\n  }\n}\n```\n\n归纳:\n#### HOC的使用范围对比\nHOC 范式 compose(render)(state) 与父组件（Parent Component）的范式 render(render(state))，如果完全利用 HOC 来实现 React 的 implement，将操作与 view 分离，也未尝不可，但却不优雅。HOC 本质上是统一功能抽象，强调逻辑与 UI 分离。但在实际开发中，前端无法逃离 DOM ，而逻辑与 DOM 的相关性主要呈现 3 种关联形式：\n\n- 与 DOM 相关，建议使用父组件，类似于原生 HTML 编写\n- 与 DOM 不相关，如校验、权限、请求发送、数据转换这类，通过数据变化间接控制 DOM，可以使用 HOC 抽象\n- 交叉的部分，DOM 相关，但可以做到完全内聚，即这些 DOM 不会和外部有关联，均可\n\nHOC 适合做 DOM 不相关又是多个组件共性的操作。如 Form 中，validator 校验操作就是纯数据操作的，放到了 HOC 中。但 validator 信息没有放到 HOC 中。但如果能把 Error 信息展示这些逻辑能够完全隔离，也可以放到 HOC 中（可结合下一小节 Form 具体实践详细了解）。\n\n```javascript\nconnect(props => ({\n  usersFetch: `/users?status=${props.status}&page=${props.page}`,\n  userStatsFetch: { url: `/users/stats`, force: true }\n}))(UsersList)\n```\n\n### HOC 的具体实践\nHOC 在真实场景下的运行非常多，之前笔者在 基于Decorator的组件扩展实践 一文中也提过使用高阶组件将更细粒度的组件组合成 Selector 与 Search。结合精读文章，这次让我们通过 Form 组件的抽象来表现 HOC 具有的良好扩展机制。\n\nForm 中会包含各种不同的组件, 常用的有Input, Selector, Chackbox, 等等, 也会有根据业务需求加入自定义组件. form 灵活多变,  从功能上面, 表单验证可能未单组件校验, 也可能为全表单校验, 可能未常规校验, 比如: 非空, 输入限制, 也可能需要与服务端配合, 甚至需要根据业务特点进行定制, 从UI上看, 检验结果显示的位置, 可能在组件下方, 也可能在组件上方.\n\n如果直接漏写form表单, 无意识机械而又重复的, 将`Form`中组件的`validator`, 把value, validator 产生的error信息储存到`state`或`redux store`中, 然后在`view`层完成显示. 这样的具体操作可能都是相同的, 可以进行复用, 只是我们面对的是不同的组件, 不同的validator, 不同的`view`而已. 对于Form而言, 既要满足通用, 又要满足部分个性化的需求, 以往单纯的配置话只会让使用瑜伽繁琐, 我们只需要休想的是Form功能而非UI,  因此通过HOC正对Form的功能进行提取就成为了必然.\n\n至于 HOC 在 Form 上的具体实现，首先将表单中的组件（Input、Selector...）与相应 validator 与组件值回调函数名（trigger）传入 Decorator，将 validator 与 trigger 相绑定。Decorator 完成\n了各种不同组件与 From 内置 Store 间 value 的传递、校验功能的抽象，即精读文章中提到 Props Proxy 方式的其中两种作用：提取state 与 操作props\n[form库](https://github.com/react-component/form)的实现方式就是这种\n```javascript\nimport { createForm } from 'rc-form';\n\nclass Form extends React.Component {\n  submit = () => {\n    this.props.form.validateFields((error, value) => {\n      console.log(error, value);\n    });\n  }\n\n  render() {\n    const { getFieldError, getFieldDecorator } = this.props.form;\n    const errors = getFieldError('required');\n    return (\n      <div>\n        {getFieldDecorator('required', {\n          rules: [{ required: true }],\n        })(<Input />)}\n        {errors ? errors.join(',') : null}\n        <button onClick={this.submit}>submit</button>\n      </div>\n    );\n  }\n}\n\nexport createForm()(Form);\n```\n\n觉得有必要说一下高阶函数和函数传参的区别,  同样,  函数传参也同样能达到效果, 为什么高阶函数就使用起来很方便\n\n\n> [参考文章](https://zhuanlan.zhihu.com/p/27434557)\n> [参考文章](https://yq.aliyun.com/articles/149115?utm_content=m_27063)\n","slug":"react中高阶组件的使用以及技巧","published":1,"updated":"2019-05-13T03:56:03.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebe6003wa0dmg1223qyy","content":"<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/react-hoc.png\" alt=\"高阶组件抽象表单功能而非UI\" title=\"高阶组件抽象表单功能而非UI\">\n<p><a href=\"https://zhuanlan.zhihu.com/p/27434557\" target=\"_blank\" rel=\"external\">写的不错, 先转载, 之后在写自己的学习成果</a></p>\n<a id=\"more\"></a>\n<p>这篇文章完全就是为了更好的理解React中的高阶组件,</p>\n<h3 id=\"高阶组件和高阶函数的定义\"><a href=\"#高阶组件和高阶函数的定义\" class=\"headerlink\" title=\"高阶组件和高阶函数的定义\"></a>高阶组件和高阶函数的定义</h3><p>高阶函数<br>接受函数作为参数, 或者输入另一个函数的一类函数,  被称为高阶函数.</p>\n<p>对于高阶组件<br>接受一个组件作为参数,  这个组件,  可以是纯函数组件也可以<code>class extends Component</code>组件. 输出一个新的React组件的组件,  更通俗地描述为，<strong>高阶组件</strong>通过包裹（wrapped）被传入的React组件，经过一系列处理，最终返回一个相对增强（enhanced）的React<br>高阶组件是<code>React</code>中复用组件逻辑的一种进阶技巧,  他是一种技巧,  并不是什么特别高大上的一种API,  而是一种<code>React</code>组件设计理念,  众多的React库已经表明了, 这一设计的价值.例如<code>React-Redux</code></p>\n<h3 id=\"实现一个简单的高阶组件\"><a href=\"#实现一个简单的高阶组件\" class=\"headerlink\" title=\"实现一个简单的高阶组件\"></a>实现一个简单的高阶组件</h3><p>下面我们来实现一个简单的高阶组件(函数),  它接受一个React组件,  然后返回一个增强版的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WithHeader</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"demo-header\"</span>&gt;</span></div><div class=\"line\">            这里是标题</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123;<span class=\"attr\">...this.props</span>&#125; /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大家可以看出这个组件的效果,  就是给传入的组件添加了一个标题,  但是这个效果我们也可以用其他的方法来实现, 下面说为什么这样设计,  也就是高阶函数的设计优点.</p>\n<p>接下来, 我们来使用这个高阶组件,  用来强化之前被作为参数传入的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@WithHeader</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        这是一个普通组件</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里使用了ES7里的<code>decorator</code>，来提升写法上的优雅，但是实际上它只是一个语法糖，下面这种写法也是可以的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> EnhanceDemo = WithHeader(Demoe);</div></pre></td></tr></table></figure></p>\n<p>随后，观察React组件树发生了什么变化，如图所示，可以发现Demo组件被HOC组件包裹起来了，符合了高阶组件的预期，即组件是层层包裹起来的，如同洋葱一样。</p>\n<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/hoc1.png\" alt=\"被强化的高阶组件\" title=\"被强化的高阶组件\">\n<p>因为高阶组件最终<code>return</code>了一个明为<code>HOC</code>的组件,<br>所以在多次使用高阶组件之后, 在调试的时候会看到一大推<code>HOC</code>组件, 所以要做一个点小的优化, 就是在使用高阶组件包裹后,  应该保留原有的名称,  这样调试才会有好.</p>\n<p>我们改写一些上面的高阶组件代码, 增加了<code>getDisplayName</code>函数以及静态属性<code>displayName</code>, 这个静态属性就是为了查看组件名称的. 这是在去观察呢<code>DOM Tree</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDisplayName</span>(<span class=\"params\">component</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> component.displayName || component.name || <span class=\"string\">'Component'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> WrappedComponent </span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> displayName = <span class=\"string\">`HOC(<span class=\"subst\">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></div><div class=\"line\">    render () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这里是标题<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123; <span class=\"attr\">...this.props</span>&#125; /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样,  给每个需要增强的组件添加一个静态属性查看组件的名字</p>\n<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/hoc2.png\" alt=\"添加静态名称属性\" title=\"添加静态名称属性\">\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><blockquote>\n<p>上面这个例子里高阶组件只做了一件事, 就是给传入组件添加一个标题样式 ,  这个组件可以是任何一个添加次逻辑的组件上面,  值需要被高阶组件装饰即可.<br>由此可以看出, 高阶组件的主要功能是封装并抽离组件的通用逻辑, 让此部分逻辑在组件之间更好的复用.</p>\n</blockquote>\n<h3 id=\"高阶组件的进阶用法\"><a href=\"#高阶组件的进阶用法\" class=\"headerlink\" title=\"高阶组件的进阶用法\"></a>高阶组件的进阶用法</h3><h4 id=\"1-组件参数\"><a href=\"#1-组件参数\" class=\"headerlink\" title=\"1. 组件参数\"></a>1. 组件参数</h4><p>还是上面这个例子为例,  词高阶函数仅仅只是展示了标题内容<code>这里是标题</code>这个名称, 但是为了更好的抽象, 标题内容可以作为参数来获取, 如下面方式调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果传入参数, 则传入的参数将作为组件的标题呈现</span></div><div class=\"line\">@WithHeader(<span class=\"string\">'Demo'</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"comment\">//...</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>WithHeader</code>需要改写层如下形式, 它接受一个参数, 然后反悔一个高阶组件(函数).<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">title</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">WrappedComponent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">      render () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">          <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"demoe-header\"</span>&gt;</span></div><div class=\"line\">              &#123; title ? title : '这里是标题'&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123; <span class=\"attr\">...this.props</span> &#125; /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配合上es6写法可以更加简介<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> MyComponent = <span class=\"function\">(<span class=\"params\">title</span>) =&gt;</span> (WrappedComponent) =&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"demoe-header\"</span>&gt;</span></div><div class=\"line\">          &#123; title ? title : '这里是标题'&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123; <span class=\"attr\">...this.props</span> &#125; /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyComponent(<span class=\"string\">'参数传入标图'</span>)(Demo);</div></pre></td></tr></table></figure></p>\n<p>上面这个高阶组件能够对<code>WrappedComponent</code>组件内的<code>props</code>进行操作, 提取<code>WrappedComponent</code>中的<code>state</code>以及使用其他原属来包裹<code>WrappedComponent</code>。<code>Props Proxy</code> 作为一层代理，会发生隔离，因此传入 <code>WrappedComponent</code> 的 <code>ref</code> 将无法访问到其本身(!这里我还没有理解为什么)，需在 <code>Props Proxy</code> 内完成中转，具体可参考以下代码，<code>react-redux</code> 也是这样实现的。</p>\n<p>进阶:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDisplayName</span>(<span class=\"params\">component</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> component.displayName || component.name || <span class=\"string\">'Component'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ppHOC = <span class=\"function\"><span class=\"params\">WrappedComponent</span> =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PP</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 添加静态显示名称属性</span></div><div class=\"line\">  <span class=\"keyword\">static</span> displayName = <span class=\"string\">`HOC(<span class=\"subst\">$&#123;WrappedComponent.displayName&#125;</span>)`</span>;</div><div class=\"line\">  getWrappedInstance () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.wrappedInstance;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 实现ref的访问</span></div><div class=\"line\">  setWrappedInstance (ref) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.wrappedInstance = ref;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;WrappedComponent</div><div class=\"line\">          &#123;</div><div class=\"line\">          // 注意这里是一个对象</div><div class=\"line\">          ...this.props</div><div class=\"line\">        ref: this.setWrappedInstance.bind(this)</div><div class=\"line\">          &#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@ppHOC</div><div class=\"line\">class Example extends React.Component &#123;</div><div class=\"line\">  static displayName = 'Example';</div><div class=\"line\">  handleClick() &#123; ... &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\">class App extends React.Component &#123;</div><div class=\"line\">  handleClick() &#123;</div><div class=\"line\">    this.refs.example.getWrappedInstance().handleClick();</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;button onClick=&#123;this.handleClick.bind(this)&#125;&gt;按钮&lt;/button&gt;</div><div class=\"line\">        &lt;Example ref=\"example\" /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>归纳:</p>\n<h4 id=\"HOC的使用范围对比\"><a href=\"#HOC的使用范围对比\" class=\"headerlink\" title=\"HOC的使用范围对比\"></a>HOC的使用范围对比</h4><p>HOC 范式 compose(render)(state) 与父组件（Parent Component）的范式 render(render(state))，如果完全利用 HOC 来实现 React 的 implement，将操作与 view 分离，也未尝不可，但却不优雅。HOC 本质上是统一功能抽象，强调逻辑与 UI 分离。但在实际开发中，前端无法逃离 DOM ，而逻辑与 DOM 的相关性主要呈现 3 种关联形式：</p>\n<ul>\n<li>与 DOM 相关，建议使用父组件，类似于原生 HTML 编写</li>\n<li>与 DOM 不相关，如校验、权限、请求发送、数据转换这类，通过数据变化间接控制 DOM，可以使用 HOC 抽象</li>\n<li>交叉的部分，DOM 相关，但可以做到完全内聚，即这些 DOM 不会和外部有关联，均可</li>\n</ul>\n<p>HOC 适合做 DOM 不相关又是多个组件共性的操作。如 Form 中，validator 校验操作就是纯数据操作的，放到了 HOC 中。但 validator 信息没有放到 HOC 中。但如果能把 Error 信息展示这些逻辑能够完全隔离，也可以放到 HOC 中（可结合下一小节 Form 具体实践详细了解）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect(<span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">usersFetch</span>: <span class=\"string\">`/users?status=<span class=\"subst\">$&#123;props.status&#125;</span>&amp;page=<span class=\"subst\">$&#123;props.page&#125;</span>`</span>,</div><div class=\"line\">  <span class=\"attr\">userStatsFetch</span>: &#123; <span class=\"attr\">url</span>: <span class=\"string\">`/users/stats`</span>, <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;</div><div class=\"line\">&#125;))(UsersList)</div></pre></td></tr></table></figure>\n<h3 id=\"HOC-的具体实践\"><a href=\"#HOC-的具体实践\" class=\"headerlink\" title=\"HOC 的具体实践\"></a>HOC 的具体实践</h3><p>HOC 在真实场景下的运行非常多，之前笔者在 基于Decorator的组件扩展实践 一文中也提过使用高阶组件将更细粒度的组件组合成 Selector 与 Search。结合精读文章，这次让我们通过 Form 组件的抽象来表现 HOC 具有的良好扩展机制。</p>\n<p>Form 中会包含各种不同的组件, 常用的有Input, Selector, Chackbox, 等等, 也会有根据业务需求加入自定义组件. form 灵活多变,  从功能上面, 表单验证可能未单组件校验, 也可能为全表单校验, 可能未常规校验, 比如: 非空, 输入限制, 也可能需要与服务端配合, 甚至需要根据业务特点进行定制, 从UI上看, 检验结果显示的位置, 可能在组件下方, 也可能在组件上方.</p>\n<p>如果直接漏写form表单, 无意识机械而又重复的, 将<code>Form</code>中组件的<code>validator</code>, 把value, validator 产生的error信息储存到<code>state</code>或<code>redux store</code>中, 然后在<code>view</code>层完成显示. 这样的具体操作可能都是相同的, 可以进行复用, 只是我们面对的是不同的组件, 不同的validator, 不同的<code>view</code>而已. 对于Form而言, 既要满足通用, 又要满足部分个性化的需求, 以往单纯的配置话只会让使用瑜伽繁琐, 我们只需要休想的是Form功能而非UI,  因此通过HOC正对Form的功能进行提取就成为了必然.</p>\n<p>至于 HOC 在 Form 上的具体实现，首先将表单中的组件（Input、Selector…）与相应 validator 与组件值回调函数名（trigger）传入 Decorator，将 validator 与 trigger 相绑定。Decorator 完成<br>了各种不同组件与 From 内置 Store 间 value 的传递、校验功能的抽象，即精读文章中提到 Props Proxy 方式的其中两种作用：提取state 与 操作props<br><a href=\"https://github.com/react-component/form\" target=\"_blank\" rel=\"external\">form库</a>的实现方式就是这种<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rc-form'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Form</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  submit = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.form.validateFields(<span class=\"function\">(<span class=\"params\">error, value</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(error, value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; getFieldError, getFieldDecorator &#125; = <span class=\"keyword\">this</span>.props.form;</div><div class=\"line\">    <span class=\"keyword\">const</span> errors = getFieldError(<span class=\"string\">'required'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#123;getFieldDecorator('required', &#123;</div><div class=\"line\">          rules: [&#123; required: true &#125;],</div><div class=\"line\">        &#125;)(<span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span>)&#125;</div><div class=\"line\">        &#123;errors ? errors.join(',') : null&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.submit&#125;</span>&gt;</span>submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> createForm()(Form);</div></pre></td></tr></table></figure></p>\n<p>觉得有必要说一下高阶函数和函数传参的区别,  同样,  函数传参也同样能达到效果, 为什么高阶函数就使用起来很方便</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/27434557\" target=\"_blank\" rel=\"external\">参考文章</a><br><a href=\"https://yq.aliyun.com/articles/149115?utm_content=m_27063\" target=\"_blank\" rel=\"external\">参考文章</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/react-hoc.png\" alt=\"高阶组件抽象表单功能而非UI\" title=\"高阶组件抽象表单功能而非UI\">\n<p><a href=\"https://zhuanlan.zhihu.com/p/27434557\" target=\"_blank\" rel=\"external\">写的不错, 先转载, 之后在写自己的学习成果</a></p>","more":"<p>这篇文章完全就是为了更好的理解React中的高阶组件,</p>\n<h3 id=\"高阶组件和高阶函数的定义\"><a href=\"#高阶组件和高阶函数的定义\" class=\"headerlink\" title=\"高阶组件和高阶函数的定义\"></a>高阶组件和高阶函数的定义</h3><p>高阶函数<br>接受函数作为参数, 或者输入另一个函数的一类函数,  被称为高阶函数.</p>\n<p>对于高阶组件<br>接受一个组件作为参数,  这个组件,  可以是纯函数组件也可以<code>class extends Component</code>组件. 输出一个新的React组件的组件,  更通俗地描述为，<strong>高阶组件</strong>通过包裹（wrapped）被传入的React组件，经过一系列处理，最终返回一个相对增强（enhanced）的React<br>高阶组件是<code>React</code>中复用组件逻辑的一种进阶技巧,  他是一种技巧,  并不是什么特别高大上的一种API,  而是一种<code>React</code>组件设计理念,  众多的React库已经表明了, 这一设计的价值.例如<code>React-Redux</code></p>\n<h3 id=\"实现一个简单的高阶组件\"><a href=\"#实现一个简单的高阶组件\" class=\"headerlink\" title=\"实现一个简单的高阶组件\"></a>实现一个简单的高阶组件</h3><p>下面我们来实现一个简单的高阶组件(函数),  它接受一个React组件,  然后返回一个增强版的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">WithHeader</span>(<span class=\"params\">WrappedComponent</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"demo-header\"</span>&gt;</span></div><div class=\"line\">            这里是标题</div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123;<span class=\"attr\">...this.props</span>&#125; /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>大家可以看出这个组件的效果,  就是给传入的组件添加了一个标题,  但是这个效果我们也可以用其他的方法来实现, 下面说为什么这样设计,  也就是高阶函数的设计优点.</p>\n<p>接下来, 我们来使用这个高阶组件,  用来强化之前被作为参数传入的组件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">@WithHeader</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        这是一个普通组件</div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这里使用了ES7里的<code>decorator</code>，来提升写法上的优雅，但是实际上它只是一个语法糖，下面这种写法也是可以的。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> EnhanceDemo = WithHeader(Demoe);</div></pre></td></tr></table></figure></p>\n<p>随后，观察React组件树发生了什么变化，如图所示，可以发现Demo组件被HOC组件包裹起来了，符合了高阶组件的预期，即组件是层层包裹起来的，如同洋葱一样。</p>\n<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/hoc1.png\" alt=\"被强化的高阶组件\" title=\"被强化的高阶组件\">\n<p>因为高阶组件最终<code>return</code>了一个明为<code>HOC</code>的组件,<br>所以在多次使用高阶组件之后, 在调试的时候会看到一大推<code>HOC</code>组件, 所以要做一个点小的优化, 就是在使用高阶组件包裹后,  应该保留原有的名称,  这样调试才会有好.</p>\n<p>我们改写一些上面的高阶组件代码, 增加了<code>getDisplayName</code>函数以及静态属性<code>displayName</code>, 这个静态属性就是为了查看组件名称的. 这是在去观察呢<code>DOM Tree</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDisplayName</span>(<span class=\"params\">component</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> component.displayName || component.name || <span class=\"string\">'Component'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"> WrappedComponent </span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> displayName = <span class=\"string\">`HOC(<span class=\"subst\">$&#123;getDisplayName(WrappedComponent)&#125;</span>)`</span></div><div class=\"line\">    render () &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> (</div><div class=\"line\">        <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>这里是标题<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123; <span class=\"attr\">...this.props</span>&#125; /&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">      );</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样,  给每个需要增强的组件添加一个静态属性查看组件的名字</p>\n<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/hoc2.png\" alt=\"添加静态名称属性\" title=\"添加静态名称属性\">\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><blockquote>\n<p>上面这个例子里高阶组件只做了一件事, 就是给传入组件添加一个标题样式 ,  这个组件可以是任何一个添加次逻辑的组件上面,  值需要被高阶组件装饰即可.<br>由此可以看出, 高阶组件的主要功能是封装并抽离组件的通用逻辑, 让此部分逻辑在组件之间更好的复用.</p>\n</blockquote>\n<h3 id=\"高阶组件的进阶用法\"><a href=\"#高阶组件的进阶用法\" class=\"headerlink\" title=\"高阶组件的进阶用法\"></a>高阶组件的进阶用法</h3><h4 id=\"1-组件参数\"><a href=\"#1-组件参数\" class=\"headerlink\" title=\"1. 组件参数\"></a>1. 组件参数</h4><p>还是上面这个例子为例,  词高阶函数仅仅只是展示了标题内容<code>这里是标题</code>这个名称, 但是为了更好的抽象, 标题内容可以作为参数来获取, 如下面方式调用</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 如果传入参数, 则传入的参数将作为组件的标题呈现</span></div><div class=\"line\">@WithHeader(<span class=\"string\">'Demo'</span>)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"comment\">//...</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>WithHeader</code>需要改写层如下形式, 它接受一个参数, 然后反悔一个高阶组件(函数).<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">title</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">WrappedComponent</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">      render () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">          <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"demoe-header\"</span>&gt;</span></div><div class=\"line\">              &#123; title ? title : '这里是标题'&#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123; <span class=\"attr\">...this.props</span> &#125; /&gt;</span></div><div class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        );</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>配合上es6写法可以更加简介<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> MyComponent = <span class=\"function\">(<span class=\"params\">title</span>) =&gt;</span> (WrappedComponent) =&gt; <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HOC</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">className</span>=<span class=\"string\">\"demoe-header\"</span>&gt;</span></div><div class=\"line\">          &#123; title ? title : '这里是标题'&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">WrappedComponent</span> &#123; <span class=\"attr\">...this.props</span> &#125; /&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>调用:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">MyComponent(<span class=\"string\">'参数传入标图'</span>)(Demo);</div></pre></td></tr></table></figure></p>\n<p>上面这个高阶组件能够对<code>WrappedComponent</code>组件内的<code>props</code>进行操作, 提取<code>WrappedComponent</code>中的<code>state</code>以及使用其他原属来包裹<code>WrappedComponent</code>。<code>Props Proxy</code> 作为一层代理，会发生隔离，因此传入 <code>WrappedComponent</code> 的 <code>ref</code> 将无法访问到其本身(!这里我还没有理解为什么)，需在 <code>Props Proxy</code> 内完成中转，具体可参考以下代码，<code>react-redux</code> 也是这样实现的。</p>\n<p>进阶:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDisplayName</span>(<span class=\"params\">component</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> component.displayName || component.name || <span class=\"string\">'Component'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ppHOC = <span class=\"function\"><span class=\"params\">WrappedComponent</span> =&gt;</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PP</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 添加静态显示名称属性</span></div><div class=\"line\">  <span class=\"keyword\">static</span> displayName = <span class=\"string\">`HOC(<span class=\"subst\">$&#123;WrappedComponent.displayName&#125;</span>)`</span>;</div><div class=\"line\">  getWrappedInstance () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.wrappedInstance;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"comment\">// 实现ref的访问</span></div><div class=\"line\">  setWrappedInstance (ref) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.wrappedInstance = ref;</div><div class=\"line\">  &#125;</div><div class=\"line\">  render () &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      &lt;WrappedComponent</div><div class=\"line\">          &#123;</div><div class=\"line\">          // 注意这里是一个对象</div><div class=\"line\">          ...this.props</div><div class=\"line\">        ref: this.setWrappedInstance.bind(this)</div><div class=\"line\">          &#125;</div><div class=\"line\">        /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@ppHOC</div><div class=\"line\">class Example extends React.Component &#123;</div><div class=\"line\">  static displayName = 'Example';</div><div class=\"line\">  handleClick() &#123; ... &#125;</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\">class App extends React.Component &#123;</div><div class=\"line\">  handleClick() &#123;</div><div class=\"line\">    this.refs.example.getWrappedInstance().handleClick();</div><div class=\"line\">  &#125;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        &lt;button onClick=&#123;this.handleClick.bind(this)&#125;&gt;按钮&lt;/button&gt;</div><div class=\"line\">        &lt;Example ref=\"example\" /&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>归纳:</p>\n<h4 id=\"HOC的使用范围对比\"><a href=\"#HOC的使用范围对比\" class=\"headerlink\" title=\"HOC的使用范围对比\"></a>HOC的使用范围对比</h4><p>HOC 范式 compose(render)(state) 与父组件（Parent Component）的范式 render(render(state))，如果完全利用 HOC 来实现 React 的 implement，将操作与 view 分离，也未尝不可，但却不优雅。HOC 本质上是统一功能抽象，强调逻辑与 UI 分离。但在实际开发中，前端无法逃离 DOM ，而逻辑与 DOM 的相关性主要呈现 3 种关联形式：</p>\n<ul>\n<li>与 DOM 相关，建议使用父组件，类似于原生 HTML 编写</li>\n<li>与 DOM 不相关，如校验、权限、请求发送、数据转换这类，通过数据变化间接控制 DOM，可以使用 HOC 抽象</li>\n<li>交叉的部分，DOM 相关，但可以做到完全内聚，即这些 DOM 不会和外部有关联，均可</li>\n</ul>\n<p>HOC 适合做 DOM 不相关又是多个组件共性的操作。如 Form 中，validator 校验操作就是纯数据操作的，放到了 HOC 中。但 validator 信息没有放到 HOC 中。但如果能把 Error 信息展示这些逻辑能够完全隔离，也可以放到 HOC 中（可结合下一小节 Form 具体实践详细了解）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">connect(<span class=\"function\"><span class=\"params\">props</span> =&gt;</span> (&#123;</div><div class=\"line\">  <span class=\"attr\">usersFetch</span>: <span class=\"string\">`/users?status=<span class=\"subst\">$&#123;props.status&#125;</span>&amp;page=<span class=\"subst\">$&#123;props.page&#125;</span>`</span>,</div><div class=\"line\">  <span class=\"attr\">userStatsFetch</span>: &#123; <span class=\"attr\">url</span>: <span class=\"string\">`/users/stats`</span>, <span class=\"attr\">force</span>: <span class=\"literal\">true</span> &#125;</div><div class=\"line\">&#125;))(UsersList)</div></pre></td></tr></table></figure>\n<h3 id=\"HOC-的具体实践\"><a href=\"#HOC-的具体实践\" class=\"headerlink\" title=\"HOC 的具体实践\"></a>HOC 的具体实践</h3><p>HOC 在真实场景下的运行非常多，之前笔者在 基于Decorator的组件扩展实践 一文中也提过使用高阶组件将更细粒度的组件组合成 Selector 与 Search。结合精读文章，这次让我们通过 Form 组件的抽象来表现 HOC 具有的良好扩展机制。</p>\n<p>Form 中会包含各种不同的组件, 常用的有Input, Selector, Chackbox, 等等, 也会有根据业务需求加入自定义组件. form 灵活多变,  从功能上面, 表单验证可能未单组件校验, 也可能为全表单校验, 可能未常规校验, 比如: 非空, 输入限制, 也可能需要与服务端配合, 甚至需要根据业务特点进行定制, 从UI上看, 检验结果显示的位置, 可能在组件下方, 也可能在组件上方.</p>\n<p>如果直接漏写form表单, 无意识机械而又重复的, 将<code>Form</code>中组件的<code>validator</code>, 把value, validator 产生的error信息储存到<code>state</code>或<code>redux store</code>中, 然后在<code>view</code>层完成显示. 这样的具体操作可能都是相同的, 可以进行复用, 只是我们面对的是不同的组件, 不同的validator, 不同的<code>view</code>而已. 对于Form而言, 既要满足通用, 又要满足部分个性化的需求, 以往单纯的配置话只会让使用瑜伽繁琐, 我们只需要休想的是Form功能而非UI,  因此通过HOC正对Form的功能进行提取就成为了必然.</p>\n<p>至于 HOC 在 Form 上的具体实现，首先将表单中的组件（Input、Selector…）与相应 validator 与组件值回调函数名（trigger）传入 Decorator，将 validator 与 trigger 相绑定。Decorator 完成<br>了各种不同组件与 From 内置 Store 间 value 的传递、校验功能的抽象，即精读文章中提到 Props Proxy 方式的其中两种作用：提取state 与 操作props<br><a href=\"https://github.com/react-component/form\" target=\"_blank\" rel=\"external\">form库</a>的实现方式就是这种<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createForm &#125; <span class=\"keyword\">from</span> <span class=\"string\">'rc-form'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Form</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  submit = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.props.form.validateFields(<span class=\"function\">(<span class=\"params\">error, value</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(error, value);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> &#123; getFieldError, getFieldDecorator &#125; = <span class=\"keyword\">this</span>.props.form;</div><div class=\"line\">    <span class=\"keyword\">const</span> errors = getFieldError(<span class=\"string\">'required'</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#123;getFieldDecorator('required', &#123;</div><div class=\"line\">          rules: [&#123; required: true &#125;],</div><div class=\"line\">        &#125;)(<span class=\"tag\">&lt;<span class=\"name\">Input</span> /&gt;</span>)&#125;</div><div class=\"line\">        &#123;errors ? errors.join(',') : null&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.submit&#125;</span>&gt;</span>submit<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> createForm()(Form);</div></pre></td></tr></table></figure></p>\n<p>觉得有必要说一下高阶函数和函数传参的区别,  同样,  函数传参也同样能达到效果, 为什么高阶函数就使用起来很方便</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/27434557\" target=\"_blank\" rel=\"external\">参考文章</a><br><a href=\"https://yq.aliyun.com/articles/149115?utm_content=m_27063\" target=\"_blank\" rel=\"external\">参考文章</a></p>\n</blockquote>"},{"layout":"post","title":"react使用服务器渲染来优化SEO","date":"2018-02-26T09:46:10.000Z","_content":"\nseo我认为这个就是搜索引擎没有吧这个东西做好, 然后就把这个抛给了开发者(百度), 看看google, 在2015年就把这个事情给解决了, 不光分析你的`html`代码还分析你的`css`和`javascript`脚本\n不过没有办法谁让我们出门不用穿防弹衣呢!!!\n\n动态页面想要做好seo优化, 在网上看了看常用的有两种\n- 使用`PhantomJS`爬虫来解决(改变html内容结构)\n- 使用服务端渲染(使用react的`renderToString`使用服务器来输入renderToString之后的html内容)\n\n# react, redux, react-router配合使用实例\nreact中提供了两个方法`renderToString` 和 `renderToStaticMarkup` 用来将组件（Virtual DOM）输出成 HTML 字符串，这是 React 服务器端渲染的基础，它移除了服务器端对于浏览器环境的依赖，所以让服务器端渲染变成了一件有吸引力的事情。\n\n想要达到服务器渲染除了解决浏览器环境的依赖, 还要解决两个问题\n- 前后端可以共享代码\n- 前后端路由可以统一处理\n\n这里我们使用`react-router`来管理路由, 使用`redux`来管理stroe\n\n这里不介绍`redux`的使用, 大家可以[redux中文](http://cn.redux.js.org/index.html)来学习redux\n\n## react-router\n[`react-router`](https://github.com/ReactTraining/react-router)是通过一种声明式的方式匹配不同路由来分配不同组建内容的, 通过`props`来变更路由然后出发`re-render`\n\n假设有一个很简单的应用，只有两个页面，一个列表页 `/list` 和一个详情页 `/item/:id`，点击列表上的条目进入详情页。\n\n可以这样定义路由，`./routes.js`\n\n```javascript\nimport React from 'react';\nimport { Route } from 'react-router';\nimport { List, Item } from './components';\n\n// 无状态（stateless）组件，一个简单的容器，react-router 会根据 route\n// 规则匹配到的组件作为 `props.children` 传入\nconst Container = (props) => {\n  return (\n    <div>{props.children}</div>\n  );\n};\n\n// 配置route 规则：\n// - `/list` 显示 `List` 组件\n// - `/item/:id` 显示 `Item` 组件\nconst routes = (\n  <Route path=\"/\" component={Container} >\n    <Route path=\"list\" component={List} />\n    <Route path=\"item/:id\" component={Item} />\n  </Route>\n);\n\nexport default routes;\n```\n\n上面可以看出我们指定了一个列表页 `/list` 和一个详情页 `/item/:id`，点击列表上的条目进入详情页。分别对应组建`List`和`Item`组建\n接下来我们就通过这个简单的例子来实现服务器渲染的细节.\n\n## Reducers\nredux中store是由reducer产出的, 所以reducer实际上反应了Store的树结构\n\n`./reducers/index.js`\n\n```javascript\nimport listReducer from './list';\nimport itemReducer from './item';\n\nexport default function rootReducer(state = {}, action) {\n  return {\n    list: listReducer(state.list, action),\n    item: itemReducer(state.item, action)\n  };\n}\n```\n\n`rootReducer`的`state`参数就是一个Store的状态树, 状态书下的内阁字段对应也可以有自己的`reducer`, 这个引入`ListReducer`和`itemReducer`, 可以看到这两个reducer的state参数就是一个整个状态树对应的list和item字段.\n\n具体看`./reducers/list.js`\n\n```javascirpt\nconst initalState = [];\nexport default function listReducer (state = initialState, action) {\n  switch(action.type) {\n  case 'FETCH_LIST_SUCCESS': return [...action.payload];\n  default: return state;\n  }\n}\n```\n\nlist就是一个包含items的数组, 结构类似[{id: 0, name: 'li'}, {id: 1, name: \"wang\"}], 通过`actions.type`获取相应的`store`具体值\n\n继续看`./reducers/item.js`\n\n```javascript\nconst initialState = {};\n\nexport default function listReducer (state = initialState, action) {\n  switch(action.type) {\n  case 'FETCH_ITEM_SUCCESS': return [...action.payload];\n  default: return state;\n  }\n}\n```\n\n## Action\n\n对应的想要修改store就必须要有两个action来获取list和item, 触发reducer改变store, 然后返回新的store, 从而改变渲染内容, \n\n`./actions/index.js`\n\n```javascript\nimport fetch from 'isomorphic-fetch';\n\nexport function fetchList() {\n  return (dispatch) => {\n    return fetch('/api/list')\n        .then(res => res.json())\n        .then(json => dispatch({ type: 'FETCH_LIST_SUCCESS', payload: json }));\n  }\n}\n\nexport function fetchItem(id) {\n  return (dispatch) => {\n    if (!id) return Promise.resolve();\n    return fetch(`/api/item/${id}`)\n        .then(res => res.json())\n        .then(json => dispatch({ type: 'FETCH_ITEM_SUCCESS', payload: json }));\n  }\n}\n```\n\n通过调用`dispatch`出去相应的`action`函数来达到具体操作`store`中的值\n\n[isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch)是一个后端实现`Ajax`的实现, \n这里具体涉及到异步请求, 这里的`action`用到了`thunk`, redux通过`thunk-middewar`来处理异步action, 把函数当做普通的action dispatch就好了, 无非就是在action内部可以拿到dispatch函数来操作store. 通常看成成普通高阶函数就ok.\n\n## Store\n\n这里用独立的`./store.js`, 配置生成的`store`\n```javascript\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\n// Apply middleware here\n// ...\n\nexport default function configureStore(initialState) {\n  const store = createStore(rootReducer, initialState);\n  return store;\n}\n```\n\nreact-redux\n\n接着我们就实现`<List>`, `<Item>`组建,  然后把Redxu和react组件关联起来, 具体细节参见`redux`教程\n\n`./app.js`入口文件\n\n\n```javascript\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Router } from 'react-router';\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\nimport { Provider } from 'react-redux';\nimport routes from './routes';\nimport configureStore from './store';\n\n// `__INITIAL_STATE__` 来自服务器端渲染，下一部分细说\nconst initialState = window.__INITIAL_STATE__;\nconst store = configureStore(initialState);\nconst Root = (props) => {\n  return (\n    <div>\n      <Provider store={store}>\n        <Router history={createBrowserHistory()}>\n          {routes}\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nrender(<Root />, document.getElementById('root'));\n```\n\n上面全部部分都是我们的客户端代码.(就是一个简单的react, 配合react-rout和redux的demo)\n\n下面我们的重头戏来了\n\n# Server Redering 服务端渲染\n\n对于上面能看懂的朋友, 下面就相对简单了, , , (难点就在redux的使用上面) 获取数据可以调用action,\n在服务器端用一个`match`(react-router提供) 方法将拿到的request url匹配到我们之前定义的routes, 解析成和客户端一致的props对象传递给组件.\n\n`./server.js`\n\n我们使用express来渲染(这里是离不开node的, 别想着离开node来做这件事)\n\n```javascript\nimport express from 'express';\nimport React from 'react';\nimport { renderToString} from 'react-dom/server';\nimport { Provider } from 'react-redux';\nimport { RoutingContext, match } from 'react-router';\nimport routes from './routes';\nimport configureStore from './store';\n\nconst app express();\n\n\n/**\n * 装载满的页面\n */\nfunction  renderFullPage( html,  initialState) {\n    return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n    </head>\n    <body>\n      <div id=\"root\">\n        <div>\n          ${html}\n        </div>\n      </div>\n      <script>\n        window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};\n      </script>\n      <script src=\"/static/bundle.js\"></script>\n    </body>\n    </html>\n    `;\n}\n\napp.use( (req, res ) => {\n    match( { routes, location:req.url }, ( err, redirectLocation, renderProps ) => {\n        if (err) {\n            res.state(500).end(`这里出错了!具体错误:${err}`);\n        }else if ( redirectLocation) {\n            res.redirect(redirectLocation.pathname + redirectLocation.search);\n        }else if (renderprops) {\n            const store = configureStore(); // 这里和客户端渲染使用的同一个store\n            const state = store.getState();\n            Promise.all([\n                store.dispatch(fetchList()),\n                store.dispatch(fetchItem(renderProps.params.id))\n            ])\n            .then(() => {\n                const html = renderToString(\n                <Provider store={store}>\n                <RoutingContext {...renderProps} />\n                </Provider>\n            );\n            res.end(renderFullPage(html, store.getState()));\n            });\n        } else {\n            res.status(404).end(\"Not found\");\n        }\n    })\n})\n\n```\n\n上面已经标出了和客户端使用的同一个`Store`数据, 另外注意`renderFullPage`生成的页面html在react组件mount的部分(<div id=\"root\"), 前后端的html结构应该是一致的, 然后要把`store`的状态书写入一个全局变量(`__INITIAL_STATE__`), 这样客户端初始化render的时候能够校验服务器生成的html结构, 并且同步到初始化状态, 然后整个页面被客户端接管.\n\n# 总结\n\n页面内部链接跳转使用`react-router`提供的`<Link>`组建代替`<a>`标签就ok了, 其他交给`react-router`就ok\n\n这里已经全部结束了, 总结一下,  是不是觉得很简单,  很大一部分是说了`redux`的基本用法, 真正用到的只是`./server.js`来渲染,\n其中使用express中间件来监听`request`和`result`来使用`react-router`提供 match 方法来拿到当前的客户端路由然后后端通过`renderToString`渲染成字符串返回给客户端.\n\n还有一种优化seo的方式是通过爬虫的方法,  但是我不喜欢那种, 有点作弊的嫌疑,  如果真的被判定作弊, 那么就不是优化的问题了.\n","source":"_posts/react使用服务端渲染来优化SEO.md","raw":"---\nlayout: post\ntitle: react使用服务器渲染来优化SEO\ndate: 2018-02-26 17:46:10\ntags:\n    - react\n    - seo\n    - react服务器渲染\n---\n\nseo我认为这个就是搜索引擎没有吧这个东西做好, 然后就把这个抛给了开发者(百度), 看看google, 在2015年就把这个事情给解决了, 不光分析你的`html`代码还分析你的`css`和`javascript`脚本\n不过没有办法谁让我们出门不用穿防弹衣呢!!!\n\n动态页面想要做好seo优化, 在网上看了看常用的有两种\n- 使用`PhantomJS`爬虫来解决(改变html内容结构)\n- 使用服务端渲染(使用react的`renderToString`使用服务器来输入renderToString之后的html内容)\n\n# react, redux, react-router配合使用实例\nreact中提供了两个方法`renderToString` 和 `renderToStaticMarkup` 用来将组件（Virtual DOM）输出成 HTML 字符串，这是 React 服务器端渲染的基础，它移除了服务器端对于浏览器环境的依赖，所以让服务器端渲染变成了一件有吸引力的事情。\n\n想要达到服务器渲染除了解决浏览器环境的依赖, 还要解决两个问题\n- 前后端可以共享代码\n- 前后端路由可以统一处理\n\n这里我们使用`react-router`来管理路由, 使用`redux`来管理stroe\n\n这里不介绍`redux`的使用, 大家可以[redux中文](http://cn.redux.js.org/index.html)来学习redux\n\n## react-router\n[`react-router`](https://github.com/ReactTraining/react-router)是通过一种声明式的方式匹配不同路由来分配不同组建内容的, 通过`props`来变更路由然后出发`re-render`\n\n假设有一个很简单的应用，只有两个页面，一个列表页 `/list` 和一个详情页 `/item/:id`，点击列表上的条目进入详情页。\n\n可以这样定义路由，`./routes.js`\n\n```javascript\nimport React from 'react';\nimport { Route } from 'react-router';\nimport { List, Item } from './components';\n\n// 无状态（stateless）组件，一个简单的容器，react-router 会根据 route\n// 规则匹配到的组件作为 `props.children` 传入\nconst Container = (props) => {\n  return (\n    <div>{props.children}</div>\n  );\n};\n\n// 配置route 规则：\n// - `/list` 显示 `List` 组件\n// - `/item/:id` 显示 `Item` 组件\nconst routes = (\n  <Route path=\"/\" component={Container} >\n    <Route path=\"list\" component={List} />\n    <Route path=\"item/:id\" component={Item} />\n  </Route>\n);\n\nexport default routes;\n```\n\n上面可以看出我们指定了一个列表页 `/list` 和一个详情页 `/item/:id`，点击列表上的条目进入详情页。分别对应组建`List`和`Item`组建\n接下来我们就通过这个简单的例子来实现服务器渲染的细节.\n\n## Reducers\nredux中store是由reducer产出的, 所以reducer实际上反应了Store的树结构\n\n`./reducers/index.js`\n\n```javascript\nimport listReducer from './list';\nimport itemReducer from './item';\n\nexport default function rootReducer(state = {}, action) {\n  return {\n    list: listReducer(state.list, action),\n    item: itemReducer(state.item, action)\n  };\n}\n```\n\n`rootReducer`的`state`参数就是一个Store的状态树, 状态书下的内阁字段对应也可以有自己的`reducer`, 这个引入`ListReducer`和`itemReducer`, 可以看到这两个reducer的state参数就是一个整个状态树对应的list和item字段.\n\n具体看`./reducers/list.js`\n\n```javascirpt\nconst initalState = [];\nexport default function listReducer (state = initialState, action) {\n  switch(action.type) {\n  case 'FETCH_LIST_SUCCESS': return [...action.payload];\n  default: return state;\n  }\n}\n```\n\nlist就是一个包含items的数组, 结构类似[{id: 0, name: 'li'}, {id: 1, name: \"wang\"}], 通过`actions.type`获取相应的`store`具体值\n\n继续看`./reducers/item.js`\n\n```javascript\nconst initialState = {};\n\nexport default function listReducer (state = initialState, action) {\n  switch(action.type) {\n  case 'FETCH_ITEM_SUCCESS': return [...action.payload];\n  default: return state;\n  }\n}\n```\n\n## Action\n\n对应的想要修改store就必须要有两个action来获取list和item, 触发reducer改变store, 然后返回新的store, 从而改变渲染内容, \n\n`./actions/index.js`\n\n```javascript\nimport fetch from 'isomorphic-fetch';\n\nexport function fetchList() {\n  return (dispatch) => {\n    return fetch('/api/list')\n        .then(res => res.json())\n        .then(json => dispatch({ type: 'FETCH_LIST_SUCCESS', payload: json }));\n  }\n}\n\nexport function fetchItem(id) {\n  return (dispatch) => {\n    if (!id) return Promise.resolve();\n    return fetch(`/api/item/${id}`)\n        .then(res => res.json())\n        .then(json => dispatch({ type: 'FETCH_ITEM_SUCCESS', payload: json }));\n  }\n}\n```\n\n通过调用`dispatch`出去相应的`action`函数来达到具体操作`store`中的值\n\n[isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch)是一个后端实现`Ajax`的实现, \n这里具体涉及到异步请求, 这里的`action`用到了`thunk`, redux通过`thunk-middewar`来处理异步action, 把函数当做普通的action dispatch就好了, 无非就是在action内部可以拿到dispatch函数来操作store. 通常看成成普通高阶函数就ok.\n\n## Store\n\n这里用独立的`./store.js`, 配置生成的`store`\n```javascript\nimport { createStore } from 'redux';\nimport rootReducer from './reducers';\n\n// Apply middleware here\n// ...\n\nexport default function configureStore(initialState) {\n  const store = createStore(rootReducer, initialState);\n  return store;\n}\n```\n\nreact-redux\n\n接着我们就实现`<List>`, `<Item>`组建,  然后把Redxu和react组件关联起来, 具体细节参见`redux`教程\n\n`./app.js`入口文件\n\n\n```javascript\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Router } from 'react-router';\nimport createBrowserHistory from 'history/lib/createBrowserHistory';\nimport { Provider } from 'react-redux';\nimport routes from './routes';\nimport configureStore from './store';\n\n// `__INITIAL_STATE__` 来自服务器端渲染，下一部分细说\nconst initialState = window.__INITIAL_STATE__;\nconst store = configureStore(initialState);\nconst Root = (props) => {\n  return (\n    <div>\n      <Provider store={store}>\n        <Router history={createBrowserHistory()}>\n          {routes}\n        </Router>\n      </Provider>\n    </div>\n  );\n}\n\nrender(<Root />, document.getElementById('root'));\n```\n\n上面全部部分都是我们的客户端代码.(就是一个简单的react, 配合react-rout和redux的demo)\n\n下面我们的重头戏来了\n\n# Server Redering 服务端渲染\n\n对于上面能看懂的朋友, 下面就相对简单了, , , (难点就在redux的使用上面) 获取数据可以调用action,\n在服务器端用一个`match`(react-router提供) 方法将拿到的request url匹配到我们之前定义的routes, 解析成和客户端一致的props对象传递给组件.\n\n`./server.js`\n\n我们使用express来渲染(这里是离不开node的, 别想着离开node来做这件事)\n\n```javascript\nimport express from 'express';\nimport React from 'react';\nimport { renderToString} from 'react-dom/server';\nimport { Provider } from 'react-redux';\nimport { RoutingContext, match } from 'react-router';\nimport routes from './routes';\nimport configureStore from './store';\n\nconst app express();\n\n\n/**\n * 装载满的页面\n */\nfunction  renderFullPage( html,  initialState) {\n    return `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n    </head>\n    <body>\n      <div id=\"root\">\n        <div>\n          ${html}\n        </div>\n      </div>\n      <script>\n        window.__INITIAL_STATE__ = ${JSON.stringify(initialState)};\n      </script>\n      <script src=\"/static/bundle.js\"></script>\n    </body>\n    </html>\n    `;\n}\n\napp.use( (req, res ) => {\n    match( { routes, location:req.url }, ( err, redirectLocation, renderProps ) => {\n        if (err) {\n            res.state(500).end(`这里出错了!具体错误:${err}`);\n        }else if ( redirectLocation) {\n            res.redirect(redirectLocation.pathname + redirectLocation.search);\n        }else if (renderprops) {\n            const store = configureStore(); // 这里和客户端渲染使用的同一个store\n            const state = store.getState();\n            Promise.all([\n                store.dispatch(fetchList()),\n                store.dispatch(fetchItem(renderProps.params.id))\n            ])\n            .then(() => {\n                const html = renderToString(\n                <Provider store={store}>\n                <RoutingContext {...renderProps} />\n                </Provider>\n            );\n            res.end(renderFullPage(html, store.getState()));\n            });\n        } else {\n            res.status(404).end(\"Not found\");\n        }\n    })\n})\n\n```\n\n上面已经标出了和客户端使用的同一个`Store`数据, 另外注意`renderFullPage`生成的页面html在react组件mount的部分(<div id=\"root\"), 前后端的html结构应该是一致的, 然后要把`store`的状态书写入一个全局变量(`__INITIAL_STATE__`), 这样客户端初始化render的时候能够校验服务器生成的html结构, 并且同步到初始化状态, 然后整个页面被客户端接管.\n\n# 总结\n\n页面内部链接跳转使用`react-router`提供的`<Link>`组建代替`<a>`标签就ok了, 其他交给`react-router`就ok\n\n这里已经全部结束了, 总结一下,  是不是觉得很简单,  很大一部分是说了`redux`的基本用法, 真正用到的只是`./server.js`来渲染,\n其中使用express中间件来监听`request`和`result`来使用`react-router`提供 match 方法来拿到当前的客户端路由然后后端通过`renderToString`渲染成字符串返回给客户端.\n\n还有一种优化seo的方式是通过爬虫的方法,  但是我不喜欢那种, 有点作弊的嫌疑,  如果真的被判定作弊, 那么就不是优化的问题了.\n","slug":"react使用服务端渲染来优化SEO","published":1,"updated":"2019-05-13T03:56:03.262Z","comments":1,"photos":[],"link":"","_id":"cjvluebeb003ya0dmgx26yiov","content":"<p>seo我认为这个就是搜索引擎没有吧这个东西做好, 然后就把这个抛给了开发者(百度), 看看google, 在2015年就把这个事情给解决了, 不光分析你的<code>html</code>代码还分析你的<code>css</code>和<code>javascript</code>脚本<br>不过没有办法谁让我们出门不用穿防弹衣呢!!!</p>\n<p>动态页面想要做好seo优化, 在网上看了看常用的有两种</p>\n<ul>\n<li>使用<code>PhantomJS</code>爬虫来解决(改变html内容结构)</li>\n<li>使用服务端渲染(使用react的<code>renderToString</code>使用服务器来输入renderToString之后的html内容)</li>\n</ul>\n<h1 id=\"react-redux-react-router配合使用实例\"><a href=\"#react-redux-react-router配合使用实例\" class=\"headerlink\" title=\"react, redux, react-router配合使用实例\"></a>react, redux, react-router配合使用实例</h1><p>react中提供了两个方法<code>renderToString</code> 和 <code>renderToStaticMarkup</code> 用来将组件（Virtual DOM）输出成 HTML 字符串，这是 React 服务器端渲染的基础，它移除了服务器端对于浏览器环境的依赖，所以让服务器端渲染变成了一件有吸引力的事情。</p>\n<p>想要达到服务器渲染除了解决浏览器环境的依赖, 还要解决两个问题</p>\n<ul>\n<li>前后端可以共享代码</li>\n<li>前后端路由可以统一处理</li>\n</ul>\n<p>这里我们使用<code>react-router</code>来管理路由, 使用<code>redux</code>来管理stroe</p>\n<p>这里不介绍<code>redux</code>的使用, 大家可以<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">redux中文</a>来学习redux</p>\n<h2 id=\"react-router\"><a href=\"#react-router\" class=\"headerlink\" title=\"react-router\"></a>react-router</h2><p><a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\" rel=\"external\"><code>react-router</code></a>是通过一种声明式的方式匹配不同路由来分配不同组建内容的, 通过<code>props</code>来变更路由然后出发<code>re-render</code></p>\n<p>假设有一个很简单的应用，只有两个页面，一个列表页 <code>/list</code> 和一个详情页 <code>/item/:id</code>，点击列表上的条目进入详情页。</p>\n<p>可以这样定义路由，<code>./routes.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; List, Item &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./components'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无状态（stateless）组件，一个简单的容器，react-router 会根据 route</span></div><div class=\"line\"><span class=\"comment\">// 规则匹配到的组件作为 `props.children` 传入</span></div><div class=\"line\"><span class=\"keyword\">const</span> Container = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 配置route 规则：</span></div><div class=\"line\"><span class=\"comment\">// - `/list` 显示 `List` 组件</span></div><div class=\"line\"><span class=\"comment\">// - `/item/:id` 显示 `Item` 组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes = (</div><div class=\"line\">  &lt;Route path=\"/\" component=&#123;Container&#125; &gt;</div><div class=\"line\">    &lt;Route path=\"list\" component=&#123;List&#125; /&gt;</div><div class=\"line\">    &lt;Route path=\"item/:id\" component=&#123;Item&#125; /&gt;</div><div class=\"line\">  &lt;/Route&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">export default routes;</div></pre></td></tr></table></figure>\n<p>上面可以看出我们指定了一个列表页 <code>/list</code> 和一个详情页 <code>/item/:id</code>，点击列表上的条目进入详情页。分别对应组建<code>List</code>和<code>Item</code>组建<br>接下来我们就通过这个简单的例子来实现服务器渲染的细节.</p>\n<h2 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h2><p>redux中store是由reducer产出的, 所以reducer实际上反应了Store的树结构</p>\n<p><code>./reducers/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> listReducer <span class=\"keyword\">from</span> <span class=\"string\">'./list'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> itemReducer <span class=\"keyword\">from</span> <span class=\"string\">'./item'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rootReducer</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: listReducer(state.list, action),</div><div class=\"line\">    <span class=\"attr\">item</span>: itemReducer(state.item, action)</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>rootReducer</code>的<code>state</code>参数就是一个Store的状态树, 状态书下的内阁字段对应也可以有自己的<code>reducer</code>, 这个引入<code>ListReducer</code>和<code>itemReducer</code>, 可以看到这两个reducer的state参数就是一个整个状态树对应的list和item字段.</p>\n<p>具体看<code>./reducers/list.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const initalState = [];</div><div class=\"line\">export default function listReducer (state = initialState, action) &#123;</div><div class=\"line\">  switch(action.type) &#123;</div><div class=\"line\">  case &apos;FETCH_LIST_SUCCESS&apos;: return [...action.payload];</div><div class=\"line\">  default: return state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>list就是一个包含items的数组, 结构类似[{id: 0, name: ‘li’}, {id: 1, name: “wang”}], 通过<code>actions.type</code>获取相应的<code>store</code>具体值</p>\n<p>继续看<code>./reducers/item.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listReducer</span> (<span class=\"params\">state = initialState, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'FETCH_ITEM_SUCCESS'</span>: <span class=\"keyword\">return</span> [...action.payload];</div><div class=\"line\">  <span class=\"keyword\">default</span>: <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>对应的想要修改store就必须要有两个action来获取list和item, 触发reducer改变store, 然后返回新的store, 从而改变渲染内容, </p>\n<p><code>./actions/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">'isomorphic-fetch'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchList</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/api/list'</span>)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_LIST_SUCCESS'</span>, <span class=\"attr\">payload</span>: json &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchItem</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!id) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve();</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">`/api/item/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_ITEM_SUCCESS'</span>, <span class=\"attr\">payload</span>: json &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过调用<code>dispatch</code>出去相应的<code>action</code>函数来达到具体操作<code>store</code>中的值</p>\n<p><a href=\"https://github.com/matthew-andrews/isomorphic-fetch\" target=\"_blank\" rel=\"external\">isomorphic-fetch</a>是一个后端实现<code>Ajax</code>的实现,<br>这里具体涉及到异步请求, 这里的<code>action</code>用到了<code>thunk</code>, redux通过<code>thunk-middewar</code>来处理异步action, 把函数当做普通的action dispatch就好了, 无非就是在action内部可以拿到dispatch函数来操作store. 通常看成成普通高阶函数就ok.</p>\n<h2 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h2><p>这里用独立的<code>./store.js</code>, 配置生成的<code>store</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> rootReducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Apply middleware here</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configureStore</span>(<span class=\"params\">initialState</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStore(rootReducer, initialState);</div><div class=\"line\">  <span class=\"keyword\">return</span> store;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>react-redux</p>\n<p>接着我们就实现<code>&lt;List&gt;</code>, <code>&lt;Item&gt;</code>组建,  然后把Redxu和react组件关联起来, 具体细节参见<code>redux</code>教程</p>\n<p><code>./app.js</code>入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> createBrowserHistory <span class=\"keyword\">from</span> <span class=\"string\">'history/lib/createBrowserHistory'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'./routes'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// `__INITIAL_STATE__` 来自服务器端渲染，下一部分细说</span></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = <span class=\"built_in\">window</span>.__INITIAL_STATE__;</div><div class=\"line\"><span class=\"keyword\">const</span> store = configureStore(initialState);</div><div class=\"line\"><span class=\"keyword\">const</span> Root = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;createBrowserHistory()&#125;</span>&gt;</span></div><div class=\"line\">          &#123;routes&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Root</span> /&gt;</span>, document.getElementById('root'));</span></div></pre></td></tr></table></figure>\n<p>上面全部部分都是我们的客户端代码.(就是一个简单的react, 配合react-rout和redux的demo)</p>\n<p>下面我们的重头戏来了</p>\n<h1 id=\"Server-Redering-服务端渲染\"><a href=\"#Server-Redering-服务端渲染\" class=\"headerlink\" title=\"Server Redering 服务端渲染\"></a>Server Redering 服务端渲染</h1><p>对于上面能看懂的朋友, 下面就相对简单了, , , (难点就在redux的使用上面) 获取数据可以调用action,<br>在服务器端用一个<code>match</code>(react-router提供) 方法将拿到的request url匹配到我们之前定义的routes, 解析成和客户端一致的props对象传递给组件.</p>\n<p><code>./server.js</code></p>\n<p>我们使用express来渲染(这里是离不开node的, 别想着离开node来做这件事)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RoutingContext, match &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'./routes'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> app express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 装载满的页面</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">renderFullPage</span>(<span class=\"params\"> html,  initialState</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></div><div class=\"line\">    &lt;!DOCTYPE html&gt;</div><div class=\"line\">    &lt;html lang=\"en\"&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">      &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">      &lt;div id=\"root\"&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          <span class=\"subst\">$&#123;html&#125;</span></div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;script&gt;</div><div class=\"line\">        window.__INITIAL_STATE__ = <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(initialState)&#125;</span>;</div><div class=\"line\">      &lt;/script&gt;</div><div class=\"line\">      &lt;script src=\"/static/bundle.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">    &lt;/html&gt;</div><div class=\"line\">    `;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.use( <span class=\"function\">(<span class=\"params\">req, res </span>) =&gt;</span> &#123;</div><div class=\"line\">    match( &#123; routes, <span class=\"attr\">location</span>:req.url &#125;, ( err, redirectLocation, renderProps ) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            res.state(<span class=\"number\">500</span>).end(<span class=\"string\">`这里出错了!具体错误:<span class=\"subst\">$&#123;err&#125;</span>`</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( redirectLocation) &#123;</div><div class=\"line\">            res.redirect(redirectLocation.pathname + redirectLocation.search);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (renderprops) &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> store = configureStore(); <span class=\"comment\">// 这里和客户端渲染使用的同一个store</span></div><div class=\"line\">            <span class=\"keyword\">const</span> state = store.getState();</div><div class=\"line\">            <span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">                store.dispatch(fetchList()),</div><div class=\"line\">                store.dispatch(fetchItem(renderProps.params.id))</div><div class=\"line\">            ])</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">const</span> html = renderToString(</div><div class=\"line\">                <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">RoutingContext</span> &#123;<span class=\"attr\">...renderProps</span>&#125; /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div><div class=\"line\">            );</div><div class=\"line\">            res.end(renderFullPage(html, store.getState()));</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            res.status(404).end(\"Not found\");</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>上面已经标出了和客户端使用的同一个<code>Store</code>数据, 另外注意<code>renderFullPage</code>生成的页面html在react组件mount的部分(&lt;div id=”root”), 前后端的html结构应该是一致的, 然后要把<code>store</code>的状态书写入一个全局变量(<code>__INITIAL_STATE__</code>), 这样客户端初始化render的时候能够校验服务器生成的html结构, 并且同步到初始化状态, 然后整个页面被客户端接管.</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>页面内部链接跳转使用<code>react-router</code>提供的<code>&lt;Link&gt;</code>组建代替<code>&lt;a&gt;</code>标签就ok了, 其他交给<code>react-router</code>就ok</p>\n<p>这里已经全部结束了, 总结一下,  是不是觉得很简单,  很大一部分是说了<code>redux</code>的基本用法, 真正用到的只是<code>./server.js</code>来渲染,<br>其中使用express中间件来监听<code>request</code>和<code>result</code>来使用<code>react-router</code>提供 match 方法来拿到当前的客户端路由然后后端通过<code>renderToString</code>渲染成字符串返回给客户端.</p>\n<p>还有一种优化seo的方式是通过爬虫的方法,  但是我不喜欢那种, 有点作弊的嫌疑,  如果真的被判定作弊, 那么就不是优化的问题了.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>seo我认为这个就是搜索引擎没有吧这个东西做好, 然后就把这个抛给了开发者(百度), 看看google, 在2015年就把这个事情给解决了, 不光分析你的<code>html</code>代码还分析你的<code>css</code>和<code>javascript</code>脚本<br>不过没有办法谁让我们出门不用穿防弹衣呢!!!</p>\n<p>动态页面想要做好seo优化, 在网上看了看常用的有两种</p>\n<ul>\n<li>使用<code>PhantomJS</code>爬虫来解决(改变html内容结构)</li>\n<li>使用服务端渲染(使用react的<code>renderToString</code>使用服务器来输入renderToString之后的html内容)</li>\n</ul>\n<h1 id=\"react-redux-react-router配合使用实例\"><a href=\"#react-redux-react-router配合使用实例\" class=\"headerlink\" title=\"react, redux, react-router配合使用实例\"></a>react, redux, react-router配合使用实例</h1><p>react中提供了两个方法<code>renderToString</code> 和 <code>renderToStaticMarkup</code> 用来将组件（Virtual DOM）输出成 HTML 字符串，这是 React 服务器端渲染的基础，它移除了服务器端对于浏览器环境的依赖，所以让服务器端渲染变成了一件有吸引力的事情。</p>\n<p>想要达到服务器渲染除了解决浏览器环境的依赖, 还要解决两个问题</p>\n<ul>\n<li>前后端可以共享代码</li>\n<li>前后端路由可以统一处理</li>\n</ul>\n<p>这里我们使用<code>react-router</code>来管理路由, 使用<code>redux</code>来管理stroe</p>\n<p>这里不介绍<code>redux</code>的使用, 大家可以<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">redux中文</a>来学习redux</p>\n<h2 id=\"react-router\"><a href=\"#react-router\" class=\"headerlink\" title=\"react-router\"></a>react-router</h2><p><a href=\"https://github.com/ReactTraining/react-router\" target=\"_blank\" rel=\"external\"><code>react-router</code></a>是通过一种声明式的方式匹配不同路由来分配不同组建内容的, 通过<code>props</code>来变更路由然后出发<code>re-render</code></p>\n<p>假设有一个很简单的应用，只有两个页面，一个列表页 <code>/list</code> 和一个详情页 <code>/item/:id</code>，点击列表上的条目进入详情页。</p>\n<p>可以这样定义路由，<code>./routes.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Route &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; List, Item &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./components'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无状态（stateless）组件，一个简单的容器，react-router 会根据 route</span></div><div class=\"line\"><span class=\"comment\">// 规则匹配到的组件作为 `props.children` 传入</span></div><div class=\"line\"><span class=\"keyword\">const</span> Container = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;props.children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">  );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 配置route 规则：</span></div><div class=\"line\"><span class=\"comment\">// - `/list` 显示 `List` 组件</span></div><div class=\"line\"><span class=\"comment\">// - `/item/:id` 显示 `Item` 组件</span></div><div class=\"line\"><span class=\"keyword\">const</span> routes = (</div><div class=\"line\">  &lt;Route path=\"/\" component=&#123;Container&#125; &gt;</div><div class=\"line\">    &lt;Route path=\"list\" component=&#123;List&#125; /&gt;</div><div class=\"line\">    &lt;Route path=\"item/:id\" component=&#123;Item&#125; /&gt;</div><div class=\"line\">  &lt;/Route&gt;</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\">export default routes;</div></pre></td></tr></table></figure>\n<p>上面可以看出我们指定了一个列表页 <code>/list</code> 和一个详情页 <code>/item/:id</code>，点击列表上的条目进入详情页。分别对应组建<code>List</code>和<code>Item</code>组建<br>接下来我们就通过这个简单的例子来实现服务器渲染的细节.</p>\n<h2 id=\"Reducers\"><a href=\"#Reducers\" class=\"headerlink\" title=\"Reducers\"></a>Reducers</h2><p>redux中store是由reducer产出的, 所以reducer实际上反应了Store的树结构</p>\n<p><code>./reducers/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> listReducer <span class=\"keyword\">from</span> <span class=\"string\">'./list'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> itemReducer <span class=\"keyword\">from</span> <span class=\"string\">'./item'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rootReducer</span>(<span class=\"params\">state = &#123;&#125;, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: listReducer(state.list, action),</div><div class=\"line\">    <span class=\"attr\">item</span>: itemReducer(state.item, action)</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>rootReducer</code>的<code>state</code>参数就是一个Store的状态树, 状态书下的内阁字段对应也可以有自己的<code>reducer</code>, 这个引入<code>ListReducer</code>和<code>itemReducer</code>, 可以看到这两个reducer的state参数就是一个整个状态树对应的list和item字段.</p>\n<p>具体看<code>./reducers/list.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">const initalState = [];</div><div class=\"line\">export default function listReducer (state = initialState, action) &#123;</div><div class=\"line\">  switch(action.type) &#123;</div><div class=\"line\">  case &apos;FETCH_LIST_SUCCESS&apos;: return [...action.payload];</div><div class=\"line\">  default: return state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>list就是一个包含items的数组, 结构类似[{id: 0, name: ‘li’}, {id: 1, name: “wang”}], 通过<code>actions.type</code>获取相应的<code>store</code>具体值</p>\n<p>继续看<code>./reducers/item.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> initialState = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">listReducer</span> (<span class=\"params\">state = initialState, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span>(action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'FETCH_ITEM_SUCCESS'</span>: <span class=\"keyword\">return</span> [...action.payload];</div><div class=\"line\">  <span class=\"keyword\">default</span>: <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>对应的想要修改store就必须要有两个action来获取list和item, 触发reducer改变store, 然后返回新的store, 从而改变渲染内容, </p>\n<p><code>./actions/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> fetch <span class=\"keyword\">from</span> <span class=\"string\">'isomorphic-fetch'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchList</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">'/api/list'</span>)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_LIST_SUCCESS'</span>, <span class=\"attr\">payload</span>: json &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fetchItem</span>(<span class=\"params\">id</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">dispatch</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!id) <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.resolve();</div><div class=\"line\">    <span class=\"keyword\">return</span> fetch(<span class=\"string\">`/api/item/<span class=\"subst\">$&#123;id&#125;</span>`</span>)</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">res</span> =&gt;</span> res.json())</div><div class=\"line\">        .then(<span class=\"function\"><span class=\"params\">json</span> =&gt;</span> dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'FETCH_ITEM_SUCCESS'</span>, <span class=\"attr\">payload</span>: json &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过调用<code>dispatch</code>出去相应的<code>action</code>函数来达到具体操作<code>store</code>中的值</p>\n<p><a href=\"https://github.com/matthew-andrews/isomorphic-fetch\" target=\"_blank\" rel=\"external\">isomorphic-fetch</a>是一个后端实现<code>Ajax</code>的实现,<br>这里具体涉及到异步请求, 这里的<code>action</code>用到了<code>thunk</code>, redux通过<code>thunk-middewar</code>来处理异步action, 把函数当做普通的action dispatch就好了, 无非就是在action内部可以拿到dispatch函数来操作store. 通常看成成普通高阶函数就ok.</p>\n<h2 id=\"Store\"><a href=\"#Store\" class=\"headerlink\" title=\"Store\"></a>Store</h2><p>这里用独立的<code>./store.js</code>, 配置生成的<code>store</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> rootReducer <span class=\"keyword\">from</span> <span class=\"string\">'./reducers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Apply middleware here</span></div><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">configureStore</span>(<span class=\"params\">initialState</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> store = createStore(rootReducer, initialState);</div><div class=\"line\">  <span class=\"keyword\">return</span> store;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>react-redux</p>\n<p>接着我们就实现<code>&lt;List&gt;</code>, <code>&lt;Item&gt;</code>组建,  然后把Redxu和react组件关联起来, 具体细节参见<code>redux</code>教程</p>\n<p><code>./app.js</code>入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; render &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Router &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> createBrowserHistory <span class=\"keyword\">from</span> <span class=\"string\">'history/lib/createBrowserHistory'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'./routes'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// `__INITIAL_STATE__` 来自服务器端渲染，下一部分细说</span></div><div class=\"line\"><span class=\"keyword\">const</span> initialState = <span class=\"built_in\">window</span>.__INITIAL_STATE__;</div><div class=\"line\"><span class=\"keyword\">const</span> store = configureStore(initialState);</div><div class=\"line\"><span class=\"keyword\">const</span> Root = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (</div><div class=\"line\">    <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Router</span> <span class=\"attr\">history</span>=<span class=\"string\">&#123;createBrowserHistory()&#125;</span>&gt;</span></div><div class=\"line\">          &#123;routes&#125;</div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">Router</span>&gt;</span></div><div class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">  );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Root</span> /&gt;</span>, document.getElementById('root'));</span></div></pre></td></tr></table></figure>\n<p>上面全部部分都是我们的客户端代码.(就是一个简单的react, 配合react-rout和redux的demo)</p>\n<p>下面我们的重头戏来了</p>\n<h1 id=\"Server-Redering-服务端渲染\"><a href=\"#Server-Redering-服务端渲染\" class=\"headerlink\" title=\"Server Redering 服务端渲染\"></a>Server Redering 服务端渲染</h1><p>对于上面能看懂的朋友, 下面就相对简单了, , , (难点就在redux的使用上面) 获取数据可以调用action,<br>在服务器端用一个<code>match</code>(react-router提供) 方法将拿到的request url匹配到我们之前定义的routes, 解析成和客户端一致的props对象传递给组件.</p>\n<p><code>./server.js</code></p>\n<p>我们使用express来渲染(这里是离不开node的, 别想着离开node来做这件事)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">'express'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; renderToString&#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Provider &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-redux'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123; RoutingContext, match &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> routes <span class=\"keyword\">from</span> <span class=\"string\">'./routes'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> configureStore <span class=\"keyword\">from</span> <span class=\"string\">'./store'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> app express();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 装载满的页面</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>  <span class=\"title\">renderFullPage</span>(<span class=\"params\"> html,  initialState</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`</span></div><div class=\"line\">    &lt;!DOCTYPE html&gt;</div><div class=\"line\">    &lt;html lang=\"en\"&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">      &lt;meta charset=\"UTF-8\"&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">      &lt;div id=\"root\"&gt;</div><div class=\"line\">        &lt;div&gt;</div><div class=\"line\">          <span class=\"subst\">$&#123;html&#125;</span></div><div class=\"line\">        &lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;script&gt;</div><div class=\"line\">        window.__INITIAL_STATE__ = <span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(initialState)&#125;</span>;</div><div class=\"line\">      &lt;/script&gt;</div><div class=\"line\">      &lt;script src=\"/static/bundle.js\"&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">    &lt;/html&gt;</div><div class=\"line\">    `;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">app.use( <span class=\"function\">(<span class=\"params\">req, res </span>) =&gt;</span> &#123;</div><div class=\"line\">    match( &#123; routes, <span class=\"attr\">location</span>:req.url &#125;, ( err, redirectLocation, renderProps ) =&gt; &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            res.state(<span class=\"number\">500</span>).end(<span class=\"string\">`这里出错了!具体错误:<span class=\"subst\">$&#123;err&#125;</span>`</span>);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( redirectLocation) &#123;</div><div class=\"line\">            res.redirect(redirectLocation.pathname + redirectLocation.search);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (renderprops) &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> store = configureStore(); <span class=\"comment\">// 这里和客户端渲染使用的同一个store</span></div><div class=\"line\">            <span class=\"keyword\">const</span> state = store.getState();</div><div class=\"line\">            <span class=\"built_in\">Promise</span>.all([</div><div class=\"line\">                store.dispatch(fetchList()),</div><div class=\"line\">                store.dispatch(fetchItem(renderProps.params.id))</div><div class=\"line\">            ])</div><div class=\"line\">            .then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">const</span> html = renderToString(</div><div class=\"line\">                <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Provider</span> <span class=\"attr\">store</span>=<span class=\"string\">&#123;store&#125;</span>&gt;</span></span></div><div class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">RoutingContext</span> &#123;<span class=\"attr\">...renderProps</span>&#125; /&gt;</span></div><div class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">Provider</span>&gt;</span></div><div class=\"line\">            );</div><div class=\"line\">            res.end(renderFullPage(html, store.getState()));</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125; else &#123;</div><div class=\"line\">            res.status(404).end(\"Not found\");</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>上面已经标出了和客户端使用的同一个<code>Store</code>数据, 另外注意<code>renderFullPage</code>生成的页面html在react组件mount的部分(&lt;div id=”root”), 前后端的html结构应该是一致的, 然后要把<code>store</code>的状态书写入一个全局变量(<code>__INITIAL_STATE__</code>), 这样客户端初始化render的时候能够校验服务器生成的html结构, 并且同步到初始化状态, 然后整个页面被客户端接管.</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>页面内部链接跳转使用<code>react-router</code>提供的<code>&lt;Link&gt;</code>组建代替<code>&lt;a&gt;</code>标签就ok了, 其他交给<code>react-router</code>就ok</p>\n<p>这里已经全部结束了, 总结一下,  是不是觉得很简单,  很大一部分是说了<code>redux</code>的基本用法, 真正用到的只是<code>./server.js</code>来渲染,<br>其中使用express中间件来监听<code>request</code>和<code>result</code>来使用<code>react-router</code>提供 match 方法来拿到当前的客户端路由然后后端通过<code>renderToString</code>渲染成字符串返回给客户端.</p>\n<p>还有一种优化seo的方式是通过爬虫的方法,  但是我不喜欢那种, 有点作弊的嫌疑,  如果真的被判定作弊, 那么就不是优化的问题了.</p>\n"},{"layout":"post","title":"react客户端渲染和服务器渲染","date":"2018-03-28T01:21:08.000Z","_content":"\n这里这是一个铺垫,因为使用`react redux`的小伙伴应该都有一个困惑,就是大多数些项目的人都需要`create-react-app`来意一步步构建自己的项目,然后需要些很多同样的代码,这也是我遇到的问题,所以打算写一个`create-redux-app`的脚手架,然后提交到`npm`上面,之后就可以开箱即用的脚手架来开发自己的`redux react-router`项目,项目基于`react-start-kit`来写...[这里是github项目地址(待完成)]()\n\n\n> 本文有点多,是基于晚上很多文章整合\n\n# 为什么要前后端同构？\n\n简单列几点：\n\n- 相对于纯前端渲染来说，更利于 SEO\n- 相对于纯前端渲染来说，首屏加载更快\n- 提高了复用性，代码更容易维护\n\nTODO: 这里需要配图\n\n# 实现同构需要解决的问题\n\n理想是丰满的，现实是骨感的，在实现前后端同构的路上，我们会不可避免的遇到几个问题：\n\n# 运行环境差异\n\n有些逻辑是只能运行于浏览器端的，比如 `AJAX` 请求，浏览器事件等等，应置于` componentDidMount` 生命周期（含）以后，或者通过 window 关键字进行判断。\n\n# 模块管理差异\n\n我们通过 `Webpack`，可以实现样式、图片等各种资源的模块化管理，但 `Node` 的` require` 可没有 `Webpack` 的魔法特性，我们可以通过` webpack-isomorphic` 工具来解决。\n\n\n# 前端渲染数据来源\n\n服务端渲染时，`React` 组件的` state` 只存在于服务器内存中，而生命周期方法只会执行到 `componentDidMount` 以前，那么前端如何将组件重新实例化，并将剩余的生命周期方法执行完呢？我们需要把服务端数据同步到前端，前端的 `React` 才能够在浏览器中进行组件的实例化，保证 `Web` 应用正常运行。\n\n# 前后端路由同步\n\n如果你的应用是单页应用（SPA），那么应该确保前后端路由一致，否则可能出现页面跳转可以正常访问，但刷新后却出现异常的情况。\n\n# 服务端渲染\n\n这里不细说,[react使用服务端渲染来优化SEO](http://angely.me/2018/02/26/)说的很明白\n\n\n# 为服务端实现 require 魔法\n上一篇我们提到过，我们可以通过 Webpack 加载器将样式、图片等前端资源作为模块进行引入，但这些资源如果在 Node 中直接引入，是会报错的，因此，我们需要借助 webpack-isomophic 模块来消除前后端 require 函数的差异。\n\n## 前端部分\n在 webpack.config.js 中，配置 webpack-isomorphic 插件：\n\n```nodejs\nvar IsomorphicPlugin = require('webpack-isomorphic/plugin');\n// 配置需要同构的文件后缀名\nvar isomorphicPlugin = new IsomorphicPlugin({\n    extensions: ['jpg', 'png', 'gif', 'css']\n});\nmodule.exports = {\n    // 配置源文件目录\n    context: __dirname + '/src',\n    // ...\n    plugins: [\n        //...\n        isomorphicPlugin\n    ]\n};\n```\n\n## 服务端部分\n```nodejs\nvar webpackIsomorphic = require('webpack-isomorphic');\n// 配置构建后的文件目录\nwebpackIsomorphic.install(__dirname + '/dist', {\n    cache: process.env['NODE_ENV'] !== 'development'\n});\n```\n\n不得不说 webpack-isomorphic 的使用确实非常的简单方便。\n\n# 前后端数据同步\n前面提到，React 在浏览器端，如果 virtual DOM 的渲染结果与服务端一致，则不需要重新渲染 DOM 树，因此前端的数据也应该与服务端保持一致，那么前端如何得到服务端的数据呢？方法也很简单，向浏览器输出 HTML 的时候，同时把数据以 JSON 的格式置于 <script> 标签中，输出至浏览器。\n\n\n# 服务器\n\n输出页面 HTML 时，同时带上原始数据：\n\n\n```js\nvar initialData = {foo: 'bar'};\nvar viewsDir = path.join(__dirname, './views/dist');\nvar template = path.join(viewsDir, 'index.tpl');\nvar reactClass = path.join(viewsDir, 'js/index.js');\nvar factory = React.createFactory(require(reactClass));\ngotpl.renderFile(template, {\n    initialData: initialData,\n    initialHTML: ReactDOMServer.renderToString(factory(initialData))\n}, function (err, html) {\n    if (err) {\n        res.end(err.stack);\n    } else {\n        res.end(html)\n    }\n});\n```\n\n# HTML模板\n\n将原始数据置于 <script> 标签中，并赋值给 window.initialData：\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>React+Webpack 前后端同构</title>\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n<div id=\"root\"><%- initialHTML %></div>\n<script>window.initialData = <%- JSON.stringify(initialData) %>;</script>\n<script src=\"index.js\"></script>\n</body>\n</html>\n```\n\n\n# JSX 文件\n\n判断是否浏览器环境，若是，将 window.initialData 作为数据进行渲染：\n\n```js\n// ...\nif (typeof window !== 'undefined') {\n    ReactDOM.render(\n        React.createElement(IndexPage, initialData),\n        document.getElementById('root')\n    );\n}\n```\n","source":"_posts/react客户端渲染和服务器渲染.md","raw":"---\nlayout: post\ntitle: react客户端渲染和服务器渲染\ndate: 2018-03-28 09:21:08\ntags:\n    - react\n    - react 服务器渲染\ncategories: \"react\"\n---\n\n这里这是一个铺垫,因为使用`react redux`的小伙伴应该都有一个困惑,就是大多数些项目的人都需要`create-react-app`来意一步步构建自己的项目,然后需要些很多同样的代码,这也是我遇到的问题,所以打算写一个`create-redux-app`的脚手架,然后提交到`npm`上面,之后就可以开箱即用的脚手架来开发自己的`redux react-router`项目,项目基于`react-start-kit`来写...[这里是github项目地址(待完成)]()\n\n\n> 本文有点多,是基于晚上很多文章整合\n\n# 为什么要前后端同构？\n\n简单列几点：\n\n- 相对于纯前端渲染来说，更利于 SEO\n- 相对于纯前端渲染来说，首屏加载更快\n- 提高了复用性，代码更容易维护\n\nTODO: 这里需要配图\n\n# 实现同构需要解决的问题\n\n理想是丰满的，现实是骨感的，在实现前后端同构的路上，我们会不可避免的遇到几个问题：\n\n# 运行环境差异\n\n有些逻辑是只能运行于浏览器端的，比如 `AJAX` 请求，浏览器事件等等，应置于` componentDidMount` 生命周期（含）以后，或者通过 window 关键字进行判断。\n\n# 模块管理差异\n\n我们通过 `Webpack`，可以实现样式、图片等各种资源的模块化管理，但 `Node` 的` require` 可没有 `Webpack` 的魔法特性，我们可以通过` webpack-isomorphic` 工具来解决。\n\n\n# 前端渲染数据来源\n\n服务端渲染时，`React` 组件的` state` 只存在于服务器内存中，而生命周期方法只会执行到 `componentDidMount` 以前，那么前端如何将组件重新实例化，并将剩余的生命周期方法执行完呢？我们需要把服务端数据同步到前端，前端的 `React` 才能够在浏览器中进行组件的实例化，保证 `Web` 应用正常运行。\n\n# 前后端路由同步\n\n如果你的应用是单页应用（SPA），那么应该确保前后端路由一致，否则可能出现页面跳转可以正常访问，但刷新后却出现异常的情况。\n\n# 服务端渲染\n\n这里不细说,[react使用服务端渲染来优化SEO](http://angely.me/2018/02/26/)说的很明白\n\n\n# 为服务端实现 require 魔法\n上一篇我们提到过，我们可以通过 Webpack 加载器将样式、图片等前端资源作为模块进行引入，但这些资源如果在 Node 中直接引入，是会报错的，因此，我们需要借助 webpack-isomophic 模块来消除前后端 require 函数的差异。\n\n## 前端部分\n在 webpack.config.js 中，配置 webpack-isomorphic 插件：\n\n```nodejs\nvar IsomorphicPlugin = require('webpack-isomorphic/plugin');\n// 配置需要同构的文件后缀名\nvar isomorphicPlugin = new IsomorphicPlugin({\n    extensions: ['jpg', 'png', 'gif', 'css']\n});\nmodule.exports = {\n    // 配置源文件目录\n    context: __dirname + '/src',\n    // ...\n    plugins: [\n        //...\n        isomorphicPlugin\n    ]\n};\n```\n\n## 服务端部分\n```nodejs\nvar webpackIsomorphic = require('webpack-isomorphic');\n// 配置构建后的文件目录\nwebpackIsomorphic.install(__dirname + '/dist', {\n    cache: process.env['NODE_ENV'] !== 'development'\n});\n```\n\n不得不说 webpack-isomorphic 的使用确实非常的简单方便。\n\n# 前后端数据同步\n前面提到，React 在浏览器端，如果 virtual DOM 的渲染结果与服务端一致，则不需要重新渲染 DOM 树，因此前端的数据也应该与服务端保持一致，那么前端如何得到服务端的数据呢？方法也很简单，向浏览器输出 HTML 的时候，同时把数据以 JSON 的格式置于 <script> 标签中，输出至浏览器。\n\n\n# 服务器\n\n输出页面 HTML 时，同时带上原始数据：\n\n\n```js\nvar initialData = {foo: 'bar'};\nvar viewsDir = path.join(__dirname, './views/dist');\nvar template = path.join(viewsDir, 'index.tpl');\nvar reactClass = path.join(viewsDir, 'js/index.js');\nvar factory = React.createFactory(require(reactClass));\ngotpl.renderFile(template, {\n    initialData: initialData,\n    initialHTML: ReactDOMServer.renderToString(factory(initialData))\n}, function (err, html) {\n    if (err) {\n        res.end(err.stack);\n    } else {\n        res.end(html)\n    }\n});\n```\n\n# HTML模板\n\n将原始数据置于 <script> 标签中，并赋值给 window.initialData：\n\n```html\n<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>React+Webpack 前后端同构</title>\n    <link rel=\"stylesheet\" href=\"index.css\">\n</head>\n<body>\n<div id=\"root\"><%- initialHTML %></div>\n<script>window.initialData = <%- JSON.stringify(initialData) %>;</script>\n<script src=\"index.js\"></script>\n</body>\n</html>\n```\n\n\n# JSX 文件\n\n判断是否浏览器环境，若是，将 window.initialData 作为数据进行渲染：\n\n```js\n// ...\nif (typeof window !== 'undefined') {\n    ReactDOM.render(\n        React.createElement(IndexPage, initialData),\n        document.getElementById('root')\n    );\n}\n```\n","slug":"react客户端渲染和服务器渲染","published":1,"updated":"2019-05-13T03:56:03.262Z","comments":1,"photos":[],"link":"","_id":"cjvluebec0043a0dmudyftgt9","content":"<p>这里这是一个铺垫,因为使用<code>react redux</code>的小伙伴应该都有一个困惑,就是大多数些项目的人都需要<code>create-react-app</code>来意一步步构建自己的项目,然后需要些很多同样的代码,这也是我遇到的问题,所以打算写一个<code>create-redux-app</code>的脚手架,然后提交到<code>npm</code>上面,之后就可以开箱即用的脚手架来开发自己的<code>redux react-router</code>项目,项目基于<code>react-start-kit</code>来写…<a href=\"\">这里是github项目地址(待完成)</a></p>\n<blockquote>\n<p>本文有点多,是基于晚上很多文章整合</p>\n</blockquote>\n<h1 id=\"为什么要前后端同构？\"><a href=\"#为什么要前后端同构？\" class=\"headerlink\" title=\"为什么要前后端同构？\"></a>为什么要前后端同构？</h1><p>简单列几点：</p>\n<ul>\n<li>相对于纯前端渲染来说，更利于 SEO</li>\n<li>相对于纯前端渲染来说，首屏加载更快</li>\n<li>提高了复用性，代码更容易维护</li>\n</ul>\n<p>TODO: 这里需要配图</p>\n<h1 id=\"实现同构需要解决的问题\"><a href=\"#实现同构需要解决的问题\" class=\"headerlink\" title=\"实现同构需要解决的问题\"></a>实现同构需要解决的问题</h1><p>理想是丰满的，现实是骨感的，在实现前后端同构的路上，我们会不可避免的遇到几个问题：</p>\n<h1 id=\"运行环境差异\"><a href=\"#运行环境差异\" class=\"headerlink\" title=\"运行环境差异\"></a>运行环境差异</h1><p>有些逻辑是只能运行于浏览器端的，比如 <code>AJAX</code> 请求，浏览器事件等等，应置于<code>componentDidMount</code> 生命周期（含）以后，或者通过 window 关键字进行判断。</p>\n<h1 id=\"模块管理差异\"><a href=\"#模块管理差异\" class=\"headerlink\" title=\"模块管理差异\"></a>模块管理差异</h1><p>我们通过 <code>Webpack</code>，可以实现样式、图片等各种资源的模块化管理，但 <code>Node</code> 的<code>require</code> 可没有 <code>Webpack</code> 的魔法特性，我们可以通过<code>webpack-isomorphic</code> 工具来解决。</p>\n<h1 id=\"前端渲染数据来源\"><a href=\"#前端渲染数据来源\" class=\"headerlink\" title=\"前端渲染数据来源\"></a>前端渲染数据来源</h1><p>服务端渲染时，<code>React</code> 组件的<code>state</code> 只存在于服务器内存中，而生命周期方法只会执行到 <code>componentDidMount</code> 以前，那么前端如何将组件重新实例化，并将剩余的生命周期方法执行完呢？我们需要把服务端数据同步到前端，前端的 <code>React</code> 才能够在浏览器中进行组件的实例化，保证 <code>Web</code> 应用正常运行。</p>\n<h1 id=\"前后端路由同步\"><a href=\"#前后端路由同步\" class=\"headerlink\" title=\"前后端路由同步\"></a>前后端路由同步</h1><p>如果你的应用是单页应用（SPA），那么应该确保前后端路由一致，否则可能出现页面跳转可以正常访问，但刷新后却出现异常的情况。</p>\n<h1 id=\"服务端渲染\"><a href=\"#服务端渲染\" class=\"headerlink\" title=\"服务端渲染\"></a>服务端渲染</h1><p>这里不细说,<a href=\"http://angely.me/2018/02/26/\">react使用服务端渲染来优化SEO</a>说的很明白</p>\n<h1 id=\"为服务端实现-require-魔法\"><a href=\"#为服务端实现-require-魔法\" class=\"headerlink\" title=\"为服务端实现 require 魔法\"></a>为服务端实现 require 魔法</h1><p>上一篇我们提到过，我们可以通过 Webpack 加载器将样式、图片等前端资源作为模块进行引入，但这些资源如果在 Node 中直接引入，是会报错的，因此，我们需要借助 webpack-isomophic 模块来消除前后端 require 函数的差异。</p>\n<h2 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h2><p>在 webpack.config.js 中，配置 webpack-isomorphic 插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var IsomorphicPlugin = require(&apos;webpack-isomorphic/plugin&apos;);</div><div class=\"line\">// 配置需要同构的文件后缀名</div><div class=\"line\">var isomorphicPlugin = new IsomorphicPlugin(&#123;</div><div class=\"line\">    extensions: [&apos;jpg&apos;, &apos;png&apos;, &apos;gif&apos;, &apos;css&apos;]</div><div class=\"line\">&#125;);</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    // 配置源文件目录</div><div class=\"line\">    context: __dirname + &apos;/src&apos;,</div><div class=\"line\">    // ...</div><div class=\"line\">    plugins: [</div><div class=\"line\">        //...</div><div class=\"line\">        isomorphicPlugin</div><div class=\"line\">    ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"服务端部分\"><a href=\"#服务端部分\" class=\"headerlink\" title=\"服务端部分\"></a>服务端部分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var webpackIsomorphic = require(&apos;webpack-isomorphic&apos;);</div><div class=\"line\">// 配置构建后的文件目录</div><div class=\"line\">webpackIsomorphic.install(__dirname + &apos;/dist&apos;, &#123;</div><div class=\"line\">    cache: process.env[&apos;NODE_ENV&apos;] !== &apos;development&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>不得不说 webpack-isomorphic 的使用确实非常的简单方便。</p>\n<h1 id=\"前后端数据同步\"><a href=\"#前后端数据同步\" class=\"headerlink\" title=\"前后端数据同步\"></a>前后端数据同步</h1><p>前面提到，React 在浏览器端，如果 virtual DOM 的渲染结果与服务端一致，则不需要重新渲染 DOM 树，因此前端的数据也应该与服务端保持一致，那么前端如何得到服务端的数据呢？方法也很简单，向浏览器输出 HTML 的时候，同时把数据以 JSON 的格式置于 <script> 标签中，输出至浏览器。</p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><p>输出页面 HTML 时，同时带上原始数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> initialData = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> viewsDir = path.join(__dirname, <span class=\"string\">'./views/dist'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> template = path.join(viewsDir, <span class=\"string\">'index.tpl'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> reactClass = path.join(viewsDir, <span class=\"string\">'js/index.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> factory = React.createFactory(<span class=\"built_in\">require</span>(reactClass));</div><div class=\"line\">gotpl.renderFile(template, &#123;</div><div class=\"line\">    <span class=\"attr\">initialData</span>: initialData,</div><div class=\"line\">    <span class=\"attr\">initialHTML</span>: ReactDOMServer.renderToString(factory(initialData))</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, html</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        res.end(err.stack);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        res.end(html)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h1><p>将原始数据置于 <script> 标签中，并赋值给 window.initialData：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React+Webpack 前后端同构<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">initialHTML</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">window</span>.initialData = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">JSON.stringify</span>(<span class=\"attr\">initialData</span>) %&gt;</span>;</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"JSX-文件\"><a href=\"#JSX-文件\" class=\"headerlink\" title=\"JSX 文件\"></a>JSX 文件</h1><p>判断是否浏览器环境，若是，将 window.initialData 作为数据进行渲染：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">        React.createElement(IndexPage, initialData),</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</script></p>","site":{"data":{}},"excerpt":"","more":"<p>这里这是一个铺垫,因为使用<code>react redux</code>的小伙伴应该都有一个困惑,就是大多数些项目的人都需要<code>create-react-app</code>来意一步步构建自己的项目,然后需要些很多同样的代码,这也是我遇到的问题,所以打算写一个<code>create-redux-app</code>的脚手架,然后提交到<code>npm</code>上面,之后就可以开箱即用的脚手架来开发自己的<code>redux react-router</code>项目,项目基于<code>react-start-kit</code>来写…<a href=\"\">这里是github项目地址(待完成)</a></p>\n<blockquote>\n<p>本文有点多,是基于晚上很多文章整合</p>\n</blockquote>\n<h1 id=\"为什么要前后端同构？\"><a href=\"#为什么要前后端同构？\" class=\"headerlink\" title=\"为什么要前后端同构？\"></a>为什么要前后端同构？</h1><p>简单列几点：</p>\n<ul>\n<li>相对于纯前端渲染来说，更利于 SEO</li>\n<li>相对于纯前端渲染来说，首屏加载更快</li>\n<li>提高了复用性，代码更容易维护</li>\n</ul>\n<p>TODO: 这里需要配图</p>\n<h1 id=\"实现同构需要解决的问题\"><a href=\"#实现同构需要解决的问题\" class=\"headerlink\" title=\"实现同构需要解决的问题\"></a>实现同构需要解决的问题</h1><p>理想是丰满的，现实是骨感的，在实现前后端同构的路上，我们会不可避免的遇到几个问题：</p>\n<h1 id=\"运行环境差异\"><a href=\"#运行环境差异\" class=\"headerlink\" title=\"运行环境差异\"></a>运行环境差异</h1><p>有些逻辑是只能运行于浏览器端的，比如 <code>AJAX</code> 请求，浏览器事件等等，应置于<code>componentDidMount</code> 生命周期（含）以后，或者通过 window 关键字进行判断。</p>\n<h1 id=\"模块管理差异\"><a href=\"#模块管理差异\" class=\"headerlink\" title=\"模块管理差异\"></a>模块管理差异</h1><p>我们通过 <code>Webpack</code>，可以实现样式、图片等各种资源的模块化管理，但 <code>Node</code> 的<code>require</code> 可没有 <code>Webpack</code> 的魔法特性，我们可以通过<code>webpack-isomorphic</code> 工具来解决。</p>\n<h1 id=\"前端渲染数据来源\"><a href=\"#前端渲染数据来源\" class=\"headerlink\" title=\"前端渲染数据来源\"></a>前端渲染数据来源</h1><p>服务端渲染时，<code>React</code> 组件的<code>state</code> 只存在于服务器内存中，而生命周期方法只会执行到 <code>componentDidMount</code> 以前，那么前端如何将组件重新实例化，并将剩余的生命周期方法执行完呢？我们需要把服务端数据同步到前端，前端的 <code>React</code> 才能够在浏览器中进行组件的实例化，保证 <code>Web</code> 应用正常运行。</p>\n<h1 id=\"前后端路由同步\"><a href=\"#前后端路由同步\" class=\"headerlink\" title=\"前后端路由同步\"></a>前后端路由同步</h1><p>如果你的应用是单页应用（SPA），那么应该确保前后端路由一致，否则可能出现页面跳转可以正常访问，但刷新后却出现异常的情况。</p>\n<h1 id=\"服务端渲染\"><a href=\"#服务端渲染\" class=\"headerlink\" title=\"服务端渲染\"></a>服务端渲染</h1><p>这里不细说,<a href=\"http://angely.me/2018/02/26/\">react使用服务端渲染来优化SEO</a>说的很明白</p>\n<h1 id=\"为服务端实现-require-魔法\"><a href=\"#为服务端实现-require-魔法\" class=\"headerlink\" title=\"为服务端实现 require 魔法\"></a>为服务端实现 require 魔法</h1><p>上一篇我们提到过，我们可以通过 Webpack 加载器将样式、图片等前端资源作为模块进行引入，但这些资源如果在 Node 中直接引入，是会报错的，因此，我们需要借助 webpack-isomophic 模块来消除前后端 require 函数的差异。</p>\n<h2 id=\"前端部分\"><a href=\"#前端部分\" class=\"headerlink\" title=\"前端部分\"></a>前端部分</h2><p>在 webpack.config.js 中，配置 webpack-isomorphic 插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var IsomorphicPlugin = require(&apos;webpack-isomorphic/plugin&apos;);</div><div class=\"line\">// 配置需要同构的文件后缀名</div><div class=\"line\">var isomorphicPlugin = new IsomorphicPlugin(&#123;</div><div class=\"line\">    extensions: [&apos;jpg&apos;, &apos;png&apos;, &apos;gif&apos;, &apos;css&apos;]</div><div class=\"line\">&#125;);</div><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    // 配置源文件目录</div><div class=\"line\">    context: __dirname + &apos;/src&apos;,</div><div class=\"line\">    // ...</div><div class=\"line\">    plugins: [</div><div class=\"line\">        //...</div><div class=\"line\">        isomorphicPlugin</div><div class=\"line\">    ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"服务端部分\"><a href=\"#服务端部分\" class=\"headerlink\" title=\"服务端部分\"></a>服务端部分</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var webpackIsomorphic = require(&apos;webpack-isomorphic&apos;);</div><div class=\"line\">// 配置构建后的文件目录</div><div class=\"line\">webpackIsomorphic.install(__dirname + &apos;/dist&apos;, &#123;</div><div class=\"line\">    cache: process.env[&apos;NODE_ENV&apos;] !== &apos;development&apos;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>不得不说 webpack-isomorphic 的使用确实非常的简单方便。</p>\n<h1 id=\"前后端数据同步\"><a href=\"#前后端数据同步\" class=\"headerlink\" title=\"前后端数据同步\"></a>前后端数据同步</h1><p>前面提到，React 在浏览器端，如果 virtual DOM 的渲染结果与服务端一致，则不需要重新渲染 DOM 树，因此前端的数据也应该与服务端保持一致，那么前端如何得到服务端的数据呢？方法也很简单，向浏览器输出 HTML 的时候，同时把数据以 JSON 的格式置于 <script> 标签中，输出至浏览器。</p>\n<h1 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h1><p>输出页面 HTML 时，同时带上原始数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> initialData = &#123;<span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> viewsDir = path.join(__dirname, <span class=\"string\">'./views/dist'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> template = path.join(viewsDir, <span class=\"string\">'index.tpl'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> reactClass = path.join(viewsDir, <span class=\"string\">'js/index.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> factory = React.createFactory(<span class=\"built_in\">require</span>(reactClass));</div><div class=\"line\">gotpl.renderFile(template, &#123;</div><div class=\"line\">    <span class=\"attr\">initialData</span>: initialData,</div><div class=\"line\">    <span class=\"attr\">initialHTML</span>: ReactDOMServer.renderToString(factory(initialData))</div><div class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, html</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        res.end(err.stack);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        res.end(html)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h1><p>将原始数据置于 <script> 标签中，并赋值给 window.initialData：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>React+Webpack 前后端同构<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"index.css\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">initialHTML</span> %&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"><span class=\"built_in\">window</span>.initialData = <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%-</span> <span class=\"attr\">JSON.stringify</span>(<span class=\"attr\">initialData</span>) %&gt;</span>;</span></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"index.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<h1 id=\"JSX-文件\"><a href=\"#JSX-文件\" class=\"headerlink\" title=\"JSX 文件\"></a>JSX 文件</h1><p>判断是否浏览器环境，若是，将 window.initialData 作为数据进行渲染：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"built_in\">window</span> !== <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">        React.createElement(IndexPage, initialData),</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'root'</span>)</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</script></p>"},{"title":"vim转移emacs的艰辛路程","date":"2017-06-04T09:54:47.000Z","_content":"# 工欲善其事, 必先利其器\n\n> 大道理不用多讲\n<!-- more -->\n\n## vim和emacs相比ide优点缺点(想对而论)\n\n> 使用之前建议把`Caps Lock`和`control`替换\n\n- 100%linux装机率,没有GUI的服务器编辑器首选\n- 学习曲线高\n- 速度快\n- 效率高\n- vimscript太蹩脚,\n- 使用python写插件,\n- 可以帮助乌干达贫困儿童\n- 长时间编写, 来回模式切换(个人不喜欢)\n\n而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)\n\n因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%\n\n## vim简单介绍\n\n> Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。\n\n## 简单使用\n\n[推荐配置](https://github.com/SpaceVim/SpaceVim)\n\nvim有3中模式,\n\n- `normal`所有快捷键发出指令需要在normal模式下, 除非自己添加`insert`模式配置\n- `inster`插入模式, 编写代码\n- `visual` 模式, 文本的选择\n\n[懒人,别人写的快捷键博客](http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html);\n{% asset_img vim_key_help.png vim键位查询 %}\n\n### vim使用`python`来写你的vim插件\n\n> 注意!!! python电脑版本一定要和vim支持的版本相同`:h python` 查看vim支持版本 `:!command` 用来执行base命令\n\nvim执行python命令直接`:python print \"这里是输入内容\"`\n\n如果在`vimrc`里面使用python来扩展功能.下面是格式\n\n```\npy[thon] << {endmarker}\n{script}\n{endmarker}\n```\n\ndemo:\n\n```python\nfunction! Foo()\npython << EOF\nclass Foo_demo:\n    def __init__(self):\n        print 'Foo_demo init'\nFoo_demo()\nEOF\nendfunction\n```\n\n想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用`:source path_to_script/script_demo.vim` 然后`:call Foo()`来执行\n\n[python扩展vim插件原文](https://segmentfault.com/a/1190000000756107)\n\n## emacs简单介绍\n\n> Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。\nEMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。\n自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。\n\nEmac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展\n\n## emacs 使用\n\n### 优缺点\n\n- 效率高\n- 社区牛人多\n- 速度快\n- 学习曲线高\n- lisp强大的语言支持\n- 不能资助乌干达贫困儿童\n- 相比vim不需要切换模式\n- 每个buffer可以选用单个mode, 互相不冲突\n\n[推荐使用配置(容易上手些)](https://github.com/syl20bnr/spacemacs)\n\n[个人使用配置](https://github.com/angelporo/emacs.d)\n\nemacs使用介绍就比vim简单多了,\n如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,\n\nemacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,\n\n具体使用查看手册`C-h k f b`\n\n[常用快捷键,](http://blog.csdn.net/CherylNatsu/article/details/6536959)\n\n内置帮助手册\n\n`Ctrl-h i m emacs`就可以调出详细的Emacs使用手册;\n`Ctrl-h i m emacs lisp intro` 可以调出Emacs Lisp入门教程；\n`Ctrl-h i m elisp` 可以调出完整的elisp编程手册。\n\n## vim和emacs使用上感受以及不同\n\n在使用vim和emacs之前一直用的`sublime text` 这里说下感受,\n相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己`sublime`配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.\n\n最终逼着自己使用vim,最终自己写过一套配置, 可是在看了`github`大神开源的配置后, 想也没想`fork`过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨`油煎粑粑`)\n\n前车之鉴: 最好使用大神开源配置, 少走弯路\n\n> vim更适合修改网管, emacs才是更适合长时间的编码\n\n所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心\n","source":"_posts/vim转移emacs的艰辛路程.md","raw":"---\ntitle: vim转移emacs的艰辛路程\ndate: 2017-06-04 17:54:47\ntags:\n    - vim\n    - emacs\ncategories: emacs\n---\n# 工欲善其事, 必先利其器\n\n> 大道理不用多讲\n<!-- more -->\n\n## vim和emacs相比ide优点缺点(想对而论)\n\n> 使用之前建议把`Caps Lock`和`control`替换\n\n- 100%linux装机率,没有GUI的服务器编辑器首选\n- 学习曲线高\n- 速度快\n- 效率高\n- vimscript太蹩脚,\n- 使用python写插件,\n- 可以帮助乌干达贫困儿童\n- 长时间编写, 来回模式切换(个人不喜欢)\n\n而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)\n\n因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%\n\n## vim简单介绍\n\n> Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。\n\n## 简单使用\n\n[推荐配置](https://github.com/SpaceVim/SpaceVim)\n\nvim有3中模式,\n\n- `normal`所有快捷键发出指令需要在normal模式下, 除非自己添加`insert`模式配置\n- `inster`插入模式, 编写代码\n- `visual` 模式, 文本的选择\n\n[懒人,别人写的快捷键博客](http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html);\n{% asset_img vim_key_help.png vim键位查询 %}\n\n### vim使用`python`来写你的vim插件\n\n> 注意!!! python电脑版本一定要和vim支持的版本相同`:h python` 查看vim支持版本 `:!command` 用来执行base命令\n\nvim执行python命令直接`:python print \"这里是输入内容\"`\n\n如果在`vimrc`里面使用python来扩展功能.下面是格式\n\n```\npy[thon] << {endmarker}\n{script}\n{endmarker}\n```\n\ndemo:\n\n```python\nfunction! Foo()\npython << EOF\nclass Foo_demo:\n    def __init__(self):\n        print 'Foo_demo init'\nFoo_demo()\nEOF\nendfunction\n```\n\n想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用`:source path_to_script/script_demo.vim` 然后`:call Foo()`来执行\n\n[python扩展vim插件原文](https://segmentfault.com/a/1190000000756107)\n\n## emacs简单介绍\n\n> Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。\nEMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。\n自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。\n\nEmac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展\n\n## emacs 使用\n\n### 优缺点\n\n- 效率高\n- 社区牛人多\n- 速度快\n- 学习曲线高\n- lisp强大的语言支持\n- 不能资助乌干达贫困儿童\n- 相比vim不需要切换模式\n- 每个buffer可以选用单个mode, 互相不冲突\n\n[推荐使用配置(容易上手些)](https://github.com/syl20bnr/spacemacs)\n\n[个人使用配置](https://github.com/angelporo/emacs.d)\n\nemacs使用介绍就比vim简单多了,\n如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,\n\nemacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,\n\n具体使用查看手册`C-h k f b`\n\n[常用快捷键,](http://blog.csdn.net/CherylNatsu/article/details/6536959)\n\n内置帮助手册\n\n`Ctrl-h i m emacs`就可以调出详细的Emacs使用手册;\n`Ctrl-h i m emacs lisp intro` 可以调出Emacs Lisp入门教程；\n`Ctrl-h i m elisp` 可以调出完整的elisp编程手册。\n\n## vim和emacs使用上感受以及不同\n\n在使用vim和emacs之前一直用的`sublime text` 这里说下感受,\n相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己`sublime`配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.\n\n最终逼着自己使用vim,最终自己写过一套配置, 可是在看了`github`大神开源的配置后, 想也没想`fork`过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨`油煎粑粑`)\n\n前车之鉴: 最好使用大神开源配置, 少走弯路\n\n> vim更适合修改网管, emacs才是更适合长时间的编码\n\n所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心\n","slug":"vim转移emacs的艰辛路程","published":1,"updated":"2019-05-13T03:56:03.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebed0045a0dmma1p0kh4","content":"<h1 id=\"工欲善其事-必先利其器\"><a href=\"#工欲善其事-必先利其器\" class=\"headerlink\" title=\"工欲善其事, 必先利其器\"></a>工欲善其事, 必先利其器</h1><blockquote>\n<p>大道理不用多讲<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"vim和emacs相比ide优点缺点-想对而论\"><a href=\"#vim和emacs相比ide优点缺点-想对而论\" class=\"headerlink\" title=\"vim和emacs相比ide优点缺点(想对而论)\"></a>vim和emacs相比ide优点缺点(想对而论)</h2><blockquote>\n<p>使用之前建议把<code>Caps Lock</code>和<code>control</code>替换</p>\n</blockquote>\n<ul>\n<li>100%linux装机率,没有GUI的服务器编辑器首选</li>\n<li>学习曲线高</li>\n<li>速度快</li>\n<li>效率高</li>\n<li>vimscript太蹩脚,</li>\n<li>使用python写插件,</li>\n<li>可以帮助乌干达贫困儿童</li>\n<li>长时间编写, 来回模式切换(个人不喜欢)</li>\n</ul>\n<p>而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)</p>\n<p>因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%</p>\n<h2 id=\"vim简单介绍\"><a href=\"#vim简单介绍\" class=\"headerlink\" title=\"vim简单介绍\"></a>vim简单介绍</h2><blockquote>\n<p>Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。</p>\n</blockquote>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><a href=\"https://github.com/SpaceVim/SpaceVim\" target=\"_blank\" rel=\"external\">推荐配置</a></p>\n<p>vim有3中模式,</p>\n<ul>\n<li><code>normal</code>所有快捷键发出指令需要在normal模式下, 除非自己添加<code>insert</code>模式配置</li>\n<li><code>inster</code>插入模式, 编写代码</li>\n<li><code>visual</code> 模式, 文本的选择</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html\" target=\"_blank\" rel=\"external\">懒人,别人写的快捷键博客</a>;<br><img src=\"/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png\" alt=\"vim键位查询\" title=\"vim键位查询\"></p>\n<h3 id=\"vim使用python来写你的vim插件\"><a href=\"#vim使用python来写你的vim插件\" class=\"headerlink\" title=\"vim使用python来写你的vim插件\"></a>vim使用<code>python</code>来写你的vim插件</h3><blockquote>\n<p>注意!!! python电脑版本一定要和vim支持的版本相同<code>:h python</code> 查看vim支持版本 <code>:!command</code> 用来执行base命令</p>\n</blockquote>\n<p>vim执行python命令直接<code>:python print &quot;这里是输入内容&quot;</code></p>\n<p>如果在<code>vimrc</code>里面使用python来扩展功能.下面是格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">py[thon] &lt;&lt; &#123;endmarker&#125;</div><div class=\"line\">&#123;script&#125;</div><div class=\"line\">&#123;endmarker&#125;</div></pre></td></tr></table></figure>\n<p>demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function! Foo()</div><div class=\"line\">python &lt;&lt; EOF</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo_demo</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Foo_demo init'</span></div><div class=\"line\">Foo_demo()</div><div class=\"line\">EOF</div><div class=\"line\">endfunction</div></pre></td></tr></table></figure>\n<p>想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用<code>:source path_to_script/script_demo.vim</code> 然后<code>:call Foo()</code>来执行</p>\n<p><a href=\"https://segmentfault.com/a/1190000000756107\" target=\"_blank\" rel=\"external\">python扩展vim插件原文</a></p>\n<h2 id=\"emacs简单介绍\"><a href=\"#emacs简单介绍\" class=\"headerlink\" title=\"emacs简单介绍\"></a>emacs简单介绍</h2><blockquote>\n<p>Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。<br>EMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。<br>自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。</p>\n</blockquote>\n<p>Emac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展</p>\n<h2 id=\"emacs-使用\"><a href=\"#emacs-使用\" class=\"headerlink\" title=\"emacs 使用\"></a>emacs 使用</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>效率高</li>\n<li>社区牛人多</li>\n<li>速度快</li>\n<li>学习曲线高</li>\n<li>lisp强大的语言支持</li>\n<li>不能资助乌干达贫困儿童</li>\n<li>相比vim不需要切换模式</li>\n<li>每个buffer可以选用单个mode, 互相不冲突</li>\n</ul>\n<p><a href=\"https://github.com/syl20bnr/spacemacs\" target=\"_blank\" rel=\"external\">推荐使用配置(容易上手些)</a></p>\n<p><a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">个人使用配置</a></p>\n<p>emacs使用介绍就比vim简单多了,<br>如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,</p>\n<p>emacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,</p>\n<p>具体使用查看手册<code>C-h k f b</code></p>\n<p><a href=\"http://blog.csdn.net/CherylNatsu/article/details/6536959\" target=\"_blank\" rel=\"external\">常用快捷键,</a></p>\n<p>内置帮助手册</p>\n<p><code>Ctrl-h i m emacs</code>就可以调出详细的Emacs使用手册;<br><code>Ctrl-h i m emacs lisp intro</code> 可以调出Emacs Lisp入门教程；<br><code>Ctrl-h i m elisp</code> 可以调出完整的elisp编程手册。</p>\n<h2 id=\"vim和emacs使用上感受以及不同\"><a href=\"#vim和emacs使用上感受以及不同\" class=\"headerlink\" title=\"vim和emacs使用上感受以及不同\"></a>vim和emacs使用上感受以及不同</h2><p>在使用vim和emacs之前一直用的<code>sublime text</code> 这里说下感受,<br>相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己<code>sublime</code>配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.</p>\n<p>最终逼着自己使用vim,最终自己写过一套配置, 可是在看了<code>github</code>大神开源的配置后, 想也没想<code>fork</code>过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨<code>油煎粑粑</code>)</p>\n<p>前车之鉴: 最好使用大神开源配置, 少走弯路</p>\n<blockquote>\n<p>vim更适合修改网管, emacs才是更适合长时间的编码</p>\n</blockquote>\n<p>所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"工欲善其事-必先利其器\"><a href=\"#工欲善其事-必先利其器\" class=\"headerlink\" title=\"工欲善其事, 必先利其器\"></a>工欲善其事, 必先利其器</h1><blockquote>\n<p>大道理不用多讲<br>","more":"</p>\n</blockquote>\n<h2 id=\"vim和emacs相比ide优点缺点-想对而论\"><a href=\"#vim和emacs相比ide优点缺点-想对而论\" class=\"headerlink\" title=\"vim和emacs相比ide优点缺点(想对而论)\"></a>vim和emacs相比ide优点缺点(想对而论)</h2><blockquote>\n<p>使用之前建议把<code>Caps Lock</code>和<code>control</code>替换</p>\n</blockquote>\n<ul>\n<li>100%linux装机率,没有GUI的服务器编辑器首选</li>\n<li>学习曲线高</li>\n<li>速度快</li>\n<li>效率高</li>\n<li>vimscript太蹩脚,</li>\n<li>使用python写插件,</li>\n<li>可以帮助乌干达贫困儿童</li>\n<li>长时间编写, 来回模式切换(个人不喜欢)</li>\n</ul>\n<p>而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)</p>\n<p>因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%</p>\n<h2 id=\"vim简单介绍\"><a href=\"#vim简单介绍\" class=\"headerlink\" title=\"vim简单介绍\"></a>vim简单介绍</h2><blockquote>\n<p>Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。</p>\n</blockquote>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><a href=\"https://github.com/SpaceVim/SpaceVim\" target=\"_blank\" rel=\"external\">推荐配置</a></p>\n<p>vim有3中模式,</p>\n<ul>\n<li><code>normal</code>所有快捷键发出指令需要在normal模式下, 除非自己添加<code>insert</code>模式配置</li>\n<li><code>inster</code>插入模式, 编写代码</li>\n<li><code>visual</code> 模式, 文本的选择</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html\" target=\"_blank\" rel=\"external\">懒人,别人写的快捷键博客</a>;<br><img src=\"/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png\" alt=\"vim键位查询\" title=\"vim键位查询\"></p>\n<h3 id=\"vim使用python来写你的vim插件\"><a href=\"#vim使用python来写你的vim插件\" class=\"headerlink\" title=\"vim使用python来写你的vim插件\"></a>vim使用<code>python</code>来写你的vim插件</h3><blockquote>\n<p>注意!!! python电脑版本一定要和vim支持的版本相同<code>:h python</code> 查看vim支持版本 <code>:!command</code> 用来执行base命令</p>\n</blockquote>\n<p>vim执行python命令直接<code>:python print &quot;这里是输入内容&quot;</code></p>\n<p>如果在<code>vimrc</code>里面使用python来扩展功能.下面是格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">py[thon] &lt;&lt; &#123;endmarker&#125;</div><div class=\"line\">&#123;script&#125;</div><div class=\"line\">&#123;endmarker&#125;</div></pre></td></tr></table></figure>\n<p>demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function! Foo()</div><div class=\"line\">python &lt;&lt; EOF</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo_demo</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Foo_demo init'</span></div><div class=\"line\">Foo_demo()</div><div class=\"line\">EOF</div><div class=\"line\">endfunction</div></pre></td></tr></table></figure>\n<p>想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用<code>:source path_to_script/script_demo.vim</code> 然后<code>:call Foo()</code>来执行</p>\n<p><a href=\"https://segmentfault.com/a/1190000000756107\" target=\"_blank\" rel=\"external\">python扩展vim插件原文</a></p>\n<h2 id=\"emacs简单介绍\"><a href=\"#emacs简单介绍\" class=\"headerlink\" title=\"emacs简单介绍\"></a>emacs简单介绍</h2><blockquote>\n<p>Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。<br>EMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。<br>自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。</p>\n</blockquote>\n<p>Emac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展</p>\n<h2 id=\"emacs-使用\"><a href=\"#emacs-使用\" class=\"headerlink\" title=\"emacs 使用\"></a>emacs 使用</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>效率高</li>\n<li>社区牛人多</li>\n<li>速度快</li>\n<li>学习曲线高</li>\n<li>lisp强大的语言支持</li>\n<li>不能资助乌干达贫困儿童</li>\n<li>相比vim不需要切换模式</li>\n<li>每个buffer可以选用单个mode, 互相不冲突</li>\n</ul>\n<p><a href=\"https://github.com/syl20bnr/spacemacs\" target=\"_blank\" rel=\"external\">推荐使用配置(容易上手些)</a></p>\n<p><a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">个人使用配置</a></p>\n<p>emacs使用介绍就比vim简单多了,<br>如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,</p>\n<p>emacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,</p>\n<p>具体使用查看手册<code>C-h k f b</code></p>\n<p><a href=\"http://blog.csdn.net/CherylNatsu/article/details/6536959\" target=\"_blank\" rel=\"external\">常用快捷键,</a></p>\n<p>内置帮助手册</p>\n<p><code>Ctrl-h i m emacs</code>就可以调出详细的Emacs使用手册;<br><code>Ctrl-h i m emacs lisp intro</code> 可以调出Emacs Lisp入门教程；<br><code>Ctrl-h i m elisp</code> 可以调出完整的elisp编程手册。</p>\n<h2 id=\"vim和emacs使用上感受以及不同\"><a href=\"#vim和emacs使用上感受以及不同\" class=\"headerlink\" title=\"vim和emacs使用上感受以及不同\"></a>vim和emacs使用上感受以及不同</h2><p>在使用vim和emacs之前一直用的<code>sublime text</code> 这里说下感受,<br>相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己<code>sublime</code>配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.</p>\n<p>最终逼着自己使用vim,最终自己写过一套配置, 可是在看了<code>github</code>大神开源的配置后, 想也没想<code>fork</code>过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨<code>油煎粑粑</code>)</p>\n<p>前车之鉴: 最好使用大神开源配置, 少走弯路</p>\n<blockquote>\n<p>vim更适合修改网管, emacs才是更适合长时间的编码</p>\n</blockquote>\n<p>所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心</p>"},{"title":"react系列使用redux","date":"2017-06-14T01:50:15.000Z","comments":0,"_content":"\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理,\nredux 出现是时间并不长, 是有flux发展而来\n\n### 设计动机\n\n目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。\n\n<!-- more -->\n\n### 查看文档\n\n之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档\n好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.\n\n### 使用原则\n\n> Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，\n> 主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初\n> 学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。\n\n1. Single source of truth\n\n 单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.\n\n2. State is read-only\n\n 状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性).\n\n3. Changes are made with pure functions\n\n 在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。\n\n> 附上官网经典案例 counter\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。\n\n## redux 状态管理的流程\n\n- action是用户触发或程序触发的一个普通对象\n\n- reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)\n\n- store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)\n\n{% asset_img redux-thing-image1.png redux流程 %}\n\n上图可以简单的看出redux的改变 状态 . action -> reducer -> 新store -> ui更新\n\n下面是具体的实例:\n\n{% asset_img redux-thing-image2.png redux登录具体流程 %}\n\nstore用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。\n\n> [原文地址](http://www.jianshu.com/p/2c43860b0532)\n\n### 推荐两个react和redux的调试小工具\n    [React Developer Tools Chrome](http://www.cnplugins.com/devtool/react-developer-tools/)\n    [Redux Dev Tools Chrome](http://www.cnplugins.com/devtool/redux-devtools/)\n","source":"_posts/react系列使用redux.md","raw":"---\ntitle: react系列使用redux\ndate: 2017-06-14 09:50:15\ntags:\n  - redux\n  - react\ncategories: \"react\"\ncomments: false\n---\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理,\nredux 出现是时间并不长, 是有flux发展而来\n\n### 设计动机\n\n目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。\n\n<!-- more -->\n\n### 查看文档\n\n之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档\n好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.\n\n### 使用原则\n\n> Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，\n> 主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初\n> 学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。\n\n1. Single source of truth\n\n 单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.\n\n2. State is read-only\n\n 状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性).\n\n3. Changes are made with pure functions\n\n 在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。\n\n> 附上官网经典案例 counter\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。\n\n## redux 状态管理的流程\n\n- action是用户触发或程序触发的一个普通对象\n\n- reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)\n\n- store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)\n\n{% asset_img redux-thing-image1.png redux流程 %}\n\n上图可以简单的看出redux的改变 状态 . action -> reducer -> 新store -> ui更新\n\n下面是具体的实例:\n\n{% asset_img redux-thing-image2.png redux登录具体流程 %}\n\nstore用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。\n\n> [原文地址](http://www.jianshu.com/p/2c43860b0532)\n\n### 推荐两个react和redux的调试小工具\n    [React Developer Tools Chrome](http://www.cnplugins.com/devtool/react-developer-tools/)\n    [Redux Dev Tools Chrome](http://www.cnplugins.com/devtool/redux-devtools/)\n","slug":"react系列使用redux","published":1,"updated":"2019-05-13T03:56:03.263Z","layout":"post","photos":[],"link":"","_id":"cjvluebef0049a0dm5g6n9h2m","content":"<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理,<br>redux 出现是时间并不长, 是有flux发展而来</p>\n</blockquote>\n<h3 id=\"设计动机\"><a href=\"#设计动机\" class=\"headerlink\" title=\"设计动机\"></a>设计动机</h3><p>目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。</p>\n<a id=\"more\"></a>\n<h3 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h3><p>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.</p>\n<h3 id=\"使用原则\"><a href=\"#使用原则\" class=\"headerlink\" title=\"使用原则\"></a>使用原则</h3><blockquote>\n<p>Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，<br>主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初<br>学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。</p>\n</blockquote>\n<ol>\n<li><p>Single source of truth</p>\n<p>单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.</p>\n</li>\n<li><p>State is read-only</p>\n<p>状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性).</p>\n</li>\n<li><p>Changes are made with pure functions</p>\n<p>在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>附上官网经典案例 counter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。</p>\n<h2 id=\"redux-状态管理的流程\"><a href=\"#redux-状态管理的流程\" class=\"headerlink\" title=\"redux 状态管理的流程\"></a>redux 状态管理的流程</h2><ul>\n<li><p>action是用户触发或程序触发的一个普通对象</p>\n</li>\n<li><p>reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)</p>\n</li>\n<li><p>store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)</p>\n</li>\n</ul>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image1.png\" alt=\"redux流程\" title=\"redux流程\">\n<p>上图可以简单的看出redux的改变 状态 . action -&gt; reducer -&gt; 新store -&gt; ui更新</p>\n<p>下面是具体的实例:</p>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image2.png\" alt=\"redux登录具体流程\" title=\"redux登录具体流程\">\n<p>store用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/2c43860b0532\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n<h3 id=\"推荐两个react和redux的调试小工具\"><a href=\"#推荐两个react和redux的调试小工具\" class=\"headerlink\" title=\"推荐两个react和redux的调试小工具\"></a>推荐两个react和redux的调试小工具</h3><pre><code>[React Developer Tools Chrome](http://www.cnplugins.com/devtool/react-developer-tools/)\n[Redux Dev Tools Chrome](http://www.cnplugins.com/devtool/redux-devtools/)\n</code></pre>","site":{"data":{}},"excerpt":"<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理,<br>redux 出现是时间并不长, 是有flux发展而来</p>\n</blockquote>\n<h3 id=\"设计动机\"><a href=\"#设计动机\" class=\"headerlink\" title=\"设计动机\"></a>设计动机</h3><p>目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。</p>","more":"<h3 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h3><p>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.</p>\n<h3 id=\"使用原则\"><a href=\"#使用原则\" class=\"headerlink\" title=\"使用原则\"></a>使用原则</h3><blockquote>\n<p>Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，<br>主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初<br>学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。</p>\n</blockquote>\n<ol>\n<li><p>Single source of truth</p>\n<p>单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.</p>\n</li>\n<li><p>State is read-only</p>\n<p>状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性).</p>\n</li>\n<li><p>Changes are made with pure functions</p>\n<p>在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>附上官网经典案例 counter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。</p>\n<h2 id=\"redux-状态管理的流程\"><a href=\"#redux-状态管理的流程\" class=\"headerlink\" title=\"redux 状态管理的流程\"></a>redux 状态管理的流程</h2><ul>\n<li><p>action是用户触发或程序触发的一个普通对象</p>\n</li>\n<li><p>reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)</p>\n</li>\n<li><p>store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)</p>\n</li>\n</ul>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image1.png\" alt=\"redux流程\" title=\"redux流程\">\n<p>上图可以简单的看出redux的改变 状态 . action -&gt; reducer -&gt; 新store -&gt; ui更新</p>\n<p>下面是具体的实例:</p>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image2.png\" alt=\"redux登录具体流程\" title=\"redux登录具体流程\">\n<p>store用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/2c43860b0532\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n<h3 id=\"推荐两个react和redux的调试小工具\"><a href=\"#推荐两个react和redux的调试小工具\" class=\"headerlink\" title=\"推荐两个react和redux的调试小工具\"></a>推荐两个react和redux的调试小工具</h3><pre><code>[React Developer Tools Chrome](http://www.cnplugins.com/devtool/react-developer-tools/)\n[Redux Dev Tools Chrome](http://www.cnplugins.com/devtool/redux-devtools/)\n</code></pre>"},{"title":"二分查找","date":"2017-08-07T07:09:38.000Z","_content":"\n## 二分查找:\n\n是一种有(序数组中)查找特定元素的搜索算法, 查找过程中可以分为一下步骤:\n1. 首先, 从有序数组的中间的元素开始搜索, 如果改元素正好是目标元素, 则搜索过程结束, 否则进行下一步.\n2. 如果目标元素大于或者小于中间元素, 则在数组大于或小于中间元素的那一半区域查找, 然后重复第一步的操作\n3. 如果某一不数组为空, 则表示找不到目标元素.\n\n代码示例:\n\n```javascript\n// 非递归\n/**\n * arr必须是有序列表\n * Param: param\n * Return: {undefined}\n **/\nlet binary_search = (arr, key) => {\n  let low = 0,\n      high = arr.length - 1;\n  while(low <= high) {\n    let mid = parseInt((high + low) / 2);\n    if (key == arr[mid]) {\n      return mid;\n    }else if (key > arr[mid]) {\n      low = mid + 1;\n    }else if (key < arr[mid]) {\n      high = mid - 1;\n    }else {\n      return -1;\n    }\n  }\n};\n\nlet arr = [1,2,3,4,5,6,7,8,9,10,11,23,44,86];\nlet result = binary_search(arr,10);\nalert(result); // 9 返回目标元素的索引值\n```\n\n递归:\n```javascript\nfunction binary_search(arr,low, high, key) {\n  if (low > high){\n    return -1;\n  }\n  var mid = parseInt((high + low) / 2);\n  if(arr[mid] == key){\n    return mid;\n  }else if (arr[mid] > key){\n    high = mid - 1;\n    return binary_search(arr, low, high, key);\n  }else if (arr[mid] < key){\n    low = mid + 1;\n    return binary_search(arr, low, high, key);\n  }\n};\nvar arr = [1,2,3,4,5,6,7,8,9,10,11,23,44,86];\nvar result = binary_search(arr, 0, 13, 10);\nalert(result); // 9 返回目标元素的索引值\n```\n\n## 快速排序\n\n快速排序是对冒泡排序的一种该经, 第一趟排序时将数据分成两个部分, 一部分比另一部分的数据都要小, 然后递归调用,  在两边都实行快速排序.\n\n```javascript\nfunction quickSort (elements) {\n  if (elements.length <= 1) return elements;\n  let pivotIndex = Math.floor(elements.length / 2 );\n  let pivot = elements.splice(pivotIndex, 1)[0];\n  let left = [],\n      right = [];\n  for(let i = 0; i < elements.length; i++) {\n    if (elements[i] < pivot) {\n      left.push(elements[i]);\n    }else {\n      right.push(elements[i]);\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right));\n}\nvar elements=[5,6,2,1,3,8,7,1.2,5.5,4.5];\nalert(quickSort(elements));\n```\n> [原文地址](http://www.cnblogs.com/eniac12/p/5329396.html)\n","source":"_posts/二分查找.md","raw":"---\ntitle: 二分查找\ndate: 2017-08-07 15:09:38\ntags:\n    - 二分查找\n    - 冒泡排序\ncategories: \"算法\"\n---\n\n## 二分查找:\n\n是一种有(序数组中)查找特定元素的搜索算法, 查找过程中可以分为一下步骤:\n1. 首先, 从有序数组的中间的元素开始搜索, 如果改元素正好是目标元素, 则搜索过程结束, 否则进行下一步.\n2. 如果目标元素大于或者小于中间元素, 则在数组大于或小于中间元素的那一半区域查找, 然后重复第一步的操作\n3. 如果某一不数组为空, 则表示找不到目标元素.\n\n代码示例:\n\n```javascript\n// 非递归\n/**\n * arr必须是有序列表\n * Param: param\n * Return: {undefined}\n **/\nlet binary_search = (arr, key) => {\n  let low = 0,\n      high = arr.length - 1;\n  while(low <= high) {\n    let mid = parseInt((high + low) / 2);\n    if (key == arr[mid]) {\n      return mid;\n    }else if (key > arr[mid]) {\n      low = mid + 1;\n    }else if (key < arr[mid]) {\n      high = mid - 1;\n    }else {\n      return -1;\n    }\n  }\n};\n\nlet arr = [1,2,3,4,5,6,7,8,9,10,11,23,44,86];\nlet result = binary_search(arr,10);\nalert(result); // 9 返回目标元素的索引值\n```\n\n递归:\n```javascript\nfunction binary_search(arr,low, high, key) {\n  if (low > high){\n    return -1;\n  }\n  var mid = parseInt((high + low) / 2);\n  if(arr[mid] == key){\n    return mid;\n  }else if (arr[mid] > key){\n    high = mid - 1;\n    return binary_search(arr, low, high, key);\n  }else if (arr[mid] < key){\n    low = mid + 1;\n    return binary_search(arr, low, high, key);\n  }\n};\nvar arr = [1,2,3,4,5,6,7,8,9,10,11,23,44,86];\nvar result = binary_search(arr, 0, 13, 10);\nalert(result); // 9 返回目标元素的索引值\n```\n\n## 快速排序\n\n快速排序是对冒泡排序的一种该经, 第一趟排序时将数据分成两个部分, 一部分比另一部分的数据都要小, 然后递归调用,  在两边都实行快速排序.\n\n```javascript\nfunction quickSort (elements) {\n  if (elements.length <= 1) return elements;\n  let pivotIndex = Math.floor(elements.length / 2 );\n  let pivot = elements.splice(pivotIndex, 1)[0];\n  let left = [],\n      right = [];\n  for(let i = 0; i < elements.length; i++) {\n    if (elements[i] < pivot) {\n      left.push(elements[i]);\n    }else {\n      right.push(elements[i]);\n    }\n  }\n  return quickSort(left).concat([pivot], quickSort(right));\n}\nvar elements=[5,6,2,1,3,8,7,1.2,5.5,4.5];\nalert(quickSort(elements));\n```\n> [原文地址](http://www.cnblogs.com/eniac12/p/5329396.html)\n","slug":"二分查找","published":1,"updated":"2019-05-13T03:56:03.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebeg004ba0dm1yanbnfl","content":"<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找:\"></a>二分查找:</h2><p>是一种有(序数组中)查找特定元素的搜索算法, 查找过程中可以分为一下步骤:</p>\n<ol>\n<li>首先, 从有序数组的中间的元素开始搜索, 如果改元素正好是目标元素, 则搜索过程结束, 否则进行下一步.</li>\n<li>如果目标元素大于或者小于中间元素, 则在数组大于或小于中间元素的那一半区域查找, 然后重复第一步的操作</li>\n<li>如果某一不数组为空, 则表示找不到目标元素.</li>\n</ol>\n<p>代码示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非递归</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * arr必须是有序列表</div><div class=\"line\"> * Param: param</div><div class=\"line\"> * Return: &#123;undefined&#125;</div><div class=\"line\"> **/</div><div class=\"line\"><span class=\"keyword\">let</span> binary_search = <span class=\"function\">(<span class=\"params\">arr, key</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>,</div><div class=\"line\">      high = arr.length - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(low &lt;= high) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == arr[mid]) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> mid;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; arr[mid]) &#123;</div><div class=\"line\">      low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; arr[mid]) &#123;</div><div class=\"line\">      high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">23</span>,<span class=\"number\">44</span>,<span class=\"number\">86</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> result = binary_search(arr,<span class=\"number\">10</span>);</div><div class=\"line\">alert(result); <span class=\"comment\">// 9 返回目标元素的索引值</span></div></pre></td></tr></table></figure>\n<p>递归:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr,low, high, key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (low &gt; high)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span>(arr[mid] == key)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mid;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; key)&#123;</div><div class=\"line\">    high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; key)&#123;</div><div class=\"line\">    low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">23</span>,<span class=\"number\">44</span>,<span class=\"number\">86</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = binary_search(arr, <span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>);</div><div class=\"line\">alert(result); <span class=\"comment\">// 9 返回目标元素的索引值</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序是对冒泡排序的一种该经, 第一趟排序时将数据分成两个部分, 一部分比另一部分的数据都要小, 然后递归调用,  在两边都实行快速排序.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span> (<span class=\"params\">elements</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (elements.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> elements;</div><div class=\"line\">  <span class=\"keyword\">let</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(elements.length / <span class=\"number\">2</span> );</div><div class=\"line\">  <span class=\"keyword\">let</span> pivot = elements.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">  <span class=\"keyword\">let</span> left = [],</div><div class=\"line\">      right = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (elements[i] &lt; pivot) &#123;</div><div class=\"line\">      left.push(elements[i]);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      right.push(elements[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> elements=[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1.2</span>,<span class=\"number\">5.5</span>,<span class=\"number\">4.5</span>];</div><div class=\"line\">alert(quickSort(elements));</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/eniac12/p/5329396.html\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找:\"></a>二分查找:</h2><p>是一种有(序数组中)查找特定元素的搜索算法, 查找过程中可以分为一下步骤:</p>\n<ol>\n<li>首先, 从有序数组的中间的元素开始搜索, 如果改元素正好是目标元素, 则搜索过程结束, 否则进行下一步.</li>\n<li>如果目标元素大于或者小于中间元素, 则在数组大于或小于中间元素的那一半区域查找, 然后重复第一步的操作</li>\n<li>如果某一不数组为空, 则表示找不到目标元素.</li>\n</ol>\n<p>代码示例:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 非递归</span></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * arr必须是有序列表</div><div class=\"line\"> * Param: param</div><div class=\"line\"> * Return: &#123;undefined&#125;</div><div class=\"line\"> **/</div><div class=\"line\"><span class=\"keyword\">let</span> binary_search = <span class=\"function\">(<span class=\"params\">arr, key</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> low = <span class=\"number\">0</span>,</div><div class=\"line\">      high = arr.length - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">while</span>(low &lt;= high) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</div><div class=\"line\">    <span class=\"keyword\">if</span> (key == arr[mid]) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> mid;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &gt; arr[mid]) &#123;</div><div class=\"line\">      low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (key &lt; arr[mid]) &#123;</div><div class=\"line\">      high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">23</span>,<span class=\"number\">44</span>,<span class=\"number\">86</span>];</div><div class=\"line\"><span class=\"keyword\">let</span> result = binary_search(arr,<span class=\"number\">10</span>);</div><div class=\"line\">alert(result); <span class=\"comment\">// 9 返回目标元素的索引值</span></div></pre></td></tr></table></figure>\n<p>递归:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr,low, high, key</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (low &gt; high)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((high + low) / <span class=\"number\">2</span>);</div><div class=\"line\">  <span class=\"keyword\">if</span>(arr[mid] == key)&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> mid;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &gt; key)&#123;</div><div class=\"line\">    high = mid - <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (arr[mid] &lt; key)&#123;</div><div class=\"line\">    low = mid + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> binary_search(arr, low, high, key);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">11</span>,<span class=\"number\">23</span>,<span class=\"number\">44</span>,<span class=\"number\">86</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> result = binary_search(arr, <span class=\"number\">0</span>, <span class=\"number\">13</span>, <span class=\"number\">10</span>);</div><div class=\"line\">alert(result); <span class=\"comment\">// 9 返回目标元素的索引值</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序是对冒泡排序的一种该经, 第一趟排序时将数据分成两个部分, 一部分比另一部分的数据都要小, 然后递归调用,  在两边都实行快速排序.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span> (<span class=\"params\">elements</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (elements.length &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> elements;</div><div class=\"line\">  <span class=\"keyword\">let</span> pivotIndex = <span class=\"built_in\">Math</span>.floor(elements.length / <span class=\"number\">2</span> );</div><div class=\"line\">  <span class=\"keyword\">let</span> pivot = elements.splice(pivotIndex, <span class=\"number\">1</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">  <span class=\"keyword\">let</span> left = [],</div><div class=\"line\">      right = [];</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (elements[i] &lt; pivot) &#123;</div><div class=\"line\">      left.push(elements[i]);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      right.push(elements[i]);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> quickSort(left).concat([pivot], quickSort(right));</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> elements=[<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>,<span class=\"number\">1.2</span>,<span class=\"number\">5.5</span>,<span class=\"number\">4.5</span>];</div><div class=\"line\">alert(quickSort(elements));</div></pre></td></tr></table></figure>\n<blockquote>\n<p><a href=\"http://www.cnblogs.com/eniac12/p/5329396.html\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n"},{"title":"优雅的设计redux中的store的state树","date":"2017-06-15T07:04:08.000Z","comments":0,"_content":"\n## 如何优雅的设计redux的store中的state树\n\n使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?\n是这个问题估计让我思考了好就才想到问题的关键处.\nstate树按页面规划 还是按照数据库中的表划分\n\n<!-- more -->\n\n### 按照页面划分\n\n是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.\n\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　　 profile: {\n　　 },\n    list: {\n    },\n　　 edit: {\n　　 },\n    home: {\n    }\n  }\n}\n```\n- 优点\n\n模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)\n\n- 缺点\n\n\t\t但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.\n这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。\n\n\t解决方法:\n\n\t1. 每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)\n\n\t2. 编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)\n\n\t\t具体操作:  当数据源保存成功后`发布`一个全局事件, 在依赖这个数据源的地方`订阅`这个事件, 在订阅的函数里面指定一个保存store的action\n\n\t3. 编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变\n\n    可以看看[RxJS](https://github.com/Reactive-Extensions/RxJS)\n\n\t4. 列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看[normalizr](https://github.com/paularmstrong/normalizr)\n\n#### 同时使用react组件中的state和redux中store中的state\n\n> 注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。\n\n### 按照数据库中的表划分,比如想下面这样init 你的store\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　  companies: {\n    },\n    users: {\n    },\n    events: {\n    }\n  }\n}\n```\n\n> 这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。\n\n\t所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n\n在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.\n\n如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.\n\n如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下\n\nredux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。\n\n参考:\n\n> [http://www.jianshu.com/p/f3911358ebcb](http://www.jianshu.com/p/f3911358ebcb)\n\n> [https://www.zhihu.com/question/47995437?sort=created](https://www.zhihu.com/question/47995437?sort=created)\n\n> [https://www.zhihu.com/question/50888321](https://www.zhihu.com/question/50888321)\n","source":"_posts/优雅的设计redux中的store的state树.md","raw":"---\ntitle: 优雅的设计redux中的store的state树\ndate: 2017-06-15 15:04:08\ntags:\n  - redux\n  - react\n  - react-nativem\ncategories: \"redux\"\ncomments: false\n---\n\n## 如何优雅的设计redux的store中的state树\n\n使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?\n是这个问题估计让我思考了好就才想到问题的关键处.\nstate树按页面规划 还是按照数据库中的表划分\n\n<!-- more -->\n\n### 按照页面划分\n\n是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.\n\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　　 profile: {\n　　 },\n    list: {\n    },\n　　 edit: {\n　　 },\n    home: {\n    }\n  }\n}\n```\n- 优点\n\n模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)\n\n- 缺点\n\n\t\t但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.\n这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。\n\n\t解决方法:\n\n\t1. 每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)\n\n\t2. 编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)\n\n\t\t具体操作:  当数据源保存成功后`发布`一个全局事件, 在依赖这个数据源的地方`订阅`这个事件, 在订阅的函数里面指定一个保存store的action\n\n\t3. 编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变\n\n    可以看看[RxJS](https://github.com/Reactive-Extensions/RxJS)\n\n\t4. 列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看[normalizr](https://github.com/paularmstrong/normalizr)\n\n#### 同时使用react组件中的state和redux中store中的state\n\n> 注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。\n\n### 按照数据库中的表划分,比如想下面这样init 你的store\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　  companies: {\n    },\n    users: {\n    },\n    events: {\n    }\n  }\n}\n```\n\n> 这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。\n\n\t所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n\n在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.\n\n如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.\n\n如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下\n\nredux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。\n\n参考:\n\n> [http://www.jianshu.com/p/f3911358ebcb](http://www.jianshu.com/p/f3911358ebcb)\n\n> [https://www.zhihu.com/question/47995437?sort=created](https://www.zhihu.com/question/47995437?sort=created)\n\n> [https://www.zhihu.com/question/50888321](https://www.zhihu.com/question/50888321)\n","slug":"优雅的设计redux中的store的state树","published":1,"updated":"2019-05-13T03:56:03.289Z","layout":"post","photos":[],"link":"","_id":"cjvluebek004ea0dmgbua9ijz","content":"<h2 id=\"如何优雅的设计redux的store中的state树\"><a href=\"#如何优雅的设计redux的store中的state树\" class=\"headerlink\" title=\"如何优雅的设计redux的store中的state树\"></a>如何优雅的设计redux的store中的state树</h2><p>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?<br>是这个问题估计让我思考了好就才想到问题的关键处.<br>state树按页面规划 还是按照数据库中的表划分</p>\n<a id=\"more\"></a>\n<h3 id=\"按照页面划分\"><a href=\"#按照页面划分\" class=\"headerlink\" title=\"按照页面划分\"></a>按照页面划分</h3><p>是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">profile</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">list</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">edit</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点</li>\n</ul>\n<p>模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)</p>\n<ul>\n<li><p>缺点</p>\n<pre><code>但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n</code></pre><p>假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.<br>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。</p>\n<p>  解决方法:</p>\n<ol>\n<li><p>每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)</p>\n</li>\n<li><p>编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)</p>\n<p> 具体操作:  当数据源保存成功后<code>发布</code>一个全局事件, 在依赖这个数据源的地方<code>订阅</code>这个事件, 在订阅的函数里面指定一个保存store的action</p>\n</li>\n<li><p>编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变</p>\n<p>可以看看<a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a></p>\n</li>\n<li><p>列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看<a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"external\">normalizr</a></p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"同时使用react组件中的state和redux中store中的state\"><a href=\"#同时使用react组件中的state和redux中store中的state\" class=\"headerlink\" title=\"同时使用react组件中的state和redux中store中的state\"></a>同时使用react组件中的state和redux中store中的state</h4><blockquote>\n<p>注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。</p>\n</blockquote>\n<h3 id=\"按照数据库中的表划分-比如想下面这样init-你的store\"><a href=\"#按照数据库中的表划分-比如想下面这样init-你的store\" class=\"headerlink\" title=\"按照数据库中的表划分,比如想下面这样init 你的store\"></a>按照数据库中的表划分,比如想下面这样init 你的store</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　  <span class=\"attr\">companies</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">users</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。</p>\n</blockquote>\n<pre><code>所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n</code></pre><p>在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.</p>\n<p>如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.</p>\n<p>如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下</p>\n<p>redux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。</p>\n<p>参考:</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/f3911358ebcb\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f3911358ebcb</a></p>\n<p><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/47995437?sort=created</a></p>\n<p><a href=\"https://www.zhihu.com/question/50888321\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/50888321</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"如何优雅的设计redux的store中的state树\"><a href=\"#如何优雅的设计redux的store中的state树\" class=\"headerlink\" title=\"如何优雅的设计redux的store中的state树\"></a>如何优雅的设计redux的store中的state树</h2><p>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?<br>是这个问题估计让我思考了好就才想到问题的关键处.<br>state树按页面规划 还是按照数据库中的表划分</p>","more":"<h3 id=\"按照页面划分\"><a href=\"#按照页面划分\" class=\"headerlink\" title=\"按照页面划分\"></a>按照页面划分</h3><p>是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">profile</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">list</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">edit</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点</li>\n</ul>\n<p>模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)</p>\n<ul>\n<li><p>缺点</p>\n<pre><code>但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n</code></pre><p>假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.<br>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。</p>\n<p>  解决方法:</p>\n<ol>\n<li><p>每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)</p>\n</li>\n<li><p>编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)</p>\n<p> 具体操作:  当数据源保存成功后<code>发布</code>一个全局事件, 在依赖这个数据源的地方<code>订阅</code>这个事件, 在订阅的函数里面指定一个保存store的action</p>\n</li>\n<li><p>编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变</p>\n<p>可以看看<a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a></p>\n</li>\n<li><p>列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看<a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"external\">normalizr</a></p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"同时使用react组件中的state和redux中store中的state\"><a href=\"#同时使用react组件中的state和redux中store中的state\" class=\"headerlink\" title=\"同时使用react组件中的state和redux中store中的state\"></a>同时使用react组件中的state和redux中store中的state</h4><blockquote>\n<p>注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。</p>\n</blockquote>\n<h3 id=\"按照数据库中的表划分-比如想下面这样init-你的store\"><a href=\"#按照数据库中的表划分-比如想下面这样init-你的store\" class=\"headerlink\" title=\"按照数据库中的表划分,比如想下面这样init 你的store\"></a>按照数据库中的表划分,比如想下面这样init 你的store</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　  <span class=\"attr\">companies</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">users</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。</p>\n</blockquote>\n<pre><code>所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n</code></pre><p>在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.</p>\n<p>如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.</p>\n<p>如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下</p>\n<p>redux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。</p>\n<p>参考:</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/f3911358ebcb\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f3911358ebcb</a></p>\n<p><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/47995437?sort=created</a></p>\n<p><a href=\"https://www.zhihu.com/question/50888321\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/50888321</a></p>\n</blockquote>"},{"layout":"post","title":"webpack打包,常用配置","date":"2017-10-17T03:16:54.000Z","_content":"","source":"_posts/webpack打包-常用配置.md","raw":"---\nlayout: post\ntitle: 'webpack打包,常用配置'\ndate: 2017-10-17 11:16:54\ntags:\n---\n","slug":"webpack打包-常用配置","published":1,"updated":"2019-05-13T03:56:03.279Z","comments":1,"photos":[],"link":"","_id":"cjvluebem004ja0dmsbpia3g8","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"web前端mac下常用软件","date":"2017-06-05T06:36:50.000Z","_content":"\n{% asset_img emacs-example.png 主力开发编辑器(emacs) %}\n\n<!-- more -->\n说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,\n然后心里想的总是在折腾工具都把时间浪费了,\n那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,\n(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro\n\n## 进入正题\n\n### 所有软件都提供官网, 如果没有, 下载安装很简单\n`brew install package`或者`brew cask install package`就能download到本机, 前提条件是要安装brew包管理器\n\n### [brew](https://brew.sh) mac下的包管理器, 就如ubuntu里面的get-get\n命令行使用[itern2](https://iterm2.com)   [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示\n\n{% asset_img mac-down.png macdown %}\n\n虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,\n\n### 程序员必不可少dash\n\n> 各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api\n> 主要用法是配合alfred(小帽子)来使用,那叫一个酸爽\n\n{% asset_img dash-seach.png dash search API %}\n\n> [前人记载](https://github.com/Louiszhai/tool)\n","source":"_posts/web前端mac下常用软件.md","raw":"---\ntitle: web前端mac下常用软件\ndate: 2017-06-05 14:36:50\ncategories: mac\ntags:\n  - mac\n---\n\n{% asset_img emacs-example.png 主力开发编辑器(emacs) %}\n\n<!-- more -->\n说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,\n然后心里想的总是在折腾工具都把时间浪费了,\n那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,\n(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro\n\n## 进入正题\n\n### 所有软件都提供官网, 如果没有, 下载安装很简单\n`brew install package`或者`brew cask install package`就能download到本机, 前提条件是要安装brew包管理器\n\n### [brew](https://brew.sh) mac下的包管理器, 就如ubuntu里面的get-get\n命令行使用[itern2](https://iterm2.com)   [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示\n\n{% asset_img mac-down.png macdown %}\n\n虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,\n\n### 程序员必不可少dash\n\n> 各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api\n> 主要用法是配合alfred(小帽子)来使用,那叫一个酸爽\n\n{% asset_img dash-seach.png dash search API %}\n\n> [前人记载](https://github.com/Louiszhai/tool)\n","slug":"web前端mac下常用软件","published":1,"updated":"2019-05-13T03:56:03.279Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebem004la0dmo9m2q657","content":"<img src=\"/2017/06/05/web前端mac下常用软件/emacs-example.png\" alt=\"主力开发编辑器(emacs)\" title=\"主力开发编辑器(emacs)\">\n<a id=\"more\"></a>\n<p>说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,<br>然后心里想的总是在折腾工具都把时间浪费了,<br>那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,<br>(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro</p>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><h3 id=\"所有软件都提供官网-如果没有-下载安装很简单\"><a href=\"#所有软件都提供官网-如果没有-下载安装很简单\" class=\"headerlink\" title=\"所有软件都提供官网, 如果没有, 下载安装很简单\"></a>所有软件都提供官网, 如果没有, 下载安装很简单</h3><p><code>brew install package</code>或者<code>brew cask install package</code>就能download到本机, 前提条件是要安装brew包管理器</p>\n<h3 id=\"brew-mac下的包管理器-就如ubuntu里面的get-get\"><a href=\"#brew-mac下的包管理器-就如ubuntu里面的get-get\" class=\"headerlink\" title=\"brew mac下的包管理器, 就如ubuntu里面的get-get\"></a><a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">brew</a> mac下的包管理器, 就如ubuntu里面的get-get</h3><p>命令行使用<a href=\"https://iterm2.com\" target=\"_blank\" rel=\"external\">itern2</a>   <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a>还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示</p>\n<img src=\"/2017/06/05/web前端mac下常用软件/mac-down.png\" alt=\"macdown\" title=\"macdown\">\n<p>虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,</p>\n<h3 id=\"程序员必不可少dash\"><a href=\"#程序员必不可少dash\" class=\"headerlink\" title=\"程序员必不可少dash\"></a>程序员必不可少dash</h3><blockquote>\n<p>各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api<br>主要用法是配合alfred(小帽子)来使用,那叫一个酸爽</p>\n</blockquote>\n<img src=\"/2017/06/05/web前端mac下常用软件/dash-seach.png\" alt=\"dash search API\" title=\"dash search API\">\n<blockquote>\n<p><a href=\"https://github.com/Louiszhai/tool\" target=\"_blank\" rel=\"external\">前人记载</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/05/web前端mac下常用软件/emacs-example.png\" alt=\"主力开发编辑器(emacs)\" title=\"主力开发编辑器(emacs)\">","more":"<p>说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,<br>然后心里想的总是在折腾工具都把时间浪费了,<br>那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,<br>(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro</p>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><h3 id=\"所有软件都提供官网-如果没有-下载安装很简单\"><a href=\"#所有软件都提供官网-如果没有-下载安装很简单\" class=\"headerlink\" title=\"所有软件都提供官网, 如果没有, 下载安装很简单\"></a>所有软件都提供官网, 如果没有, 下载安装很简单</h3><p><code>brew install package</code>或者<code>brew cask install package</code>就能download到本机, 前提条件是要安装brew包管理器</p>\n<h3 id=\"brew-mac下的包管理器-就如ubuntu里面的get-get\"><a href=\"#brew-mac下的包管理器-就如ubuntu里面的get-get\" class=\"headerlink\" title=\"brew mac下的包管理器, 就如ubuntu里面的get-get\"></a><a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">brew</a> mac下的包管理器, 就如ubuntu里面的get-get</h3><p>命令行使用<a href=\"https://iterm2.com\" target=\"_blank\" rel=\"external\">itern2</a>   <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a>还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示</p>\n<img src=\"/2017/06/05/web前端mac下常用软件/mac-down.png\" alt=\"macdown\" title=\"macdown\">\n<p>虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,</p>\n<h3 id=\"程序员必不可少dash\"><a href=\"#程序员必不可少dash\" class=\"headerlink\" title=\"程序员必不可少dash\"></a>程序员必不可少dash</h3><blockquote>\n<p>各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api<br>主要用法是配合alfred(小帽子)来使用,那叫一个酸爽</p>\n</blockquote>\n<img src=\"/2017/06/05/web前端mac下常用软件/dash-seach.png\" alt=\"dash search API\" title=\"dash search API\">\n<blockquote>\n<p><a href=\"https://github.com/Louiszhai/tool\" target=\"_blank\" rel=\"external\">前人记载</a></p>\n</blockquote>"},{"title":"体验es7中的Async / Await来处理异步","date":"2017-06-14T11:21:56.000Z","comments":0,"_content":"\n\n## 体验下es6对异步的最终解决方案\n> 阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解\n\n### 直接上例子\n\nAsync/Await 应该是目前最简单的异步方案\n下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子\n\n<!-- more -->\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            resolve()\n        }, time);\n    })\n}\n\nlet start = async function () {\n    //这里使用起来像同步代码那样直观\n    console.log('start');\n    await sleep(3000);\n    console.log('end')\n};\n\nstart();\n```\n\n控制台先输出 `start`, 等候3秒后, 输出了 `end` .\n\n## 基本规则\n\n1. async 表示 异步函数,  await只能用在异步函数里面.\n\n2. `await` 表示在这里 `等待promise返回结果` , 在继续执行下面的.\n\n3. `await` 后面跟着的 `应该是一个promise对象` (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)\n\n## 获得返回值\n\n`await`等待的虽然是promise对象, 但不必写 `.then(function() {...})`, 直接就可以得到返回值.\n\n```javascript\n\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            //  return 'ok'\n            resolve('ok');\n        }, time);\n    })\n}\n\nlet start = async function () {\n    let result = await sleep(3000);\n    console.log(result); // 'ok'\n}\n```\n\n上面是一些正确的处理逻辑\n下面接着看怎么捕捉错误\n\n## 捕捉错误\n\n既然 `.then(function () {...})`不写了,  那么 `.catch(function () {...})`也需要写,\n可以直接使用`try catch`语法来捕捉错误\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); //这里得到一个返回错误\n        //所以一下代码不会执行\n        console.log('end');\n    } catch( e ){\n        console.log(e); //这里捕捉错误 'e'\n    }\n}\n```\n\n## 循环多个`await`\n\nawait 写起来有种写同步代码, 所以可以理所当然的卸载`for`循环里面, 不必当心以往需要`闭包`才能解决的问题\n\n```javascript\n...省略以上代码\n\nlet start = async function () {\n    for(let i = 1; i <= 10; i++ ){\n        console.log(`当前是第${i}次等待...`);\n        await sleep(1000;)\n    }\n};\n```\n\n指的注意的是,  `await`必须在`async函数的上下文中, 也就是await需要在async函数环境中`.\n\n```javascript\n...省略以上代码\n\nlet oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n// 错误示范\noneToTen.forEach(function (item) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); // error!! await只能在async函数中运行\n})\n\n// 正确示范\nfor(let item of oneToten) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); //正确,  for循环的上下文还在async函数中\n}\n```\n","source":"_posts/体验es7中的Async-Await来处理异步.md","raw":"---\ntitle: 体验es7中的Async / Await来处理异步\ndate: 2017-06-14 19:21:56\ntags:\n    - es7\n    - javascript\ncategories: 'javascript'\ncomments: false\n---\n\n\n## 体验下es6对异步的最终解决方案\n> 阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解\n\n### 直接上例子\n\nAsync/Await 应该是目前最简单的异步方案\n下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子\n\n<!-- more -->\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            resolve()\n        }, time);\n    })\n}\n\nlet start = async function () {\n    //这里使用起来像同步代码那样直观\n    console.log('start');\n    await sleep(3000);\n    console.log('end')\n};\n\nstart();\n```\n\n控制台先输出 `start`, 等候3秒后, 输出了 `end` .\n\n## 基本规则\n\n1. async 表示 异步函数,  await只能用在异步函数里面.\n\n2. `await` 表示在这里 `等待promise返回结果` , 在继续执行下面的.\n\n3. `await` 后面跟着的 `应该是一个promise对象` (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)\n\n## 获得返回值\n\n`await`等待的虽然是promise对象, 但不必写 `.then(function() {...})`, 直接就可以得到返回值.\n\n```javascript\n\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            //  return 'ok'\n            resolve('ok');\n        }, time);\n    })\n}\n\nlet start = async function () {\n    let result = await sleep(3000);\n    console.log(result); // 'ok'\n}\n```\n\n上面是一些正确的处理逻辑\n下面接着看怎么捕捉错误\n\n## 捕捉错误\n\n既然 `.then(function () {...})`不写了,  那么 `.catch(function () {...})`也需要写,\n可以直接使用`try catch`语法来捕捉错误\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); //这里得到一个返回错误\n        //所以一下代码不会执行\n        console.log('end');\n    } catch( e ){\n        console.log(e); //这里捕捉错误 'e'\n    }\n}\n```\n\n## 循环多个`await`\n\nawait 写起来有种写同步代码, 所以可以理所当然的卸载`for`循环里面, 不必当心以往需要`闭包`才能解决的问题\n\n```javascript\n...省略以上代码\n\nlet start = async function () {\n    for(let i = 1; i <= 10; i++ ){\n        console.log(`当前是第${i}次等待...`);\n        await sleep(1000;)\n    }\n};\n```\n\n指的注意的是,  `await`必须在`async函数的上下文中, 也就是await需要在async函数环境中`.\n\n```javascript\n...省略以上代码\n\nlet oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n// 错误示范\noneToTen.forEach(function (item) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); // error!! await只能在async函数中运行\n})\n\n// 正确示范\nfor(let item of oneToten) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); //正确,  for循环的上下文还在async函数中\n}\n```\n","slug":"体验es7中的Async-Await来处理异步","published":1,"updated":"2019-05-13T03:56:03.289Z","layout":"post","photos":[],"link":"","_id":"cjvluebeo004pa0dm7zfkg4j5","content":"<h2 id=\"体验下es6对异步的最终解决方案\"><a href=\"#体验下es6对异步的最终解决方案\" class=\"headerlink\" title=\"体验下es6对异步的最终解决方案\"></a>体验下es6对异步的最终解决方案</h2><blockquote>\n<p>阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解</p>\n</blockquote>\n<h3 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h3><p>Async/Await 应该是目前最简单的异步方案<br>下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            resolve()</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用起来像同步代码那样直观</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">start();</div></pre></td></tr></table></figure>\n<p>控制台先输出 <code>start</code>, 等候3秒后, 输出了 <code>end</code> .</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><ol>\n<li><p>async 表示 异步函数,  await只能用在异步函数里面.</p>\n</li>\n<li><p><code>await</code> 表示在这里 <code>等待promise返回结果</code> , 在继续执行下面的.</p>\n</li>\n<li><p><code>await</code> 后面跟着的 <code>应该是一个promise对象</code> (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)</p>\n</li>\n</ol>\n<h2 id=\"获得返回值\"><a href=\"#获得返回值\" class=\"headerlink\" title=\"获得返回值\"></a>获得返回值</h2><p><code>await</code>等待的虽然是promise对象, 但不必写 <code>.then(function() {...})</code>, 直接就可以得到返回值.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//  return 'ok'</span></div><div class=\"line\">            resolve(<span class=\"string\">'ok'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 'ok'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面是一些正确的处理逻辑<br>下面接着看怎么捕捉错误</p>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>既然 <code>.then(function () {...})</code>不写了,  那么 <code>.catch(function () {...})</code>也需要写,<br>可以直接使用<code>try catch</code>语法来捕捉错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 模拟出错了，返回 ‘error’</span></div><div class=\"line\">            reject(<span class=\"string\">'error'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>); <span class=\"comment\">//这里得到一个返回错误</span></div><div class=\"line\">        <span class=\"comment\">//所以一下代码不会执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span>( e )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">//这里捕捉错误 'e'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个<code>await</code></h2><p>await 写起来有种写同步代码, 所以可以理所当然的卸载<code>for</code>循环里面, 不必当心以往需要<code>闭包</code>才能解决的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;i&#125;</span>次等待...`</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>指的注意的是,  <code>await</code>必须在<code>async函数的上下文中, 也就是await需要在async函数环境中</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> oneToTen = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误示范</span></div><div class=\"line\">oneToTen.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// error!! await只能在async函数中运行</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确示范</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> oneToten) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">//正确,  for循环的上下文还在async函数中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"体验下es6对异步的最终解决方案\"><a href=\"#体验下es6对异步的最终解决方案\" class=\"headerlink\" title=\"体验下es6对异步的最终解决方案\"></a>体验下es6对异步的最终解决方案</h2><blockquote>\n<p>阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解</p>\n</blockquote>\n<h3 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h3><p>Async/Await 应该是目前最简单的异步方案<br>下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            resolve()</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用起来像同步代码那样直观</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">start();</div></pre></td></tr></table></figure>\n<p>控制台先输出 <code>start</code>, 等候3秒后, 输出了 <code>end</code> .</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><ol>\n<li><p>async 表示 异步函数,  await只能用在异步函数里面.</p>\n</li>\n<li><p><code>await</code> 表示在这里 <code>等待promise返回结果</code> , 在继续执行下面的.</p>\n</li>\n<li><p><code>await</code> 后面跟着的 <code>应该是一个promise对象</code> (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)</p>\n</li>\n</ol>\n<h2 id=\"获得返回值\"><a href=\"#获得返回值\" class=\"headerlink\" title=\"获得返回值\"></a>获得返回值</h2><p><code>await</code>等待的虽然是promise对象, 但不必写 <code>.then(function() {...})</code>, 直接就可以得到返回值.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//  return 'ok'</span></div><div class=\"line\">            resolve(<span class=\"string\">'ok'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 'ok'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面是一些正确的处理逻辑<br>下面接着看怎么捕捉错误</p>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>既然 <code>.then(function () {...})</code>不写了,  那么 <code>.catch(function () {...})</code>也需要写,<br>可以直接使用<code>try catch</code>语法来捕捉错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 模拟出错了，返回 ‘error’</span></div><div class=\"line\">            reject(<span class=\"string\">'error'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>); <span class=\"comment\">//这里得到一个返回错误</span></div><div class=\"line\">        <span class=\"comment\">//所以一下代码不会执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span>( e )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">//这里捕捉错误 'e'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个<code>await</code></h2><p>await 写起来有种写同步代码, 所以可以理所当然的卸载<code>for</code>循环里面, 不必当心以往需要<code>闭包</code>才能解决的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;i&#125;</span>次等待...`</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>指的注意的是,  <code>await</code>必须在<code>async函数的上下文中, 也就是await需要在async函数环境中</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> oneToTen = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误示范</span></div><div class=\"line\">oneToTen.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// error!! await只能在async函数中运行</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确示范</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> oneToten) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">//正确,  for循环的上下文还在async函数中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"layout":"post","title":"使用Uglify2js来压缩你的js","date":"2018-02-01T02:43:10.000Z","_content":"\n例行惯例`npm install uglify-js -g` 全局安装`uglifyjs`\n\n> [官网](https://github.com/mishoo/UglifyJS2)\n\n安装好之后就可以使用了,  包括命令行使用和`nodejs`中`api`的使用\n\n## 命令行\n\n详情使用查看`uglifyjs -h`\n\n下面是翻译后的`options`\n\n- –source-map [string]，生成source map文件。\n- –source-map-root [string], 指定生成source map的源文件位置。\n- –source-map-url [string], 指定source map的网站访问地址。\n- –source-map-include-sources，设置源文件被包含到source map中。\n- –in-source-map，自定义source map，用于其他工具生成的source map。\n- –screw-ie8, 用于生成完全兼容IE6-8的代码。\n- –expr, 解析一个表达式或JSON。\n- -p, –prefix [string], 跳过原始文件名的前缀部分，用于指定源文件、source map和输出文件的相对路径。\n- -o, –output [string], 输出到文件。\n- -b, –beautify [string], 输出带格式化的文件。\n- -m, –mangle [string], 输出变量名替换后的文件。\n- -r, –reserved [string], 保留变量名，排除mangle过程。\n- -c, –compress [string], 输出压缩后的文件。\n- -d, –define [string], 全局定义。\n- -e, –enclose [string], 把所有代码合并到一个函数中，并提供一个可配置的参数列表。\n- –comments [string], 增加注释参数，如@license、@preserve。\n- –preamble [string], 增加注释描述。\n- –stats, 显示运行状态。\n- –acorn, 用Acorn做解析。\n- –spidermonkey, 解析SpiderMonkey格式的文件，如JSON。\n- –self, 把UglifyJS2做为依赖库一起打包。\n- –wrap, 把所有代码合并到一个函数中。\n- –export-all, 和–wrap一起使用，自动输出到全局环境。\n- –lint, 显示环境的异常信息。\n- -v, –verbose, 打印运行日志详细。\n- -V, –version, 打印版本号。\n- –noerr, 忽略错误命令行参数。\n\n```base\n➜ uglifyjs index.js -c -m > index.min.js\n```\n\n## api\n\n官网查看`nodeapi`\n","source":"_posts/使用Uglifyjs来压缩你的js.md","raw":"---\nlayout: post\ntitle: 使用Uglify2js来压缩你的js\ndate: 2018-02-01 10:43:10\ntags:\n    - js压缩\n    - uglify-js\ncategories: \"压缩\"\n---\n\n例行惯例`npm install uglify-js -g` 全局安装`uglifyjs`\n\n> [官网](https://github.com/mishoo/UglifyJS2)\n\n安装好之后就可以使用了,  包括命令行使用和`nodejs`中`api`的使用\n\n## 命令行\n\n详情使用查看`uglifyjs -h`\n\n下面是翻译后的`options`\n\n- –source-map [string]，生成source map文件。\n- –source-map-root [string], 指定生成source map的源文件位置。\n- –source-map-url [string], 指定source map的网站访问地址。\n- –source-map-include-sources，设置源文件被包含到source map中。\n- –in-source-map，自定义source map，用于其他工具生成的source map。\n- –screw-ie8, 用于生成完全兼容IE6-8的代码。\n- –expr, 解析一个表达式或JSON。\n- -p, –prefix [string], 跳过原始文件名的前缀部分，用于指定源文件、source map和输出文件的相对路径。\n- -o, –output [string], 输出到文件。\n- -b, –beautify [string], 输出带格式化的文件。\n- -m, –mangle [string], 输出变量名替换后的文件。\n- -r, –reserved [string], 保留变量名，排除mangle过程。\n- -c, –compress [string], 输出压缩后的文件。\n- -d, –define [string], 全局定义。\n- -e, –enclose [string], 把所有代码合并到一个函数中，并提供一个可配置的参数列表。\n- –comments [string], 增加注释参数，如@license、@preserve。\n- –preamble [string], 增加注释描述。\n- –stats, 显示运行状态。\n- –acorn, 用Acorn做解析。\n- –spidermonkey, 解析SpiderMonkey格式的文件，如JSON。\n- –self, 把UglifyJS2做为依赖库一起打包。\n- –wrap, 把所有代码合并到一个函数中。\n- –export-all, 和–wrap一起使用，自动输出到全局环境。\n- –lint, 显示环境的异常信息。\n- -v, –verbose, 打印运行日志详细。\n- -V, –version, 打印版本号。\n- –noerr, 忽略错误命令行参数。\n\n```base\n➜ uglifyjs index.js -c -m > index.min.js\n```\n\n## api\n\n官网查看`nodeapi`\n","slug":"使用Uglifyjs来压缩你的js","published":1,"updated":"2019-05-13T03:56:03.289Z","comments":1,"photos":[],"link":"","_id":"cjvluebep004ra0dm9kj94ow9","content":"<p>例行惯例<code>npm install uglify-js -g</code> 全局安装<code>uglifyjs</code></p>\n<blockquote>\n<p><a href=\"https://github.com/mishoo/UglifyJS2\" target=\"_blank\" rel=\"external\">官网</a></p>\n</blockquote>\n<p>安装好之后就可以使用了,  包括命令行使用和<code>nodejs</code>中<code>api</code>的使用</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>详情使用查看<code>uglifyjs -h</code></p>\n<p>下面是翻译后的<code>options</code></p>\n<ul>\n<li>–source-map [string]，生成source map文件。</li>\n<li>–source-map-root [string], 指定生成source map的源文件位置。</li>\n<li>–source-map-url [string], 指定source map的网站访问地址。</li>\n<li>–source-map-include-sources，设置源文件被包含到source map中。</li>\n<li>–in-source-map，自定义source map，用于其他工具生成的source map。</li>\n<li>–screw-ie8, 用于生成完全兼容IE6-8的代码。</li>\n<li>–expr, 解析一个表达式或JSON。</li>\n<li>-p, –prefix [string], 跳过原始文件名的前缀部分，用于指定源文件、source map和输出文件的相对路径。</li>\n<li>-o, –output [string], 输出到文件。</li>\n<li>-b, –beautify [string], 输出带格式化的文件。</li>\n<li>-m, –mangle [string], 输出变量名替换后的文件。</li>\n<li>-r, –reserved [string], 保留变量名，排除mangle过程。</li>\n<li>-c, –compress [string], 输出压缩后的文件。</li>\n<li>-d, –define [string], 全局定义。</li>\n<li>-e, –enclose [string], 把所有代码合并到一个函数中，并提供一个可配置的参数列表。</li>\n<li>–comments [string], 增加注释参数，如@license、@preserve。</li>\n<li>–preamble [string], 增加注释描述。</li>\n<li>–stats, 显示运行状态。</li>\n<li>–acorn, 用Acorn做解析。</li>\n<li>–spidermonkey, 解析SpiderMonkey格式的文件，如JSON。</li>\n<li>–self, 把UglifyJS2做为依赖库一起打包。</li>\n<li>–wrap, 把所有代码合并到一个函数中。</li>\n<li>–export-all, 和–wrap一起使用，自动输出到全局环境。</li>\n<li>–lint, 显示环境的异常信息。</li>\n<li>-v, –verbose, 打印运行日志详细。</li>\n<li>-V, –version, 打印版本号。</li>\n<li>–noerr, 忽略错误命令行参数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ uglifyjs index.js -c -m &gt; index.min.js</div></pre></td></tr></table></figure>\n<h2 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h2><p>官网查看<code>nodeapi</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>例行惯例<code>npm install uglify-js -g</code> 全局安装<code>uglifyjs</code></p>\n<blockquote>\n<p><a href=\"https://github.com/mishoo/UglifyJS2\" target=\"_blank\" rel=\"external\">官网</a></p>\n</blockquote>\n<p>安装好之后就可以使用了,  包括命令行使用和<code>nodejs</code>中<code>api</code>的使用</p>\n<h2 id=\"命令行\"><a href=\"#命令行\" class=\"headerlink\" title=\"命令行\"></a>命令行</h2><p>详情使用查看<code>uglifyjs -h</code></p>\n<p>下面是翻译后的<code>options</code></p>\n<ul>\n<li>–source-map [string]，生成source map文件。</li>\n<li>–source-map-root [string], 指定生成source map的源文件位置。</li>\n<li>–source-map-url [string], 指定source map的网站访问地址。</li>\n<li>–source-map-include-sources，设置源文件被包含到source map中。</li>\n<li>–in-source-map，自定义source map，用于其他工具生成的source map。</li>\n<li>–screw-ie8, 用于生成完全兼容IE6-8的代码。</li>\n<li>–expr, 解析一个表达式或JSON。</li>\n<li>-p, –prefix [string], 跳过原始文件名的前缀部分，用于指定源文件、source map和输出文件的相对路径。</li>\n<li>-o, –output [string], 输出到文件。</li>\n<li>-b, –beautify [string], 输出带格式化的文件。</li>\n<li>-m, –mangle [string], 输出变量名替换后的文件。</li>\n<li>-r, –reserved [string], 保留变量名，排除mangle过程。</li>\n<li>-c, –compress [string], 输出压缩后的文件。</li>\n<li>-d, –define [string], 全局定义。</li>\n<li>-e, –enclose [string], 把所有代码合并到一个函数中，并提供一个可配置的参数列表。</li>\n<li>–comments [string], 增加注释参数，如@license、@preserve。</li>\n<li>–preamble [string], 增加注释描述。</li>\n<li>–stats, 显示运行状态。</li>\n<li>–acorn, 用Acorn做解析。</li>\n<li>–spidermonkey, 解析SpiderMonkey格式的文件，如JSON。</li>\n<li>–self, 把UglifyJS2做为依赖库一起打包。</li>\n<li>–wrap, 把所有代码合并到一个函数中。</li>\n<li>–export-all, 和–wrap一起使用，自动输出到全局环境。</li>\n<li>–lint, 显示环境的异常信息。</li>\n<li>-v, –verbose, 打印运行日志详细。</li>\n<li>-V, –version, 打印版本号。</li>\n<li>–noerr, 忽略错误命令行参数。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ uglifyjs index.js -c -m &gt; index.min.js</div></pre></td></tr></table></figure>\n<h2 id=\"api\"><a href=\"#api\" class=\"headerlink\" title=\"api\"></a>api</h2><p>官网查看<code>nodeapi</code></p>\n"},{"layout":"post","title":"使用canvas来绘制图表","date":"2018-05-08T02:04:43.000Z","_content":"","source":"_posts/使用canvas来绘制图表.md","raw":"---\nlayout: post\ntitle: 使用canvas来绘制图表\ndate: 2018-05-08 10:04:43\ntags:\n---\n","slug":"使用canvas来绘制图表","published":1,"updated":"2019-05-13T03:56:03.290Z","comments":1,"photos":[],"link":"","_id":"cjvlueber004wa0dm114p7elr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"使用autojump一键到达你要得路径","date":"2017-07-29T02:49:39.000Z","_content":"\n### 安装\n\n安装 `brew install autojump`\n\n因为使用的是`zsh`和`term2` 所以需要在`~/.zshrc`内添加`autojump` 作为插件来使用.\n\n看起来是这样子:\n\n```base\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git bundler osx)\nplugins=(autojump)\n\n```\n还需要添加`[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] && . ~/.autojump/etc/profile.d/autojump.zsh`同样到`~/.zshrc`\n\n## 使用\n\n`j` 是 `autojump` 封装好的命令,  在你 `cd` 之后它就会在它的数据库内写入地址链接,  然后在使用`jc`的时候检索数据库,  到你指定的目录. ( 模糊搜索 )\n","source":"_posts/使用autojump一键到达你要得路径.md","raw":"---\ntitle: 使用autojump一键到达你要得路径\ndate: 2017-07-29 10:49:39\ntags:\n    - autojump\n    - mac\n    - linux\ncategories: \"mac工具\"\n---\n\n### 安装\n\n安装 `brew install autojump`\n\n因为使用的是`zsh`和`term2` 所以需要在`~/.zshrc`内添加`autojump` 作为插件来使用.\n\n看起来是这样子:\n\n```base\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git bundler osx)\nplugins=(autojump)\n\n```\n还需要添加`[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] && . ~/.autojump/etc/profile.d/autojump.zsh`同样到`~/.zshrc`\n\n## 使用\n\n`j` 是 `autojump` 封装好的命令,  在你 `cd` 之后它就会在它的数据库内写入地址链接,  然后在使用`jc`的时候检索数据库,  到你指定的目录. ( 模糊搜索 )\n","slug":"使用autojump一键到达你要得路径","published":1,"updated":"2019-05-13T03:56:03.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebes004za0dmxw84acsu","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装 <code>brew install autojump</code></p>\n<p>因为使用的是<code>zsh</code>和<code>term2</code> 所以需要在<code>~/.zshrc</code>内添加<code>autojump</code> 作为插件来使用.</p>\n<p>看起来是这样子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</div><div class=\"line\"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</div><div class=\"line\"># Example format: plugins=(rails git textmate ruby lighthouse)</div><div class=\"line\"># Add wisely, as too many plugins slow down shell startup.</div><div class=\"line\">plugins=(git bundler osx)</div><div class=\"line\">plugins=(autojump)</div></pre></td></tr></table></figure>\n<p>还需要添加<code>[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh</code>同样到<code>~/.zshrc</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>j</code> 是 <code>autojump</code> 封装好的命令,  在你 <code>cd</code> 之后它就会在它的数据库内写入地址链接,  然后在使用<code>jc</code>的时候检索数据库,  到你指定的目录. ( 模糊搜索 )</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装 <code>brew install autojump</code></p>\n<p>因为使用的是<code>zsh</code>和<code>term2</code> 所以需要在<code>~/.zshrc</code>内添加<code>autojump</code> 作为插件来使用.</p>\n<p>看起来是这样子:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</div><div class=\"line\"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</div><div class=\"line\"># Example format: plugins=(rails git textmate ruby lighthouse)</div><div class=\"line\"># Add wisely, as too many plugins slow down shell startup.</div><div class=\"line\">plugins=(git bundler osx)</div><div class=\"line\">plugins=(autojump)</div></pre></td></tr></table></figure>\n<p>还需要添加<code>[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh</code>同样到<code>~/.zshrc</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>j</code> 是 <code>autojump</code> 封装好的命令,  在你 <code>cd</code> 之后它就会在它的数据库内写入地址链接,  然后在使用<code>jc</code>的时候检索数据库,  到你指定的目录. ( 模糊搜索 )</p>\n"},{"layout":"post","title":"使用jsdoc通过注释来自动生成js文档","date":"2018-02-27T06:21:54.000Z","_content":"\n如果要维护一个项目,  文档是必不可少的, 如果没有文档, 你同事看起来就会减少效率.\n\n好处不觉得没有必要写了, 好多公司都需要一个文档来注释项目的api\n\n这里`js`我们选着[jsdoc](https://github.com/jsdoc3/jsdoc)来生成\n\n安装\n\n`npm install -g jsdoc`\n\n命令行中使用\n`jsdoc youJavascriptFile.js`\n\n项目中安装\n`npm install --save-dev jsdoc`\n\n安装在项目中我们必须要调用`./node_modules/.bin/jsdoc youJavascriptFile.js`\n\n一般生成好的文件在`out`目录下, \n\n## Examples\n\n这里具体要说的是几个注释模板, 让你生成后的代码api文档更美观\n\n```javascript\n/** Class representing a point. */\nclass Point {\n    /**\n     * Create a point.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     */\n    constructor(x, y) {\n        // ...\n    }\n\n    /**\n     * Get the x value.\n     * @return {number} The x value.\n     */\n    getX() {\n        // ...\n    }\n\n    /**\n     * Get the y value.\n     * @return {number} The y value.\n     */\n    getY() {\n        // ...\n    }\n\n    /**\n     * Convert a string containing two comma-separated numbers into a point.\n     * @param {string} str - The string containing two comma-separated numbers.\n     * @return {Point} A Point object.\n     */\n    static fromString(str) {\n        // ...\n    }\n}\n\n/** @module color/mixer */\n\n/** The name of the module. */\nexport const name = 'mixer';\n\n/** The most recent blended color. */\nexport var lastColor = null;\n\n/**\n * Blend two colors together.\n * @param {string} color1 - The first color, in hexadecimal format.\n * @param {string} color2 - The second color, in hexadecimal format.\n * @return {string} The blended color.\n */\nexport function blend(color1, color2) {}\n\n// convert color to array of RGB values (0-255)\nfunction rgbify(color) {}\n\nexport {\n    /**\n     * Get the red, green, and blue values of a color.\n     * @function\n     * @param {string} color - A color, in hexadecimal format.\n     * @returns {Array.<number>} An array of the red, green, and blue values,\n     * each ranging from 0 to 255.\n     */\n    rgbify as toRgb\n}\n\n```\n\n## Tags\n\n具体可以看官方文档, [jsdoc](http://usejsdoc.org/)\n\n妈妈再也不用担心文档需要自己手写了!!!\n","source":"_posts/使用jsdoc通过注释来自动生成js文档.md","raw":"---\nlayout: post\ntitle: 使用jsdoc通过注释来自动生成js文档\ndate: 2018-02-27 14:21:54\ntags:\n    - jsdoc\n    - js文档\ncategories: \"api生成器\"\n---\n\n如果要维护一个项目,  文档是必不可少的, 如果没有文档, 你同事看起来就会减少效率.\n\n好处不觉得没有必要写了, 好多公司都需要一个文档来注释项目的api\n\n这里`js`我们选着[jsdoc](https://github.com/jsdoc3/jsdoc)来生成\n\n安装\n\n`npm install -g jsdoc`\n\n命令行中使用\n`jsdoc youJavascriptFile.js`\n\n项目中安装\n`npm install --save-dev jsdoc`\n\n安装在项目中我们必须要调用`./node_modules/.bin/jsdoc youJavascriptFile.js`\n\n一般生成好的文件在`out`目录下, \n\n## Examples\n\n这里具体要说的是几个注释模板, 让你生成后的代码api文档更美观\n\n```javascript\n/** Class representing a point. */\nclass Point {\n    /**\n     * Create a point.\n     * @param {number} x - The x value.\n     * @param {number} y - The y value.\n     */\n    constructor(x, y) {\n        // ...\n    }\n\n    /**\n     * Get the x value.\n     * @return {number} The x value.\n     */\n    getX() {\n        // ...\n    }\n\n    /**\n     * Get the y value.\n     * @return {number} The y value.\n     */\n    getY() {\n        // ...\n    }\n\n    /**\n     * Convert a string containing two comma-separated numbers into a point.\n     * @param {string} str - The string containing two comma-separated numbers.\n     * @return {Point} A Point object.\n     */\n    static fromString(str) {\n        // ...\n    }\n}\n\n/** @module color/mixer */\n\n/** The name of the module. */\nexport const name = 'mixer';\n\n/** The most recent blended color. */\nexport var lastColor = null;\n\n/**\n * Blend two colors together.\n * @param {string} color1 - The first color, in hexadecimal format.\n * @param {string} color2 - The second color, in hexadecimal format.\n * @return {string} The blended color.\n */\nexport function blend(color1, color2) {}\n\n// convert color to array of RGB values (0-255)\nfunction rgbify(color) {}\n\nexport {\n    /**\n     * Get the red, green, and blue values of a color.\n     * @function\n     * @param {string} color - A color, in hexadecimal format.\n     * @returns {Array.<number>} An array of the red, green, and blue values,\n     * each ranging from 0 to 255.\n     */\n    rgbify as toRgb\n}\n\n```\n\n## Tags\n\n具体可以看官方文档, [jsdoc](http://usejsdoc.org/)\n\n妈妈再也不用担心文档需要自己手写了!!!\n","slug":"使用jsdoc通过注释来自动生成js文档","published":1,"updated":"2019-05-13T03:56:03.290Z","comments":1,"photos":[],"link":"","_id":"cjvluebet0054a0dmmg7xwj9z","content":"<p>如果要维护一个项目,  文档是必不可少的, 如果没有文档, 你同事看起来就会减少效率.</p>\n<p>好处不觉得没有必要写了, 好多公司都需要一个文档来注释项目的api</p>\n<p>这里<code>js</code>我们选着<a href=\"https://github.com/jsdoc3/jsdoc\" target=\"_blank\" rel=\"external\">jsdoc</a>来生成</p>\n<p>安装</p>\n<p><code>npm install -g jsdoc</code></p>\n<p>命令行中使用<br><code>jsdoc youJavascriptFile.js</code></p>\n<p>项目中安装<br><code>npm install --save-dev jsdoc</code></p>\n<p>安装在项目中我们必须要调用<code>./node_modules/.bin/jsdoc youJavascriptFile.js</code></p>\n<p>一般生成好的文件在<code>out</code>目录下, </p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>这里具体要说的是几个注释模板, 让你生成后的代码api文档更美观</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Class representing a point. */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Create a point.</div><div class=\"line\">     * @param &#123;number&#125; x - The x value.</div><div class=\"line\">     * @param &#123;number&#125; y - The y value.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Get the x value.</div><div class=\"line\">     * @return &#123;number&#125; The x value.</div><div class=\"line\">     */</div><div class=\"line\">    getX() &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Get the y value.</div><div class=\"line\">     * @return &#123;number&#125; The y value.</div><div class=\"line\">     */</div><div class=\"line\">    getY() &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Convert a string containing two comma-separated numbers into a point.</div><div class=\"line\">     * @param &#123;string&#125; str - The string containing two comma-separated numbers.</div><div class=\"line\">     * @return &#123;Point&#125; A Point object.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">static</span> fromString(str) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** @module color/mixer */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** The name of the module. */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'mixer'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** The most recent blended color. */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastColor = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Blend two colors together.</div><div class=\"line\"> * @param &#123;string&#125; color1 - The first color, in hexadecimal format.</div><div class=\"line\"> * @param &#123;string&#125; color2 - The second color, in hexadecimal format.</div><div class=\"line\"> * @return &#123;string&#125; The blended color.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blend</span>(<span class=\"params\">color1, color2</span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// convert color to array of RGB values (0-255)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgbify</span>(<span class=\"params\">color</span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Get the red, green, and blue values of a color.</div><div class=\"line\">     * @function</div><div class=\"line\">     * @param &#123;string&#125; color - A color, in hexadecimal format.</div><div class=\"line\">     * @returns &#123;Array.&lt;number&gt;&#125; An array of the red, green, and blue values,</div><div class=\"line\">     * each ranging from 0 to 255.</div><div class=\"line\">     */</div><div class=\"line\">    rgbify <span class=\"keyword\">as</span> toRgb</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h2><p>具体可以看官方文档, <a href=\"http://usejsdoc.org/\" target=\"_blank\" rel=\"external\">jsdoc</a></p>\n<p>妈妈再也不用担心文档需要自己手写了!!!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>如果要维护一个项目,  文档是必不可少的, 如果没有文档, 你同事看起来就会减少效率.</p>\n<p>好处不觉得没有必要写了, 好多公司都需要一个文档来注释项目的api</p>\n<p>这里<code>js</code>我们选着<a href=\"https://github.com/jsdoc3/jsdoc\" target=\"_blank\" rel=\"external\">jsdoc</a>来生成</p>\n<p>安装</p>\n<p><code>npm install -g jsdoc</code></p>\n<p>命令行中使用<br><code>jsdoc youJavascriptFile.js</code></p>\n<p>项目中安装<br><code>npm install --save-dev jsdoc</code></p>\n<p>安装在项目中我们必须要调用<code>./node_modules/.bin/jsdoc youJavascriptFile.js</code></p>\n<p>一般生成好的文件在<code>out</code>目录下, </p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>这里具体要说的是几个注释模板, 让你生成后的代码api文档更美观</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/** Class representing a point. */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Create a point.</div><div class=\"line\">     * @param &#123;number&#125; x - The x value.</div><div class=\"line\">     * @param &#123;number&#125; y - The y value.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(x, y) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Get the x value.</div><div class=\"line\">     * @return &#123;number&#125; The x value.</div><div class=\"line\">     */</div><div class=\"line\">    getX() &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Get the y value.</div><div class=\"line\">     * @return &#123;number&#125; The y value.</div><div class=\"line\">     */</div><div class=\"line\">    getY() &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Convert a string containing two comma-separated numbers into a point.</div><div class=\"line\">     * @param &#123;string&#125; str - The string containing two comma-separated numbers.</div><div class=\"line\">     * @return &#123;Point&#125; A Point object.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">static</span> fromString(str) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** @module color/mixer */</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** The name of the module. */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> name = <span class=\"string\">'mixer'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** The most recent blended color. */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> lastColor = <span class=\"literal\">null</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Blend two colors together.</div><div class=\"line\"> * @param &#123;string&#125; color1 - The first color, in hexadecimal format.</div><div class=\"line\"> * @param &#123;string&#125; color2 - The second color, in hexadecimal format.</div><div class=\"line\"> * @return &#123;string&#125; The blended color.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">blend</span>(<span class=\"params\">color1, color2</span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// convert color to array of RGB values (0-255)</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rgbify</span>(<span class=\"params\">color</span>) </span>&#123;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;</div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Get the red, green, and blue values of a color.</div><div class=\"line\">     * @function</div><div class=\"line\">     * @param &#123;string&#125; color - A color, in hexadecimal format.</div><div class=\"line\">     * @returns &#123;Array.&lt;number&gt;&#125; An array of the red, green, and blue values,</div><div class=\"line\">     * each ranging from 0 to 255.</div><div class=\"line\">     */</div><div class=\"line\">    rgbify <span class=\"keyword\">as</span> toRgb</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Tags\"><a href=\"#Tags\" class=\"headerlink\" title=\"Tags\"></a>Tags</h2><p>具体可以看官方文档, <a href=\"http://usejsdoc.org/\" target=\"_blank\" rel=\"external\">jsdoc</a></p>\n<p>妈妈再也不用担心文档需要自己手写了!!!</p>\n"},{"title":"使用jest来做javascript的单元测试","date":"2017-07-26T02:49:16.000Z","_content":"\n想要在开发过程中愉快的调试, 维护, 减少容错率, 提高团队开发可靠性, 想要对你写的代码让别人觉得很可靠, 那么测试必不可少.\n\n我相信很多程序员是不写测试, 坏处就是麻烦, 项目开发过程中写的东西变得多. 但是重现在开始添加你的的代码测试吧, 相信在开发过程中会让你其乐无穷的.\n\n今天我们就是用`jest`来测试写的js代码, 之所以选择是用`jest`是因为我主要写`react`, 而`react`官方是推荐jest还具备同一个爹, 而且还能测试`react-native`\n\n> [官方文档](https://facebook.github.io/jest/zh-Hans/)\n\n\nreact开发中由于对函数式友好的支持, 所以单元测试就是其中最主要的测试\n具体怎么使用看官方文档就ok写的很详细了.关键是没什么难的,  多看看api.\n","source":"_posts/使用jest来做javascript的单元测试.md","raw":"---\ntitle: 使用jest来做javascript的单元测试\ndate: 2017-07-26 10:49:16\ntags:\n    - jest\n    - js\n    - js 测试\ncategories: \"jest测试你的react\"\n---\n\n想要在开发过程中愉快的调试, 维护, 减少容错率, 提高团队开发可靠性, 想要对你写的代码让别人觉得很可靠, 那么测试必不可少.\n\n我相信很多程序员是不写测试, 坏处就是麻烦, 项目开发过程中写的东西变得多. 但是重现在开始添加你的的代码测试吧, 相信在开发过程中会让你其乐无穷的.\n\n今天我们就是用`jest`来测试写的js代码, 之所以选择是用`jest`是因为我主要写`react`, 而`react`官方是推荐jest还具备同一个爹, 而且还能测试`react-native`\n\n> [官方文档](https://facebook.github.io/jest/zh-Hans/)\n\n\nreact开发中由于对函数式友好的支持, 所以单元测试就是其中最主要的测试\n具体怎么使用看官方文档就ok写的很详细了.关键是没什么难的,  多看看api.\n","slug":"使用jest来做javascript的单元测试","published":1,"updated":"2019-05-13T03:56:03.290Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebev0056a0dmgw27k7v9","content":"<p>想要在开发过程中愉快的调试, 维护, 减少容错率, 提高团队开发可靠性, 想要对你写的代码让别人觉得很可靠, 那么测试必不可少.</p>\n<p>我相信很多程序员是不写测试, 坏处就是麻烦, 项目开发过程中写的东西变得多. 但是重现在开始添加你的的代码测试吧, 相信在开发过程中会让你其乐无穷的.</p>\n<p>今天我们就是用<code>jest</code>来测试写的js代码, 之所以选择是用<code>jest</code>是因为我主要写<code>react</code>, 而<code>react</code>官方是推荐jest还具备同一个爹, 而且还能测试<code>react-native</code></p>\n<blockquote>\n<p><a href=\"https://facebook.github.io/jest/zh-Hans/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n</blockquote>\n<p>react开发中由于对函数式友好的支持, 所以单元测试就是其中最主要的测试<br>具体怎么使用看官方文档就ok写的很详细了.关键是没什么难的,  多看看api.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>想要在开发过程中愉快的调试, 维护, 减少容错率, 提高团队开发可靠性, 想要对你写的代码让别人觉得很可靠, 那么测试必不可少.</p>\n<p>我相信很多程序员是不写测试, 坏处就是麻烦, 项目开发过程中写的东西变得多. 但是重现在开始添加你的的代码测试吧, 相信在开发过程中会让你其乐无穷的.</p>\n<p>今天我们就是用<code>jest</code>来测试写的js代码, 之所以选择是用<code>jest</code>是因为我主要写<code>react</code>, 而<code>react</code>官方是推荐jest还具备同一个爹, 而且还能测试<code>react-native</code></p>\n<blockquote>\n<p><a href=\"https://facebook.github.io/jest/zh-Hans/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n</blockquote>\n<p>react开发中由于对函数式友好的支持, 所以单元测试就是其中最主要的测试<br>具体怎么使用看官方文档就ok写的很详细了.关键是没什么难的,  多看看api.</p>\n"},{"layout":"post","title":"使用js来体验装饰者模式","date":"2017-08-11T06:22:31.000Z","_content":"\n## 装饰者模式:\n\n在不必改变原始**类**文件和使用继承的情况下, 动态地扩展一个对象的功能, 通过一个创建一个包装对象, 也就是装饰者来包裹这个真实的对象, 这样我们就可以为对象添加一个方法或者一些行为, 但是保持变量名不变。 将方法调用传递给原始对象; 达到不改变原始对象的情况下, 扩展原始对象的目的.\n\n{% asset_img 理解装饰者模式.jpg 理解装饰者模式 %}\n\n其实这个模式也可以使用的**函数**上面,  看起来像是下面这样子的\n\n```javascript\n// 原有函数\nlet getData = () => {\n  return (new Date()).toString();\n};\n\n// 包装函数,  写过函数式的应该很容易就可以看明白\nlet upperCaseDacorator = fn => {\n  return (...arg) => {\n    return fn.apply(this, arg).toUpperCase();\n  }\n};\n\n// 调用装饰折后的函数方法\nlet test = upperCaseDacorator(getData)()\nconsole.log(test);\n```\n\n个人经常使用上面这种形式的方法,  平时写函数比较多, 看起来也更简单.\n\n## 装饰者模式和`es7`中的`decorator`\n\n[不知道的可以先看看这里](http://www.cnblogs.com/whitewolf/p/details-of-ES7-JavaScript-Decorators.html)\n`es7`中增加了一个`decorator`属性, 借鉴自`python`,\n\n### 下面我们以 钢铁侠 为例讲解如何使用 ES7 的 decorator。\n\n以钢铁侠为例，钢铁侠本质是一个人，只是“装饰”了很多武器方才变得那么 NB，不过再怎么装饰他还是一个人。\n\n{% asset_img 钢铁侠.jpg 理解装饰者模式 %}\n\n我们的示例场景是这样的\n\n- 创建一个普通的Man类，它的抵御值 2，攻击力为 3，血量为 3；\n- 我们让其带上钢铁侠的盔甲，这样他的抵御力增加 100，变成 102；\n- 让其带上光束手套，攻击力增加 50，变成 53；\n- 最后让他增加“飞行”能力\n\n好的, 现在我们来创建普通`Man`类:\n\n```javascript\nclass Man{\n  constructor(def = 2, atk = 3, hp = 3) {\n    this.init(def, atk, hp);\n  }\n  init(def, atk, hp) {\n    this.def = def; // 防御值\n    this.atk = atk; // 攻击力\n    this.hp = hp; // 血量\n  }\n  toString() {\n    return `防御力:${this.def},攻击力:${this.atk},血量:${this.hp}`;\n  }\n}\n\nlet tony = new Man();\n\nconsole.log(`当前状态 ===> ${tony}`);\n// 输出：当前状态 ===> 防御力:2,攻击力:3,血量:3\n```\n穿件`decorateArmour`头盔方法, 为钢铁侠装配盔甲 . `decorateArmour`是装饰在方法`init`上的\n\n```javascript\nfunction decorateArmour(target, key, descriptor) {\n  const method = descriptor.value;\n  let moreDef = 100;\n  let ret;\n  descriptor.value = (...args) => {\n    args[0] += moreDef;\n    ret = method.apply(target, args);\n    return ret;\n  };\n  return descriptor;\n}\n\nclass Man{\n  constructor(def = 2, atk = 3, hp = 3) {\n    this.init(def, atk, hp);\n  }\n\n  @decorateArmour\n  init(def, atk, hp) {\n    this.def = def; // 防御值\n    this.atk = atk; // 攻击力\n    this.hp = hp; // 血量\n  }\n  toString() {\n    return `防御力:${this.def},攻击力:${this.atk},血量:${this.hp}`;\n  }\n}\n\n// 输出：当前状态 ===> 防御力:102,攻击力:3,血量:3\n```\n我们看到输出结果, `输出：当前状态 ===> 防御力:102,攻击力:3,血量:3`, 看起来盔甲起作用了.\n\n初学者这里会有两个疑问\n\n- `decorateArmour`方法的参数为啥是这三个? 可以更换么?\n- `decorateArmour`方法为什么放回的是`descriptor`\n\n这里给出个人的解答作为参考:\n- **Decorators**的本质是利用了es5中的`Object.defineProperty`属性, 这三个参数其实是和`Object.defineProperty`参数一样的, 因此不能改变, [详细分析参考](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n- 可以看看**bable转码后**的代码, 其中有一句是`descriptor = descriptor(target, key, descriptor) || descriptor;`想要具体理解还需要看代码中的上下文.\n\n**demo2 装饰器叠加: 增加光束手套**\n在上面的示例中, 我们成功为普通人 增加'盔甲'这个装饰;现在我们继续添加光束手套, 来达到增加50点防御值.\n我们还是在**`decorateArmour`**方法做修改, 改名为`decorateLight`, 同事修改防御值的属性:\n```javascript\nfunction decorateLight(target, key, descriptor) {\n  const method = descriptor.value;\n  let moreAtk = 50;\n  let ret;\n  descriptor.value = (...args) => {\n    args[1] += moreAtk;\n    ret = method.apply(target, args);\n    return ret;\n  }\n  return descriptor;\n}\n```\nStep2: 直接在**`init`**方法上添加装饰语法:\n```javascript\n@decorateArmour\n  @decorateLight\n  init(def,atk,hp){\n    this.def = def; // 防御值\n    this.atk = atk;  // 攻击力\n    this.hp = hp;  // 血量\n  }\n```\n\n最后, 我们的代码就成了下面的样子\n```javascript\nfunction decorateLight(target, key, descriptor) {\n  const method = descriptor.value;\n  let moreAtk = 50;\n  let ret;\n  descriptor.value = (...args)=>{\n    args[1] += moreAtk;\n    ret = method.apply(target, args);\n    return ret;\n  }\n  return descriptor;\n}\n\nclass Man{\n  constructor(def = 2,atk = 3,hp = 3){\n    this.init(def,atk,hp);\n  }\n\n  @decorateArmour\n  @decorateLight\n  init(def,atk,hp){\n    this.def = def; // 防御值\n    this.atk = atk;  // 攻击力\n    this.hp = hp;  // 血量\n  }\n}\nvar tony = new Man();\nconsole.log(`当前状态 ===> ${tony}`);\n//输出：当前状态 ===> 防御力:102,攻击力:53,血量:3\n```\n\n我们这个总结一下上面装饰模式的优势, 它可以对方法进行叠加使用, 对原始类的侵入行非常小, 只是增加一行\n`@decorateLight`, 可以方便的修改(同事还可以复用)\n\n装饰模式有两种: **纯粹的装饰模式**和**半透明的装饰模式**.\n上面的demo中所使用的恩是 **纯粹的装饰模式**, 它并不增加对原始累的接口;\n下面我们使用**半透明的装饰模式**来增加一个飞行的能力.看样子像适配器模式(TODO: 适配器模式)的样子\n\nStep1: 增加一个方法\n```javascript\nfunction addFly(canFly) {\n  return target => {\n    target.canFly = canFly;\n    const extra = canFly ? '(添加飞行能力)' : '';\n    const method = target.prototype.toString;\n    target.prototype.toString = (...args) => {\n      return method.apply(target.prototype.args) + extra;\n    }\n    return target;\n  }\n}\n```\n\nStep2: 这个方法将直接去装饰原始lei:\n```javaScript\nfunction addFly(canFly){\n  return function(target){\n    target.canFly = canFly;\n    let extra = canFly ? '(技能加成:飞行能力)' : '';\n    let method = target.prototype.toString;\n    target.prototype.toString = (...args)=>{\n      return method.apply(target.prototype,args) + extra;\n    }\n    return target;\n  }\n}\n\n@addFly(true)\nclass Man{\n  constructor(def = 2,atk = 3,hp = 3){\n    this.init(def,atk,hp);\n  }\n\n  @decorateArmour\n  @decorateLight\n  init(def,atk,hp){\n    this.def = def; // 防御值\n    this.atk = atk;  // 攻击力\n    this.hp = hp;  // 血量\n  }\n}\n\nconsole.log(`当前状态 ===> ${tony}`);\n// 输出：当前状态 ===> 防御力:102,攻击力:53,血量:3(技能加成:飞行能力)\n```\n作用在方法上的 `decorator` 接收的第一个参数（ target ）是类的 prototype ；如果把一个 `decorator` 作用到类上，则它的第一个参数 target 是 类本身 。\n\n## 总结\n看到这里估计还有些人会迷糊着, 说到底,  装饰模式中的`@`其实就是一个**高阶函数**, 下面是语法糖给你传入的参数;\n这里就那`redux`中的`connect`函数来举例子,\n\n`connect(mapStoreToProps, mapDispatchToProps)(Component)`这里是`connect`方法的具体调用方法, 其中使用装饰者模式就是下面的样子\n```javascript\n\n@connect(mapStoreToProps, mapDispatchToProps)\nexport class App extends Component {\n    render () {\n        return <div id=\"\">组件</div>\n    }\n}\n// 这里可以看出装饰者模式在es7中只是一种语法糖!!!\n```\n\n> [原文地址](http://www.tuicool.com/articles/2yeiEr)\n\n## 使用原生**js**实现装饰器模式\n\n> [javascript设计模式: 装饰者模式](http://www.codingserf.com/index.php/2015/05/javascript-design-patterns-decorator/)\n","source":"_posts/使用js来体验装饰者模式.md","raw":"---\nlayout: post\ntitle: 使用js来体验装饰者模式\ndate: 2017-08-11 14:22:31\ntags:\n    - 设计模式\n    - es7\n    - decorator\ncategories: \"设计模式\"\n---\n\n## 装饰者模式:\n\n在不必改变原始**类**文件和使用继承的情况下, 动态地扩展一个对象的功能, 通过一个创建一个包装对象, 也就是装饰者来包裹这个真实的对象, 这样我们就可以为对象添加一个方法或者一些行为, 但是保持变量名不变。 将方法调用传递给原始对象; 达到不改变原始对象的情况下, 扩展原始对象的目的.\n\n{% asset_img 理解装饰者模式.jpg 理解装饰者模式 %}\n\n其实这个模式也可以使用的**函数**上面,  看起来像是下面这样子的\n\n```javascript\n// 原有函数\nlet getData = () => {\n  return (new Date()).toString();\n};\n\n// 包装函数,  写过函数式的应该很容易就可以看明白\nlet upperCaseDacorator = fn => {\n  return (...arg) => {\n    return fn.apply(this, arg).toUpperCase();\n  }\n};\n\n// 调用装饰折后的函数方法\nlet test = upperCaseDacorator(getData)()\nconsole.log(test);\n```\n\n个人经常使用上面这种形式的方法,  平时写函数比较多, 看起来也更简单.\n\n## 装饰者模式和`es7`中的`decorator`\n\n[不知道的可以先看看这里](http://www.cnblogs.com/whitewolf/p/details-of-ES7-JavaScript-Decorators.html)\n`es7`中增加了一个`decorator`属性, 借鉴自`python`,\n\n### 下面我们以 钢铁侠 为例讲解如何使用 ES7 的 decorator。\n\n以钢铁侠为例，钢铁侠本质是一个人，只是“装饰”了很多武器方才变得那么 NB，不过再怎么装饰他还是一个人。\n\n{% asset_img 钢铁侠.jpg 理解装饰者模式 %}\n\n我们的示例场景是这样的\n\n- 创建一个普通的Man类，它的抵御值 2，攻击力为 3，血量为 3；\n- 我们让其带上钢铁侠的盔甲，这样他的抵御力增加 100，变成 102；\n- 让其带上光束手套，攻击力增加 50，变成 53；\n- 最后让他增加“飞行”能力\n\n好的, 现在我们来创建普通`Man`类:\n\n```javascript\nclass Man{\n  constructor(def = 2, atk = 3, hp = 3) {\n    this.init(def, atk, hp);\n  }\n  init(def, atk, hp) {\n    this.def = def; // 防御值\n    this.atk = atk; // 攻击力\n    this.hp = hp; // 血量\n  }\n  toString() {\n    return `防御力:${this.def},攻击力:${this.atk},血量:${this.hp}`;\n  }\n}\n\nlet tony = new Man();\n\nconsole.log(`当前状态 ===> ${tony}`);\n// 输出：当前状态 ===> 防御力:2,攻击力:3,血量:3\n```\n穿件`decorateArmour`头盔方法, 为钢铁侠装配盔甲 . `decorateArmour`是装饰在方法`init`上的\n\n```javascript\nfunction decorateArmour(target, key, descriptor) {\n  const method = descriptor.value;\n  let moreDef = 100;\n  let ret;\n  descriptor.value = (...args) => {\n    args[0] += moreDef;\n    ret = method.apply(target, args);\n    return ret;\n  };\n  return descriptor;\n}\n\nclass Man{\n  constructor(def = 2, atk = 3, hp = 3) {\n    this.init(def, atk, hp);\n  }\n\n  @decorateArmour\n  init(def, atk, hp) {\n    this.def = def; // 防御值\n    this.atk = atk; // 攻击力\n    this.hp = hp; // 血量\n  }\n  toString() {\n    return `防御力:${this.def},攻击力:${this.atk},血量:${this.hp}`;\n  }\n}\n\n// 输出：当前状态 ===> 防御力:102,攻击力:3,血量:3\n```\n我们看到输出结果, `输出：当前状态 ===> 防御力:102,攻击力:3,血量:3`, 看起来盔甲起作用了.\n\n初学者这里会有两个疑问\n\n- `decorateArmour`方法的参数为啥是这三个? 可以更换么?\n- `decorateArmour`方法为什么放回的是`descriptor`\n\n这里给出个人的解答作为参考:\n- **Decorators**的本质是利用了es5中的`Object.defineProperty`属性, 这三个参数其实是和`Object.defineProperty`参数一样的, 因此不能改变, [详细分析参考](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n- 可以看看**bable转码后**的代码, 其中有一句是`descriptor = descriptor(target, key, descriptor) || descriptor;`想要具体理解还需要看代码中的上下文.\n\n**demo2 装饰器叠加: 增加光束手套**\n在上面的示例中, 我们成功为普通人 增加'盔甲'这个装饰;现在我们继续添加光束手套, 来达到增加50点防御值.\n我们还是在**`decorateArmour`**方法做修改, 改名为`decorateLight`, 同事修改防御值的属性:\n```javascript\nfunction decorateLight(target, key, descriptor) {\n  const method = descriptor.value;\n  let moreAtk = 50;\n  let ret;\n  descriptor.value = (...args) => {\n    args[1] += moreAtk;\n    ret = method.apply(target, args);\n    return ret;\n  }\n  return descriptor;\n}\n```\nStep2: 直接在**`init`**方法上添加装饰语法:\n```javascript\n@decorateArmour\n  @decorateLight\n  init(def,atk,hp){\n    this.def = def; // 防御值\n    this.atk = atk;  // 攻击力\n    this.hp = hp;  // 血量\n  }\n```\n\n最后, 我们的代码就成了下面的样子\n```javascript\nfunction decorateLight(target, key, descriptor) {\n  const method = descriptor.value;\n  let moreAtk = 50;\n  let ret;\n  descriptor.value = (...args)=>{\n    args[1] += moreAtk;\n    ret = method.apply(target, args);\n    return ret;\n  }\n  return descriptor;\n}\n\nclass Man{\n  constructor(def = 2,atk = 3,hp = 3){\n    this.init(def,atk,hp);\n  }\n\n  @decorateArmour\n  @decorateLight\n  init(def,atk,hp){\n    this.def = def; // 防御值\n    this.atk = atk;  // 攻击力\n    this.hp = hp;  // 血量\n  }\n}\nvar tony = new Man();\nconsole.log(`当前状态 ===> ${tony}`);\n//输出：当前状态 ===> 防御力:102,攻击力:53,血量:3\n```\n\n我们这个总结一下上面装饰模式的优势, 它可以对方法进行叠加使用, 对原始类的侵入行非常小, 只是增加一行\n`@decorateLight`, 可以方便的修改(同事还可以复用)\n\n装饰模式有两种: **纯粹的装饰模式**和**半透明的装饰模式**.\n上面的demo中所使用的恩是 **纯粹的装饰模式**, 它并不增加对原始累的接口;\n下面我们使用**半透明的装饰模式**来增加一个飞行的能力.看样子像适配器模式(TODO: 适配器模式)的样子\n\nStep1: 增加一个方法\n```javascript\nfunction addFly(canFly) {\n  return target => {\n    target.canFly = canFly;\n    const extra = canFly ? '(添加飞行能力)' : '';\n    const method = target.prototype.toString;\n    target.prototype.toString = (...args) => {\n      return method.apply(target.prototype.args) + extra;\n    }\n    return target;\n  }\n}\n```\n\nStep2: 这个方法将直接去装饰原始lei:\n```javaScript\nfunction addFly(canFly){\n  return function(target){\n    target.canFly = canFly;\n    let extra = canFly ? '(技能加成:飞行能力)' : '';\n    let method = target.prototype.toString;\n    target.prototype.toString = (...args)=>{\n      return method.apply(target.prototype,args) + extra;\n    }\n    return target;\n  }\n}\n\n@addFly(true)\nclass Man{\n  constructor(def = 2,atk = 3,hp = 3){\n    this.init(def,atk,hp);\n  }\n\n  @decorateArmour\n  @decorateLight\n  init(def,atk,hp){\n    this.def = def; // 防御值\n    this.atk = atk;  // 攻击力\n    this.hp = hp;  // 血量\n  }\n}\n\nconsole.log(`当前状态 ===> ${tony}`);\n// 输出：当前状态 ===> 防御力:102,攻击力:53,血量:3(技能加成:飞行能力)\n```\n作用在方法上的 `decorator` 接收的第一个参数（ target ）是类的 prototype ；如果把一个 `decorator` 作用到类上，则它的第一个参数 target 是 类本身 。\n\n## 总结\n看到这里估计还有些人会迷糊着, 说到底,  装饰模式中的`@`其实就是一个**高阶函数**, 下面是语法糖给你传入的参数;\n这里就那`redux`中的`connect`函数来举例子,\n\n`connect(mapStoreToProps, mapDispatchToProps)(Component)`这里是`connect`方法的具体调用方法, 其中使用装饰者模式就是下面的样子\n```javascript\n\n@connect(mapStoreToProps, mapDispatchToProps)\nexport class App extends Component {\n    render () {\n        return <div id=\"\">组件</div>\n    }\n}\n// 这里可以看出装饰者模式在es7中只是一种语法糖!!!\n```\n\n> [原文地址](http://www.tuicool.com/articles/2yeiEr)\n\n## 使用原生**js**实现装饰器模式\n\n> [javascript设计模式: 装饰者模式](http://www.codingserf.com/index.php/2015/05/javascript-design-patterns-decorator/)\n","slug":"使用js来体验装饰者模式","published":1,"updated":"2019-05-13T03:56:03.290Z","comments":1,"photos":[],"link":"","_id":"cjvluebex005aa0dm0h510zc2","content":"<h2 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式:\"></a>装饰者模式:</h2><p>在不必改变原始<strong>类</strong>文件和使用继承的情况下, 动态地扩展一个对象的功能, 通过一个创建一个包装对象, 也就是装饰者来包裹这个真实的对象, 这样我们就可以为对象添加一个方法或者一些行为, 但是保持变量名不变。 将方法调用传递给原始对象; 达到不改变原始对象的情况下, 扩展原始对象的目的.</p>\n<img src=\"/2017/08/11/使用js来体验装饰者模式/理解装饰者模式.jpg\" alt=\"理解装饰者模式\" title=\"理解装饰者模式\">\n<p>其实这个模式也可以使用的<strong>函数</strong>上面,  看起来像是下面这样子的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原有函数</span></div><div class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toString();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包装函数,  写过函数式的应该很容易就可以看明白</span></div><div class=\"line\"><span class=\"keyword\">let</span> upperCaseDacorator = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, arg).toUpperCase();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用装饰折后的函数方法</span></div><div class=\"line\"><span class=\"keyword\">let</span> test = upperCaseDacorator(getData)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(test);</div></pre></td></tr></table></figure>\n<p>个人经常使用上面这种形式的方法,  平时写函数比较多, 看起来也更简单.</p>\n<h2 id=\"装饰者模式和es7中的decorator\"><a href=\"#装饰者模式和es7中的decorator\" class=\"headerlink\" title=\"装饰者模式和es7中的decorator\"></a>装饰者模式和<code>es7</code>中的<code>decorator</code></h2><p><a href=\"http://www.cnblogs.com/whitewolf/p/details-of-ES7-JavaScript-Decorators.html\" target=\"_blank\" rel=\"external\">不知道的可以先看看这里</a><br><code>es7</code>中增加了一个<code>decorator</code>属性, 借鉴自<code>python</code>,</p>\n<h3 id=\"下面我们以-钢铁侠-为例讲解如何使用-ES7-的-decorator。\"><a href=\"#下面我们以-钢铁侠-为例讲解如何使用-ES7-的-decorator。\" class=\"headerlink\" title=\"下面我们以 钢铁侠 为例讲解如何使用 ES7 的 decorator。\"></a>下面我们以 钢铁侠 为例讲解如何使用 ES7 的 decorator。</h3><p>以钢铁侠为例，钢铁侠本质是一个人，只是“装饰”了很多武器方才变得那么 NB，不过再怎么装饰他还是一个人。</p>\n<img src=\"/2017/08/11/使用js来体验装饰者模式/钢铁侠.jpg\" alt=\"理解装饰者模式\" title=\"理解装饰者模式\">\n<p>我们的示例场景是这样的</p>\n<ul>\n<li>创建一个普通的Man类，它的抵御值 2，攻击力为 3，血量为 3；</li>\n<li>我们让其带上钢铁侠的盔甲，这样他的抵御力增加 100，变成 102；</li>\n<li>让其带上光束手套，攻击力增加 50，变成 53；</li>\n<li>最后让他增加“飞行”能力</li>\n</ul>\n<p>好的, 现在我们来创建普通<code>Man</code>类:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2, atk = 3, hp = 3) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def, atk, hp);</div><div class=\"line\">  &#125;</div><div class=\"line\">  init(def, atk, hp) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk; <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp; <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`防御力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.def&#125;</span>,攻击力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.atk&#125;</span>,血量:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.hp&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> tony = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`当前状态 ===&gt; <span class=\"subst\">$&#123;tony&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">// 输出：当前状态 ===&gt; 防御力:2,攻击力:3,血量:3</span></div></pre></td></tr></table></figure>\n<p>穿件<code>decorateArmour</code>头盔方法, 为钢铁侠装配盔甲 . <code>decorateArmour</code>是装饰在方法<code>init</code>上的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateArmour</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> method = descriptor.value;</div><div class=\"line\">  <span class=\"keyword\">let</span> moreDef = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> ret;</div><div class=\"line\">  descriptor.value = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">    args[<span class=\"number\">0</span>] += moreDef;</div><div class=\"line\">    ret = method.apply(target, args);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2, atk = 3, hp = 3) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def, atk, hp);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @decorateArmour</div><div class=\"line\">  init(def, atk, hp) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk; <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp; <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`防御力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.def&#125;</span>,攻击力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.atk&#125;</span>,血量:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.hp&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：当前状态 ===&gt; 防御力:102,攻击力:3,血量:3</span></div></pre></td></tr></table></figure>\n<p>我们看到输出结果, <code>输出：当前状态 ===&gt; 防御力:102,攻击力:3,血量:3</code>, 看起来盔甲起作用了.</p>\n<p>初学者这里会有两个疑问</p>\n<ul>\n<li><code>decorateArmour</code>方法的参数为啥是这三个? 可以更换么?</li>\n<li><code>decorateArmour</code>方法为什么放回的是<code>descriptor</code></li>\n</ul>\n<p>这里给出个人的解答作为参考:</p>\n<ul>\n<li><strong>Decorators</strong>的本质是利用了es5中的<code>Object.defineProperty</code>属性, 这三个参数其实是和<code>Object.defineProperty</code>参数一样的, 因此不能改变, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">详细分析参考</a></li>\n<li>可以看看<strong>bable转码后</strong>的代码, 其中有一句是<code>descriptor = descriptor(target, key, descriptor) || descriptor;</code>想要具体理解还需要看代码中的上下文.</li>\n</ul>\n<p><strong>demo2 装饰器叠加: 增加光束手套</strong><br>在上面的示例中, 我们成功为普通人 增加’盔甲’这个装饰;现在我们继续添加光束手套, 来达到增加50点防御值.<br>我们还是在<strong><code>decorateArmour</code></strong>方法做修改, 改名为<code>decorateLight</code>, 同事修改防御值的属性:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateLight</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> method = descriptor.value;</div><div class=\"line\">  <span class=\"keyword\">let</span> moreAtk = <span class=\"number\">50</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> ret;</div><div class=\"line\">  descriptor.value = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">    args[<span class=\"number\">1</span>] += moreAtk;</div><div class=\"line\">    ret = method.apply(target, args);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Step2: 直接在<strong><code>init</code></strong>方法上添加装饰语法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@decorateArmour</div><div class=\"line\">  @decorateLight</div><div class=\"line\">  init(def,atk,hp)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk;  <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp;  <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>最后, 我们的代码就成了下面的样子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateLight</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> method = descriptor.value;</div><div class=\"line\">  <span class=\"keyword\">let</span> moreAtk = <span class=\"number\">50</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> ret;</div><div class=\"line\">  descriptor.value = <span class=\"function\">(<span class=\"params\">...args</span>)=&gt;</span>&#123;</div><div class=\"line\">    args[<span class=\"number\">1</span>] += moreAtk;</div><div class=\"line\">    ret = method.apply(target, args);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2,atk = 3,hp = 3)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def,atk,hp);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @decorateArmour</div><div class=\"line\">  @decorateLight</div><div class=\"line\">  init(def,atk,hp)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk;  <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp;  <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> tony = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`当前状态 ===&gt; <span class=\"subst\">$&#123;tony&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">//输出：当前状态 ===&gt; 防御力:102,攻击力:53,血量:3</span></div></pre></td></tr></table></figure></p>\n<p>我们这个总结一下上面装饰模式的优势, 它可以对方法进行叠加使用, 对原始类的侵入行非常小, 只是增加一行<br><code>@decorateLight</code>, 可以方便的修改(同事还可以复用)</p>\n<p>装饰模式有两种: <strong>纯粹的装饰模式</strong>和<strong>半透明的装饰模式</strong>.<br>上面的demo中所使用的恩是 <strong>纯粹的装饰模式</strong>, 它并不增加对原始累的接口;<br>下面我们使用<strong>半透明的装饰模式</strong>来增加一个飞行的能力.看样子像适配器模式(TODO: 适配器模式)的样子</p>\n<p>Step1: 增加一个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFly</span>(<span class=\"params\">canFly</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">target</span> =&gt;</span> &#123;</div><div class=\"line\">    target.canFly = canFly;</div><div class=\"line\">    <span class=\"keyword\">const</span> extra = canFly ? <span class=\"string\">'(添加飞行能力)'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> method = target.prototype.toString;</div><div class=\"line\">    target.prototype.toString = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> method.apply(target.prototype.args) + extra;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Step2: 这个方法将直接去装饰原始lei:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFly</span>(<span class=\"params\">canFly</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>)</span>&#123;</div><div class=\"line\">    target.canFly = canFly;</div><div class=\"line\">    <span class=\"keyword\">let</span> extra = canFly ? <span class=\"string\">'(技能加成:飞行能力)'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> method = target.prototype.toString;</div><div class=\"line\">    target.prototype.toString = <span class=\"function\">(<span class=\"params\">...args</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> method.apply(target.prototype,args) + extra;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@addFly(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2,atk = 3,hp = 3)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def,atk,hp);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @decorateArmour</div><div class=\"line\">  @decorateLight</div><div class=\"line\">  init(def,atk,hp)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk;  <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp;  <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`当前状态 ===&gt; <span class=\"subst\">$&#123;tony&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">// 输出：当前状态 ===&gt; 防御力:102,攻击力:53,血量:3(技能加成:飞行能力)</span></div></pre></td></tr></table></figure></p>\n<p>作用在方法上的 <code>decorator</code> 接收的第一个参数（ target ）是类的 prototype ；如果把一个 <code>decorator</code> 作用到类上，则它的第一个参数 target 是 类本身 。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>看到这里估计还有些人会迷糊着, 说到底,  装饰模式中的<code>@</code>其实就是一个<strong>高阶函数</strong>, 下面是语法糖给你传入的参数;<br>这里就那<code>redux</code>中的<code>connect</code>函数来举例子,</p>\n<p><code>connect(mapStoreToProps, mapDispatchToProps)(Component)</code>这里是<code>connect</code>方法的具体调用方法, 其中使用装饰者模式就是下面的样子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@connect(mapStoreToProps, mapDispatchToProps)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span>组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 这里可以看出装饰者模式在es7中只是一种语法糖!!!</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"http://www.tuicool.com/articles/2yeiEr\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n<h2 id=\"使用原生js实现装饰器模式\"><a href=\"#使用原生js实现装饰器模式\" class=\"headerlink\" title=\"使用原生js实现装饰器模式\"></a>使用原生<strong>js</strong>实现装饰器模式</h2><blockquote>\n<p><a href=\"http://www.codingserf.com/index.php/2015/05/javascript-design-patterns-decorator/\" target=\"_blank\" rel=\"external\">javascript设计模式: 装饰者模式</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"装饰者模式\"><a href=\"#装饰者模式\" class=\"headerlink\" title=\"装饰者模式:\"></a>装饰者模式:</h2><p>在不必改变原始<strong>类</strong>文件和使用继承的情况下, 动态地扩展一个对象的功能, 通过一个创建一个包装对象, 也就是装饰者来包裹这个真实的对象, 这样我们就可以为对象添加一个方法或者一些行为, 但是保持变量名不变。 将方法调用传递给原始对象; 达到不改变原始对象的情况下, 扩展原始对象的目的.</p>\n<img src=\"/2017/08/11/使用js来体验装饰者模式/理解装饰者模式.jpg\" alt=\"理解装饰者模式\" title=\"理解装饰者模式\">\n<p>其实这个模式也可以使用的<strong>函数</strong>上面,  看起来像是下面这样子的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 原有函数</span></div><div class=\"line\"><span class=\"keyword\">let</span> getData = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).toString();</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 包装函数,  写过函数式的应该很容易就可以看明白</span></div><div class=\"line\"><span class=\"keyword\">let</span> upperCaseDacorator = <span class=\"function\"><span class=\"params\">fn</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> fn.apply(<span class=\"keyword\">this</span>, arg).toUpperCase();</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 调用装饰折后的函数方法</span></div><div class=\"line\"><span class=\"keyword\">let</span> test = upperCaseDacorator(getData)()</div><div class=\"line\"><span class=\"built_in\">console</span>.log(test);</div></pre></td></tr></table></figure>\n<p>个人经常使用上面这种形式的方法,  平时写函数比较多, 看起来也更简单.</p>\n<h2 id=\"装饰者模式和es7中的decorator\"><a href=\"#装饰者模式和es7中的decorator\" class=\"headerlink\" title=\"装饰者模式和es7中的decorator\"></a>装饰者模式和<code>es7</code>中的<code>decorator</code></h2><p><a href=\"http://www.cnblogs.com/whitewolf/p/details-of-ES7-JavaScript-Decorators.html\" target=\"_blank\" rel=\"external\">不知道的可以先看看这里</a><br><code>es7</code>中增加了一个<code>decorator</code>属性, 借鉴自<code>python</code>,</p>\n<h3 id=\"下面我们以-钢铁侠-为例讲解如何使用-ES7-的-decorator。\"><a href=\"#下面我们以-钢铁侠-为例讲解如何使用-ES7-的-decorator。\" class=\"headerlink\" title=\"下面我们以 钢铁侠 为例讲解如何使用 ES7 的 decorator。\"></a>下面我们以 钢铁侠 为例讲解如何使用 ES7 的 decorator。</h3><p>以钢铁侠为例，钢铁侠本质是一个人，只是“装饰”了很多武器方才变得那么 NB，不过再怎么装饰他还是一个人。</p>\n<img src=\"/2017/08/11/使用js来体验装饰者模式/钢铁侠.jpg\" alt=\"理解装饰者模式\" title=\"理解装饰者模式\">\n<p>我们的示例场景是这样的</p>\n<ul>\n<li>创建一个普通的Man类，它的抵御值 2，攻击力为 3，血量为 3；</li>\n<li>我们让其带上钢铁侠的盔甲，这样他的抵御力增加 100，变成 102；</li>\n<li>让其带上光束手套，攻击力增加 50，变成 53；</li>\n<li>最后让他增加“飞行”能力</li>\n</ul>\n<p>好的, 现在我们来创建普通<code>Man</code>类:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2, atk = 3, hp = 3) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def, atk, hp);</div><div class=\"line\">  &#125;</div><div class=\"line\">  init(def, atk, hp) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk; <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp; <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`防御力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.def&#125;</span>,攻击力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.atk&#125;</span>,血量:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.hp&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> tony = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`当前状态 ===&gt; <span class=\"subst\">$&#123;tony&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">// 输出：当前状态 ===&gt; 防御力:2,攻击力:3,血量:3</span></div></pre></td></tr></table></figure>\n<p>穿件<code>decorateArmour</code>头盔方法, 为钢铁侠装配盔甲 . <code>decorateArmour</code>是装饰在方法<code>init</code>上的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateArmour</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> method = descriptor.value;</div><div class=\"line\">  <span class=\"keyword\">let</span> moreDef = <span class=\"number\">100</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> ret;</div><div class=\"line\">  descriptor.value = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">    args[<span class=\"number\">0</span>] += moreDef;</div><div class=\"line\">    ret = method.apply(target, args);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2, atk = 3, hp = 3) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def, atk, hp);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @decorateArmour</div><div class=\"line\">  init(def, atk, hp) &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk; <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp; <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">  toString() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`防御力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.def&#125;</span>,攻击力:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.atk&#125;</span>,血量:<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.hp&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 输出：当前状态 ===&gt; 防御力:102,攻击力:3,血量:3</span></div></pre></td></tr></table></figure>\n<p>我们看到输出结果, <code>输出：当前状态 ===&gt; 防御力:102,攻击力:3,血量:3</code>, 看起来盔甲起作用了.</p>\n<p>初学者这里会有两个疑问</p>\n<ul>\n<li><code>decorateArmour</code>方法的参数为啥是这三个? 可以更换么?</li>\n<li><code>decorateArmour</code>方法为什么放回的是<code>descriptor</code></li>\n</ul>\n<p>这里给出个人的解答作为参考:</p>\n<ul>\n<li><strong>Decorators</strong>的本质是利用了es5中的<code>Object.defineProperty</code>属性, 这三个参数其实是和<code>Object.defineProperty</code>参数一样的, 因此不能改变, <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">详细分析参考</a></li>\n<li>可以看看<strong>bable转码后</strong>的代码, 其中有一句是<code>descriptor = descriptor(target, key, descriptor) || descriptor;</code>想要具体理解还需要看代码中的上下文.</li>\n</ul>\n<p><strong>demo2 装饰器叠加: 增加光束手套</strong><br>在上面的示例中, 我们成功为普通人 增加’盔甲’这个装饰;现在我们继续添加光束手套, 来达到增加50点防御值.<br>我们还是在<strong><code>decorateArmour</code></strong>方法做修改, 改名为<code>decorateLight</code>, 同事修改防御值的属性:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateLight</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> method = descriptor.value;</div><div class=\"line\">  <span class=\"keyword\">let</span> moreAtk = <span class=\"number\">50</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> ret;</div><div class=\"line\">  descriptor.value = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">    args[<span class=\"number\">1</span>] += moreAtk;</div><div class=\"line\">    ret = method.apply(target, args);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Step2: 直接在<strong><code>init</code></strong>方法上添加装饰语法:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">@decorateArmour</div><div class=\"line\">  @decorateLight</div><div class=\"line\">  init(def,atk,hp)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk;  <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp;  <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>最后, 我们的代码就成了下面的样子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">decorateLight</span>(<span class=\"params\">target, key, descriptor</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> method = descriptor.value;</div><div class=\"line\">  <span class=\"keyword\">let</span> moreAtk = <span class=\"number\">50</span>;</div><div class=\"line\">  <span class=\"keyword\">let</span> ret;</div><div class=\"line\">  descriptor.value = <span class=\"function\">(<span class=\"params\">...args</span>)=&gt;</span>&#123;</div><div class=\"line\">    args[<span class=\"number\">1</span>] += moreAtk;</div><div class=\"line\">    ret = method.apply(target, args);</div><div class=\"line\">    <span class=\"keyword\">return</span> ret;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> descriptor;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2,atk = 3,hp = 3)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def,atk,hp);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @decorateArmour</div><div class=\"line\">  @decorateLight</div><div class=\"line\">  init(def,atk,hp)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk;  <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp;  <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> tony = <span class=\"keyword\">new</span> Man();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`当前状态 ===&gt; <span class=\"subst\">$&#123;tony&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">//输出：当前状态 ===&gt; 防御力:102,攻击力:53,血量:3</span></div></pre></td></tr></table></figure></p>\n<p>我们这个总结一下上面装饰模式的优势, 它可以对方法进行叠加使用, 对原始类的侵入行非常小, 只是增加一行<br><code>@decorateLight</code>, 可以方便的修改(同事还可以复用)</p>\n<p>装饰模式有两种: <strong>纯粹的装饰模式</strong>和<strong>半透明的装饰模式</strong>.<br>上面的demo中所使用的恩是 <strong>纯粹的装饰模式</strong>, 它并不增加对原始累的接口;<br>下面我们使用<strong>半透明的装饰模式</strong>来增加一个飞行的能力.看样子像适配器模式(TODO: 适配器模式)的样子</p>\n<p>Step1: 增加一个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFly</span>(<span class=\"params\">canFly</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">target</span> =&gt;</span> &#123;</div><div class=\"line\">    target.canFly = canFly;</div><div class=\"line\">    <span class=\"keyword\">const</span> extra = canFly ? <span class=\"string\">'(添加飞行能力)'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">const</span> method = target.prototype.toString;</div><div class=\"line\">    target.prototype.toString = <span class=\"function\">(<span class=\"params\">...args</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> method.apply(target.prototype.args) + extra;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Step2: 这个方法将直接去装饰原始lei:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addFly</span>(<span class=\"params\">canFly</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">target</span>)</span>&#123;</div><div class=\"line\">    target.canFly = canFly;</div><div class=\"line\">    <span class=\"keyword\">let</span> extra = canFly ? <span class=\"string\">'(技能加成:飞行能力)'</span> : <span class=\"string\">''</span>;</div><div class=\"line\">    <span class=\"keyword\">let</span> method = target.prototype.toString;</div><div class=\"line\">    target.prototype.toString = <span class=\"function\">(<span class=\"params\">...args</span>)=&gt;</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> method.apply(target.prototype,args) + extra;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@addFly(<span class=\"literal\">true</span>)</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span></span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(def = 2,atk = 3,hp = 3)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.init(def,atk,hp);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @decorateArmour</div><div class=\"line\">  @decorateLight</div><div class=\"line\">  init(def,atk,hp)&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.def = def; <span class=\"comment\">// 防御值</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.atk = atk;  <span class=\"comment\">// 攻击力</span></div><div class=\"line\">    <span class=\"keyword\">this</span>.hp = hp;  <span class=\"comment\">// 血量</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">`当前状态 ===&gt; <span class=\"subst\">$&#123;tony&#125;</span>`</span>);</div><div class=\"line\"><span class=\"comment\">// 输出：当前状态 ===&gt; 防御力:102,攻击力:53,血量:3(技能加成:飞行能力)</span></div></pre></td></tr></table></figure></p>\n<p>作用在方法上的 <code>decorator</code> 接收的第一个参数（ target ）是类的 prototype ；如果把一个 <code>decorator</code> 作用到类上，则它的第一个参数 target 是 类本身 。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>看到这里估计还有些人会迷糊着, 说到底,  装饰模式中的<code>@</code>其实就是一个<strong>高阶函数</strong>, 下面是语法糖给你传入的参数;<br>这里就那<code>redux</code>中的<code>connect</code>函数来举例子,</p>\n<p><code>connect(mapStoreToProps, mapDispatchToProps)(Component)</code>这里是<code>connect</code>方法的具体调用方法, 其中使用装饰者模式就是下面的样子<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">@connect(mapStoreToProps, mapDispatchToProps)</div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"\"</span>&gt;</span>组件<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 这里可以看出装饰者模式在es7中只是一种语法糖!!!</span></div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><a href=\"http://www.tuicool.com/articles/2yeiEr\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n<h2 id=\"使用原生js实现装饰器模式\"><a href=\"#使用原生js实现装饰器模式\" class=\"headerlink\" title=\"使用原生js实现装饰器模式\"></a>使用原生<strong>js</strong>实现装饰器模式</h2><blockquote>\n<p><a href=\"http://www.codingserf.com/index.php/2015/05/javascript-design-patterns-decorator/\" target=\"_blank\" rel=\"external\">javascript设计模式: 装饰者模式</a></p>\n</blockquote>\n"},{"layout":"post","title":"全球蛙首次开会议程","date":"2018-05-12T01:36:49.000Z","_content":"# 开会议程\n\n## 涂总讲话\n\n### 全球蛙\n\n模式,战略\n\n全球蛙, 实体店的电商, 主要和淘宝, 唯品会, 和美团做出区分, 其中最大的区别就是有实体店内容.\n\n### 实体店和电商各有痛点,  下面做详细介绍.\n\n实体店痛点:\n\n> 店面开销, 顾客分离风险, 员工开销不断增长\n\n实体店优点:\n服务, 体验\n\n电商痛点:\n\n物流费用较高, 流量获取费用较高\n\n电商优点:\n商品丰富, 随时随地获得产品,\n\n## 战略, 工作的方向\n\n通过上面的优缺点就可以的到全球蛙的主要目的, (电商和实体店的优点多结合, 主要目的是提交效率, 降低开销)\n\n全球蛙今后提供的服务大致包括\n\n- 10万管家随叫随到(解决方案:用心服务属自愿, 同城采用全球蛙(挖))\n\n\n## 分解目标五步法\n\n- 明确目标\n\n## 四原则\n- 确定组织最终目标\n- 关注引领性行为指标\n- 坚持激励性积分表\n- 定期进行规律性问责\n\n## 全球蛙目标流程\n\n核心业务一级业务流程说明\n","source":"_posts/全球蛙首次开会议程.md","raw":"---\nlayout: post\ntitle: 全球蛙首次开会议程\ndate: 2018-05-12 09:36:49\ntags:\n    - 实体店的电商\n    - 新零售\ncategories: \"全球蛙\"\n---\n# 开会议程\n\n## 涂总讲话\n\n### 全球蛙\n\n模式,战略\n\n全球蛙, 实体店的电商, 主要和淘宝, 唯品会, 和美团做出区分, 其中最大的区别就是有实体店内容.\n\n### 实体店和电商各有痛点,  下面做详细介绍.\n\n实体店痛点:\n\n> 店面开销, 顾客分离风险, 员工开销不断增长\n\n实体店优点:\n服务, 体验\n\n电商痛点:\n\n物流费用较高, 流量获取费用较高\n\n电商优点:\n商品丰富, 随时随地获得产品,\n\n## 战略, 工作的方向\n\n通过上面的优缺点就可以的到全球蛙的主要目的, (电商和实体店的优点多结合, 主要目的是提交效率, 降低开销)\n\n全球蛙今后提供的服务大致包括\n\n- 10万管家随叫随到(解决方案:用心服务属自愿, 同城采用全球蛙(挖))\n\n\n## 分解目标五步法\n\n- 明确目标\n\n## 四原则\n- 确定组织最终目标\n- 关注引领性行为指标\n- 坚持激励性积分表\n- 定期进行规律性问责\n\n## 全球蛙目标流程\n\n核心业务一级业务流程说明\n","slug":"全球蛙首次开会议程","published":1,"updated":"2019-05-13T03:56:03.295Z","comments":1,"photos":[],"link":"","_id":"cjvluebey005da0dm7wpl9nke","content":"<h1 id=\"开会议程\"><a href=\"#开会议程\" class=\"headerlink\" title=\"开会议程\"></a>开会议程</h1><h2 id=\"涂总讲话\"><a href=\"#涂总讲话\" class=\"headerlink\" title=\"涂总讲话\"></a>涂总讲话</h2><h3 id=\"全球蛙\"><a href=\"#全球蛙\" class=\"headerlink\" title=\"全球蛙\"></a>全球蛙</h3><p>模式,战略</p>\n<p>全球蛙, 实体店的电商, 主要和淘宝, 唯品会, 和美团做出区分, 其中最大的区别就是有实体店内容.</p>\n<h3 id=\"实体店和电商各有痛点-下面做详细介绍\"><a href=\"#实体店和电商各有痛点-下面做详细介绍\" class=\"headerlink\" title=\"实体店和电商各有痛点,  下面做详细介绍.\"></a>实体店和电商各有痛点,  下面做详细介绍.</h3><p>实体店痛点:</p>\n<blockquote>\n<p>店面开销, 顾客分离风险, 员工开销不断增长</p>\n</blockquote>\n<p>实体店优点:<br>服务, 体验</p>\n<p>电商痛点:</p>\n<p>物流费用较高, 流量获取费用较高</p>\n<p>电商优点:<br>商品丰富, 随时随地获得产品,</p>\n<h2 id=\"战略-工作的方向\"><a href=\"#战略-工作的方向\" class=\"headerlink\" title=\"战略, 工作的方向\"></a>战略, 工作的方向</h2><p>通过上面的优缺点就可以的到全球蛙的主要目的, (电商和实体店的优点多结合, 主要目的是提交效率, 降低开销)</p>\n<p>全球蛙今后提供的服务大致包括</p>\n<ul>\n<li>10万管家随叫随到(解决方案:用心服务属自愿, 同城采用全球蛙(挖))</li>\n</ul>\n<h2 id=\"分解目标五步法\"><a href=\"#分解目标五步法\" class=\"headerlink\" title=\"分解目标五步法\"></a>分解目标五步法</h2><ul>\n<li>明确目标</li>\n</ul>\n<h2 id=\"四原则\"><a href=\"#四原则\" class=\"headerlink\" title=\"四原则\"></a>四原则</h2><ul>\n<li>确定组织最终目标</li>\n<li>关注引领性行为指标</li>\n<li>坚持激励性积分表</li>\n<li>定期进行规律性问责</li>\n</ul>\n<h2 id=\"全球蛙目标流程\"><a href=\"#全球蛙目标流程\" class=\"headerlink\" title=\"全球蛙目标流程\"></a>全球蛙目标流程</h2><p>核心业务一级业务流程说明</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"开会议程\"><a href=\"#开会议程\" class=\"headerlink\" title=\"开会议程\"></a>开会议程</h1><h2 id=\"涂总讲话\"><a href=\"#涂总讲话\" class=\"headerlink\" title=\"涂总讲话\"></a>涂总讲话</h2><h3 id=\"全球蛙\"><a href=\"#全球蛙\" class=\"headerlink\" title=\"全球蛙\"></a>全球蛙</h3><p>模式,战略</p>\n<p>全球蛙, 实体店的电商, 主要和淘宝, 唯品会, 和美团做出区分, 其中最大的区别就是有实体店内容.</p>\n<h3 id=\"实体店和电商各有痛点-下面做详细介绍\"><a href=\"#实体店和电商各有痛点-下面做详细介绍\" class=\"headerlink\" title=\"实体店和电商各有痛点,  下面做详细介绍.\"></a>实体店和电商各有痛点,  下面做详细介绍.</h3><p>实体店痛点:</p>\n<blockquote>\n<p>店面开销, 顾客分离风险, 员工开销不断增长</p>\n</blockquote>\n<p>实体店优点:<br>服务, 体验</p>\n<p>电商痛点:</p>\n<p>物流费用较高, 流量获取费用较高</p>\n<p>电商优点:<br>商品丰富, 随时随地获得产品,</p>\n<h2 id=\"战略-工作的方向\"><a href=\"#战略-工作的方向\" class=\"headerlink\" title=\"战略, 工作的方向\"></a>战略, 工作的方向</h2><p>通过上面的优缺点就可以的到全球蛙的主要目的, (电商和实体店的优点多结合, 主要目的是提交效率, 降低开销)</p>\n<p>全球蛙今后提供的服务大致包括</p>\n<ul>\n<li>10万管家随叫随到(解决方案:用心服务属自愿, 同城采用全球蛙(挖))</li>\n</ul>\n<h2 id=\"分解目标五步法\"><a href=\"#分解目标五步法\" class=\"headerlink\" title=\"分解目标五步法\"></a>分解目标五步法</h2><ul>\n<li>明确目标</li>\n</ul>\n<h2 id=\"四原则\"><a href=\"#四原则\" class=\"headerlink\" title=\"四原则\"></a>四原则</h2><ul>\n<li>确定组织最终目标</li>\n<li>关注引领性行为指标</li>\n<li>坚持激励性积分表</li>\n<li>定期进行规律性问责</li>\n</ul>\n<h2 id=\"全球蛙目标流程\"><a href=\"#全球蛙目标流程\" class=\"headerlink\" title=\"全球蛙目标流程\"></a>全球蛙目标流程</h2><p>核心业务一级业务流程说明</p>\n"},{"layout":"post","title":"使用pm2来部署node项目","date":"2018-02-28T08:47:13.000Z","_content":"\n\n> [基本介绍](https://www.jianshu.com/p/d2a640b8661c)\n> [使用心得](https://www.jianshu.com/p/225b9284cfb8)\n","source":"_posts/使用pm2来部署node项目.md","raw":"---\nlayout: post\ntitle: 使用pm2来部署node项目\ndate: 2018-02-28 16:47:13\ntags:\n    - pm2\n    - node\ncategories: \"pm2\"\n---\n\n\n> [基本介绍](https://www.jianshu.com/p/d2a640b8661c)\n> [使用心得](https://www.jianshu.com/p/225b9284cfb8)\n","slug":"使用pm2来部署node项目","published":1,"updated":"2019-05-13T03:56:03.295Z","comments":1,"photos":[],"link":"","_id":"cjvluebez005ga0dm14hb37so","content":"<blockquote>\n<p><a href=\"https://www.jianshu.com/p/d2a640b8661c\" target=\"_blank\" rel=\"external\">基本介绍</a><br><a href=\"https://www.jianshu.com/p/225b9284cfb8\" target=\"_blank\" rel=\"external\">使用心得</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://www.jianshu.com/p/d2a640b8661c\" target=\"_blank\" rel=\"external\">基本介绍</a><br><a href=\"https://www.jianshu.com/p/225b9284cfb8\" target=\"_blank\" rel=\"external\">使用心得</a></p>\n</blockquote>\n"},{"layout":"post","title":"冒泡排序","date":"2017-08-09T03:48:21.000Z","_content":"\n\n## 冒泡排序\n\n冒泡排序算法的运作如下：\n\n1. 比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n代码:\n\n```javascript\nfunction sort (elements) {\n  for(let i = 0; i < elements.length; i++) {\n    for(let j = 0; j < elements.length; j++) {\n    // 前面的值大于后面的值 双方替换位置 否则退出循环\n      if(elements[j] > elements[j+1]){\n        let swap = elements[j];\n        elements[j] = elements[j+1];\n        elements[j+1] = swap;\n      }\n      // 冒泡排序本来就是一种抵效率的算法, 即使什么也不做直接推荐, 也是低效的!\n    }\n  }\n}\nvar elements = [3, 1, 5, 7, 2, 4, 9, 6, 10, 8];\nconsole.log('before: ' + elements);\nsort(elements);\nconsole.log(' after: ' + elements);\n```\n图解:\n\n{% asset_img maopao.gif 冒泡排序 %}\n\n看起来是不是狠形象\n\n{% asset_img maopao2.gif 使用冒泡排序为一列数字进行排序的过程如右图所示 %}\n\n> 尽管冒泡排序是最容易了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的\n> [原文](http://www.cnblogs.com/eniac12/p/5329396.html)\n","source":"_posts/冒泡排序.md","raw":"---\nlayout: post\ntitle: 冒泡排序\ndate: 2017-08-09 11:48:21\ntags:\n    - 冒泡排序\n    - 排序\ncategories: \"算法\"\n---\n\n\n## 冒泡排序\n\n冒泡排序算法的运作如下：\n\n1. 比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n代码:\n\n```javascript\nfunction sort (elements) {\n  for(let i = 0; i < elements.length; i++) {\n    for(let j = 0; j < elements.length; j++) {\n    // 前面的值大于后面的值 双方替换位置 否则退出循环\n      if(elements[j] > elements[j+1]){\n        let swap = elements[j];\n        elements[j] = elements[j+1];\n        elements[j+1] = swap;\n      }\n      // 冒泡排序本来就是一种抵效率的算法, 即使什么也不做直接推荐, 也是低效的!\n    }\n  }\n}\nvar elements = [3, 1, 5, 7, 2, 4, 9, 6, 10, 8];\nconsole.log('before: ' + elements);\nsort(elements);\nconsole.log(' after: ' + elements);\n```\n图解:\n\n{% asset_img maopao.gif 冒泡排序 %}\n\n看起来是不是狠形象\n\n{% asset_img maopao2.gif 使用冒泡排序为一列数字进行排序的过程如右图所示 %}\n\n> 尽管冒泡排序是最容易了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的\n> [原文](http://www.cnblogs.com/eniac12/p/5329396.html)\n","slug":"冒泡排序","published":1,"updated":"2019-05-13T03:56:03.295Z","comments":1,"photos":[],"link":"","_id":"cjvluebf0005ka0dm2lp0lwoq","content":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序算法的运作如下：</p>\n<ol>\n<li>比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p>代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span> (<span class=\"params\">elements</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; elements.length; j++) &#123;</div><div class=\"line\">    <span class=\"comment\">// 前面的值大于后面的值 双方替换位置 否则退出循环</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(elements[j] &gt; elements[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> swap = elements[j];</div><div class=\"line\">        elements[j] = elements[j+<span class=\"number\">1</span>];</div><div class=\"line\">        elements[j+<span class=\"number\">1</span>] = swap;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 冒泡排序本来就是一种抵效率的算法, 即使什么也不做直接推荐, 也是低效的!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> elements = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'before: '</span> + elements);</div><div class=\"line\">sort(elements);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">' after: '</span> + elements);</div></pre></td></tr></table></figure>\n<p>图解:</p>\n<img src=\"/2017/08/09/冒泡排序/maopao.gif\" alt=\"冒泡排序\" title=\"冒泡排序\">\n<p>看起来是不是狠形象</p>\n<img src=\"/2017/08/09/冒泡排序/maopao2.gif\" alt=\"使用冒泡排序为一列数字进行排序的过程如右图所示\" title=\"使用冒泡排序为一列数字进行排序的过程如右图所示\">\n<blockquote>\n<p>尽管冒泡排序是最容易了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的<br><a href=\"http://www.cnblogs.com/eniac12/p/5329396.html\" target=\"_blank\" rel=\"external\">原文</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序算法的运作如下：</p>\n<ol>\n<li>比较相邻的元素，如果前一个比后一个大，就把它们两个调换位置。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<p>代码:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sort</span> (<span class=\"params\">elements</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; elements.length; i++) &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; elements.length; j++) &#123;</div><div class=\"line\">    <span class=\"comment\">// 前面的值大于后面的值 双方替换位置 否则退出循环</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(elements[j] &gt; elements[j+<span class=\"number\">1</span>])&#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> swap = elements[j];</div><div class=\"line\">        elements[j] = elements[j+<span class=\"number\">1</span>];</div><div class=\"line\">        elements[j+<span class=\"number\">1</span>] = swap;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"comment\">// 冒泡排序本来就是一种抵效率的算法, 即使什么也不做直接推荐, 也是低效的!</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> elements = [<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>];</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'before: '</span> + elements);</div><div class=\"line\">sort(elements);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">' after: '</span> + elements);</div></pre></td></tr></table></figure>\n<p>图解:</p>\n<img src=\"/2017/08/09/冒泡排序/maopao.gif\" alt=\"冒泡排序\" title=\"冒泡排序\">\n<p>看起来是不是狠形象</p>\n<img src=\"/2017/08/09/冒泡排序/maopao2.gif\" alt=\"使用冒泡排序为一列数字进行排序的过程如右图所示\" title=\"使用冒泡排序为一列数字进行排序的过程如右图所示\">\n<blockquote>\n<p>尽管冒泡排序是最容易了解和实现的排序算法之一，但它对于少数元素之外的数列排序是很没有效率的<br><a href=\"http://www.cnblogs.com/eniac12/p/5329396.html\" target=\"_blank\" rel=\"external\">原文</a></p>\n</blockquote>\n"},{"layout":"post","title":"奇偶数排序","date":"2017-08-09T06:09:55.000Z","_content":"","source":"_posts/奇偶数排序.md","raw":"---\nlayout: post\ntitle: 奇偶数排序\ndate: 2017-08-09 14:09:55\ntags:\n    - 奇偶数排序\n    - 排序\ncategories: \"排序\"\n---\n","slug":"奇偶数排序","published":1,"updated":"2019-05-13T03:56:03.301Z","comments":1,"photos":[],"link":"","_id":"cjvluebf1005la0dm3jcrz85e","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"初次学习c语言的感想","date":"2017-10-25T10:01:54.000Z","_content":"","source":"_posts/初次学习c语言的感想.md","raw":"---\nlayout: post\ntitle: 初次学习c语言的感想\ndate: 2017-10-25 18:01:54\ntags:\n---\n","slug":"初次学习c语言的感想","published":1,"updated":"2019-05-13T03:56:03.301Z","comments":1,"photos":[],"link":"","_id":"cjvluebf3005pa0dmtd1zi7h6","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"hexo博客搭建以及个人开发环境","comments":0,"_content":"\n## hexo分分钟搭建博客\n\n### [官方传送门](https://hexo.io/zh-cn/)\n\n因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想\n\n{% asset_img hexo-info.png hexo intro %}\n\n<!-- more -->\n\n### 本地安装\n当然node和npm是必须的,\n\n```base\n➜ npm install hexo-cli -g\n➜ hexo init blog\n➜ cd blog\n➜ npm install\n➜ hexo server\n```\n\n本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞\n\n### 选择喜欢的主题, 个人倾向 [Hexo Next](http://theme-next.iissnan.com/)这个主题\n\n安装在`themes`文件夹内, 修改配置文件`_config.ycm`\n具体配置可以查看官网说明\n\n具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof\n\n配置github pages\n\n```coffeescript\ndeploy:\n  type: git\n  repo: 'https://github.com/username/projectName'\n  branch: [branshName]\n  message: \"{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n```\n\n上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称\n\n\n## tags类型\n\n```\ntags:\n  - tag1\n  - tag2\ncategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n### 添加标签\n\n`hexo new page tags`\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```coffeescript\ntitle: tags\ndate: 2017-06-01 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n### 添加分类\n\n`hexo new page categories`\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n\n## 部署\n配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run```hexo g -d```部署到自己的github就可以了\n\n然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok\n","source":"_posts/开发环境介绍以及博客搭建.md","raw":"---\ntitle: hexo博客搭建以及个人开发环境\ntags:\n    - blog\n    - hexo\ncategories: \"blog\"\ncomments: false\n---\n\n## hexo分分钟搭建博客\n\n### [官方传送门](https://hexo.io/zh-cn/)\n\n因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想\n\n{% asset_img hexo-info.png hexo intro %}\n\n<!-- more -->\n\n### 本地安装\n当然node和npm是必须的,\n\n```base\n➜ npm install hexo-cli -g\n➜ hexo init blog\n➜ cd blog\n➜ npm install\n➜ hexo server\n```\n\n本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞\n\n### 选择喜欢的主题, 个人倾向 [Hexo Next](http://theme-next.iissnan.com/)这个主题\n\n安装在`themes`文件夹内, 修改配置文件`_config.ycm`\n具体配置可以查看官网说明\n\n具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof\n\n配置github pages\n\n```coffeescript\ndeploy:\n  type: git\n  repo: 'https://github.com/username/projectName'\n  branch: [branshName]\n  message: \"{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n```\n\n上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称\n\n\n## tags类型\n\n```\ntags:\n  - tag1\n  - tag2\ncategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n### 添加标签\n\n`hexo new page tags`\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```coffeescript\ntitle: tags\ndate: 2017-06-01 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n### 添加分类\n\n`hexo new page categories`\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n\n## 部署\n配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run```hexo g -d```部署到自己的github就可以了\n\n然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok\n","slug":"开发环境介绍以及博客搭建","published":1,"date":"2019-05-13T03:56:03.301Z","updated":"2019-05-13T03:56:03.302Z","layout":"post","photos":[],"link":"","_id":"cjvluebf4005sa0dmli63nh93","content":"<h2 id=\"hexo分分钟搭建博客\"><a href=\"#hexo分分钟搭建博客\" class=\"headerlink\" title=\"hexo分分钟搭建博客\"></a>hexo分分钟搭建博客</h2><h3 id=\"官方传送门\"><a href=\"#官方传送门\" class=\"headerlink\" title=\"官方传送门\"></a><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方传送门</a></h3><p>因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想</p>\n<img src=\"/2019/05/13/开发环境介绍以及博客搭建/hexo-info.png\" alt=\"hexo intro\" title=\"hexo intro\">\n<a id=\"more\"></a>\n<h3 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h3><p>当然node和npm是必须的,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ npm install hexo-cli -g</div><div class=\"line\">➜ hexo init blog</div><div class=\"line\">➜ cd blog</div><div class=\"line\">➜ npm install</div><div class=\"line\">➜ hexo server</div></pre></td></tr></table></figure>\n<p>本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞</p>\n<h3 id=\"选择喜欢的主题-个人倾向-Hexo-Next这个主题\"><a href=\"#选择喜欢的主题-个人倾向-Hexo-Next这个主题\" class=\"headerlink\" title=\"选择喜欢的主题, 个人倾向 Hexo Next这个主题\"></a>选择喜欢的主题, 个人倾向 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Hexo Next</a>这个主题</h3><p>安装在<code>themes</code>文件夹内, 修改配置文件<code>_config.ycm</code><br>具体配置可以查看官网说明</p>\n<p>具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof</p>\n<p>配置github pages</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: <span class=\"string\">'https://github.com/username/projectName'</span></div><div class=\"line\">  branch: [branshName]</div><div class=\"line\">  message: <span class=\"string\">\"&#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;\"</span></div></pre></td></tr></table></figure>\n<p>上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称</p>\n<h2 id=\"tags类型\"><a href=\"#tags类型\" class=\"headerlink\" title=\"tags类型\"></a>tags类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><p><code>hexo new page tags</code><br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2017-06-01 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p><code>hexo new page categories</code><br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run<code>hexo g -d</code>部署到自己的github就可以了</p>\n<p>然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"hexo分分钟搭建博客\"><a href=\"#hexo分分钟搭建博客\" class=\"headerlink\" title=\"hexo分分钟搭建博客\"></a>hexo分分钟搭建博客</h2><h3 id=\"官方传送门\"><a href=\"#官方传送门\" class=\"headerlink\" title=\"官方传送门\"></a><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方传送门</a></h3><p>因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想</p>\n<img src=\"/2019/05/13/开发环境介绍以及博客搭建/hexo-info.png\" alt=\"hexo intro\" title=\"hexo intro\">","more":"<h3 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h3><p>当然node和npm是必须的,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ npm install hexo-cli -g</div><div class=\"line\">➜ hexo init blog</div><div class=\"line\">➜ cd blog</div><div class=\"line\">➜ npm install</div><div class=\"line\">➜ hexo server</div></pre></td></tr></table></figure>\n<p>本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞</p>\n<h3 id=\"选择喜欢的主题-个人倾向-Hexo-Next这个主题\"><a href=\"#选择喜欢的主题-个人倾向-Hexo-Next这个主题\" class=\"headerlink\" title=\"选择喜欢的主题, 个人倾向 Hexo Next这个主题\"></a>选择喜欢的主题, 个人倾向 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Hexo Next</a>这个主题</h3><p>安装在<code>themes</code>文件夹内, 修改配置文件<code>_config.ycm</code><br>具体配置可以查看官网说明</p>\n<p>具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof</p>\n<p>配置github pages</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: <span class=\"string\">'https://github.com/username/projectName'</span></div><div class=\"line\">  branch: [branshName]</div><div class=\"line\">  message: <span class=\"string\">\"&#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;\"</span></div></pre></td></tr></table></figure>\n<p>上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称</p>\n<h2 id=\"tags类型\"><a href=\"#tags类型\" class=\"headerlink\" title=\"tags类型\"></a>tags类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><p><code>hexo new page tags</code><br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2017-06-01 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p><code>hexo new page categories</code><br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run<code>hexo g -d</code>部署到自己的github就可以了</p>\n<p>然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok</p>"},{"layout":"post","title":"深入理解es7中的decorators","date":"2017-08-11T08:57:37.000Z","_content":"\n## 背后原理\nES7中的`Decorators`让我们能够在设计是对类, 属性等进行标注和修改成为了可能, `Decorators`是利用了es5中的\n```javascript\nObject.defineProperty(target, name, descriptor);\n```\n如果对`Object.defineProperty`不够了解, 请查阅[Mdn文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)首先我们来考虑一个es6中的类:\n```javascript\nclass Person {\n    name() {\n        return `${ this.first } ${ this.last }`\n    }\n}\n```\n运行上面class, 给`Person.prototype`注册一个name属性, 粗略的和下面代码相似:\n```javascirpt\nObject.defineProperty(Person.prototype, 'name', {\n  value: specifiedFunction,\n  enumerable: false,\n  configurable: true,\n  writable: true\n})\n```\n如果利用装饰器来标注一个属性呢?\n```javascript\nclass Person{\n  $readonly\n  name() {\n    return `${this.first} ${this.last}`;\n  }\n}\n// 其实就是一种语法糖\n```\n上面代码展开类似下面代码\n```javascript\nlet descriptor = {\n  value: specifiedFunction,\n  enumerable: false,\n  configurable: true,\n  writable: true\n};\n\ndescriptor = readonly( Person.prototype, 'name', descriptor ) || descriptor;\nObject.defineProperty(Person.prototype, 'name', descriptor);\n```\n上面的代码中, 我们能看出, 装饰器只是在Object.defineProperty为Person.prototype注册属性之前, 执行一个装饰函数, 其属于一类对Object.defineProperty的拦截.所以它和Object.defineProperty具有一致的方法签名, 他们的三个参数分别为:\n    - obj: 需要被操作的对象\n    - prop: 被操作对象定义或修改的属性的名称\n    - descriptor: 针对该属性的描述符\n\n对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。描述符必须是两种形式之一；不能同时是两者。\n\n> 先学到这里, 因为自己用的也不是很熟悉. 后续...\n","source":"_posts/深入理解es7中的decorators.md","raw":"---\nlayout: post\ntitle: 深入理解es7中的decorators\ndate: 2017-08-11 16:57:37\ntags:\n    - es7\n    - 装饰者\ncategories: \"decorator\"\n---\n\n## 背后原理\nES7中的`Decorators`让我们能够在设计是对类, 属性等进行标注和修改成为了可能, `Decorators`是利用了es5中的\n```javascript\nObject.defineProperty(target, name, descriptor);\n```\n如果对`Object.defineProperty`不够了解, 请查阅[Mdn文档](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)首先我们来考虑一个es6中的类:\n```javascript\nclass Person {\n    name() {\n        return `${ this.first } ${ this.last }`\n    }\n}\n```\n运行上面class, 给`Person.prototype`注册一个name属性, 粗略的和下面代码相似:\n```javascirpt\nObject.defineProperty(Person.prototype, 'name', {\n  value: specifiedFunction,\n  enumerable: false,\n  configurable: true,\n  writable: true\n})\n```\n如果利用装饰器来标注一个属性呢?\n```javascript\nclass Person{\n  $readonly\n  name() {\n    return `${this.first} ${this.last}`;\n  }\n}\n// 其实就是一种语法糖\n```\n上面代码展开类似下面代码\n```javascript\nlet descriptor = {\n  value: specifiedFunction,\n  enumerable: false,\n  configurable: true,\n  writable: true\n};\n\ndescriptor = readonly( Person.prototype, 'name', descriptor ) || descriptor;\nObject.defineProperty(Person.prototype, 'name', descriptor);\n```\n上面的代码中, 我们能看出, 装饰器只是在Object.defineProperty为Person.prototype注册属性之前, 执行一个装饰函数, 其属于一类对Object.defineProperty的拦截.所以它和Object.defineProperty具有一致的方法签名, 他们的三个参数分别为:\n    - obj: 需要被操作的对象\n    - prop: 被操作对象定义或修改的属性的名称\n    - descriptor: 针对该属性的描述符\n\n对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。描述符必须是两种形式之一；不能同时是两者。\n\n> 先学到这里, 因为自己用的也不是很熟悉. 后续...\n","slug":"深入理解es7中的decorators","published":1,"updated":"2019-05-13T03:56:03.306Z","comments":1,"photos":[],"link":"","_id":"cjvluebf5005xa0dm30c5w1zi","content":"<h2 id=\"背后原理\"><a href=\"#背后原理\" class=\"headerlink\" title=\"背后原理\"></a>背后原理</h2><p>ES7中的<code>Decorators</code>让我们能够在设计是对类, 属性等进行标注和修改成为了可能, <code>Decorators</code>是利用了es5中的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(target, name, descriptor);</div></pre></td></tr></table></figure></p>\n<p>如果对<code>Object.defineProperty</code>不够了解, 请查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">Mdn文档</a>首先我们来考虑一个es6中的类:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    name() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123; <span class=\"keyword\">this</span>.first &#125;</span> <span class=\"subst\">$&#123; <span class=\"keyword\">this</span>.last &#125;</span>`</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行上面class, 给<code>Person.prototype</code>注册一个name属性, 粗略的和下面代码相似:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object.defineProperty(Person.prototype, &apos;name&apos;, &#123;</div><div class=\"line\">  value: specifiedFunction,</div><div class=\"line\">  enumerable: false,</div><div class=\"line\">  configurable: true,</div><div class=\"line\">  writable: true</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>如果利用装饰器来标注一个属性呢?<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">  $readonly</div><div class=\"line\">  name() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.first&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.last&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 其实就是一种语法糖</span></div></pre></td></tr></table></figure></p>\n<p>上面代码展开类似下面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> descriptor = &#123;</div><div class=\"line\">  <span class=\"attr\">value</span>: specifiedFunction,</div><div class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">descriptor = readonly( Person.prototype, <span class=\"string\">'name'</span>, descriptor ) || descriptor;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</div></pre></td></tr></table></figure></p>\n<p>上面的代码中, 我们能看出, 装饰器只是在Object.defineProperty为Person.prototype注册属性之前, 执行一个装饰函数, 其属于一类对Object.defineProperty的拦截.所以它和Object.defineProperty具有一致的方法签名, 他们的三个参数分别为:</p>\n<pre><code>- obj: 需要被操作的对象\n- prop: 被操作对象定义或修改的属性的名称\n- descriptor: 针对该属性的描述符\n</code></pre><p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。描述符必须是两种形式之一；不能同时是两者。</p>\n<blockquote>\n<p>先学到这里, 因为自己用的也不是很熟悉. 后续…</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"背后原理\"><a href=\"#背后原理\" class=\"headerlink\" title=\"背后原理\"></a>背后原理</h2><p>ES7中的<code>Decorators</code>让我们能够在设计是对类, 属性等进行标注和修改成为了可能, <code>Decorators</code>是利用了es5中的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(target, name, descriptor);</div></pre></td></tr></table></figure></p>\n<p>如果对<code>Object.defineProperty</code>不够了解, 请查阅<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" target=\"_blank\" rel=\"external\">Mdn文档</a>首先我们来考虑一个es6中的类:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    name() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123; <span class=\"keyword\">this</span>.first &#125;</span> <span class=\"subst\">$&#123; <span class=\"keyword\">this</span>.last &#125;</span>`</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>运行上面class, 给<code>Person.prototype</code>注册一个name属性, 粗略的和下面代码相似:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Object.defineProperty(Person.prototype, &apos;name&apos;, &#123;</div><div class=\"line\">  value: specifiedFunction,</div><div class=\"line\">  enumerable: false,</div><div class=\"line\">  configurable: true,</div><div class=\"line\">  writable: true</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>如果利用装饰器来标注一个属性呢?<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">  $readonly</div><div class=\"line\">  name() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.first&#125;</span> <span class=\"subst\">$&#123;<span class=\"keyword\">this</span>.last&#125;</span>`</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 其实就是一种语法糖</span></div></pre></td></tr></table></figure></p>\n<p>上面代码展开类似下面代码<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> descriptor = &#123;</div><div class=\"line\">  <span class=\"attr\">value</span>: specifiedFunction,</div><div class=\"line\">  <span class=\"attr\">enumerable</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">writable</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">descriptor = readonly( Person.prototype, <span class=\"string\">'name'</span>, descriptor ) || descriptor;</div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(Person.prototype, <span class=\"string\">'name'</span>, descriptor);</div></pre></td></tr></table></figure></p>\n<p>上面的代码中, 我们能看出, 装饰器只是在Object.defineProperty为Person.prototype注册属性之前, 执行一个装饰函数, 其属于一类对Object.defineProperty的拦截.所以它和Object.defineProperty具有一致的方法签名, 他们的三个参数分别为:</p>\n<pre><code>- obj: 需要被操作的对象\n- prop: 被操作对象定义或修改的属性的名称\n- descriptor: 针对该属性的描述符\n</code></pre><p>对象里目前存在的属性描述符有两种主要形式：数据描述符和存取描述符。数据描述符是一个拥有可写或不可写值的属性。存取描述符是由一对 getter-setter 函数功能来描述的属性。描述符必须是两种形式之一；不能同时是两者。</p>\n<blockquote>\n<p>先学到这里, 因为自己用的也不是很熟悉. 后续…</p>\n</blockquote>\n"},{"title":"是时候使用httpie来做你的api接口调试了","date":"2017-07-26T02:43:54.000Z","_content":"\n{% asset_img httpie.png curl和httpie的代码高亮 %}\n\n<!-- more -->\n\n> [首先附上官方文档](https://github.com/jkbrzt/httpie)\n\n## `httpie` 是有`python`写的,  所以,  你电脑里面必须有`python`\n\n请提前get http协议相关知识\n\n至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试\n\n这里安装使用python的包管理器\n\n`pip install httpie`\n\n我电脑是mac,  所以我就使用了`brew install httpie` 最终效果一样\n\n## 这里说一下基本的操作\n\n```\n模拟提交表单 -f\nhttp -f POST serverPath.php username=name\n\n显示详细的请求\nhttp -v yhz.me\n\n只显示Header\nhttp -h yhz.me\n\n只显示Body\nhttp -b yhz.me\n\n下载文件\nhttp -d yhz.me\n\n请求删除的方法\nhttp DELETE yhz.me\n\n传递JSON数据请求(默认就是JSON数据请求)\nhttp PUT yhz.me name=nate password=nate_password\n\n如果JSON数据存在不是字符串则用:=分隔，例如\nhttp PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:='[\"a\", \"b\"]'\n\n模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8\nhttp --form POST yhz.me name='nate'\n模拟Form的上传, Content-Type: multipart/form-data\nhttp -f POST example.com/jobs name='John Smith' file@~/test.pdf\n\n修改请求头, 使用:分隔\nhttp yhz.me  User-Agent:Yhz/1.0  'Cookie:a=b;b=c'  Referer:http://yhz.me/\n\n认证\nhttp -a username:password yhz.me\nhttp --auth-type=digest -a username:password yhz.me\n\n使用http代理\nhttp --proxy=http:http://192.168.1.100:8060 yhz.me\nhttp --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me\n```\n\n基本上可以应付你工作中所有的http请求了,\n它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多\n\n> [写的更详细的在这里](https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/)\n","source":"_posts/是时候使用httpie来做你的api接口调试了.md","raw":"---\ntitle: 是时候使用httpie来做你的api接口调试了\ndate: 2017-07-26 10:43:54\ntag:\n    - api\n    - http\n    - python\n---\n\n{% asset_img httpie.png curl和httpie的代码高亮 %}\n\n<!-- more -->\n\n> [首先附上官方文档](https://github.com/jkbrzt/httpie)\n\n## `httpie` 是有`python`写的,  所以,  你电脑里面必须有`python`\n\n请提前get http协议相关知识\n\n至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试\n\n这里安装使用python的包管理器\n\n`pip install httpie`\n\n我电脑是mac,  所以我就使用了`brew install httpie` 最终效果一样\n\n## 这里说一下基本的操作\n\n```\n模拟提交表单 -f\nhttp -f POST serverPath.php username=name\n\n显示详细的请求\nhttp -v yhz.me\n\n只显示Header\nhttp -h yhz.me\n\n只显示Body\nhttp -b yhz.me\n\n下载文件\nhttp -d yhz.me\n\n请求删除的方法\nhttp DELETE yhz.me\n\n传递JSON数据请求(默认就是JSON数据请求)\nhttp PUT yhz.me name=nate password=nate_password\n\n如果JSON数据存在不是字符串则用:=分隔，例如\nhttp PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:='[\"a\", \"b\"]'\n\n模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8\nhttp --form POST yhz.me name='nate'\n模拟Form的上传, Content-Type: multipart/form-data\nhttp -f POST example.com/jobs name='John Smith' file@~/test.pdf\n\n修改请求头, 使用:分隔\nhttp yhz.me  User-Agent:Yhz/1.0  'Cookie:a=b;b=c'  Referer:http://yhz.me/\n\n认证\nhttp -a username:password yhz.me\nhttp --auth-type=digest -a username:password yhz.me\n\n使用http代理\nhttp --proxy=http:http://192.168.1.100:8060 yhz.me\nhttp --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me\n```\n\n基本上可以应付你工作中所有的http请求了,\n它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多\n\n> [写的更详细的在这里](https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/)\n","slug":"是时候使用httpie来做你的api接口调试了","published":1,"updated":"2019-05-13T03:56:03.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebf5005za0dm2xzqbwdw","content":"<img src=\"/2017/07/26/是时候使用httpie来做你的api接口调试了/httpie.png\" alt=\"curl和httpie的代码高亮\" title=\"curl和httpie的代码高亮\">\n<a id=\"more\"></a>\n<blockquote>\n<p><a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"external\">首先附上官方文档</a></p>\n</blockquote>\n<h2 id=\"httpie-是有python写的-所以-你电脑里面必须有python\"><a href=\"#httpie-是有python写的-所以-你电脑里面必须有python\" class=\"headerlink\" title=\"httpie 是有python写的,  所以,  你电脑里面必须有python\"></a><code>httpie</code> 是有<code>python</code>写的,  所以,  你电脑里面必须有<code>python</code></h2><p>请提前get http协议相关知识</p>\n<p>至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试</p>\n<p>这里安装使用python的包管理器</p>\n<p><code>pip install httpie</code></p>\n<p>我电脑是mac,  所以我就使用了<code>brew install httpie</code> 最终效果一样</p>\n<h2 id=\"这里说一下基本的操作\"><a href=\"#这里说一下基本的操作\" class=\"headerlink\" title=\"这里说一下基本的操作\"></a>这里说一下基本的操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">模拟提交表单 -f</div><div class=\"line\">http -f POST serverPath.php username=name</div><div class=\"line\"></div><div class=\"line\">显示详细的请求</div><div class=\"line\">http -v yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Header</div><div class=\"line\">http -h yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Body</div><div class=\"line\">http -b yhz.me</div><div class=\"line\"></div><div class=\"line\">下载文件</div><div class=\"line\">http -d yhz.me</div><div class=\"line\"></div><div class=\"line\">请求删除的方法</div><div class=\"line\">http DELETE yhz.me</div><div class=\"line\"></div><div class=\"line\">传递JSON数据请求(默认就是JSON数据请求)</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password</div><div class=\"line\"></div><div class=\"line\">如果JSON数据存在不是字符串则用:=分隔，例如</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:=&apos;[&quot;a&quot;, &quot;b&quot;]&apos;</div><div class=\"line\"></div><div class=\"line\">模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8</div><div class=\"line\">http --form POST yhz.me name=&apos;nate&apos;</div><div class=\"line\">模拟Form的上传, Content-Type: multipart/form-data</div><div class=\"line\">http -f POST example.com/jobs name=&apos;John Smith&apos; file@~/test.pdf</div><div class=\"line\"></div><div class=\"line\">修改请求头, 使用:分隔</div><div class=\"line\">http yhz.me  User-Agent:Yhz/1.0  &apos;Cookie:a=b;b=c&apos;  Referer:http://yhz.me/</div><div class=\"line\"></div><div class=\"line\">认证</div><div class=\"line\">http -a username:password yhz.me</div><div class=\"line\">http --auth-type=digest -a username:password yhz.me</div><div class=\"line\"></div><div class=\"line\">使用http代理</div><div class=\"line\">http --proxy=http:http://192.168.1.100:8060 yhz.me</div><div class=\"line\">http --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me</div></pre></td></tr></table></figure>\n<p>基本上可以应付你工作中所有的http请求了,<br>它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多</p>\n<blockquote>\n<p><a href=\"https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"external\">写的更详细的在这里</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/07/26/是时候使用httpie来做你的api接口调试了/httpie.png\" alt=\"curl和httpie的代码高亮\" title=\"curl和httpie的代码高亮\">","more":"<blockquote>\n<p><a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"external\">首先附上官方文档</a></p>\n</blockquote>\n<h2 id=\"httpie-是有python写的-所以-你电脑里面必须有python\"><a href=\"#httpie-是有python写的-所以-你电脑里面必须有python\" class=\"headerlink\" title=\"httpie 是有python写的,  所以,  你电脑里面必须有python\"></a><code>httpie</code> 是有<code>python</code>写的,  所以,  你电脑里面必须有<code>python</code></h2><p>请提前get http协议相关知识</p>\n<p>至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试</p>\n<p>这里安装使用python的包管理器</p>\n<p><code>pip install httpie</code></p>\n<p>我电脑是mac,  所以我就使用了<code>brew install httpie</code> 最终效果一样</p>\n<h2 id=\"这里说一下基本的操作\"><a href=\"#这里说一下基本的操作\" class=\"headerlink\" title=\"这里说一下基本的操作\"></a>这里说一下基本的操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">模拟提交表单 -f</div><div class=\"line\">http -f POST serverPath.php username=name</div><div class=\"line\"></div><div class=\"line\">显示详细的请求</div><div class=\"line\">http -v yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Header</div><div class=\"line\">http -h yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Body</div><div class=\"line\">http -b yhz.me</div><div class=\"line\"></div><div class=\"line\">下载文件</div><div class=\"line\">http -d yhz.me</div><div class=\"line\"></div><div class=\"line\">请求删除的方法</div><div class=\"line\">http DELETE yhz.me</div><div class=\"line\"></div><div class=\"line\">传递JSON数据请求(默认就是JSON数据请求)</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password</div><div class=\"line\"></div><div class=\"line\">如果JSON数据存在不是字符串则用:=分隔，例如</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:=&apos;[&quot;a&quot;, &quot;b&quot;]&apos;</div><div class=\"line\"></div><div class=\"line\">模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8</div><div class=\"line\">http --form POST yhz.me name=&apos;nate&apos;</div><div class=\"line\">模拟Form的上传, Content-Type: multipart/form-data</div><div class=\"line\">http -f POST example.com/jobs name=&apos;John Smith&apos; file@~/test.pdf</div><div class=\"line\"></div><div class=\"line\">修改请求头, 使用:分隔</div><div class=\"line\">http yhz.me  User-Agent:Yhz/1.0  &apos;Cookie:a=b;b=c&apos;  Referer:http://yhz.me/</div><div class=\"line\"></div><div class=\"line\">认证</div><div class=\"line\">http -a username:password yhz.me</div><div class=\"line\">http --auth-type=digest -a username:password yhz.me</div><div class=\"line\"></div><div class=\"line\">使用http代理</div><div class=\"line\">http --proxy=http:http://192.168.1.100:8060 yhz.me</div><div class=\"line\">http --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me</div></pre></td></tr></table></figure>\n<p>基本上可以应付你工作中所有的http请求了,<br>它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多</p>\n<blockquote>\n<p><a href=\"https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"external\">写的更详细的在这里</a></p>\n</blockquote>"},{"title":"状态模式","date":"2017-08-07T02:05:23.000Z","_content":"\n> 也是第一次听说这个`状态模式`, 也是学习的方式来写一下这个模式的简单理解;\n\n## 状态模式:\n\n(state), 当一个对象的内部状态发生改变时, 会导致其行为的改变, 看起来像是改变了对象\n\n举个栗子: 有一个人去掷骰子, 犹豫没有做手脚(你懂的), 所以,  一直都是看运气.\n\n首先, 定义一个奖品数组:\n```javascript\nlet prizes = ['prize1', 'prize2', 'prize3', 'prize4', 'prize5', 'prize6'];\n```\n\n接下来定义一个1~6的随机函数来充当骰子, 如下:\n```javascript\nlet dice = (() => {\n  let result = Math.floor(Math.random()*6+1);\n  return { res: result};\n})();\n```\n\n现在已经准备完毕, 我们需要让一个人来掷骰子, 如下: \n```javascript\n(endRes => {\n\tif(endRes === 1){\n\t\tconsole.log('您获得了'+test[0]);\n\t}else if(endRes === 2){\n\t\tconsole.log('您获得了'+test[1]);\n\t}else if(endRes === 3){\n\t\tconsole.log('您获得了'+test[2]);\n\t}else if(endRes === 4){\n\t\tconsole.log('您获得了'+test[3]);\n\t}else if(endRes === 5){\n\t\tconsole.log('您获得了'+test[4]);\n\t}else if(endRes === 6){\n\t\tconsole.log('您获得了'+test[5]);\n\t}\n})(dice.res)\n```\n然后控制台打印吃了6以内的随机奖品\n\n\n接下来我们看看一个多种比较复制的条件和逻辑时的状态模式形式, 代码如下:\n```javascript\nlet State = ( () => {\n  let States = {\n    state0: (params) => {\n      console.log('state0~');\n    },\n    state1: (params) => {\n      console.log('state1~');\n    },\n    state2:  (params) => {\n      console.log('state2~');\n    },\n    state3: (params) => {\n      console.log('state3~');\n    }\n  };\n  let getResult = (result) => {\n    States['state' + result] && States['state' + result]();\n  };\n  return { setState: getResult };\n})();\n```\n这里的处理方式明显要感觉清爽许多, 并且各个分支很独立, 我们可以对于通用变量, 函数等进行罗列, 组装等, 灵活性可谓是大大的增强~\n\n此时我们看看其中一个状态下的处理, 调用和控制台输出如下所示:\n\n```javascript\nState.setState(1);\n\nstate1~\n```\n这里我们也可以定义一个log函数来进一步的状态做一个监控, 代码如下:\n```javascript\nlet log = (() => {\n  let info = '';\n  return {\n    set: msg => {\n      info += msg + '\\n';\n    },\n    getAll: () => {\n      console.log(info);\n      info = '';\n    }\n  };\n})();\n```\n\n这里我们定义了添加方法set和获取日志方法getAll.接下来我们找个例子看看\n\n我一个朋友最近入手了一台mac，哈哈，我们就mac的操作方式做一个例子吧，mac可以通过键盘，触控板，鼠标来进行界面操作。我们用状态模式来定义这么一个构造器，代码如下，主要注释已经写好～\n\n```javascript\nlet MacState = () => {\n  let _needState = {};\n  states = {\n    keyBoard: () => {\n      log.set('keyBoard -> 敲击了一下');\n    },\n    touchPad: () => {\n      log.set('touchPad -> 操作一下');\n    },\n    mouse: () => {\n      log.set('mouse -> 按一下');\n    }\n  };\n\n  let Action = {\n    addStates: (...arg) => {\n      //清空操作对象\n      _needState = {};\n      // 遍历添加动作\n      if(arg.length) {\n        arg.forEach( (n) => {\n          _needState[i] = true;\n        });\n      }\n      return this;\n    },\n    mission: () => {\n      for(key in _needState) {\n        states[key] && states[key]();\n      }\n      return this;\n    },\n  };\n  return {\n    addStates: Action.addStates,\n    mission: Action.mission\n  };\n}\n```\n我们来仔细看看上面代码上的优势, 把我们想要的功能和状态封装到了一个方法, 其中内部包含契约好的状态, 以及对应状态的执行方法, 还有具体的操作方式, 然后返回对应做操的对象,\n\n接下来让我们调用这个方法\n```javascript\nmac.addStates('touchPad','mouse')\n    .mission()\n    .addStates('keyBoard')\n    .mission();\nlog.getAll();\n```\n上面是用的是`function`的方法来写的,  也完全可以使用`class`来写\n```base\ntouchPad -> 操作一下\nmouse -> 按一下\nkeyBoard -> 敲击了一下\n```\n\n嗯嗯，还可以，每一个操作都记录到了～。就这样我们算是结束了对状态模式的认知。其实每种模式所解决的问题都是显而易见的，我们一路写下来会发现，状态模式解决了多个分支判断过程中代码的臃肿问题，解决了状态间的耦合，对于分支的增加与修改也很清晰的可以做到。哈哈，好吧，这就是我们的状态模式。\n\n想想我们做电商中的订单系统,  完全就可以使用状态模式来写.\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/kuyacek/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n> [原文在这里](https://zhuanlan.zhihu.com/p/24292464)\n","source":"_posts/状态模式.md","raw":"---\ntitle: 状态模式\ndate: 2017-08-07 10:05:23\ntags:\n    - 设计模式\ncategories: \"设计模式\"\n---\n\n> 也是第一次听说这个`状态模式`, 也是学习的方式来写一下这个模式的简单理解;\n\n## 状态模式:\n\n(state), 当一个对象的内部状态发生改变时, 会导致其行为的改变, 看起来像是改变了对象\n\n举个栗子: 有一个人去掷骰子, 犹豫没有做手脚(你懂的), 所以,  一直都是看运气.\n\n首先, 定义一个奖品数组:\n```javascript\nlet prizes = ['prize1', 'prize2', 'prize3', 'prize4', 'prize5', 'prize6'];\n```\n\n接下来定义一个1~6的随机函数来充当骰子, 如下:\n```javascript\nlet dice = (() => {\n  let result = Math.floor(Math.random()*6+1);\n  return { res: result};\n})();\n```\n\n现在已经准备完毕, 我们需要让一个人来掷骰子, 如下: \n```javascript\n(endRes => {\n\tif(endRes === 1){\n\t\tconsole.log('您获得了'+test[0]);\n\t}else if(endRes === 2){\n\t\tconsole.log('您获得了'+test[1]);\n\t}else if(endRes === 3){\n\t\tconsole.log('您获得了'+test[2]);\n\t}else if(endRes === 4){\n\t\tconsole.log('您获得了'+test[3]);\n\t}else if(endRes === 5){\n\t\tconsole.log('您获得了'+test[4]);\n\t}else if(endRes === 6){\n\t\tconsole.log('您获得了'+test[5]);\n\t}\n})(dice.res)\n```\n然后控制台打印吃了6以内的随机奖品\n\n\n接下来我们看看一个多种比较复制的条件和逻辑时的状态模式形式, 代码如下:\n```javascript\nlet State = ( () => {\n  let States = {\n    state0: (params) => {\n      console.log('state0~');\n    },\n    state1: (params) => {\n      console.log('state1~');\n    },\n    state2:  (params) => {\n      console.log('state2~');\n    },\n    state3: (params) => {\n      console.log('state3~');\n    }\n  };\n  let getResult = (result) => {\n    States['state' + result] && States['state' + result]();\n  };\n  return { setState: getResult };\n})();\n```\n这里的处理方式明显要感觉清爽许多, 并且各个分支很独立, 我们可以对于通用变量, 函数等进行罗列, 组装等, 灵活性可谓是大大的增强~\n\n此时我们看看其中一个状态下的处理, 调用和控制台输出如下所示:\n\n```javascript\nState.setState(1);\n\nstate1~\n```\n这里我们也可以定义一个log函数来进一步的状态做一个监控, 代码如下:\n```javascript\nlet log = (() => {\n  let info = '';\n  return {\n    set: msg => {\n      info += msg + '\\n';\n    },\n    getAll: () => {\n      console.log(info);\n      info = '';\n    }\n  };\n})();\n```\n\n这里我们定义了添加方法set和获取日志方法getAll.接下来我们找个例子看看\n\n我一个朋友最近入手了一台mac，哈哈，我们就mac的操作方式做一个例子吧，mac可以通过键盘，触控板，鼠标来进行界面操作。我们用状态模式来定义这么一个构造器，代码如下，主要注释已经写好～\n\n```javascript\nlet MacState = () => {\n  let _needState = {};\n  states = {\n    keyBoard: () => {\n      log.set('keyBoard -> 敲击了一下');\n    },\n    touchPad: () => {\n      log.set('touchPad -> 操作一下');\n    },\n    mouse: () => {\n      log.set('mouse -> 按一下');\n    }\n  };\n\n  let Action = {\n    addStates: (...arg) => {\n      //清空操作对象\n      _needState = {};\n      // 遍历添加动作\n      if(arg.length) {\n        arg.forEach( (n) => {\n          _needState[i] = true;\n        });\n      }\n      return this;\n    },\n    mission: () => {\n      for(key in _needState) {\n        states[key] && states[key]();\n      }\n      return this;\n    },\n  };\n  return {\n    addStates: Action.addStates,\n    mission: Action.mission\n  };\n}\n```\n我们来仔细看看上面代码上的优势, 把我们想要的功能和状态封装到了一个方法, 其中内部包含契约好的状态, 以及对应状态的执行方法, 还有具体的操作方式, 然后返回对应做操的对象,\n\n接下来让我们调用这个方法\n```javascript\nmac.addStates('touchPad','mouse')\n    .mission()\n    .addStates('keyBoard')\n    .mission();\nlog.getAll();\n```\n上面是用的是`function`的方法来写的,  也完全可以使用`class`来写\n```base\ntouchPad -> 操作一下\nmouse -> 按一下\nkeyBoard -> 敲击了一下\n```\n\n嗯嗯，还可以，每一个操作都记录到了～。就这样我们算是结束了对状态模式的认知。其实每种模式所解决的问题都是显而易见的，我们一路写下来会发现，状态模式解决了多个分支判断过程中代码的臃肿问题，解决了状态间的耦合，对于分支的增加与修改也很清晰的可以做到。哈哈，好吧，这就是我们的状态模式。\n\n想想我们做电商中的订单系统,  完全就可以使用状态模式来写.\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/kuyacek/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n> [原文在这里](https://zhuanlan.zhihu.com/p/24292464)\n","slug":"状态模式","published":1,"updated":"2019-05-13T03:56:03.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebf60063a0dmh2zwoj1q","content":"<blockquote>\n<p>也是第一次听说这个<code>状态模式</code>, 也是学习的方式来写一下这个模式的简单理解;</p>\n</blockquote>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式:\"></a>状态模式:</h2><p>(state), 当一个对象的内部状态发生改变时, 会导致其行为的改变, 看起来像是改变了对象</p>\n<p>举个栗子: 有一个人去掷骰子, 犹豫没有做手脚(你懂的), 所以,  一直都是看运气.</p>\n<p>首先, 定义一个奖品数组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> prizes = [<span class=\"string\">'prize1'</span>, <span class=\"string\">'prize2'</span>, <span class=\"string\">'prize3'</span>, <span class=\"string\">'prize4'</span>, <span class=\"string\">'prize5'</span>, <span class=\"string\">'prize6'</span>];</div></pre></td></tr></table></figure></p>\n<p>接下来定义一个1~6的随机函数来充当骰子, 如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> dice = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">6</span>+<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">res</span>: result&#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>现在已经准备完毕, 我们需要让一个人来掷骰子, 如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"params\">endRes</span> =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(endRes === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">1</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">3</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">2</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">4</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">3</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">5</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">4</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">6</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">5</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)(dice.res)</div></pre></td></tr></table></figure></p>\n<p>然后控制台打印吃了6以内的随机奖品</p>\n<p>接下来我们看看一个多种比较复制的条件和逻辑时的状态模式形式, 代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> State = <span class=\"function\">(<span class=\"params\"> (</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> States = &#123;</div><div class=\"line\">    <span class=\"attr\">state0</span>: <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state0~'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">state1</span>: <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state1~'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">state2</span>:  <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state2~'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">state3</span>: <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state3~'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">let</span> getResult = <span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">    States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]();</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">setState</span>: getResult &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这里的处理方式明显要感觉清爽许多, 并且各个分支很独立, 我们可以对于通用变量, 函数等进行罗列, 组装等, 灵活性可谓是大大的增强~</p>\n<p>此时我们看看其中一个状态下的处理, 调用和控制台输出如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">State.setState(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">state1~</div></pre></td></tr></table></figure>\n<p>这里我们也可以定义一个log函数来进一步的状态做一个监控, 代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> log = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> info = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">      info += msg + <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getAll</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">      info = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这里我们定义了添加方法set和获取日志方法getAll.接下来我们找个例子看看</p>\n<p>我一个朋友最近入手了一台mac，哈哈，我们就mac的操作方式做一个例子吧，mac可以通过键盘，触控板，鼠标来进行界面操作。我们用状态模式来定义这么一个构造器，代码如下，主要注释已经写好～</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> MacState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> _needState = &#123;&#125;;</div><div class=\"line\">  states = &#123;</div><div class=\"line\">    <span class=\"attr\">keyBoard</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      log.set(<span class=\"string\">'keyBoard -&gt; 敲击了一下'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">touchPad</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      log.set(<span class=\"string\">'touchPad -&gt; 操作一下'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mouse</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      log.set(<span class=\"string\">'mouse -&gt; 按一下'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> Action = &#123;</div><div class=\"line\">    <span class=\"attr\">addStates</span>: <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//清空操作对象</span></div><div class=\"line\">      _needState = &#123;&#125;;</div><div class=\"line\">      <span class=\"comment\">// 遍历添加动作</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(arg.length) &#123;</div><div class=\"line\">        arg.forEach( <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</div><div class=\"line\">          _needState[i] = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mission</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> _needState) &#123;</div><div class=\"line\">        states[key] &amp;&amp; states[key]();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">addStates</span>: Action.addStates,</div><div class=\"line\">    <span class=\"attr\">mission</span>: Action.mission</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来仔细看看上面代码上的优势, 把我们想要的功能和状态封装到了一个方法, 其中内部包含契约好的状态, 以及对应状态的执行方法, 还有具体的操作方式, 然后返回对应做操的对象,</p>\n<p>接下来让我们调用这个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mac.addStates(<span class=\"string\">'touchPad'</span>,<span class=\"string\">'mouse'</span>)</div><div class=\"line\">    .mission()</div><div class=\"line\">    .addStates(<span class=\"string\">'keyBoard'</span>)</div><div class=\"line\">    .mission();</div><div class=\"line\">log.getAll();</div></pre></td></tr></table></figure></p>\n<p>上面是用的是<code>function</code>的方法来写的,  也完全可以使用<code>class</code>来写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">touchPad -&gt; 操作一下</div><div class=\"line\">mouse -&gt; 按一下</div><div class=\"line\">keyBoard -&gt; 敲击了一下</div></pre></td></tr></table></figure></p>\n<p>嗯嗯，还可以，每一个操作都记录到了～。就这样我们算是结束了对状态模式的认知。其实每种模式所解决的问题都是显而易见的，我们一路写下来会发现，状态模式解决了多个分支判断过程中代码的臃肿问题，解决了状态间的耦合，对于分支的增加与修改也很清晰的可以做到。哈哈，好吧，这就是我们的状态模式。</p>\n<p>想想我们做电商中的订单系统,  完全就可以使用状态模式来写.</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/kuyacek/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24292464\" target=\"_blank\" rel=\"external\">原文在这里</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>也是第一次听说这个<code>状态模式</code>, 也是学习的方式来写一下这个模式的简单理解;</p>\n</blockquote>\n<h2 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式:\"></a>状态模式:</h2><p>(state), 当一个对象的内部状态发生改变时, 会导致其行为的改变, 看起来像是改变了对象</p>\n<p>举个栗子: 有一个人去掷骰子, 犹豫没有做手脚(你懂的), 所以,  一直都是看运气.</p>\n<p>首先, 定义一个奖品数组:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> prizes = [<span class=\"string\">'prize1'</span>, <span class=\"string\">'prize2'</span>, <span class=\"string\">'prize3'</span>, <span class=\"string\">'prize4'</span>, <span class=\"string\">'prize5'</span>, <span class=\"string\">'prize6'</span>];</div></pre></td></tr></table></figure></p>\n<p>接下来定义一个1~6的随机函数来充当骰子, 如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> dice = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> result = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*<span class=\"number\">6</span>+<span class=\"number\">1</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">res</span>: result&#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>现在已经准备完毕, 我们需要让一个人来掷骰子, 如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"params\">endRes</span> =&gt;</span> &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(endRes === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">0</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">2</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">1</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">3</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">2</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">4</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">3</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">5</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">4</span>]);</div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(endRes === <span class=\"number\">6</span>)&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'您获得了'</span>+test[<span class=\"number\">5</span>]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;)(dice.res)</div></pre></td></tr></table></figure></p>\n<p>然后控制台打印吃了6以内的随机奖品</p>\n<p>接下来我们看看一个多种比较复制的条件和逻辑时的状态模式形式, 代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> State = <span class=\"function\">(<span class=\"params\"> (</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> States = &#123;</div><div class=\"line\">    <span class=\"attr\">state0</span>: <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state0~'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">state1</span>: <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state1~'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">state2</span>:  <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state2~'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">state3</span>: <span class=\"function\">(<span class=\"params\">params</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'state3~'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">let</span> getResult = <span class=\"function\">(<span class=\"params\">result</span>) =&gt;</span> &#123;</div><div class=\"line\">    States[<span class=\"string\">'state'</span> + result] &amp;&amp; States[<span class=\"string\">'state'</span> + result]();</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">setState</span>: getResult &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这里的处理方式明显要感觉清爽许多, 并且各个分支很独立, 我们可以对于通用变量, 函数等进行罗列, 组装等, 灵活性可谓是大大的增强~</p>\n<p>此时我们看看其中一个状态下的处理, 调用和控制台输出如下所示:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">State.setState(<span class=\"number\">1</span>);</div><div class=\"line\"></div><div class=\"line\">state1~</div></pre></td></tr></table></figure>\n<p>这里我们也可以定义一个log函数来进一步的状态做一个监控, 代码如下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> log = <span class=\"function\">(<span class=\"params\">(</span>) =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> info = <span class=\"string\">''</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"params\">msg</span> =&gt;</span> &#123;</div><div class=\"line\">      info += msg + <span class=\"string\">'\\n'</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">getAll</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">      info = <span class=\"string\">''</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;)();</div></pre></td></tr></table></figure></p>\n<p>这里我们定义了添加方法set和获取日志方法getAll.接下来我们找个例子看看</p>\n<p>我一个朋友最近入手了一台mac，哈哈，我们就mac的操作方式做一个例子吧，mac可以通过键盘，触控板，鼠标来进行界面操作。我们用状态模式来定义这么一个构造器，代码如下，主要注释已经写好～</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> MacState = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> _needState = &#123;&#125;;</div><div class=\"line\">  states = &#123;</div><div class=\"line\">    <span class=\"attr\">keyBoard</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      log.set(<span class=\"string\">'keyBoard -&gt; 敲击了一下'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">touchPad</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      log.set(<span class=\"string\">'touchPad -&gt; 操作一下'</span>);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mouse</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      log.set(<span class=\"string\">'mouse -&gt; 按一下'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">let</span> Action = &#123;</div><div class=\"line\">    <span class=\"attr\">addStates</span>: <span class=\"function\">(<span class=\"params\">...arg</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"comment\">//清空操作对象</span></div><div class=\"line\">      _needState = &#123;&#125;;</div><div class=\"line\">      <span class=\"comment\">// 遍历添加动作</span></div><div class=\"line\">      <span class=\"keyword\">if</span>(arg.length) &#123;</div><div class=\"line\">        arg.forEach( <span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> &#123;</div><div class=\"line\">          _needState[i] = <span class=\"literal\">true</span>;</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">mission</span>: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">for</span>(key <span class=\"keyword\">in</span> _needState) &#123;</div><div class=\"line\">        states[key] &amp;&amp; states[key]();</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;,</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">addStates</span>: Action.addStates,</div><div class=\"line\">    <span class=\"attr\">mission</span>: Action.mission</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来仔细看看上面代码上的优势, 把我们想要的功能和状态封装到了一个方法, 其中内部包含契约好的状态, 以及对应状态的执行方法, 还有具体的操作方式, 然后返回对应做操的对象,</p>\n<p>接下来让我们调用这个方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">mac.addStates(<span class=\"string\">'touchPad'</span>,<span class=\"string\">'mouse'</span>)</div><div class=\"line\">    .mission()</div><div class=\"line\">    .addStates(<span class=\"string\">'keyBoard'</span>)</div><div class=\"line\">    .mission();</div><div class=\"line\">log.getAll();</div></pre></td></tr></table></figure></p>\n<p>上面是用的是<code>function</code>的方法来写的,  也完全可以使用<code>class</code>来写<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">touchPad -&gt; 操作一下</div><div class=\"line\">mouse -&gt; 按一下</div><div class=\"line\">keyBoard -&gt; 敲击了一下</div></pre></td></tr></table></figure></p>\n<p>嗯嗯，还可以，每一个操作都记录到了～。就这样我们算是结束了对状态模式的认知。其实每种模式所解决的问题都是显而易见的，我们一路写下来会发现，状态模式解决了多个分支判断过程中代码的臃肿问题，解决了状态间的耦合，对于分支的增加与修改也很清晰的可以做到。哈哈，好吧，这就是我们的状态模式。</p>\n<p>想想我们做电商中的订单系统,  完全就可以使用状态模式来写.</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/kuyacek/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24292464\" target=\"_blank\" rel=\"external\">原文在这里</a></p>\n</blockquote>\n"},{"layout":"post","title":"手机扫码ios和android通用下载app","date":"2018-07-27T02:54:46.000Z","_content":"\nhttp://itunes.apple.com/app/idxxxxxxxxx\n\n[https://blog.csdn.net/Creepiz/article/details/67638520](demo)\n","source":"_posts/手机扫码ios和android通用下载app.md","raw":"---\nlayout: post\ntitle: 手机扫码ios和android通用下载app\ndate: 2018-07-27 10:54:46\ntags:\n    - 扫码下载APP\ncategories: \"算法\"\n---\n\nhttp://itunes.apple.com/app/idxxxxxxxxx\n\n[https://blog.csdn.net/Creepiz/article/details/67638520](demo)\n","slug":"手机扫码ios和android通用下载app","published":1,"updated":"2019-05-13T03:56:03.303Z","comments":1,"photos":[],"link":"","_id":"cjvluebf80067a0dmytzh6ufw","content":"<p><a href=\"http://itunes.apple.com/app/idxxxxxxxxx\" target=\"_blank\" rel=\"external\">http://itunes.apple.com/app/idxxxxxxxxx</a></p>\n<p><a href=\"demo\">https://blog.csdn.net/Creepiz/article/details/67638520</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://itunes.apple.com/app/idxxxxxxxxx\" target=\"_blank\" rel=\"external\">http://itunes.apple.com/app/idxxxxxxxxx</a></p>\n<p><a href=\"demo\">https://blog.csdn.net/Creepiz/article/details/67638520</a></p>\n"},{"layout":"post","title":"简单聊聊web响应式布局","date":"2018-04-25T01:53:45.000Z","_content":"\n前几天在'全球蛙'面试的时候面试官问到了兼容分辨率的知识\n\n个人认为回答的不是很好, 虽然拿到了offer(暗喜)\n{% asset_img hei.gif %}\n平时写js的比较多, 布局相对来说不是很多.倒是没有时间总结这些, 导致谈论起来还需要想想, 于是就有了这篇短文\n\n## 理解响应式设计\n\n响应式网页设计就是一个网站能够兼容多个终端-而不是为每个终端做一个特定的版本\n直白的说就是同一个网页在平板, 手机, pc上面显示的效果不同, 但是还同样美观, 让人看着舒服, 用户体验更好\n\n看起来是这样的:\n{% asset_img 2222.jpg %}\n{% asset_img 333.jpg %}\n{% asset_img 444.jpg %}\n\n## 响应式设计的步骤\n> 了解了什么是响应式，那么接下来我们就要说说响应式设计的步骤，有人这时候会说“博主，你傻啊，响应式设计的步骤不就是1.编写非响应式代码、2.加工成响应式代码、3.响应式细节处理、4.完成响应式开发吗？”博主菊花一震 原来高手在民间啊，微微一硬表示敬重，我去 ，说错了 是微微一笑，大家不要误会啊。\n\n因为都是文档流的渲染方式, 所以高度不需要管.\n\n1. 前端程序员当拿到设计图之后,切记不能框框框的就写,  首先要打量下相关元素的布局,\n\n2. 对布局有具体方案之后接下来就是写非响应式的部分, 按照常理应该是写pc的,这里就需要考虑使用html中`meta`标签来告诉浏览器一些具体设置, 比如ios手机上面可以放大缩小的功能, 如果不需要就把他禁止:\n```\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"HandheldFriendly\" content=\"true\">\n```\nuser-scalable属性能够解决ipad切换横屏之后触摸才能回到具体尺寸的问题。\n\n3. 使用`媒体查询`来设置不同浏览器页面大小的样式, 这样html结构不变得情况就可以达到页面不同的style \n\n假如浏览器客户端分辨率小于980px\n写法:\n```css\n@media screen and (max-width:980px){\n     #head { … }\n     #content { … }\n     #footer { … }\n} /*这里面的样式会覆盖掉之前所定义的样式。*/\n```\n\n4. 其他浏览器宽度规定\n```\n/**ipad**/\n@media only screen and (min-width:768px)and(max-width:1024px){}\n/**iphone**/\n @media only screen and (width:320px)and (width:768px){}\n```\n\n5. 上面只是块的宽度设置,  页面中很重要的字体大小也很关键.\n   - rem\n   - em\n很好理解,  rem相对html的字体大小设置, em相对父元素字体大小设置, 这样就脱离了px这个绝对单位. 这两个属性都是css3才有的\n```\nhtml{font-size:16px;}\n完成后，你可以定义响应式字体：\n@media (min-width:640px){body{font-size:1rem;}}\n@media (min-width:960px){body{font-size:1.2rem;}}\n@media (min-width:1200px){body{font-size:1.5rem;}}\n```\n\n\n\n## 图片万能处理方法\n\n想法来源于css3的flex布局,  俗称流式布局, 个人理解, 流及是液态的, 液态可以充满整个容器, 不管容器款到\n```css\n.container img{\n    max-width: 100%;\n    height: auto;\n}\n```\n上面代码可以看出图片会根据`.container`的容器的改变来达到填充满`container`这个容器, 高度自动, 可以保证图片比例不扭曲\n\n### 图片响应式属性\n`img`标签`srcset`: 是根据屏幕密度实现对应尺寸图片\n还有`img`标签中的`sizes`属性\n```\n<img src=\"mm-width-128px.jpg\" srcset=\"mm-width-128px.jpg 1x, mm-width-256px.jpg 2x\">\n```\n\n简写:`<img src=\"mm-width-128px.jpg\" srcset=\"mm-width-256px.jpg 2x\">`\n\n具体详情情况[张鑫旭大声写的日志](http://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/)\n\n背景图:\n```css\n#log a{\n    display:block;\n    width:100%;\n    height:40px;\n    text-indent:55rem;\n    background-img:url(logo.png);\n    background-repeat:no-repeat;\n    background-size:100% 100%;\n}\n```\nbackground-size是css3的新属性，用于设置背景图片的大小，有两个可选值，第一个值用于指定背景图的width,第2个值用于指定背景图的height,如果只指定一个值，那么另一个值默认为auto。\nbackground-size:cover; 等比扩展图片来填满元素\nbackground-size:contain; 等比缩小图片来适应元素的尺寸\n\n## 手机端布局(只考虑手机端布局, 那就用手指头想也是用flex简单好用)\n兼容问题没有的,  手机全部支持css3, 因为它出来的晚. 顺便吐槽下ie浏览器, 还好不是前6年的前端程序员\n{% asset_img 111.png %}\n","source":"_posts/简单聊聊web响应式布局.md","raw":"---\nlayout: post\ntitle: 简单聊聊web响应式布局\ndate: 2018-04-25 09:53:45\ntags:\n    - web前端\n    - css\ncategories: \"布局\"\n---\n\n前几天在'全球蛙'面试的时候面试官问到了兼容分辨率的知识\n\n个人认为回答的不是很好, 虽然拿到了offer(暗喜)\n{% asset_img hei.gif %}\n平时写js的比较多, 布局相对来说不是很多.倒是没有时间总结这些, 导致谈论起来还需要想想, 于是就有了这篇短文\n\n## 理解响应式设计\n\n响应式网页设计就是一个网站能够兼容多个终端-而不是为每个终端做一个特定的版本\n直白的说就是同一个网页在平板, 手机, pc上面显示的效果不同, 但是还同样美观, 让人看着舒服, 用户体验更好\n\n看起来是这样的:\n{% asset_img 2222.jpg %}\n{% asset_img 333.jpg %}\n{% asset_img 444.jpg %}\n\n## 响应式设计的步骤\n> 了解了什么是响应式，那么接下来我们就要说说响应式设计的步骤，有人这时候会说“博主，你傻啊，响应式设计的步骤不就是1.编写非响应式代码、2.加工成响应式代码、3.响应式细节处理、4.完成响应式开发吗？”博主菊花一震 原来高手在民间啊，微微一硬表示敬重，我去 ，说错了 是微微一笑，大家不要误会啊。\n\n因为都是文档流的渲染方式, 所以高度不需要管.\n\n1. 前端程序员当拿到设计图之后,切记不能框框框的就写,  首先要打量下相关元素的布局,\n\n2. 对布局有具体方案之后接下来就是写非响应式的部分, 按照常理应该是写pc的,这里就需要考虑使用html中`meta`标签来告诉浏览器一些具体设置, 比如ios手机上面可以放大缩小的功能, 如果不需要就把他禁止:\n```\n<meta name=\"viewport\" content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n<meta name=\"HandheldFriendly\" content=\"true\">\n```\nuser-scalable属性能够解决ipad切换横屏之后触摸才能回到具体尺寸的问题。\n\n3. 使用`媒体查询`来设置不同浏览器页面大小的样式, 这样html结构不变得情况就可以达到页面不同的style \n\n假如浏览器客户端分辨率小于980px\n写法:\n```css\n@media screen and (max-width:980px){\n     #head { … }\n     #content { … }\n     #footer { … }\n} /*这里面的样式会覆盖掉之前所定义的样式。*/\n```\n\n4. 其他浏览器宽度规定\n```\n/**ipad**/\n@media only screen and (min-width:768px)and(max-width:1024px){}\n/**iphone**/\n @media only screen and (width:320px)and (width:768px){}\n```\n\n5. 上面只是块的宽度设置,  页面中很重要的字体大小也很关键.\n   - rem\n   - em\n很好理解,  rem相对html的字体大小设置, em相对父元素字体大小设置, 这样就脱离了px这个绝对单位. 这两个属性都是css3才有的\n```\nhtml{font-size:16px;}\n完成后，你可以定义响应式字体：\n@media (min-width:640px){body{font-size:1rem;}}\n@media (min-width:960px){body{font-size:1.2rem;}}\n@media (min-width:1200px){body{font-size:1.5rem;}}\n```\n\n\n\n## 图片万能处理方法\n\n想法来源于css3的flex布局,  俗称流式布局, 个人理解, 流及是液态的, 液态可以充满整个容器, 不管容器款到\n```css\n.container img{\n    max-width: 100%;\n    height: auto;\n}\n```\n上面代码可以看出图片会根据`.container`的容器的改变来达到填充满`container`这个容器, 高度自动, 可以保证图片比例不扭曲\n\n### 图片响应式属性\n`img`标签`srcset`: 是根据屏幕密度实现对应尺寸图片\n还有`img`标签中的`sizes`属性\n```\n<img src=\"mm-width-128px.jpg\" srcset=\"mm-width-128px.jpg 1x, mm-width-256px.jpg 2x\">\n```\n\n简写:`<img src=\"mm-width-128px.jpg\" srcset=\"mm-width-256px.jpg 2x\">`\n\n具体详情情况[张鑫旭大声写的日志](http://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/)\n\n背景图:\n```css\n#log a{\n    display:block;\n    width:100%;\n    height:40px;\n    text-indent:55rem;\n    background-img:url(logo.png);\n    background-repeat:no-repeat;\n    background-size:100% 100%;\n}\n```\nbackground-size是css3的新属性，用于设置背景图片的大小，有两个可选值，第一个值用于指定背景图的width,第2个值用于指定背景图的height,如果只指定一个值，那么另一个值默认为auto。\nbackground-size:cover; 等比扩展图片来填满元素\nbackground-size:contain; 等比缩小图片来适应元素的尺寸\n\n## 手机端布局(只考虑手机端布局, 那就用手指头想也是用flex简单好用)\n兼容问题没有的,  手机全部支持css3, 因为它出来的晚. 顺便吐槽下ie浏览器, 还好不是前6年的前端程序员\n{% asset_img 111.png %}\n","slug":"简单聊聊web响应式布局","published":1,"updated":"2019-05-13T03:56:03.307Z","comments":1,"photos":[],"link":"","_id":"cjvluebfa0069a0dm2fuyelcw","content":"<p>前几天在’全球蛙’面试的时候面试官问到了兼容分辨率的知识</p>\n<p>个人认为回答的不是很好, 虽然拿到了offer(暗喜)<br><img src=\"/2018/04/25/简单聊聊web响应式布局/hei.gif\" alt=\"hei.gif\" title=\"\"><br>平时写js的比较多, 布局相对来说不是很多.倒是没有时间总结这些, 导致谈论起来还需要想想, 于是就有了这篇短文</p>\n<h2 id=\"理解响应式设计\"><a href=\"#理解响应式设计\" class=\"headerlink\" title=\"理解响应式设计\"></a>理解响应式设计</h2><p>响应式网页设计就是一个网站能够兼容多个终端-而不是为每个终端做一个特定的版本<br>直白的说就是同一个网页在平板, 手机, pc上面显示的效果不同, 但是还同样美观, 让人看着舒服, 用户体验更好</p>\n<p>看起来是这样的:<br><img src=\"/2018/04/25/简单聊聊web响应式布局/2222.jpg\" alt=\"2222.jpg\" title=\"\"><br><img src=\"/2018/04/25/简单聊聊web响应式布局/333.jpg\" alt=\"333.jpg\" title=\"\"><br><img src=\"/2018/04/25/简单聊聊web响应式布局/444.jpg\" alt=\"444.jpg\" title=\"\"></p>\n<h2 id=\"响应式设计的步骤\"><a href=\"#响应式设计的步骤\" class=\"headerlink\" title=\"响应式设计的步骤\"></a>响应式设计的步骤</h2><blockquote>\n<p>了解了什么是响应式，那么接下来我们就要说说响应式设计的步骤，有人这时候会说“博主，你傻啊，响应式设计的步骤不就是1.编写非响应式代码、2.加工成响应式代码、3.响应式细节处理、4.完成响应式开发吗？”博主菊花一震 原来高手在民间啊，微微一硬表示敬重，我去 ，说错了 是微微一笑，大家不要误会啊。</p>\n</blockquote>\n<p>因为都是文档流的渲染方式, 所以高度不需要管.</p>\n<ol>\n<li><p>前端程序员当拿到设计图之后,切记不能框框框的就写,  首先要打量下相关元素的布局,</p>\n</li>\n<li><p>对布局有具体方案之后接下来就是写非响应式的部分, 按照常理应该是写pc的,这里就需要考虑使用html中<code>meta</code>标签来告诉浏览器一些具体设置, 比如ios手机上面可以放大缩小的功能, 如果不需要就把他禁止:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</div><div class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>user-scalable属性能够解决ipad切换横屏之后触摸才能回到具体尺寸的问题。</p>\n<ol>\n<li>使用<code>媒体查询</code>来设置不同浏览器页面大小的样式, 这样html结构不变得情况就可以达到页面不同的style </li>\n</ol>\n<p>假如浏览器客户端分辨率小于980px<br>写法:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (max-width:980px)&#123;</div><div class=\"line\">     #head &#123; … &#125;</div><div class=\"line\">     #content &#123; … &#125;</div><div class=\"line\">     #footer &#123; … &#125;</div><div class=\"line\">&#125; /*这里面的样式会覆盖掉之前所定义的样式。*/</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>其他浏览器宽度规定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**ipad**/</div><div class=\"line\">@media only screen and (min-width:768px)and(max-width:1024px)&#123;&#125;</div><div class=\"line\">/**iphone**/</div><div class=\"line\"> @media only screen and (width:320px)and (width:768px)&#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>上面只是块的宽度设置,  页面中很重要的字体大小也很关键.</p>\n<ul>\n<li>rem</li>\n<li>em<br>很好理解,  rem相对html的字体大小设置, em相对父元素字体大小设置, 这样就脱离了px这个绝对单位. 这两个属性都是css3才有的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">html&#123;font-size:16px;&#125;</div><div class=\"line\">完成后，你可以定义响应式字体：</div><div class=\"line\">@media (min-width:640px)&#123;body&#123;font-size:1rem;&#125;&#125;</div><div class=\"line\">@media (min-width:960px)&#123;body&#123;font-size:1.2rem;&#125;&#125;</div><div class=\"line\">@media (min-width:1200px)&#123;body&#123;font-size:1.5rem;&#125;&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"图片万能处理方法\"><a href=\"#图片万能处理方法\" class=\"headerlink\" title=\"图片万能处理方法\"></a>图片万能处理方法</h2><p>想法来源于css3的flex布局,  俗称流式布局, 个人理解, 流及是液态的, 液态可以充满整个容器, 不管容器款到<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">img</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码可以看出图片会根据<code>.container</code>的容器的改变来达到填充满<code>container</code>这个容器, 高度自动, 可以保证图片比例不扭曲</p>\n<h3 id=\"图片响应式属性\"><a href=\"#图片响应式属性\" class=\"headerlink\" title=\"图片响应式属性\"></a>图片响应式属性</h3><p><code>img</code>标签<code>srcset</code>: 是根据屏幕密度实现对应尺寸图片<br>还有<code>img</code>标签中的<code>sizes</code>属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;mm-width-128px.jpg&quot; srcset=&quot;mm-width-128px.jpg 1x, mm-width-256px.jpg 2x&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>简写:<code>&lt;img src=&quot;mm-width-128px.jpg&quot; srcset=&quot;mm-width-256px.jpg 2x&quot;&gt;</code></p>\n<p>具体详情情况<a href=\"http://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/\" target=\"_blank\" rel=\"external\">张鑫旭大声写的日志</a></p>\n<p>背景图:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#log</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:block;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-indent</span>:<span class=\"number\">55rem</span>;</div><div class=\"line\">    <span class=\"attribute\">background-img</span>:<span class=\"built_in\">url</span>(logo.png);</div><div class=\"line\">    <span class=\"attribute\">background-repeat</span>:no-repeat;</div><div class=\"line\">    <span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>background-size是css3的新属性，用于设置背景图片的大小，有两个可选值，第一个值用于指定背景图的width,第2个值用于指定背景图的height,如果只指定一个值，那么另一个值默认为auto。<br>background-size:cover; 等比扩展图片来填满元素<br>background-size:contain; 等比缩小图片来适应元素的尺寸</p>\n<h2 id=\"手机端布局-只考虑手机端布局-那就用手指头想也是用flex简单好用\"><a href=\"#手机端布局-只考虑手机端布局-那就用手指头想也是用flex简单好用\" class=\"headerlink\" title=\"手机端布局(只考虑手机端布局, 那就用手指头想也是用flex简单好用)\"></a>手机端布局(只考虑手机端布局, 那就用手指头想也是用flex简单好用)</h2><p>兼容问题没有的,  手机全部支持css3, 因为它出来的晚. 顺便吐槽下ie浏览器, 还好不是前6年的前端程序员<br><img src=\"/2018/04/25/简单聊聊web响应式布局/111.png\" alt=\"111.png\" title=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>前几天在’全球蛙’面试的时候面试官问到了兼容分辨率的知识</p>\n<p>个人认为回答的不是很好, 虽然拿到了offer(暗喜)<br><img src=\"/2018/04/25/简单聊聊web响应式布局/hei.gif\" alt=\"hei.gif\" title=\"\"><br>平时写js的比较多, 布局相对来说不是很多.倒是没有时间总结这些, 导致谈论起来还需要想想, 于是就有了这篇短文</p>\n<h2 id=\"理解响应式设计\"><a href=\"#理解响应式设计\" class=\"headerlink\" title=\"理解响应式设计\"></a>理解响应式设计</h2><p>响应式网页设计就是一个网站能够兼容多个终端-而不是为每个终端做一个特定的版本<br>直白的说就是同一个网页在平板, 手机, pc上面显示的效果不同, 但是还同样美观, 让人看着舒服, 用户体验更好</p>\n<p>看起来是这样的:<br><img src=\"/2018/04/25/简单聊聊web响应式布局/2222.jpg\" alt=\"2222.jpg\" title=\"\"><br><img src=\"/2018/04/25/简单聊聊web响应式布局/333.jpg\" alt=\"333.jpg\" title=\"\"><br><img src=\"/2018/04/25/简单聊聊web响应式布局/444.jpg\" alt=\"444.jpg\" title=\"\"></p>\n<h2 id=\"响应式设计的步骤\"><a href=\"#响应式设计的步骤\" class=\"headerlink\" title=\"响应式设计的步骤\"></a>响应式设计的步骤</h2><blockquote>\n<p>了解了什么是响应式，那么接下来我们就要说说响应式设计的步骤，有人这时候会说“博主，你傻啊，响应式设计的步骤不就是1.编写非响应式代码、2.加工成响应式代码、3.响应式细节处理、4.完成响应式开发吗？”博主菊花一震 原来高手在民间啊，微微一硬表示敬重，我去 ，说错了 是微微一笑，大家不要误会啊。</p>\n</blockquote>\n<p>因为都是文档流的渲染方式, 所以高度不需要管.</p>\n<ol>\n<li><p>前端程序员当拿到设计图之后,切记不能框框框的就写,  首先要打量下相关元素的布局,</p>\n</li>\n<li><p>对布局有具体方案之后接下来就是写非响应式的部分, 按照常理应该是写pc的,这里就需要考虑使用html中<code>meta</code>标签来告诉浏览器一些具体设置, 比如ios手机上面可以放大缩小的功能, 如果不需要就把他禁止:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no&quot;&gt;</div><div class=\"line\">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt;</div><div class=\"line\">&lt;meta name=&quot;HandheldFriendly&quot; content=&quot;true&quot;&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>user-scalable属性能够解决ipad切换横屏之后触摸才能回到具体尺寸的问题。</p>\n<ol>\n<li>使用<code>媒体查询</code>来设置不同浏览器页面大小的样式, 这样html结构不变得情况就可以达到页面不同的style </li>\n</ol>\n<p>假如浏览器客户端分辨率小于980px<br>写法:<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (max-width:980px)&#123;</div><div class=\"line\">     #head &#123; … &#125;</div><div class=\"line\">     #content &#123; … &#125;</div><div class=\"line\">     #footer &#123; … &#125;</div><div class=\"line\">&#125; /*这里面的样式会覆盖掉之前所定义的样式。*/</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>其他浏览器宽度规定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**ipad**/</div><div class=\"line\">@media only screen and (min-width:768px)and(max-width:1024px)&#123;&#125;</div><div class=\"line\">/**iphone**/</div><div class=\"line\"> @media only screen and (width:320px)and (width:768px)&#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>上面只是块的宽度设置,  页面中很重要的字体大小也很关键.</p>\n<ul>\n<li>rem</li>\n<li>em<br>很好理解,  rem相对html的字体大小设置, em相对父元素字体大小设置, 这样就脱离了px这个绝对单位. 这两个属性都是css3才有的<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">html&#123;font-size:16px;&#125;</div><div class=\"line\">完成后，你可以定义响应式字体：</div><div class=\"line\">@media (min-width:640px)&#123;body&#123;font-size:1rem;&#125;&#125;</div><div class=\"line\">@media (min-width:960px)&#123;body&#123;font-size:1.2rem;&#125;&#125;</div><div class=\"line\">@media (min-width:1200px)&#123;body&#123;font-size:1.5rem;&#125;&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"图片万能处理方法\"><a href=\"#图片万能处理方法\" class=\"headerlink\" title=\"图片万能处理方法\"></a>图片万能处理方法</h2><p>想法来源于css3的flex布局,  俗称流式布局, 个人理解, 流及是液态的, 液态可以充满整个容器, 不管容器款到<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">img</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">max-width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: auto;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码可以看出图片会根据<code>.container</code>的容器的改变来达到填充满<code>container</code>这个容器, 高度自动, 可以保证图片比例不扭曲</p>\n<h3 id=\"图片响应式属性\"><a href=\"#图片响应式属性\" class=\"headerlink\" title=\"图片响应式属性\"></a>图片响应式属性</h3><p><code>img</code>标签<code>srcset</code>: 是根据屏幕密度实现对应尺寸图片<br>还有<code>img</code>标签中的<code>sizes</code>属性<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img src=&quot;mm-width-128px.jpg&quot; srcset=&quot;mm-width-128px.jpg 1x, mm-width-256px.jpg 2x&quot;&gt;</div></pre></td></tr></table></figure></p>\n<p>简写:<code>&lt;img src=&quot;mm-width-128px.jpg&quot; srcset=&quot;mm-width-256px.jpg 2x&quot;&gt;</code></p>\n<p>具体详情情况<a href=\"http://www.zhangxinxu.com/wordpress/2014/10/responsive-images-srcset-size-w-descriptor/\" target=\"_blank\" rel=\"external\">张鑫旭大声写的日志</a></p>\n<p>背景图:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-id\">#log</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">display</span>:block;</div><div class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>:<span class=\"number\">40px</span>;</div><div class=\"line\">    <span class=\"attribute\">text-indent</span>:<span class=\"number\">55rem</span>;</div><div class=\"line\">    <span class=\"attribute\">background-img</span>:<span class=\"built_in\">url</span>(logo.png);</div><div class=\"line\">    <span class=\"attribute\">background-repeat</span>:no-repeat;</div><div class=\"line\">    <span class=\"attribute\">background-size</span>:<span class=\"number\">100%</span> <span class=\"number\">100%</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>background-size是css3的新属性，用于设置背景图片的大小，有两个可选值，第一个值用于指定背景图的width,第2个值用于指定背景图的height,如果只指定一个值，那么另一个值默认为auto。<br>background-size:cover; 等比扩展图片来填满元素<br>background-size:contain; 等比缩小图片来适应元素的尺寸</p>\n<h2 id=\"手机端布局-只考虑手机端布局-那就用手指头想也是用flex简单好用\"><a href=\"#手机端布局-只考虑手机端布局-那就用手指头想也是用flex简单好用\" class=\"headerlink\" title=\"手机端布局(只考虑手机端布局, 那就用手指头想也是用flex简单好用)\"></a>手机端布局(只考虑手机端布局, 那就用手指头想也是用flex简单好用)</h2><p>兼容问题没有的,  手机全部支持css3, 因为它出来的晚. 顺便吐槽下ie浏览器, 还好不是前6年的前端程序员<br><img src=\"/2018/04/25/简单聊聊web响应式布局/111.png\" alt=\"111.png\" title=\"\"></p>\n"},{"title":"设计模式-js中的模板方法模式","date":"2017-08-07T03:59:35.000Z","_content":"\n## 模板方法模式:\n（Template Method），父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。\n\n模板方法模式是变成中经常用到的模式, 非常简单, AbstractClass叫抽象模板，其方法分为3类：\n\n1. 抽象方法: 父类中只声明但不加以实现, 而是定义好规范, 然后有他的子类去实现.\n2. 模板方法: 由抽象类声明并加以实现.一般来说, 模板方法调用抽象方法来完成的主要逻辑功能, 并且模板方法打多会定义为final类型, 指名主要的逻辑功能在子类中不能被重写.\n3. 钩子方法: 又抽象类声明并加以实现. 但是子类可以去扩展, 子类可以通过扩展钩子方法来影响模板方法的逻辑\n\n实现累用来实现细节. 抽象类中的模板方法正是通过实现类扩展的方法来王成业务逻辑\n\n### 模板方法模式优点\n1. 容易扩展. 一般来说，抽象类中的模版方法是不易反生改变的部分，而抽象方法是容易反生变化的部分，因此通过增加实现类一般可以很容易实现功能的扩展，符合开闭原则。\n2. 便于维护。对于模版方法模式来说，正是由于他们的主要逻辑相同，才使用了模版方法。\n\n### 使用场景\n在多个子类拥有相同的方法，并且这些方法逻辑相同时，可以考虑使用模版方法模式。在程序的主框架相同，细节不同的场合下，也比较适合使用这种模式。\n","source":"_posts/设计模式-js中的模板方法模式.md","raw":"---\ntitle: 设计模式-js中的模板方法模式\ndate: 2017-08-07 11:59:35\ntags:\n    - 模板模式\ncategories: \"设计模式\"\n---\n\n## 模板方法模式:\n（Template Method），父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。\n\n模板方法模式是变成中经常用到的模式, 非常简单, AbstractClass叫抽象模板，其方法分为3类：\n\n1. 抽象方法: 父类中只声明但不加以实现, 而是定义好规范, 然后有他的子类去实现.\n2. 模板方法: 由抽象类声明并加以实现.一般来说, 模板方法调用抽象方法来完成的主要逻辑功能, 并且模板方法打多会定义为final类型, 指名主要的逻辑功能在子类中不能被重写.\n3. 钩子方法: 又抽象类声明并加以实现. 但是子类可以去扩展, 子类可以通过扩展钩子方法来影响模板方法的逻辑\n\n实现累用来实现细节. 抽象类中的模板方法正是通过实现类扩展的方法来王成业务逻辑\n\n### 模板方法模式优点\n1. 容易扩展. 一般来说，抽象类中的模版方法是不易反生改变的部分，而抽象方法是容易反生变化的部分，因此通过增加实现类一般可以很容易实现功能的扩展，符合开闭原则。\n2. 便于维护。对于模版方法模式来说，正是由于他们的主要逻辑相同，才使用了模版方法。\n\n### 使用场景\n在多个子类拥有相同的方法，并且这些方法逻辑相同时，可以考虑使用模版方法模式。在程序的主框架相同，细节不同的场合下，也比较适合使用这种模式。\n","slug":"设计模式-js中的模板方法模式","published":1,"updated":"2019-05-13T03:56:03.313Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvluebfb006da0dmmdnrk5tg","content":"<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式:\"></a>模板方法模式:</h2><p>（Template Method），父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>模板方法模式是变成中经常用到的模式, 非常简单, AbstractClass叫抽象模板，其方法分为3类：</p>\n<ol>\n<li>抽象方法: 父类中只声明但不加以实现, 而是定义好规范, 然后有他的子类去实现.</li>\n<li>模板方法: 由抽象类声明并加以实现.一般来说, 模板方法调用抽象方法来完成的主要逻辑功能, 并且模板方法打多会定义为final类型, 指名主要的逻辑功能在子类中不能被重写.</li>\n<li>钩子方法: 又抽象类声明并加以实现. 但是子类可以去扩展, 子类可以通过扩展钩子方法来影响模板方法的逻辑</li>\n</ol>\n<p>实现累用来实现细节. 抽象类中的模板方法正是通过实现类扩展的方法来王成业务逻辑</p>\n<h3 id=\"模板方法模式优点\"><a href=\"#模板方法模式优点\" class=\"headerlink\" title=\"模板方法模式优点\"></a>模板方法模式优点</h3><ol>\n<li>容易扩展. 一般来说，抽象类中的模版方法是不易反生改变的部分，而抽象方法是容易反生变化的部分，因此通过增加实现类一般可以很容易实现功能的扩展，符合开闭原则。</li>\n<li>便于维护。对于模版方法模式来说，正是由于他们的主要逻辑相同，才使用了模版方法。</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在多个子类拥有相同的方法，并且这些方法逻辑相同时，可以考虑使用模版方法模式。在程序的主框架相同，细节不同的场合下，也比较适合使用这种模式。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"模板方法模式\"><a href=\"#模板方法模式\" class=\"headerlink\" title=\"模板方法模式:\"></a>模板方法模式:</h2><p>（Template Method），父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时可重新定义算法中某些实现步骤。</p>\n<p>模板方法模式是变成中经常用到的模式, 非常简单, AbstractClass叫抽象模板，其方法分为3类：</p>\n<ol>\n<li>抽象方法: 父类中只声明但不加以实现, 而是定义好规范, 然后有他的子类去实现.</li>\n<li>模板方法: 由抽象类声明并加以实现.一般来说, 模板方法调用抽象方法来完成的主要逻辑功能, 并且模板方法打多会定义为final类型, 指名主要的逻辑功能在子类中不能被重写.</li>\n<li>钩子方法: 又抽象类声明并加以实现. 但是子类可以去扩展, 子类可以通过扩展钩子方法来影响模板方法的逻辑</li>\n</ol>\n<p>实现累用来实现细节. 抽象类中的模板方法正是通过实现类扩展的方法来王成业务逻辑</p>\n<h3 id=\"模板方法模式优点\"><a href=\"#模板方法模式优点\" class=\"headerlink\" title=\"模板方法模式优点\"></a>模板方法模式优点</h3><ol>\n<li>容易扩展. 一般来说，抽象类中的模版方法是不易反生改变的部分，而抽象方法是容易反生变化的部分，因此通过增加实现类一般可以很容易实现功能的扩展，符合开闭原则。</li>\n<li>便于维护。对于模版方法模式来说，正是由于他们的主要逻辑相同，才使用了模版方法。</li>\n</ol>\n<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>在多个子类拥有相同的方法，并且这些方法逻辑相同时，可以考虑使用模版方法模式。在程序的主框架相同，细节不同的场合下，也比较适合使用这种模式。</p>\n"},{"layout":"post","title":"鸡尾酒排序","date":"2017-08-09T03:46:04.000Z","_content":"\n## 鸡尾酒排序(双向冒泡排序)\n\n鸡尾酒排序，也叫定向冒泡排序，是冒泡排序的一种改进。\n此算法与冒泡排序的不同处在于从低到高然后从高到低，而冒泡排序则仅从低到高去比较序列里的每个元素。他可以得到比冒泡排序稍微好一点的效能。\n\n```javascript\n// 栗子\nlet arr = [45, 19, 77, 81, 13, 28, 18, 19, 77]\n```\n具体实现:\n1. 从左到右, 找到最大的数81, 放到数组末尾\n2. 从右到左, 找到剩余数组中最小的数, 放到数组开头\n3. 从左到右, 在剩余数组中找到最大数, 放在剩余数组的末尾\n\n下面这个图, 更容易理解为什么叫鸡尾酒排序(**是不是很像一个鸡尾酒杯子**)\n\n{% asset_img 鸡尾酒.png 鸡尾酒排序图解 %}\n\n鸡尾酒排序的代码如下：\n```javascript\nlet shakerSort = array => {\n  let swap = (array, i, j) => { // 交换两个元素的值\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  };\n  let length = array.length,\n      left = 0, // 数组中第一个数的索引为0\n      right = length - 1,\n      lastSeappedLeft = left,\n      lastSwappedRight = right,\n      i,\n      j;\n\n  while( left < right ) { // 假如当前左边索引小于右边索引\n    // 从左到右\n    lastSwappedRight = 0;\n    for( i = left; i < right; i++) {\n      if(array[i] > array[i + 1]) {// 判断两个元素顺序是否正确\n        swap(array, i, i+1);\n        lastSwappedRight = i;\n      }\n    }\n    right = lastSwappedRight;\n    lastSeappedLeft = length -1; //\n    // 从右到左\n    for(j = right; left < j; j--) {\n      if(array[j - 1] > array[j]) {// 交换位置\n        swap(array, j - 1, j);\n        lastSeappedLeft = j;\n      }\n    }\n    left = lastSeappedLeft;\n  }\n}\n```\n\n图解:\n\n{% asset_img jiweijiu1.gif 鸡尾酒排序 %}\n\n","source":"_posts/鸡尾酒排序.md","raw":"---\nlayout: post\ntitle: 鸡尾酒排序\ndate: 2017-08-09 11:46:04\ntags:\n    - 排序\n    - 鸡尾酒排序\ncategories: \"算法\"\n---\n\n## 鸡尾酒排序(双向冒泡排序)\n\n鸡尾酒排序，也叫定向冒泡排序，是冒泡排序的一种改进。\n此算法与冒泡排序的不同处在于从低到高然后从高到低，而冒泡排序则仅从低到高去比较序列里的每个元素。他可以得到比冒泡排序稍微好一点的效能。\n\n```javascript\n// 栗子\nlet arr = [45, 19, 77, 81, 13, 28, 18, 19, 77]\n```\n具体实现:\n1. 从左到右, 找到最大的数81, 放到数组末尾\n2. 从右到左, 找到剩余数组中最小的数, 放到数组开头\n3. 从左到右, 在剩余数组中找到最大数, 放在剩余数组的末尾\n\n下面这个图, 更容易理解为什么叫鸡尾酒排序(**是不是很像一个鸡尾酒杯子**)\n\n{% asset_img 鸡尾酒.png 鸡尾酒排序图解 %}\n\n鸡尾酒排序的代码如下：\n```javascript\nlet shakerSort = array => {\n  let swap = (array, i, j) => { // 交换两个元素的值\n    let temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  };\n  let length = array.length,\n      left = 0, // 数组中第一个数的索引为0\n      right = length - 1,\n      lastSeappedLeft = left,\n      lastSwappedRight = right,\n      i,\n      j;\n\n  while( left < right ) { // 假如当前左边索引小于右边索引\n    // 从左到右\n    lastSwappedRight = 0;\n    for( i = left; i < right; i++) {\n      if(array[i] > array[i + 1]) {// 判断两个元素顺序是否正确\n        swap(array, i, i+1);\n        lastSwappedRight = i;\n      }\n    }\n    right = lastSwappedRight;\n    lastSeappedLeft = length -1; //\n    // 从右到左\n    for(j = right; left < j; j--) {\n      if(array[j - 1] > array[j]) {// 交换位置\n        swap(array, j - 1, j);\n        lastSeappedLeft = j;\n      }\n    }\n    left = lastSeappedLeft;\n  }\n}\n```\n\n图解:\n\n{% asset_img jiweijiu1.gif 鸡尾酒排序 %}\n\n","slug":"鸡尾酒排序","published":1,"updated":"2019-05-13T03:56:03.313Z","comments":1,"photos":[],"link":"","_id":"cjvluebfc006fa0dmt79zlqxl","content":"<h2 id=\"鸡尾酒排序-双向冒泡排序\"><a href=\"#鸡尾酒排序-双向冒泡排序\" class=\"headerlink\" title=\"鸡尾酒排序(双向冒泡排序)\"></a>鸡尾酒排序(双向冒泡排序)</h2><p>鸡尾酒排序，也叫定向冒泡排序，是冒泡排序的一种改进。<br>此算法与冒泡排序的不同处在于从低到高然后从高到低，而冒泡排序则仅从低到高去比较序列里的每个元素。他可以得到比冒泡排序稍微好一点的效能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 栗子</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">45</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>, <span class=\"number\">81</span>, <span class=\"number\">13</span>, <span class=\"number\">28</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>]</div></pre></td></tr></table></figure>\n<p>具体实现:</p>\n<ol>\n<li>从左到右, 找到最大的数81, 放到数组末尾</li>\n<li>从右到左, 找到剩余数组中最小的数, 放到数组开头</li>\n<li>从左到右, 在剩余数组中找到最大数, 放在剩余数组的末尾</li>\n</ol>\n<p>下面这个图, 更容易理解为什么叫鸡尾酒排序(<strong>是不是很像一个鸡尾酒杯子</strong>)</p>\n<img src=\"/2017/08/09/鸡尾酒排序/鸡尾酒.png\" alt=\"鸡尾酒排序图解\" title=\"鸡尾酒排序图解\">\n<p>鸡尾酒排序的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> shakerSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> swap = <span class=\"function\">(<span class=\"params\">array, i, j</span>) =&gt;</span> &#123; <span class=\"comment\">// 交换两个元素的值</span></div><div class=\"line\">    <span class=\"keyword\">let</span> temp = array[i];</div><div class=\"line\">    array[i] = array[j];</div><div class=\"line\">    array[j] = temp;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">let</span> length = array.length,</div><div class=\"line\">      left = <span class=\"number\">0</span>, <span class=\"comment\">// 数组中第一个数的索引为0</span></div><div class=\"line\">      right = length - <span class=\"number\">1</span>,</div><div class=\"line\">      lastSeappedLeft = left,</div><div class=\"line\">      lastSwappedRight = right,</div><div class=\"line\">      i,</div><div class=\"line\">      j;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span>( left &lt; right ) &#123; <span class=\"comment\">// 假如当前左边索引小于右边索引</span></div><div class=\"line\">    <span class=\"comment\">// 从左到右</span></div><div class=\"line\">    lastSwappedRight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( i = left; i &lt; right; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(array[i] &gt; array[i + <span class=\"number\">1</span>]) &#123;<span class=\"comment\">// 判断两个元素顺序是否正确</span></div><div class=\"line\">        swap(array, i, i+<span class=\"number\">1</span>);</div><div class=\"line\">        lastSwappedRight = i;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    right = lastSwappedRight;</div><div class=\"line\">    lastSeappedLeft = length <span class=\"number\">-1</span>; <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// 从右到左</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(j = right; left &lt; j; j--) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(array[j - <span class=\"number\">1</span>] &gt; array[j]) &#123;<span class=\"comment\">// 交换位置</span></div><div class=\"line\">        swap(array, j - <span class=\"number\">1</span>, j);</div><div class=\"line\">        lastSeappedLeft = j;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    left = lastSeappedLeft;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>图解:</p>\n<img src=\"/2017/08/09/鸡尾酒排序/jiweijiu1.gif\" alt=\"鸡尾酒排序\" title=\"鸡尾酒排序\">\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"鸡尾酒排序-双向冒泡排序\"><a href=\"#鸡尾酒排序-双向冒泡排序\" class=\"headerlink\" title=\"鸡尾酒排序(双向冒泡排序)\"></a>鸡尾酒排序(双向冒泡排序)</h2><p>鸡尾酒排序，也叫定向冒泡排序，是冒泡排序的一种改进。<br>此算法与冒泡排序的不同处在于从低到高然后从高到低，而冒泡排序则仅从低到高去比较序列里的每个元素。他可以得到比冒泡排序稍微好一点的效能。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 栗子</span></div><div class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">45</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>, <span class=\"number\">81</span>, <span class=\"number\">13</span>, <span class=\"number\">28</span>, <span class=\"number\">18</span>, <span class=\"number\">19</span>, <span class=\"number\">77</span>]</div></pre></td></tr></table></figure>\n<p>具体实现:</p>\n<ol>\n<li>从左到右, 找到最大的数81, 放到数组末尾</li>\n<li>从右到左, 找到剩余数组中最小的数, 放到数组开头</li>\n<li>从左到右, 在剩余数组中找到最大数, 放在剩余数组的末尾</li>\n</ol>\n<p>下面这个图, 更容易理解为什么叫鸡尾酒排序(<strong>是不是很像一个鸡尾酒杯子</strong>)</p>\n<img src=\"/2017/08/09/鸡尾酒排序/鸡尾酒.png\" alt=\"鸡尾酒排序图解\" title=\"鸡尾酒排序图解\">\n<p>鸡尾酒排序的代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> shakerSort = <span class=\"function\"><span class=\"params\">array</span> =&gt;</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> swap = <span class=\"function\">(<span class=\"params\">array, i, j</span>) =&gt;</span> &#123; <span class=\"comment\">// 交换两个元素的值</span></div><div class=\"line\">    <span class=\"keyword\">let</span> temp = array[i];</div><div class=\"line\">    array[i] = array[j];</div><div class=\"line\">    array[j] = temp;</div><div class=\"line\">  &#125;;</div><div class=\"line\">  <span class=\"keyword\">let</span> length = array.length,</div><div class=\"line\">      left = <span class=\"number\">0</span>, <span class=\"comment\">// 数组中第一个数的索引为0</span></div><div class=\"line\">      right = length - <span class=\"number\">1</span>,</div><div class=\"line\">      lastSeappedLeft = left,</div><div class=\"line\">      lastSwappedRight = right,</div><div class=\"line\">      i,</div><div class=\"line\">      j;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"keyword\">while</span>( left &lt; right ) &#123; <span class=\"comment\">// 假如当前左边索引小于右边索引</span></div><div class=\"line\">    <span class=\"comment\">// 从左到右</span></div><div class=\"line\">    lastSwappedRight = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">for</span>( i = left; i &lt; right; i++) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(array[i] &gt; array[i + <span class=\"number\">1</span>]) &#123;<span class=\"comment\">// 判断两个元素顺序是否正确</span></div><div class=\"line\">        swap(array, i, i+<span class=\"number\">1</span>);</div><div class=\"line\">        lastSwappedRight = i;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    right = lastSwappedRight;</div><div class=\"line\">    lastSeappedLeft = length <span class=\"number\">-1</span>; <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"comment\">// 从右到左</span></div><div class=\"line\">    <span class=\"keyword\">for</span>(j = right; left &lt; j; j--) &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span>(array[j - <span class=\"number\">1</span>] &gt; array[j]) &#123;<span class=\"comment\">// 交换位置</span></div><div class=\"line\">        swap(array, j - <span class=\"number\">1</span>, j);</div><div class=\"line\">        lastSeappedLeft = j;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    left = lastSeappedLeft;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>图解:</p>\n<img src=\"/2017/08/09/鸡尾酒排序/jiweijiu1.gif\" alt=\"鸡尾酒排序\" title=\"鸡尾酒排序\">\n"}],"PostAsset":[{"_id":"source/_posts/js使用jsonp方式解决跨域问题/5.png","slug":"5.png","post":"cjvluebdi002ga0dme1vtn4kw","modified":0,"renderable":0},{"_id":"source/_posts/react系列使用redux/redux-thing-image2.png","slug":"redux-thing-image2.png","post":"cjvluebef0049a0dm5g6n9h2m","modified":0,"renderable":0},{"_id":"source/_posts/使用js来体验装饰者模式/钢铁侠.jpg","slug":"钢铁侠.jpg","post":"cjvluebex005aa0dm0h510zc2","modified":0,"renderable":0},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","slug":"emacs-ycmd.png","post":"cjvluebcl000la0dmpdc7j4by","modified":0,"renderable":0},{"_id":"source/_posts/react系列使用redux/redux-thing-image1.png","slug":"redux-thing-image1.png","post":"cjvluebef0049a0dm5g6n9h2m","modified":0,"renderable":0},{"_id":"source/_posts/hexo添加自己域名/admin.png","slug":"admin.png","post":"cjvluebd5001ma0dm8jk5wtlx","modified":0,"renderable":0},{"_id":"source/_posts/httpie技巧/httpie.png","slug":"httpie.png","post":"cjvluebd8001ua0dmc2q2ftdl","modified":0,"renderable":0},{"_id":"source/_posts/javascript异步开源库/promise.png","slug":"promise.png","post":"cjvluebda001ya0dm1bre3fnw","modified":0,"renderable":0},{"_id":"source/_posts/js移触屏滑动事件/touchstart_demo.png","slug":"touchstart_demo.png","post":"cjvluebdl002na0dmidvgu29w","modified":0,"renderable":0},{"_id":"source/_posts/react中setState的使用/this.setState.png","slug":"this.setState.png","post":"cjvluebe3003pa0dm8h4n9z7a","modified":0,"renderable":0},{"_id":"source/_posts/react使用感受/react.png","slug":"react.png","post":"cjvluebe4003sa0dmevuuk9xn","modified":0,"renderable":0},{"_id":"source/_posts/vim转移emacs的艰辛路程/vim_key_help.png","slug":"vim_key_help.png","post":"cjvluebed0045a0dmma1p0kh4","modified":0,"renderable":0},{"_id":"source/_posts/二分查找/shaker.gif","slug":"shaker.gif","post":"cjvluebeg004ba0dm1yanbnfl","modified":0,"renderable":0},{"_id":"source/_posts/开发环境介绍以及博客搭建/hexo-info.png","slug":"hexo-info.png","post":"cjvluebf4005sa0dmli63nh93","modified":0,"renderable":0},{"_id":"source/_posts/是时候使用httpie来做你的api接口调试了/httpie.png","slug":"httpie.png","post":"cjvluebf5005za0dm2xzqbwdw","modified":0,"renderable":0},{"_id":"source/_posts/Immutable-js意义以及使用场所/immuable.gif","slug":"immuable.gif","post":"cjvluebbv0006a0dmt198urlw","modified":0,"renderable":0},{"_id":"source/_posts/Immutable-js意义以及使用场所/immutable2.jpg","slug":"immutable2.jpg","post":"cjvluebbv0006a0dmt198urlw","modified":0,"renderable":0},{"_id":"source/_posts/使用js来体验装饰者模式/理解装饰者模式.jpg","slug":"理解装饰者模式.jpg","post":"cjvluebex005aa0dm0h510zc2","modified":0,"renderable":0},{"_id":"source/_posts/冒泡排序/maopao.gif","slug":"maopao.gif","post":"cjvluebf0005ka0dm2lp0lwoq","modified":0,"renderable":0},{"_id":"source/_posts/冒泡排序/maopao2.gif","slug":"maopao2.gif","post":"cjvluebf0005ka0dm2lp0lwoq","modified":0,"renderable":0},{"_id":"source/_posts/鸡尾酒排序/jiweijiu1.gif","slug":"jiweijiu1.gif","post":"cjvluebfc006fa0dmt79zlqxl","modified":0,"renderable":0},{"_id":"source/_posts/鸡尾酒排序/鸡尾酒.png","slug":"鸡尾酒.png","post":"cjvluebfc006fa0dmt79zlqxl","modified":0,"renderable":0},{"_id":"source/_posts/linux常用命令/base01.png","slug":"base01.png","post":"cjvluebdj002ka0dmqp5p9ttd","modified":0,"renderable":0},{"_id":"source/_posts/linux常用命令/baseBg.png","slug":"baseBg.png","post":"cjvluebdj002ka0dmqp5p9ttd","modified":0,"renderable":0},{"_id":"source/_posts/linux常用命令/linux_role.png","slug":"linux_role.png","post":"cjvluebdj002ka0dmqp5p9ttd","modified":0,"renderable":0},{"_id":"source/_posts/react中高阶组件的使用以及技巧/hoc1.png","slug":"hoc1.png","post":"cjvluebe6003wa0dmg1223qyy","modified":0,"renderable":0},{"_id":"source/_posts/react中高阶组件的使用以及技巧/hoc2.png","slug":"hoc2.png","post":"cjvluebe6003wa0dmg1223qyy","modified":0,"renderable":0},{"_id":"source/_posts/react中高阶组件的使用以及技巧/react-hoc.png","slug":"react-hoc.png","post":"cjvluebe6003wa0dmg1223qyy","modified":0,"renderable":0},{"_id":"source/_posts/web前端mac下常用软件/dash-seach.png","slug":"dash-seach.png","post":"cjvluebem004la0dmo9m2q657","modified":0,"renderable":0},{"_id":"source/_posts/web前端mac下常用软件/emacs-example.png","slug":"emacs-example.png","post":"cjvluebem004la0dmo9m2q657","modified":0,"renderable":0},{"_id":"source/_posts/web前端mac下常用软件/mac-down.png","slug":"mac-down.png","post":"cjvluebem004la0dmo9m2q657","modified":0,"renderable":0},{"_id":"source/_posts/简单聊聊web响应式布局/111.png","slug":"111.png","post":"cjvluebfa0069a0dm2fuyelcw","modified":0,"renderable":0},{"_id":"source/_posts/简单聊聊web响应式布局/2222.jpg","slug":"2222.jpg","post":"cjvluebfa0069a0dm2fuyelcw","modified":0,"renderable":0},{"_id":"source/_posts/简单聊聊web响应式布局/333.jpg","slug":"333.jpg","post":"cjvluebfa0069a0dm2fuyelcw","modified":0,"renderable":0},{"_id":"source/_posts/简单聊聊web响应式布局/444.jpg","slug":"444.jpg","post":"cjvluebfa0069a0dm2fuyelcw","modified":0,"renderable":0},{"_id":"source/_posts/简单聊聊web响应式布局/hei.gif","slug":"hei.gif","post":"cjvluebfa0069a0dm2fuyelcw","modified":0,"renderable":0},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/1.png","slug":"1.png","post":"cjvluebdi002ga0dme1vtn4kw","modified":0,"renderable":0},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/2.png","slug":"2.png","post":"cjvluebdi002ga0dme1vtn4kw","modified":0,"renderable":0},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/3.png","slug":"3.png","post":"cjvluebdi002ga0dme1vtn4kw","modified":0,"renderable":0},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/4.png","slug":"4.png","post":"cjvluebdi002ga0dme1vtn4kw","modified":0,"renderable":0},{"_id":"source/_posts/js使用jsonp方式解决跨域问题/6.png","slug":"6.png","post":"cjvluebdi002ga0dme1vtn4kw","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjvluebbk0000a0dm5eimi5ry","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebch000ha0dmrjvupa2n"},{"post_id":"cjvluebbo0002a0dmuev8jlr5","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebco000na0dm76x6hnru"},{"post_id":"cjvluebcu000sa0dmw2ky0e7p","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebcx000za0dmrc6kphjh"},{"post_id":"cjvluebcl000la0dmpdc7j4by","category_id":"cjvluebcr000qa0dmksk00swp","_id":"cjvluebcy0014a0dmvy83kpfy"},{"post_id":"cjvluebco000oa0dmd7gu9338","category_id":"cjvluebcw000va0dmt624fprg","_id":"cjvluebd00017a0dm8mod4mno"},{"post_id":"cjvluebcx0011a0dmlvmdicy7","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebd2001ba0dmtv513nzf"},{"post_id":"cjvluebcw000xa0dm46pnc7cd","category_id":"cjvluebcy0013a0dm1pyoierf","_id":"cjvluebd3001ea0dmeojruc2e"},{"post_id":"cjvluebd2001ca0dmvjo14231","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebd5001la0dmaaa8z9ho"},{"post_id":"cjvluebcz0015a0dm9v298i7s","category_id":"cjvluebd1001aa0dmje23swxr","_id":"cjvluebd6001oa0dm3zlnfwgv"},{"post_id":"cjvluebd3001fa0dmkpgntx77","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebd8001sa0dm1frxjzdw"},{"post_id":"cjvluebd4001ia0dm3ieypxhh","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebd9001va0dmnui67m7l"},{"post_id":"cjvluebd00016a0dmwh9zeaa4","category_id":"cjvluebd4001ha0dmbjz08fiq","_id":"cjvluebda001xa0dmpimsg3rt"},{"post_id":"cjvluebd7001pa0dmczi95sns","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebdc0021a0dmjwod9ajr"},{"post_id":"cjvluebd5001ma0dm8jk5wtlx","category_id":"cjvluebd7001ra0dmaugipvrk","_id":"cjvluebdd0024a0dmozrhw77w"},{"post_id":"cjvluebd8001ua0dmc2q2ftdl","category_id":"cjvluebdb001za0dmwclggcov","_id":"cjvluebdg002ca0dm9xtx2bhq"},{"post_id":"cjvluebd9001wa0dmgsjhznxa","category_id":"cjvluebde0027a0dm5ho6klwe","_id":"cjvluebdj002ha0dm36pezq53"},{"post_id":"cjvluebda001ya0dm1bre3fnw","category_id":"cjvluebdg002da0dmz75jz3i9","_id":"cjvluebdl002ma0dmcah6ce9s"},{"post_id":"cjvluebdi002ga0dme1vtn4kw","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebdn002qa0dmsuyx8swo"},{"post_id":"cjvluebdc0023a0dmnhy08u7x","category_id":"cjvluebdj002ia0dm5fr1hhew","_id":"cjvluebdo002sa0dmbz5rh1j9"},{"post_id":"cjvluebdn002ra0dmb7m9nznc","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebdr002xa0dmfg9fy97c"},{"post_id":"cjvluebdd0026a0dmo5nol9s6","category_id":"cjvluebdm002oa0dm901u8wet","_id":"cjvluebdt0031a0dm1uo10l6j"},{"post_id":"cjvluebdf002ba0dm5aebb8p0","category_id":"cjvluebdq002ua0dmgc1zk131","_id":"cjvluebdv0035a0dmqhh54ky8"},{"post_id":"cjvluebdj002ka0dmqp5p9ttd","category_id":"cjvluebdt002za0dmdiuec2za","_id":"cjvluebdz003da0dmoafm5x9r"},{"post_id":"cjvluebdl002na0dmidvgu29w","category_id":"cjvluebdv0037a0dm6dgcznpb","_id":"cjvluebe1003ka0dmt7tfan0t"},{"post_id":"cjvluebdo002ta0dmlc97jeb3","category_id":"cjvluebdt002za0dmdiuec2za","_id":"cjvluebe4003ra0dms3jyx6b0"},{"post_id":"cjvluebdr002wa0dmjvekpebj","category_id":"cjvluebe2003ma0dm9ckdp0ua","_id":"cjvluebeb003za0dm1yuz8g22"},{"post_id":"cjvluebdz003fa0dmzg10dbqu","category_id":"cjvluebe5003ta0dm8xkuz1h7","_id":"cjvluebee0046a0dma5fjz69g"},{"post_id":"cjvluebec0043a0dmudyftgt9","category_id":"cjvluebe5003ta0dm8xkuz1h7","_id":"cjvluebeg004aa0dmqxa9q3rg"},{"post_id":"cjvluebe0003ia0dmcyubk46v","category_id":"cjvluebec0041a0dmentiproh","_id":"cjvluebek004da0dmhc6j94lr"},{"post_id":"cjvluebef0049a0dm5g6n9h2m","category_id":"cjvluebe5003ta0dm8xkuz1h7","_id":"cjvluebel004ia0dmhuby83ea"},{"post_id":"cjvluebeg004ba0dm1yanbnfl","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebem004ka0dmfhr4585d"},{"post_id":"cjvluebe4003sa0dmevuuk9xn","category_id":"cjvluebee0047a0dmfajpc42k","_id":"cjvluebeo004oa0dmeowbkoq9"},{"post_id":"cjvluebed0045a0dmma1p0kh4","category_id":"cjvluebel004fa0dm6v6x12qt","_id":"cjvluebeq004sa0dm4r47pvmz"},{"post_id":"cjvluebeo004pa0dm7zfkg4j5","category_id":"cjvluebdg002da0dmz75jz3i9","_id":"cjvluebes004ya0dmliemr71d"},{"post_id":"cjvluebek004ea0dmgbua9ijz","category_id":"cjvlueben004ma0dm1dkrfa1b","_id":"cjvluebes0052a0dmfdm4gmoa"},{"post_id":"cjvluebem004la0dmo9m2q657","category_id":"cjvlueber004va0dms5gp7pv0","_id":"cjvluebew0058a0dmbeeez45c"},{"post_id":"cjvluebep004ra0dm9kj94ow9","category_id":"cjvluebet0053a0dmxcclb4cf","_id":"cjvluebez005fa0dm4fziql2w"},{"post_id":"cjvluebex005aa0dm0h510zc2","category_id":"cjvluebdj002ia0dm5fr1hhew","_id":"cjvluebf0005ja0dm6v74hy5z"},{"post_id":"cjvluebes004za0dmxw84acsu","category_id":"cjvluebex005ba0dml3ihq3k5","_id":"cjvluebf2005ma0dmdr0llrh1"},{"post_id":"cjvluebf0005ka0dm2lp0lwoq","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebf3005ra0dm63q03w9e"},{"post_id":"cjvluebet0054a0dmmg7xwj9z","category_id":"cjvluebf0005ia0dm2yqp6lhh","_id":"cjvluebf4005va0dmi7m0zl8l"},{"post_id":"cjvluebev0056a0dmgw27k7v9","category_id":"cjvluebf2005oa0dmssvrsg1q","_id":"cjvluebf60061a0dmfwwbujib"},{"post_id":"cjvluebf4005sa0dmli63nh93","category_id":"cjvluebee0047a0dmfajpc42k","_id":"cjvluebf80066a0dmnjc7adp7"},{"post_id":"cjvluebey005da0dm7wpl9nke","category_id":"cjvluebf4005wa0dm3ezv216u","_id":"cjvluebfa0068a0dmpke643a2"},{"post_id":"cjvluebf60063a0dmh2zwoj1q","category_id":"cjvluebdj002ia0dm5fr1hhew","_id":"cjvluebfb006ca0dmy2lnrikn"},{"post_id":"cjvluebf80067a0dmytzh6ufw","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebfc006ea0dmva2dfw55"},{"post_id":"cjvluebez005ga0dm14hb37so","category_id":"cjvluebf70064a0dm4sd9bbed","_id":"cjvluebfe006ia0dmzr5e6zl3"},{"post_id":"cjvluebfb006da0dmmdnrk5tg","category_id":"cjvluebdj002ia0dm5fr1hhew","_id":"cjvluebfe006ja0dm1tkszz3q"},{"post_id":"cjvluebf1005la0dm3jcrz85e","category_id":"cjvluebfb006ba0dmqzzyazv1","_id":"cjvluebff006ma0dmilg69ktq"},{"post_id":"cjvluebfc006fa0dmt79zlqxl","category_id":"cjvluebbs0004a0dm6hpd2y2l","_id":"cjvluebff006oa0dm3rh2a1al"},{"post_id":"cjvluebf5005xa0dm30c5w1zi","category_id":"cjvluebfe006ha0dmeua0rkhh","_id":"cjvluebff006qa0dm154mg8d0"},{"post_id":"cjvluebfa0069a0dm2fuyelcw","category_id":"cjvluebff006la0dml1361z23","_id":"cjvluebfg006ua0dm7y17pf67"}],"PostTag":[{"post_id":"cjvluebbk0000a0dm5eimi5ry","tag_id":"cjvluebbu0005a0dmfq8xnex9","_id":"cjvluebcb000ea0dmalwmpttm"},{"post_id":"cjvluebbo0002a0dmuev8jlr5","tag_id":"cjvluebbu0005a0dmfq8xnex9","_id":"cjvluebcw000wa0dm9hgyjlty"},{"post_id":"cjvluebbo0002a0dmuev8jlr5","tag_id":"cjvluebci000ja0dmwivmvsr8","_id":"cjvluebcx000ya0dmbggw8co4"},{"post_id":"cjvluebbo0002a0dmuev8jlr5","tag_id":"cjvluebcp000pa0dm5cm1y1nv","_id":"cjvluebcy0012a0dm9nwuz3xy"},{"post_id":"cjvluebbv0006a0dmt198urlw","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebd4001ga0dmt05obt1v"},{"post_id":"cjvluebbv0006a0dmt198urlw","tag_id":"cjvluebcx0010a0dmxjnyxeq3","_id":"cjvluebd5001ja0dmpmthx5la"},{"post_id":"cjvluebbv0006a0dmt198urlw","tag_id":"cjvluebd00018a0dmn2fve955","_id":"cjvluebd6001na0dmn8c34rvk"},{"post_id":"cjvluebc3000aa0dm2vmmek5h","tag_id":"cjvluebd3001da0dmpc6y97n9","_id":"cjvluebd7001qa0dmr1tlzm9u"},{"post_id":"cjvluebcc000fa0dmtchfbn5z","tag_id":"cjvluebd5001ka0dmvm39gofw","_id":"cjvluebdc0022a0dm2agj2o7f"},{"post_id":"cjvluebcc000fa0dmtchfbn5z","tag_id":"cjvluebd8001ta0dm4pocsvyp","_id":"cjvluebdd0025a0dmcqn32jlj"},{"post_id":"cjvluebch000ia0dmopyti2b6","tag_id":"cjvluebdb0020a0dm6z5cspci","_id":"cjvluebdf002aa0dmj80emrz4"},{"post_id":"cjvluebcl000la0dmpdc7j4by","tag_id":"cjvluebde0028a0dmiokacu9l","_id":"cjvluebdu0033a0dmcjp41fbq"},{"post_id":"cjvluebcl000la0dmpdc7j4by","tag_id":"cjvluebdg002ea0dmpddvgs5u","_id":"cjvluebdv0036a0dmsi0qn9f0"},{"post_id":"cjvluebcl000la0dmpdc7j4by","tag_id":"cjvluebdj002ja0dmz7wkb4ie","_id":"cjvluebdy003aa0dmrb3jder9"},{"post_id":"cjvluebcl000la0dmpdc7j4by","tag_id":"cjvluebdm002pa0dm8n45rhsg","_id":"cjvluebdz003ca0dmbbzt8eow"},{"post_id":"cjvluebcl000la0dmpdc7j4by","tag_id":"cjvluebdq002va0dmoqklphv3","_id":"cjvluebe0003ha0dmfxj2w9gd"},{"post_id":"cjvluebco000oa0dmd7gu9338","tag_id":"cjvluebdt0030a0dm889fjdv5","_id":"cjvluebe1003ja0dmplxenzgj"},{"post_id":"cjvluebdv0034a0dm9gbi8s6d","tag_id":"cjvluebcx0010a0dmxjnyxeq3","_id":"cjvluebe3003oa0dmyqoxd9rq"},{"post_id":"cjvluebdw0039a0dmdwiqhnvz","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebe4003qa0dmce34cyyd"},{"post_id":"cjvluebdw0039a0dmdwiqhnvz","tag_id":"cjvluebd5001ka0dmvm39gofw","_id":"cjvluebe5003va0dmt48ifurt"},{"post_id":"cjvluebe0003ia0dmcyubk46v","tag_id":"cjvluebcx0010a0dmxjnyxeq3","_id":"cjvluebea003xa0dmf519yoee"},{"post_id":"cjvluebcr000ra0dmt332h0iv","tag_id":"cjvluebde0028a0dmiokacu9l","_id":"cjvluebec0040a0dm3jqwpg96"},{"post_id":"cjvluebcr000ra0dmt332h0iv","tag_id":"cjvluebdz003ea0dmaakc8z7c","_id":"cjvluebed0044a0dmcl9psgp3"},{"post_id":"cjvluebef0049a0dm5g6n9h2m","tag_id":"cjvluebd5001ka0dmvm39gofw","_id":"cjvluebek004ca0dm6bc13jsj"},{"post_id":"cjvluebef0049a0dm5g6n9h2m","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebel004ha0dmj4xl54z1"},{"post_id":"cjvluebcu000sa0dmw2ky0e7p","tag_id":"cjvluebe3003na0dmd0igl2g1","_id":"cjvluebep004qa0dm3otaxirg"},{"post_id":"cjvluebcu000sa0dmw2ky0e7p","tag_id":"cjvluebe5003ua0dmptez3p4z","_id":"cjvluebeq004ta0dmyo75s6ei"},{"post_id":"cjvluebcu000sa0dmw2ky0e7p","tag_id":"cjvluebec0042a0dm65uq8d14","_id":"cjvlueber004xa0dm13ingl5l"},{"post_id":"cjvluebcu000sa0dmw2ky0e7p","tag_id":"cjvluebee0048a0dmyjrk889s","_id":"cjvluebes0050a0dmag5u50l4"},{"post_id":"cjvluebcu000sa0dmw2ky0e7p","tag_id":"cjvluebel004ga0dmkbml5vp8","_id":"cjvluebet0055a0dmwl9v3o1b"},{"post_id":"cjvluebcv000ua0dmocpblmsl","tag_id":"cjvluebe5003ua0dmptez3p4z","_id":"cjvluebew0057a0dm5sqadp2o"},{"post_id":"cjvluebcw000xa0dm46pnc7cd","tag_id":"cjvluebbu0005a0dmfq8xnex9","_id":"cjvluebey005ca0dm28cc40ca"},{"post_id":"cjvluebcw000xa0dm46pnc7cd","tag_id":"cjvluebeq004ua0dmqwotm5s1","_id":"cjvluebez005ea0dmq57sfwtg"},{"post_id":"cjvluebcx0011a0dmlvmdicy7","tag_id":"cjvluebbu0005a0dmfq8xnex9","_id":"cjvluebf3005qa0dmzq7zf24l"},{"post_id":"cjvluebcx0011a0dmlvmdicy7","tag_id":"cjvluebes0051a0dm5njd5xwh","_id":"cjvluebf4005ta0dmgq7md2pd"},{"post_id":"cjvluebcx0011a0dmlvmdicy7","tag_id":"cjvluebew0059a0dm9h9swse7","_id":"cjvluebf5005ya0dm59jw0ydi"},{"post_id":"cjvluebcx0011a0dmlvmdicy7","tag_id":"cjvluebf0005ha0dmhgku2aeh","_id":"cjvluebf60060a0dmgphmdhoo"},{"post_id":"cjvluebcz0015a0dm9v298i7s","tag_id":"cjvluebf2005na0dmt1v2n0i1","_id":"cjvluebf80065a0dm1u1xbwea"},{"post_id":"cjvluebd00016a0dmwh9zeaa4","tag_id":"cjvluebf4005ua0dm1ydmbp0w","_id":"cjvluebff006na0dmuqkvi2pr"},{"post_id":"cjvluebd00016a0dmwh9zeaa4","tag_id":"cjvluebf60062a0dmhk27hq89","_id":"cjvluebff006pa0dmjnshg005"},{"post_id":"cjvluebd00016a0dmwh9zeaa4","tag_id":"cjvluebfb006aa0dmeyiev40v","_id":"cjvluebff006sa0dm1fcztg0c"},{"post_id":"cjvluebd00016a0dmwh9zeaa4","tag_id":"cjvluebfd006ga0dm380pvq4z","_id":"cjvluebfg006ta0dmwn749vzb"},{"post_id":"cjvluebd2001ca0dmvjo14231","tag_id":"cjvluebbu0005a0dmfq8xnex9","_id":"cjvluebfg006wa0dm17aevigr"},{"post_id":"cjvluebd2001ca0dmvjo14231","tag_id":"cjvluebfe006ka0dmg0vnve30","_id":"cjvluebfg006xa0dmji37nq2y"},{"post_id":"cjvluebd3001fa0dmkpgntx77","tag_id":"cjvluebbu0005a0dmfq8xnex9","_id":"cjvluebfh006za0dm88bo2u7i"},{"post_id":"cjvluebd3001fa0dmkpgntx77","tag_id":"cjvluebff006ra0dmw3793u1c","_id":"cjvluebfh0070a0dmwii1qdjc"},{"post_id":"cjvluebd4001ia0dm3ieypxhh","tag_id":"cjvluebfg006va0dmoob8fzpo","_id":"cjvluebfh0072a0dmyiyxc20v"},{"post_id":"cjvluebd4001ia0dm3ieypxhh","tag_id":"cjvluebfh006ya0dm1myvbhji","_id":"cjvluebfh0073a0dmhhab13vb"},{"post_id":"cjvluebd5001ma0dm8jk5wtlx","tag_id":"cjvluebfh0071a0dmyq9a4ix6","_id":"cjvluebfi0076a0dm72p6pgg7"},{"post_id":"cjvluebd5001ma0dm8jk5wtlx","tag_id":"cjvluebfh0074a0dmdncpx3mr","_id":"cjvluebfi0077a0dmu1y7k091"},{"post_id":"cjvluebd7001pa0dmczi95sns","tag_id":"cjvluebfi0075a0dm42rvftzp","_id":"cjvluebfi007aa0dmxf5cb8fr"},{"post_id":"cjvluebd7001pa0dmczi95sns","tag_id":"cjvluebfi0078a0dm4r0e49fc","_id":"cjvluebfi007ba0dm2zwjnmt8"},{"post_id":"cjvluebd8001ua0dmc2q2ftdl","tag_id":"cjvluebfi0079a0dmlh1jobpq","_id":"cjvluebfj007ea0dm52q67t7s"},{"post_id":"cjvluebd8001ua0dmc2q2ftdl","tag_id":"cjvluebfi007ca0dm1u2i3ehu","_id":"cjvluebfj007fa0dm3pm4tq3j"},{"post_id":"cjvluebd9001wa0dmgsjhznxa","tag_id":"cjvluebfj007da0dm9vaofld4","_id":"cjvluebfj007ia0dmg11f9rft"},{"post_id":"cjvluebd9001wa0dmgsjhznxa","tag_id":"cjvluebfj007ga0dm2ltid99f","_id":"cjvluebfj007ja0dm59b7vq2s"},{"post_id":"cjvluebda001ya0dm1bre3fnw","tag_id":"cjvluebfj007ha0dmf1ry52rv","_id":"cjvluebfk007ma0dm196kwpc9"},{"post_id":"cjvluebda001ya0dm1bre3fnw","tag_id":"cjvluebfj007ka0dm3acsy9zp","_id":"cjvluebfk007na0dm7l37p86r"},{"post_id":"cjvluebdc0023a0dmnhy08u7x","tag_id":"cjvluebfk007la0dmpmveasyd","_id":"cjvluebfk007qa0dmch1210v3"},{"post_id":"cjvluebdc0023a0dmnhy08u7x","tag_id":"cjvluebfk007oa0dmbxb3593d","_id":"cjvluebfk007ra0dmo6cs0jox"},{"post_id":"cjvluebdc0023a0dmnhy08u7x","tag_id":"cjvluebd3001da0dmpc6y97n9","_id":"cjvluebfl007ta0dm5iev65ih"},{"post_id":"cjvluebdd0026a0dmo5nol9s6","tag_id":"cjvluebfk007pa0dmfdyodiux","_id":"cjvluebfl007va0dm84h380aw"},{"post_id":"cjvluebdd0026a0dmo5nol9s6","tag_id":"cjvluebfk007sa0dmszr7dia9","_id":"cjvluebfl007wa0dm37fwmtqb"},{"post_id":"cjvluebde0029a0dmpluqx3j8","tag_id":"cjvluebe5003ua0dmptez3p4z","_id":"cjvluebfm007za0dm1qrjzpf5"},{"post_id":"cjvluebde0029a0dmpluqx3j8","tag_id":"cjvluebfl007xa0dmc8zi8o6s","_id":"cjvluebfm0080a0dmvd2tthwu"},{"post_id":"cjvluebdf002ba0dm5aebb8p0","tag_id":"cjvluebfm007ya0dmwjf8xjil","_id":"cjvluebfn0083a0dml08eijkd"},{"post_id":"cjvluebdf002ba0dm5aebb8p0","tag_id":"cjvluebe5003ua0dmptez3p4z","_id":"cjvluebfn0084a0dmftse8vvn"},{"post_id":"cjvluebdh002fa0dmen1hkr34","tag_id":"cjvluebfj007ka0dm3acsy9zp","_id":"cjvluebfo0088a0dmm7j4o697"},{"post_id":"cjvluebdh002fa0dmen1hkr34","tag_id":"cjvluebfn0085a0dmakw99lq2","_id":"cjvluebfo0089a0dm9crf5oix"},{"post_id":"cjvluebdh002fa0dmen1hkr34","tag_id":"cjvluebe5003ua0dmptez3p4z","_id":"cjvluebfo008ba0dmxm218lsq"},{"post_id":"cjvluebdi002ga0dme1vtn4kw","tag_id":"cjvluebfo0087a0dmvailnazn","_id":"cjvluebfp008da0dm7911jzs6"},{"post_id":"cjvluebdi002ga0dme1vtn4kw","tag_id":"cjvluebfo008aa0dmsfbc242o","_id":"cjvluebfp008ea0dmgqhbfr05"},{"post_id":"cjvluebdj002ka0dmqp5p9ttd","tag_id":"cjvluebfo008ca0dmnxk7unun","_id":"cjvluebfp008ha0dmc1ujdtou"},{"post_id":"cjvluebdj002ka0dmqp5p9ttd","tag_id":"cjvluebfp008fa0dmfoz0um6d","_id":"cjvluebfp008ia0dm52tv62i5"},{"post_id":"cjvluebdk002la0dmmhrsmq31","tag_id":"cjvluebfp008ga0dmekcrqgy2","_id":"cjvluebfp008ka0dmb50oqyrp"},{"post_id":"cjvluebdl002na0dmidvgu29w","tag_id":"cjvluebfp008ja0dm6594aesv","_id":"cjvluebfq008ma0dmm688zl9j"},{"post_id":"cjvluebdn002ra0dmb7m9nznc","tag_id":"cjvluebfp008ga0dmekcrqgy2","_id":"cjvluebfr008qa0dmjwrgwmtd"},{"post_id":"cjvluebdn002ra0dmb7m9nznc","tag_id":"cjvluebfq008na0dmt2rf1c3l","_id":"cjvluebfr008ra0dmum5gh220"},{"post_id":"cjvluebdn002ra0dmb7m9nznc","tag_id":"cjvluebfq008oa0dmaxj0h70l","_id":"cjvluebfr008ta0dmogwi27sp"},{"post_id":"cjvluebdo002ta0dmlc97jeb3","tag_id":"cjvluebfo008ca0dmnxk7unun","_id":"cjvluebfr008va0dm25c117ye"},{"post_id":"cjvluebdo002ta0dmlc97jeb3","tag_id":"cjvluebfp008fa0dmfoz0um6d","_id":"cjvluebfr008wa0dm6fxsoa82"},{"post_id":"cjvluebdr002wa0dmjvekpebj","tag_id":"cjvluebcx0010a0dmxjnyxeq3","_id":"cjvluebfs008ya0dmmq801e3c"},{"post_id":"cjvluebdr002wa0dmjvekpebj","tag_id":"cjvluebfr008ua0dmb7ajvj8s","_id":"cjvluebfs008za0dmyzqhd26s"},{"post_id":"cjvluebdz003fa0dmzg10dbqu","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebfs0091a0dmmmtv5ql5"},{"post_id":"cjvluebdz003fa0dmzg10dbqu","tag_id":"cjvluebfs008xa0dmh70euc5s","_id":"cjvluebfs0092a0dmbpyqd6tw"},{"post_id":"cjvluebe3003pa0dm8h4n9z7a","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebft0094a0dm3j9va9ek"},{"post_id":"cjvluebe3003pa0dm8h4n9z7a","tag_id":"cjvluebfs0090a0dm4av573p2","_id":"cjvluebft0095a0dmol92gfs2"},{"post_id":"cjvluebe6003wa0dmg1223qyy","tag_id":"cjvluebcx0010a0dmxjnyxeq3","_id":"cjvluebft0097a0dmrwgv4b3k"},{"post_id":"cjvluebe6003wa0dmg1223qyy","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebft0098a0dm1zi1pp0d"},{"post_id":"cjvluebe6003wa0dmg1223qyy","tag_id":"cjvluebfs0093a0dmloba2jxa","_id":"cjvluebft009aa0dmzpgggiiq"},{"post_id":"cjvluebeb003ya0dmgx26yiov","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebfu009ca0dmcux6pnp0"},{"post_id":"cjvluebeb003ya0dmgx26yiov","tag_id":"cjvluebft0096a0dm6te67bc6","_id":"cjvluebfv009da0dmbizx2fon"},{"post_id":"cjvluebeb003ya0dmgx26yiov","tag_id":"cjvluebft0099a0dmqe1gdcgu","_id":"cjvluebfv009fa0dmotky87jg"},{"post_id":"cjvluebec0043a0dmudyftgt9","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebfv009ga0dmwon08qhi"},{"post_id":"cjvluebec0043a0dmudyftgt9","tag_id":"cjvluebfu009ba0dm65hedmkg","_id":"cjvluebfv009ia0dmvhh8uc0j"},{"post_id":"cjvluebed0045a0dmma1p0kh4","tag_id":"cjvluebfv009ea0dmhmbcvo0f","_id":"cjvluebfv009ja0dmd8ycoq2m"},{"post_id":"cjvluebed0045a0dmma1p0kh4","tag_id":"cjvluebde0028a0dmiokacu9l","_id":"cjvluebfv009la0dmjpy3zjmq"},{"post_id":"cjvluebeg004ba0dm1yanbnfl","tag_id":"cjvluebfv009ha0dmiajrc6ho","_id":"cjvluebfw009na0dm6fq3hmkb"},{"post_id":"cjvluebeg004ba0dm1yanbnfl","tag_id":"cjvluebfv009ka0dmfe6yitym","_id":"cjvluebfw009oa0dmdba7b7ju"},{"post_id":"cjvluebek004ea0dmgbua9ijz","tag_id":"cjvluebd5001ka0dmvm39gofw","_id":"cjvluebfx009qa0dmzycj315g"},{"post_id":"cjvluebek004ea0dmgbua9ijz","tag_id":"cjvluebcv000ta0dm8oj7bbdx","_id":"cjvluebfx009ra0dmh3pz2p63"},{"post_id":"cjvluebek004ea0dmgbua9ijz","tag_id":"cjvluebfw009ma0dmhetbt6m5","_id":"cjvluebfx009ta0dmkyvjptgc"},{"post_id":"cjvluebem004la0dmo9m2q657","tag_id":"cjvluebfw009pa0dmbgr91b6u","_id":"cjvluebfx009ua0dmeqm40sqo"},{"post_id":"cjvluebeo004pa0dm7zfkg4j5","tag_id":"cjvluebfx009sa0dm0e65j7sp","_id":"cjvluebfz009xa0dm8kkfqkfy"},{"post_id":"cjvluebeo004pa0dm7zfkg4j5","tag_id":"cjvluebfj007ka0dm3acsy9zp","_id":"cjvluebfz009ya0dm068tpdcv"},{"post_id":"cjvluebep004ra0dm9kj94ow9","tag_id":"cjvluebfy009wa0dmagvvc6so","_id":"cjvluebfz00a1a0dm30m3b528"},{"post_id":"cjvluebep004ra0dm9kj94ow9","tag_id":"cjvluebfz009za0dmwjeui70l","_id":"cjvluebfz00a2a0dmdnhl9l9x"},{"post_id":"cjvluebes004za0dmxw84acsu","tag_id":"cjvluebfz00a0a0dmoemvctlv","_id":"cjvluebg100a6a0dmjyz1282i"},{"post_id":"cjvluebes004za0dmxw84acsu","tag_id":"cjvluebfw009pa0dmbgr91b6u","_id":"cjvluebg100a7a0dmr9fg2mrd"},{"post_id":"cjvluebes004za0dmxw84acsu","tag_id":"cjvluebfo008ca0dmnxk7unun","_id":"cjvluebg100a9a0dmtqecqaue"},{"post_id":"cjvluebet0054a0dmmg7xwj9z","tag_id":"cjvluebg000a5a0dm3ceio9dg","_id":"cjvluebg100aba0dmrjpug456"},{"post_id":"cjvluebet0054a0dmmg7xwj9z","tag_id":"cjvluebg100a8a0dmiqpyneu3","_id":"cjvluebg100aca0dmam8i40mu"},{"post_id":"cjvluebev0056a0dmgw27k7v9","tag_id":"cjvluebg100aaa0dml7vuqex2","_id":"cjvluebg200afa0dmo0aeunhb"},{"post_id":"cjvluebev0056a0dmgw27k7v9","tag_id":"cjvluebd3001da0dmpc6y97n9","_id":"cjvluebg200aga0dmet9d01aa"},{"post_id":"cjvluebev0056a0dmgw27k7v9","tag_id":"cjvluebg100ada0dml06a7f0y","_id":"cjvluebg300aia0dm9l50rvb2"},{"post_id":"cjvluebex005aa0dm0h510zc2","tag_id":"cjvluebfk007la0dmpmveasyd","_id":"cjvluebg300ala0dmvog7xpov"},{"post_id":"cjvluebex005aa0dm0h510zc2","tag_id":"cjvluebfx009sa0dm0e65j7sp","_id":"cjvluebg300ama0dmnphk6kgm"},{"post_id":"cjvluebex005aa0dm0h510zc2","tag_id":"cjvluebg300aja0dmk5w48cgc","_id":"cjvluebg400aoa0dm3t4mf9lw"},{"post_id":"cjvluebey005da0dm7wpl9nke","tag_id":"cjvluebg300aka0dm7vgexxoc","_id":"cjvluebg400aqa0dme78x20gp"},{"post_id":"cjvluebey005da0dm7wpl9nke","tag_id":"cjvluebg300ana0dmp2u3vobi","_id":"cjvluebg400ara0dmg8buieq7"},{"post_id":"cjvluebez005ga0dm14hb37so","tag_id":"cjvluebg400apa0dmdi172yl6","_id":"cjvluebg500aua0dmw7sajssp"},{"post_id":"cjvluebez005ga0dm14hb37so","tag_id":"cjvluebfp008ga0dmekcrqgy2","_id":"cjvluebg500ava0dma4wvos2c"},{"post_id":"cjvluebf0005ka0dm2lp0lwoq","tag_id":"cjvluebfv009ka0dmfe6yitym","_id":"cjvluebg600aya0dm4k2xuwi7"},{"post_id":"cjvluebf0005ka0dm2lp0lwoq","tag_id":"cjvluebg500awa0dm9jgs8yuk","_id":"cjvluebg600aza0dmff1qyajg"},{"post_id":"cjvluebf1005la0dm3jcrz85e","tag_id":"cjvluebg500axa0dmdoet2hw0","_id":"cjvluebg800b2a0dm2vqo1mai"},{"post_id":"cjvluebf1005la0dm3jcrz85e","tag_id":"cjvluebg500awa0dm9jgs8yuk","_id":"cjvluebg800b3a0dm670ud9ot"},{"post_id":"cjvluebf4005sa0dmli63nh93","tag_id":"cjvluebg700b1a0dmsk3moatz","_id":"cjvluebg900b6a0dmiicwtbg4"},{"post_id":"cjvluebf4005sa0dmli63nh93","tag_id":"cjvluebfh0071a0dmyq9a4ix6","_id":"cjvluebg900b7a0dmb16dt4pi"},{"post_id":"cjvluebf5005xa0dm30c5w1zi","tag_id":"cjvluebfx009sa0dm0e65j7sp","_id":"cjvluebga00baa0dmg7zm2093"},{"post_id":"cjvluebf5005xa0dm30c5w1zi","tag_id":"cjvluebg900b8a0dmdlccsmoc","_id":"cjvluebga00bba0dmz2tuy402"},{"post_id":"cjvluebf5005za0dm2xzqbwdw","tag_id":"cjvluebga00b9a0dmo6zue91h","_id":"cjvluebgc00bfa0dmgby9ufon"},{"post_id":"cjvluebf5005za0dm2xzqbwdw","tag_id":"cjvluebga00bca0dmddrkb9o8","_id":"cjvluebgc00bga0dmdoqrxd74"},{"post_id":"cjvluebf5005za0dm2xzqbwdw","tag_id":"cjvluebga00bda0dmizoam93w","_id":"cjvluebgc00bia0dmle4gztsg"},{"post_id":"cjvluebf60063a0dmh2zwoj1q","tag_id":"cjvluebfk007la0dmpmveasyd","_id":"cjvluebgc00bja0dmx4mi19fc"},{"post_id":"cjvluebf80067a0dmytzh6ufw","tag_id":"cjvluebgc00bha0dmvxr9tx94","_id":"cjvluebgd00bla0dmrbr5z1pk"},{"post_id":"cjvluebfa0069a0dm2fuyelcw","tag_id":"cjvluebgc00bka0dmum4g57d0","_id":"cjvluebgd00boa0dmwbbecob2"},{"post_id":"cjvluebfa0069a0dm2fuyelcw","tag_id":"cjvluebgd00bma0dmy2cxpo9i","_id":"cjvluebgd00bpa0dmp9uzjoos"},{"post_id":"cjvluebfb006da0dmmdnrk5tg","tag_id":"cjvluebgd00bna0dmmtovu4fv","_id":"cjvluebge00bra0dmf1b09s6l"},{"post_id":"cjvluebfc006fa0dmt79zlqxl","tag_id":"cjvluebg500awa0dm9jgs8yuk","_id":"cjvluebgf00bta0dmguyrnhe0"},{"post_id":"cjvluebfc006fa0dmt79zlqxl","tag_id":"cjvluebge00bsa0dmjh7c9jti","_id":"cjvluebgf00bua0dmsqeh2zbg"}],"Tag":[{"name":"golang","_id":"cjvluebbu0005a0dmfq8xnex9"},{"name":"defer","_id":"cjvluebci000ja0dmwivmvsr8"},{"name":"golang错误处理","_id":"cjvluebcp000pa0dm5cm1y1nv"},{"name":"react","_id":"cjvluebcv000ta0dm8oj7bbdx"},{"name":"react-native","_id":"cjvluebcx0010a0dmxjnyxeq3"},{"name":"immutable","_id":"cjvluebd00018a0dmn2fve955"},{"name":"js","_id":"cjvluebd3001da0dmpc6y97n9"},{"name":"redux","_id":"cjvluebd5001ka0dmvm39gofw"},{"name":"react调试","_id":"cjvluebd8001ta0dm4pocsvyp"},{"name":"terminal color","_id":"cjvluebdb0020a0dm6z5cspci"},{"name":"emacs","_id":"cjvluebde0028a0dmiokacu9l"},{"name":"emacs自动补全","_id":"cjvluebdg002ea0dmpddvgs5u"},{"name":"ycmd","_id":"cjvluebdj002ja0dmz7wkb4ie"},{"name":"company-mode","_id":"cjvluebdm002pa0dm8n45rhsg"},{"name":"hippie","_id":"cjvluebdq002va0dmoqklphv3"},{"name":"Nginx","_id":"cjvluebdt0030a0dm889fjdv5"},{"name":"emacs API","_id":"cjvluebdz003ea0dmaakc8z7c"},{"name":"yield","_id":"cjvluebe3003na0dmd0igl2g1"},{"name":"es6","_id":"cjvluebe5003ua0dmptez3p4z"},{"name":"迭代器","_id":"cjvluebec0042a0dm65uq8d14"},{"name":"可迭代对象","_id":"cjvluebee0048a0dmyjrk889s"},{"name":"生成器","_id":"cjvluebel004ga0dmkbml5vp8"},{"name":"interface{}","_id":"cjvluebeq004ua0dmqwotm5s1"},{"name":"sync","_id":"cjvluebes0051a0dm5njd5xwh"},{"name":"linux内核中自带锁","_id":"cjvluebew0059a0dm9h9swse7"},{"name":"golang异步锁","_id":"cjvluebf0005ha0dmhgku2aeh"},{"name":"git","_id":"cjvluebf2005na0dmt1v2n0i1"},{"name":"chan","_id":"cjvluebf4005ua0dm1ydmbp0w"},{"name":"golang通道","_id":"cjvluebf60062a0dmhk27hq89"},{"name":"panic","_id":"cjvluebfb006aa0dmeyiev40v"},{"name":"recover","_id":"cjvluebfd006ga0dm380pvq4z"},{"name":"json","_id":"cjvluebfe006ka0dmg0vnve30"},{"name":"go基础","_id":"cjvluebff006ra0dmw3793u1c"},{"name":"go","_id":"cjvluebfg006va0dmoob8fzpo"},{"name":"interface","_id":"cjvluebfh006ya0dm1myvbhji"},{"name":"hexo","_id":"cjvluebfh0071a0dmyq9a4ix6"},{"name":"next主题","_id":"cjvluebfh0074a0dmdncpx3mr"},{"name":"Date","_id":"cjvluebfi0075a0dm42rvftzp"},{"name":"时间转换","_id":"cjvluebfi0078a0dm4r0e49fc"},{"name":"httpie","_id":"cjvluebfi0079a0dmlh1jobpq"},{"name":"接口测试json","_id":"cjvluebfi007ca0dm1u2i3ehu"},{"name":"RegExp","_id":"cjvluebfj007da0dm9vaofld4"},{"name":"js正则","_id":"cjvluebfj007ga0dm2ltid99f"},{"name":"js异步","_id":"cjvluebfj007ha0dmf1ry52rv"},{"name":"javascript","_id":"cjvluebfj007ka0dm3acsy9zp"},{"name":"设计模式","_id":"cjvluebfk007la0dmpmveasyd"},{"name":"工厂模式","_id":"cjvluebfk007oa0dmbxb3593d"},{"name":"正则","_id":"cjvluebfk007pa0dmfdyodiux"},{"name":"模拟栈","_id":"cjvluebfk007sa0dmszr7dia9"},{"name":"mixin","_id":"cjvluebfl007xa0dmc8zi8o6s"},{"name":"yeild","_id":"cjvluebfm007ya0dmwjf8xjil"},{"name":"观察者模式","_id":"cjvluebfn0085a0dmakw99lq2"},{"name":"jsonp","_id":"cjvluebfo0087a0dmvailnazn"},{"name":"跨域","_id":"cjvluebfo008aa0dmsfbc242o"},{"name":"linux","_id":"cjvluebfo008ca0dmnxk7unun"},{"name":"linux常规","_id":"cjvluebfp008fa0dmfoz0um6d"},{"name":"node","_id":"cjvluebfp008ga0dmekcrqgy2"},{"name":"h5","_id":"cjvluebfp008ja0dm6594aesv"},{"name":"压缩图片","_id":"cjvluebfq008na0dmt2rf1c3l"},{"name":"smushit","_id":"cjvluebfq008oa0dmaxj0h70l"},{"name":"RN-android","_id":"cjvluebfr008ua0dmb7ajvj8s"},{"name":"react16.3","_id":"cjvluebfs008xa0dmh70euc5s"},{"name":"setState","_id":"cjvluebfs0090a0dm4av573p2"},{"name":"高阶组件","_id":"cjvluebfs0093a0dmloba2jxa"},{"name":"seo","_id":"cjvluebft0096a0dm6te67bc6"},{"name":"react服务器渲染","_id":"cjvluebft0099a0dmqe1gdcgu"},{"name":"react 服务器渲染","_id":"cjvluebfu009ba0dm65hedmkg"},{"name":"vim","_id":"cjvluebfv009ea0dmhmbcvo0f"},{"name":"二分查找","_id":"cjvluebfv009ha0dmiajrc6ho"},{"name":"冒泡排序","_id":"cjvluebfv009ka0dmfe6yitym"},{"name":"react-nativem","_id":"cjvluebfw009ma0dmhetbt6m5"},{"name":"mac","_id":"cjvluebfw009pa0dmbgr91b6u"},{"name":"es7","_id":"cjvluebfx009sa0dm0e65j7sp"},{"name":"js压缩","_id":"cjvluebfy009wa0dmagvvc6so"},{"name":"uglify-js","_id":"cjvluebfz009za0dmwjeui70l"},{"name":"autojump","_id":"cjvluebfz00a0a0dmoemvctlv"},{"name":"jsdoc","_id":"cjvluebg000a5a0dm3ceio9dg"},{"name":"js文档","_id":"cjvluebg100a8a0dmiqpyneu3"},{"name":"jest","_id":"cjvluebg100aaa0dml7vuqex2"},{"name":"js 测试","_id":"cjvluebg100ada0dml06a7f0y"},{"name":"decorator","_id":"cjvluebg300aja0dmk5w48cgc"},{"name":"实体店的电商","_id":"cjvluebg300aka0dm7vgexxoc"},{"name":"新零售","_id":"cjvluebg300ana0dmp2u3vobi"},{"name":"pm2","_id":"cjvluebg400apa0dmdi172yl6"},{"name":"排序","_id":"cjvluebg500awa0dm9jgs8yuk"},{"name":"奇偶数排序","_id":"cjvluebg500axa0dmdoet2hw0"},{"name":"blog","_id":"cjvluebg700b1a0dmsk3moatz"},{"name":"装饰者","_id":"cjvluebg900b8a0dmdlccsmoc"},{"name":"api","_id":"cjvluebga00b9a0dmo6zue91h"},{"name":"http","_id":"cjvluebga00bca0dmddrkb9o8"},{"name":"python","_id":"cjvluebga00bda0dmizoam93w"},{"name":"扫码下载APP","_id":"cjvluebgc00bha0dmvxr9tx94"},{"name":"web前端","_id":"cjvluebgc00bka0dmum4g57d0"},{"name":"css","_id":"cjvluebgd00bma0dmy2cxpo9i"},{"name":"模板模式","_id":"cjvluebgd00bna0dmmtovu4fv"},{"name":"鸡尾酒排序","_id":"cjvluebge00bsa0dmjh7c9jti"}]}}