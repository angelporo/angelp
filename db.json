{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/angelp_avatar.jpeg","path":"images/angelp_avatar.jpeg","modified":1,"renderable":0},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","path":"fonts/PoiretOne-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","path":"fonts/PoiretOne-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","path":"fonts/PoiretOne-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","path":"fonts/calligraffitti-regular-webfont.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","path":"fonts/calligraffitti-regular-webfont.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.eot","path":"fonts/fontello.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","path":"fonts/calligraffitti-regular-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.svg","path":"fonts/fontello.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.ttf","path":"fonts/fontello.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff","path":"fonts/fontello.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/app.js","path":"js/app.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/fontello.woff2","path":"fonts/fontello.woff2","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/bundle.js","path":"js/bundle.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/util.js","path":"js/util.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/scroll-spy.js","path":"js/scroll-spy.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/fastclick.js","path":"js/fastclick.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/js/zenscroll.js","path":"js/zenscroll.js","modified":1,"renderable":1},{"_id":"themes/fexo/source/css/styles.css","path":"css/styles.css","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/styles.scss","path":"sass/styles.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","path":"fonts/calligraffitti-regular-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/css/styles.css.map","path":"css/styles.css.map","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","path":"fonts/calligraffitti-regular-webfont.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","path":"fonts/PoiretOne-Regular.svg","modified":1,"renderable":1},{"_id":"themes/fexo/source/sass/component/prev-net.scss","path":"sass/component/prev-net.scss","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","path":"fonts/Lobster-Regular.eot","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","path":"fonts/Lobster-Regular.ttf","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","path":"fonts/Lobster-Regular.woff","modified":1,"renderable":1},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","path":"fonts/Lobster-Regular.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"6b19763dbdce2ff4301c7a7b1d111fbc2af3ac5a","modified":1501224925000},{"_id":"source/CNAME","hash":"72057f81e19837a8e48bd5899d3dcde9b44d6609","modified":1497230883000},{"_id":"themes/fexo/LICENSE","hash":"db4cb5aef6072a96721b5428fdd999647c049d55","modified":1501122947000},{"_id":"themes/fexo/.DS_Store","hash":"9457f542cf2c3f2a50b9ecd64858fc6f50b0d0c4","modified":1501123120000},{"_id":"themes/fexo/.csscomb.json","hash":"0bff596879c2556634b9a92abe5b1606dc77fd1c","modified":1501122947000},{"_id":"themes/fexo/.gitignore","hash":"32223fbe296f8e3026c689bad8f3dea9d0fcbb43","modified":1501122947000},{"_id":"themes/fexo/_config.yml","hash":"21c2c40456599bd6339d6c32fc1f25a03ba76fc3","modified":1501310047000},{"_id":"themes/fexo/README.md","hash":"35cd346c229e17ed83609ee94b5d6493c4ab9982","modified":1501122947000},{"_id":"themes/fexo/package.json","hash":"351b5b21f5ea8851103ee1891248be43f3c27027","modified":1501122947000},{"_id":"themes/fexo/gulpfile.js","hash":"5995b9c4e8e18d1670ad30b2881d49fa17e56415","modified":1501122947000},{"_id":"source/_posts/JSON数据规范.md","hash":"ca27c4e96f0c9bab5d057c802d944c455748a73e","modified":1498726873000},{"_id":"source/_posts/Immutable-js意义以及使用场所.md","hash":"bde35cfdea4cb5348dc25c649f539ace3b184ca6","modified":1501214472000},{"_id":"source/_posts/.DS_Store","hash":"809a441cf3044cb1ba0d7b0bb3929c2426728a98","modified":1501224925000},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑.md","hash":"d7ca867e482afbebc0aed915154911b700bc08aa","modified":1497949195000},{"_id":"source/_posts/emacs使用笔记.md","hash":"9466dc185f60013e4add7a367213e623011ce1bb","modified":1501039653000},{"_id":"source/_posts/git常用的命令.md","hash":"cfd0618884b847ce86af1642517d18d0ddf9d48b","modified":1501147759000},{"_id":"source/_posts/hexo添加自己域名.md","hash":"17066744ae3a214c5a39cf6522b39ebebc62ee36","modified":1497235337000},{"_id":"source/_posts/js中的观察者模式示例以及使用.md","hash":"b9487095f92270982d3f75ab0378990b6e0ab860","modified":1501230458000},{"_id":"source/_posts/mac下更新node和npm.md","hash":"d03e83a8875596889ac40720a40f607c3a3ee36f","modified":1501031598000},{"_id":"source/_posts/javascript异步开源库.md","hash":"90479dd6743dc965a6446b0ca703704e582b2799","modified":1501235069000},{"_id":"source/_posts/js移触屏滑动事件.md","hash":"84ef6c677dc9358599f9ce6e4e6a4f22843d9afb","modified":1501034288000},{"_id":"source/_posts/react-native中android环境问题.md","hash":"2e30d0115dc187b43a878939bfeda761661b11cd","modified":1501034391000},{"_id":"source/_posts/#react使用感受.md#","hash":"7c4ad0279f4a545dc24e53b6ace752b491b56df5","modified":1497405132000},{"_id":"source/_posts/react-native地区选择器.md","hash":"a85607725bf4438891206060a194ecbaf0f5030a","modified":1498102456000},{"_id":"source/_posts/react-native开发中常见的坑.md","hash":"b96fe93e2b793f7992c79890d035af9a1ad932ec","modified":1498704356000},{"_id":"source/_posts/react-redux小型项目感受.md","hash":"0d3accd87092459394f657dc06d911a04e6a52f1","modified":1497094838000},{"_id":"source/_posts/react中高阶组件的使用以及技巧.md","hash":"3bd91cfdda68b17f63ff3fcae93a0c5ac9d434a4","modified":1500885444000},{"_id":"source/_posts/react-native构建踩坑.md","hash":"26f3965d2f04749c25ae04ca6cfbc666cfaf3d88","modified":1497259689000},{"_id":"source/_posts/react中setState的使用.md","hash":"556ab48bcc5fb51aa157a920c1be32012df1d922","modified":1499669831000},{"_id":"source/_posts/react使用感受.md","hash":"c8c90ab04989f38ea2ef3ea4a2b721dd65ad3961","modified":1497403844000},{"_id":"source/_posts/web前端mac下常用软件.md","hash":"684b02a91ecad4e483a976776451cc999a524e7a","modified":1501034236000},{"_id":"source/_posts/react系列使用redux.md","hash":"3a2725e21300a70d899829bb6ea5ac21238bb66c","modified":1497424235000},{"_id":"source/_posts/vim转移emacs的艰辛路程.md","hash":"8dd116fcbcba5658f4e5568a382fec35247ccfd9","modified":1499419211000},{"_id":"source/_posts/使用autojump一键到达你要得路径.md","hash":"29f5587d044c4f957e70c5c5e7d76d9d5b9615e4","modified":1501308240000},{"_id":"source/_posts/优雅的设计redux中的store的state树.md","hash":"6839d1f8507703a90f24d4bef294abce7a350347","modified":1501220805000},{"_id":"source/_posts/使用jest来做javascript的单元测试.md","hash":"001009c70e7fffc22e4b4bbc670bd7305b8b126a","modified":1501037357000},{"_id":"source/_posts/体验es7中的Async-Await来处理异步.md","hash":"502391d5d9f4533e54459e68f73f0e79c5ae802f","modified":1499760117000},{"_id":"source/_posts/开发环境介绍以及博客搭建.md","hash":"3b364acc9d40bedc32688c0954cdad6c4b08f8e3","modified":1501034036000},{"_id":"source/_posts/是时候使用httpie来做你的api接口调试了.md","hash":"cd97882adb650350c6052381b1a7bd8bbfc3a4a3","modified":1501230507000},{"_id":"source/categories/index.md","hash":"e60e9161b01694d1c721410c6bfaf9b792982b8f","modified":1497094838000},{"_id":"source/category/index.md","hash":"7f7244fded59157de316a6b1ba4dbb6fc08a2a5c","modified":1501123905000},{"_id":"source/css/personal-style.css","hash":"9d9bff808a08ba1a0eca7595497e72ffd8de0913","modified":1501229525000},{"_id":"source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496646356000},{"_id":"source/search/index.md","hash":"50c12c2a6300c2d6355834fda046593a02bd9be0","modified":1501124004000},{"_id":"source/tag/index.md","hash":"34c7b76f347ad9f82a1b085bc6691d24c8fb126b","modified":1501123934000},{"_id":"source/tags/index.md","hash":"6321e9094b7442680ce78872f74fb7719b161415","modified":1497094838000},{"_id":"themes/fexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1501122947000},{"_id":"source/写过的一些项目/index.md","hash":"e68e7c65e0c36fdbcb73b5560406d82f7438fa0e","modified":1497094838000},{"_id":"source/日记/.DS_Store","hash":"f2aee57486db29d3a9028ecfe1f84362e50b5aa4","modified":1500885310000},{"_id":"themes/fexo/.git/config","hash":"78a9f656fdfea85aaa63de99ef0857e7149d11d2","modified":1501122947000},{"_id":"source/日记/index.md","hash":"56b4058c217178ff8f3f8d962c5df9cab6d2554e","modified":1497094838000},{"_id":"themes/fexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1501122885000},{"_id":"themes/fexo/.git/index","hash":"069c892d4afc32abb4e1e4eb043117df9d179482","modified":1501123066000},{"_id":"themes/fexo/.git/packed-refs","hash":"9ca537574e0ccb1cd98fd8574450ce00559030b4","modified":1501122947000},{"_id":"themes/fexo/languages/en.yml","hash":"b58364c7dfac61eddd64510f74ca7516da48f0cf","modified":1501122947000},{"_id":"themes/fexo/languages/default.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1501122947000},{"_id":"themes/fexo/languages/zh-CN.yml","hash":"1a6762d52295b0f7586f40c35e713c0fd33c2a2b","modified":1501122947000},{"_id":"themes/fexo/languages/no.yml","hash":"bf11017d77f64fbafb9c99ac219d076b20d53afc","modified":1501122947000},{"_id":"themes/fexo/languages/zh-TW.yml","hash":"6141b4c7a094c74bd9df7c08908d92b561c1a0c0","modified":1501122947000},{"_id":"themes/fexo/source/.DS_Store","hash":"8dffadfbfee7973f7d832d14977da99473265de3","modified":1501138810000},{"_id":"themes/fexo/layout/about.ejs","hash":"f1f06842f3fac2c7dd74811722431c5720e6cf8d","modified":1501122947000},{"_id":"themes/fexo/layout/archive.ejs","hash":"9c22251c328e937c444a9f5d4b324f97a78d324f","modified":1501122947000},{"_id":"themes/fexo/layout/category.ejs","hash":"e8c8209f74ac0c96c29dbdff38d0f43664417342","modified":1501122947000},{"_id":"themes/fexo/layout/index.ejs","hash":"9d33cd03e7a8adf8bbc124c248def36c15e681d0","modified":1501122947000},{"_id":"themes/fexo/layout/post.ejs","hash":"8cf15be489f8f3c11ac0215c16cbce36c854555f","modified":1501122947000},{"_id":"themes/fexo/layout/layout.ejs","hash":"ae485be0f6c0c431245e0cac21dc109c9d0125e8","modified":1501122947000},{"_id":"themes/fexo/layout/link.ejs","hash":"0144bdb1bc5f19763535b79b3302bf85bc0afbff","modified":1501122947000},{"_id":"themes/fexo/layout/project.ejs","hash":"6648041e1319c8ee3e16c882b33bb457c67a9527","modified":1501122947000},{"_id":"themes/fexo/layout/search.ejs","hash":"8c6fc59bed1facf14dd6a48bdf8dd44452583f4d","modified":1501122947000},{"_id":"themes/fexo/layout/tag.ejs","hash":"ea8f39f11e6f8750edbf4130abf26168a403b1b4","modified":1501122947000},{"_id":"source/images/angelp_avatar.jpeg","hash":"9ec573303de3142e85edc864c52508fbd448b59d","modified":1497094838000},{"_id":"source/_posts/Immutable-js意义以及使用场所/immutable2.jpg","hash":"86988e0621758220c14f48afffb5448138c8b150","modified":1500624443000},{"_id":"source/_posts/hexo添加自己域名/admin.png","hash":"57afd2230dc5a35fff079c028163feeb02b944ce","modified":1497234547000},{"_id":"source/_posts/js移触屏滑动事件/touchstart_demo.png","hash":"33318f5460706cf7bd874b297e82725283256b99","modified":1497094838000},{"_id":"source/_posts/web前端mac下常用软件/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1496645108000},{"_id":"themes/fexo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1501122885000},{"_id":"source/_posts/开发环境介绍以及博客搭建/.DS_Store","hash":"1fbf5355cb0967c1965730111405a3aaddfb4165","modified":1497077653000},{"_id":"themes/fexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1501122885000},{"_id":"themes/fexo/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1501122885000},{"_id":"themes/fexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1501122885000},{"_id":"themes/fexo/.git/logs/HEAD","hash":"56087315ad9be91291245159c18032a6aaf319fd","modified":1501122947000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1501122947000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1501122947000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1501122947000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1501122947000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1501122947000},{"_id":"themes/fexo/source/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1501122947000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1501122947000},{"_id":"themes/fexo/source/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1501122947000},{"_id":"themes/fexo/source/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1501122947000},{"_id":"themes/fexo/source/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1501122947000},{"_id":"themes/fexo/source/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1501122947000},{"_id":"themes/fexo/source/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1501122947000},{"_id":"themes/fexo/source/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1501122947000},{"_id":"themes/fexo/source/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1501122947000},{"_id":"themes/fexo/source/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1501122947000},{"_id":"themes/fexo/source/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501122947000},{"_id":"themes/fexo/source/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1501122947000},{"_id":"themes/fexo/source/sass/_animate.scss","hash":"8de97c948cb4b9c9b7a87c0f7332ed534c378e26","modified":1501122947000},{"_id":"themes/fexo/source/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1501122947000},{"_id":"themes/fexo/source/sass/_base.scss","hash":"83f01dbe82e47ce781c6e7eb8a793d95d97e168b","modified":1501122947000},{"_id":"themes/fexo/source/sass/_common.scss","hash":"b1fc97d6d24a92a9a7a9d39be4fe844f5c0f6d44","modified":1501122947000},{"_id":"themes/fexo/source/sass/_fonts.scss","hash":"10e188d379782ae2ee10427544919557036d0137","modified":1501122947000},{"_id":"themes/fexo/source/sass/_highlight-js.scss","hash":"38a5c4d9f3a2943aff9bde1d624d710587e3bc05","modified":1501122947000},{"_id":"themes/fexo/source/sass/_fontello.scss","hash":"f2d6b86bb63459884cf63e8c045fd10c827396eb","modified":1501122947000},{"_id":"themes/fexo/source/sass/_type.scss","hash":"cc7a25654593030f5214d5adf85f12a954c373c5","modified":1501122947000},{"_id":"themes/fexo/source/sass/_normalize.scss","hash":"e58275a588bb631a37a2988145eea231ed23176b","modified":1501122947000},{"_id":"themes/fexo/source/sass/_variable.scss","hash":"7b05581ef035a88bd1191914ff992103c7812bdf","modified":1501122947000},{"_id":"themes/fexo/source/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/article.ejs","hash":"ab0adc8f18a96eab18bb584233c0e8d4ddba71fc","modified":1501122947000},{"_id":"source/_posts/javascript异步开源库/promise.png","hash":"433aae15dbf4eed079d4a6280cdffa7d101d4b88","modified":1501224865000},{"_id":"themes/fexo/layout/_partial/baidu-analytics.ejs","hash":"c19e4abec19c23840fff7f8a51f4aefbb2b7e8ca","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/baidu-push.ejs","hash":"6950255d74efac8811d5b05d0d7a263c3c96486d","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/home.ejs","hash":"225b8a001c7aace46f2b39676e968e7cba9a4277","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/head.ejs","hash":"794916e761ea82fb606a2173af68e9bf524f6efb","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/load-script.ejs","hash":"4675c917548817118f4a3c5d84acc98d6c61a1d8","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/style.ejs","hash":"d1e80d7cf8b22929f5c6d8590eac38b069ea055d","modified":1501122947000},{"_id":"source/_posts/react中setState的使用/this.setState.png","hash":"27974f93740ca4eb5c9d1554b2d2b9b6984c45a4","modified":1499502837000},{"_id":"source/_posts/web前端mac下常用软件/dash-seach.png","hash":"74059b55bdfc9185c3846b4d5e32a67ac7824c0d","modified":1497094838000},{"_id":"themes/fexo/source/images/avatar.jpg","hash":"9ec573303de3142e85edc864c52508fbd448b59d","modified":1497094838000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1501122947000},{"_id":"themes/fexo/source/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_tag.scss","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1501122947000},{"_id":"source/_posts/react使用感受/react.png","hash":"f19ac1e7241b9866970c8b0c387a5f3369f58ffc","modified":1497094838000},{"_id":"source/_posts/react中高阶组件的使用以及技巧/react-hoc.png","hash":"c2ea2a53cec4dbff6436d489d9c156009f52f82c","modified":1500885252000},{"_id":"source/_posts/react系列使用redux/redux-thing-image2.png","hash":"d268066fd336fbac5c0b8a8915a3a853d9b8d839","modified":1497412178000},{"_id":"source/_posts/开发环境介绍以及博客搭建/hexo-info.png","hash":"0298084aad94297e7f5a1352d21cd4730fe9298e","modified":1497094838000},{"_id":"themes/fexo/.git/refs/heads/master","hash":"efddffe6d3bd5a1a88709c28e60ab945651877a0","modified":1501122947000},{"_id":"themes/fexo/source/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1501122947000},{"_id":"themes/fexo/source/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_back-top.scss","hash":"1c67da7007f4b9d8c65deea3d82c0f579e65f2c2","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_comments.scss","hash":"3e9b61bc08f38f947f54e942986a19a7f95ce723","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_category-box.scss","hash":"a807145b74d1b98270ea19ae35edd25b4c448bfa","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_donation.scss","hash":"172a3d5f747ba028d7e10e6f03ebc1db4d487a54","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_hint.scss","hash":"2812b4e10313168f2e082b740c60d64a151d94c8","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_index.scss","hash":"a741a0bfb47d0acdef12cdeb968c104bb002f86d","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_item-category-name.scss","hash":"119840d160cd263b57e79e2099a81079d7eeee3d","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_item-post.scss","hash":"1fb2e9be2d2edbb538cfbce7c80d5847f88e2f05","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_item-title.scss","hash":"cdaca2858abc9428ef01103a7fbea8f095d856aa","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_list-post.scss","hash":"43564f6443385bf34e15672d1477d1c7560f5563","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_modal.scss","hash":"2f0ed96df388ec28445b1ce5c6a61a0a697f9a68","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_pagination.scss","hash":"12c1880c518aee2e3ccf59661d01c308639f8a9e","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_tag-box.scss","hash":"7601951d09a75a7c39493bfa1b1da5ac989d9cda","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_item-year.scss","hash":"12c147dd4ab9587cd622083c86c2f6cf07d8e26a","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_page-header.scss","hash":"893d0595ef48323dce449ef0d17308ce02b36087","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_toolbox-mobile.scss","hash":"f15b215b9bb103ee1773a01d8badd81bb7643710","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_table.scss","hash":"4899fb31d1be8d5c9c397fcbcfc2ff0c5b2e7f7f","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_toc.scss","hash":"3b4c083cb2ba4a88ca35b6d8259ee991c83b3406","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_archive.scss","hash":"fefd54282a42ebb68b711f1cfefa1f67abbde05b","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_about.scss","hash":"7d61e627ea5376390081e0b93db426ffc6c4dee8","modified":1501122947000},{"_id":"themes/fexo/source/sass/component/_toolbox.scss","hash":"964a480d4e7fad100463195cde2a3f67f9765c23","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_category.scss","hash":"713242d10c0c8687c9e2f287f1beeb38de6cdbad","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_home.scss","hash":"b65bb069ed28fbf223c5bb7e760882f79d20fa46","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_index.scss","hash":"d9fe73a87585abad06a7dd77b67ec7ce6c24402c","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_link.scss","hash":"d3a249423c7ee88d1cb3a12e03f6c42a0a4d45a1","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_post.scss","hash":"c6f694568af362f9fe1e7e2b9909e47303178116","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_project.scss","hash":"bcbaded3d378bbaa1497f4c3843994ea589f3149","modified":1501122947000},{"_id":"themes/fexo/source/sass/pages/_search.scss","hash":"fd28f01829628c9d21f9391d5067ddcd836dad13","modified":1501122947000},{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","hash":"442d137ca0e56d61c9dc4b13ec679eca77d18a52","modified":1497927665000},{"_id":"themes/fexo/layout/_partial/component/category-box.ejs","hash":"f18e08e5c8718d5cd6672fc01e25ba457db0a385","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/category.ejs","hash":"2429158ff177b8876de765498b54d0c91b3fc551","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/back-top.ejs","hash":"47f2b8306b901f0fffc6aa0cfa40db697a0c5aff","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/comments.ejs","hash":"aa41542c7682d9b9e627dee046a3608ca6295692","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/disqus.ejs","hash":"21de7498d235a52337335108fce7446e1a21ea1c","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/date.ejs","hash":"163fbd874481cb9e2b6da5282701a3fbaa4e367a","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/donation.ejs","hash":"65bf93ad8e149033e6f93d673cc85ee223615589","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/gentie.ejs","hash":"9b78a138fb93a71b481ab25c8dea2e082e5e9d6c","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/duoshuo.ejs","hash":"b732200315e4c82e92bc7bd0ad33eb171d246e26","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/hypercomments.ejs","hash":"321339582edb1dd9c4e4ca13108fe494d08494fc","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/item-category-name.ejs","hash":"8ab52c9b5d5db1d3c1d343ecb405c4e15cd144ac","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/item-post.ejs","hash":"722e5dbde2d4683eea08f2af922358db45b253b1","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/item-tag.ejs","hash":"1b4c4e090c33ccfd44b531a5de9af16eec266512","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/item-year.ejs","hash":"906a6aea44a30e83c4c4e449294c7e4d831c188e","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/modal.ejs","hash":"8edceb2fd6c770691bd5cf4a35236c1def8410fe","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/page-header.ejs","hash":"14bad32082d87d7eeb45c0e9079e72f0ae65dbf4","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/pagination.ejs","hash":"ffbb548aee6e15cae924ee7f922f28b2403e8e45","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/prev-net.ejs","hash":"d1cb2e61814bcbd25ccb1628f99b18316e029892","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/tag-box.ejs","hash":"d648ea91ec9dc72bca80d70fbb66f7655bd0ea12","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/tag-list.ejs","hash":"8535c40b573744ced738b051383c0feca80eb0e9","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/title.ejs","hash":"e2fcdd904123186648513cfca4c7ad04921d2d57","modified":1501122947000},{"_id":"source/_posts/react系列使用redux/redux-thing-image1.png","hash":"74ec09b58cc5132aa0f23d0d5ca6d219ef5f99f9","modified":1497410921000},{"_id":"themes/fexo/layout/_partial/component/toc.ejs","hash":"000be428e925f5595af29eeba37ba6111f7f6511","modified":1501122947000},{"_id":"themes/fexo/layout/_partial/component/toolbox.ejs","hash":"fcfcccc5b231c4050f1a665b70f7738f9d070541","modified":1501122947000},{"_id":"themes/fexo/.git/objects/pack/pack-77d5813e7fa9b11b44ad41f21c515c15a0052a00.idx","hash":"d9a88d1522ceae4b8498c8a06b37014ec6e06cfc","modified":1501122947000},{"_id":"source/_posts/Immutable-js意义以及使用场所/immuable.gif","hash":"93c37a476770bf80f4debd367237f8ef0280643c","modified":1499666293000},{"_id":"themes/fexo/.git/logs/refs/heads/master","hash":"56087315ad9be91291245159c18032a6aaf319fd","modified":1501122947000},{"_id":"themes/fexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1501122947000},{"_id":"source/_posts/web前端mac下常用软件/emacs-example.png","hash":"59f909fb8042b3da0ec9b2667d25e50b9b0db1a4","modified":1497094838000},{"_id":"themes/fexo/.git/logs/refs/remotes/origin/HEAD","hash":"56087315ad9be91291245159c18032a6aaf319fd","modified":1501122947000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1501122947000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1501122947000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1501122947000},{"_id":"source/_posts/是时候使用httpie来做你的api接口调试了/httpie.png","hash":"71c229a707657f52734f408f10fb51b4482386ae","modified":1501038841000},{"_id":"themes/fexo/source/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1501122947000},{"_id":"source/_posts/web前端mac下常用软件/mac-down.png","hash":"957654bb33880a91d8e817c8284b1ebb233dec41","modified":1497094838000},{"_id":"source/_posts/vim转移emacs的艰辛路程/vim_key_help.png","hash":"847b6d5c2e01351a7118a01aed86eae232e74ed3","modified":1498807850000},{"_id":"themes/fexo/.git/objects/pack/pack-77d5813e7fa9b11b44ad41f21c515c15a0052a00.pack","hash":"0764095d858e4b53c68540dd089141fd4845ddbc","modified":1501122947000},{"_id":"public/css/personal-style.css","hash":"9d9bff808a08ba1a0eca7595497e72ffd8de0913","modified":1501310081713},{"_id":"public/search.json","hash":"20684bb937f6f2034cb48b7f232cbcbd610b599e","modified":1501310082208},{"_id":"public/categories/index.html","hash":"4c328197121e54494617484a6702ee3344cad13b","modified":1501310082283},{"_id":"public/category/index.html","hash":"e9064b034516b488064fee8faae7fe2edeeb498b","modified":1501310082283},{"_id":"public/search/index.html","hash":"756c563f81a6f2d023335cfb7b963fdb6afc9758","modified":1501310082283},{"_id":"public/tags/index.html","hash":"a0bdfae7b23b00b89f679dc09c7d4f86ad5858cf","modified":1501310082283},{"_id":"public/写过的一些项目/index.html","hash":"75400e098a4dcdd24dd17cd20a68ead96026fea5","modified":1501310082283},{"_id":"public/日记/index.html","hash":"2e01db5dbf64169cac49a2c32dd2c670c1d2af0a","modified":1501310082283},{"_id":"public/2017/07/29/使用autojump一键到达你要得路径/index.html","hash":"c080304686746cdbc2ccb7e6c4a09fd63ce8d8fb","modified":1501310082283},{"_id":"public/2017/07/26/使用jest来做javascript的单元测试/index.html","hash":"30462be235031737d566e672b9d715c6b3cdfb5b","modified":1501310082283},{"_id":"public/2017/07/26/是时候使用httpie来做你的api接口调试了/index.html","hash":"07cf35c371846e1125ed76ceedcf130fbaaa1f28","modified":1501310082283},{"_id":"public/2017/07/25/mac下更新node和npm/index.html","hash":"630ff08e925b0b66b82883fdc05c042f4fdb9c4a","modified":1501310082284},{"_id":"public/2017/07/24/react中高阶组件的使用以及技巧/index.html","hash":"428f13e95625e93c438f1dc6ff8ef27193e7a916","modified":1501310082284},{"_id":"public/2017/07/08/react中setState的使用/index.html","hash":"6e31adf7da8039560322e884c2ee760f780a5bea","modified":1501310082284},{"_id":"public/2017/07/04/emacs使用笔记/index.html","hash":"1c85d8b5c2d1811c88b185c3cf9fba641c6b8112","modified":1501310082284},{"_id":"public/2017/06/29/JSON数据规范/index.html","hash":"a74b3191e3581cac8dc5c31e1c8c1337d46d5e0f","modified":1501310082284},{"_id":"public/2017/06/29/react-native开发中常见的坑/index.html","hash":"60e468c89fbf7cbbf1fca62ea1c2023eec321bda","modified":1501310082284},{"_id":"public/2017/06/22/react-native地区选择器/index.html","hash":"f0990bbce6e068693de1c9a067a948029fa82782","modified":1501310082284},{"_id":"public/2017/06/13/react-native中android环境问题/index.html","hash":"5dc7618b6d6e15d1e61ea07e10f149adbc303960","modified":1501310082284},{"_id":"public/2017/06/12/hexo添加自己域名/index.html","hash":"6ce51d1297bee247ac9be52da66ba3c838254770","modified":1501310082284},{"_id":"public/2017/06/10/开发环境介绍以及博客搭建/index.html","hash":"3bb958967beb7e783fd6fdec9920a15c40d624b7","modified":1501310082284},{"_id":"public/2017/06/09/react-native构建踩坑/index.html","hash":"33763386c9d85c540a918af69400a487f3ae763b","modified":1501310082285},{"_id":"public/2017/06/06/react-redux小型项目感受/index.html","hash":"7180c64985cf0d2904bde54ff751a11ba600d831","modified":1501310082285},{"_id":"public/2017/06/05/web前端mac下常用软件/index.html","hash":"56da808499d85b51a9d242f7d31ea9b96d3b4b1d","modified":1501310082285},{"_id":"public/archives/index.html","hash":"a04f01a081f78ca5aa1ae43aceb4cabb404c56ed","modified":1501310082285},{"_id":"public/archives/page/2/index.html","hash":"395b301ab888ad4e9cbd34be2c31f355f9a86071","modified":1501310082285},{"_id":"public/archives/page/3/index.html","hash":"4b7612151d07038798c6ad410adef7603979dd5e","modified":1501310082285},{"_id":"public/archives/2017/index.html","hash":"a3f30b8221e3ca858ebe90ce9b6189fccc2db9ff","modified":1501310082285},{"_id":"public/archives/2017/page/2/index.html","hash":"117de0e616bc88449aa49b8235e228ee0576375e","modified":1501310082285},{"_id":"public/archives/2017/page/3/index.html","hash":"728cb6e80c252717aebc8cc03cc57d3ed0878f9d","modified":1501310082285},{"_id":"public/archives/2017/06/index.html","hash":"0c3504c940084267bea4fa7d526a07ab7af4fa51","modified":1501310082286},{"_id":"public/archives/2017/06/page/2/index.html","hash":"51fc60bc09691b1b830e6d8eb0f538beb17176f5","modified":1501310082286},{"_id":"public/archives/2017/07/index.html","hash":"d434d4b2a4fab147363b6959fdf93457542e81f4","modified":1501310082286},{"_id":"public/categories/emacs使用记/index.html","hash":"eaad6bda181356f27fd8c3f6b5d4de9318b723f6","modified":1501310082286},{"_id":"public/categories/git/index.html","hash":"da5ce5c2a112921a3543bd478f24447ab48fdc63","modified":1501310082286},{"_id":"public/categories/hexo/index.html","hash":"961d14a751f122f484d5144978139729aafd3927","modified":1501310082286},{"_id":"public/categories/javascript/index.html","hash":"c51ba3c894c9f15e43133940efd89c835c377c8f","modified":1501310082286},{"_id":"public/categories/web前端/index.html","hash":"601e69132e9dfed019b8f7d8adbb341811a8d17b","modified":1501310082287},{"_id":"public/categories/react-native踩坑记/index.html","hash":"ab6666b66cf5834670db313317a3a9caa6152046","modified":1501310082288},{"_id":"public/categories/react-native/index.html","hash":"c9352db4bb2a4691b01be03d2f5969afd2462627","modified":1501310082289},{"_id":"public/categories/blog/index.html","hash":"c26260dd6d6f47e650b0254798036eb6693076f9","modified":1501310082289},{"_id":"public/categories/mac/index.html","hash":"2a358b01f3e546de4532fbbac508bc372aa30791","modified":1501310082289},{"_id":"public/categories/react/index.html","hash":"46af4ec56cff2c04e4cbcedddb98a798c7f707f2","modified":1501310082289},{"_id":"public/categories/emacs/index.html","hash":"7a3f62a6630a477a6a8667e53e592032a0f1db7f","modified":1501310082289},{"_id":"public/categories/redux/index.html","hash":"4b2cbfcd24610a308f04892605ef737b0e1cdaa9","modified":1501310082289},{"_id":"public/categories/mac工具/index.html","hash":"4bbdd0064519fa620fb88cab3e4b6cf8283e0b66","modified":1501310082289},{"_id":"public/index.html","hash":"c7e8f678e9a086f589e7dcdd82088e005a8534fc","modified":1501310082290},{"_id":"public/page/2/index.html","hash":"b74a967d2c74b33500756ff62b1f61e9e039ce9f","modified":1501310082290},{"_id":"public/page/3/index.html","hash":"062b000f9b3dff975415cff6e44386ffa9a843bb","modified":1501310082290},{"_id":"public/tag/index.html","hash":"331681b6461fc5ba7ebbaede109df6114751a7f8","modified":1501310082290},{"_id":"public/2017/07/28/javascript异步开源库/index.html","hash":"451d3442bbf1d284b896893c4def8ff6574acda1","modified":1501310082290},{"_id":"public/2017/07/27/git常用的命令/index.html","hash":"ea5bb73628759bc3927906d39cb8d4c258bb1315","modified":1501310082290},{"_id":"public/2017/07/26/js中的观察者模式示例以及使用/index.html","hash":"5c04f17be5f11891ab001e62787bf44e62e425e5","modified":1501310082291},{"_id":"public/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/index.html","hash":"75f53f990960fa3ec9e5d2d1fd97f433adf04621","modified":1501310082291},{"_id":"public/2017/06/15/Immutable-js意义以及使用场所/index.html","hash":"e0ed1e7a69004dd86c7d899d359632281175c3d9","modified":1501310082291},{"_id":"public/2017/06/15/优雅的设计redux中的store的state树/index.html","hash":"bd71b6e02a1c35bb8b12beae51621444bba24630","modified":1501310082291},{"_id":"public/2017/06/14/体验es7中的Async-Await来处理异步/index.html","hash":"b296b18989dffe11e8c7977fe229fb931dd06a4b","modified":1501310082291},{"_id":"public/2017/06/14/react系列使用redux/index.html","hash":"d6ecb63431969dbf7c1e945aac32798c233f8c43","modified":1501310082291},{"_id":"public/2017/06/10/react使用感受/index.html","hash":"384032be7b8c2c0e57f5f78e79fd9ef2f287e5bd","modified":1501310082291},{"_id":"public/2017/06/07/js移触屏滑动事件/index.html","hash":"02168b79b731759577d31a29dd7728cb621cc63b","modified":1501310082291},{"_id":"public/2017/06/04/vim转移emacs的艰辛路程/index.html","hash":"4f9ff8244dac96d1d772d316933d85a4993c8bdc","modified":1501310082291},{"_id":"public/tags/react/index.html","hash":"12bc02d11a4952e084a6b221e9b1f6373d86a12c","modified":1501310082291},{"_id":"public/tags/react-native/index.html","hash":"ef98a53d21f1701b55c960c6362cc10b1e071048","modified":1501310082292},{"_id":"public/tags/immutable/index.html","hash":"8d88f2eb6a7a982001102875132008b4e6cd3cad","modified":1501310082292},{"_id":"public/tags/emacs/index.html","hash":"f349c37a7c460462c4a33232c68d020c68ea5aa2","modified":1501310082292},{"_id":"public/tags/emacs自动补全/index.html","hash":"5fcfa8ca33ad218d6fbf45fd132ab95526453ef1","modified":1501310082292},{"_id":"public/tags/ycmd/index.html","hash":"944cfb75b6e19f5c59d6ae8c24ca03c5dd560f3c","modified":1501310082292},{"_id":"public/tags/company-mode/index.html","hash":"adf091cfaf8f8641c801d830d851201ab3538933","modified":1501310082292},{"_id":"public/tags/hippie/index.html","hash":"a1d2eff02d8dfb6e84a78f4c7f38a4b0c2c7f690","modified":1501310082292},{"_id":"public/tags/emacs-API/index.html","hash":"744447b06f94cd12e952407d6b33c66617eeade0","modified":1501310082292},{"_id":"public/tags/git/index.html","hash":"fec74fa8977e3164ebd68d8b17c7679d3bd7d364","modified":1501310082292},{"_id":"public/tags/hexo/index.html","hash":"f31d107dfcf741783cdeb15be7d17138ff3145e7","modified":1501310082293},{"_id":"public/tags/next主题/index.html","hash":"2f31181f0ec03fc28bb7c92c47bf3ebdadd3b39a","modified":1501310082293},{"_id":"public/tags/javascript/index.html","hash":"f6581ba6187f9472223ab016b582173d8620a17e","modified":1501310082293},{"_id":"public/tags/观察者模式/index.html","hash":"fac62657baec12d510d93edd927175223d080a32","modified":1501310082293},{"_id":"public/tags/es6/index.html","hash":"54a5797d703eab07828e73eb78ecd11e272a64d8","modified":1501310082293},{"_id":"public/tags/node/index.html","hash":"ce4a7c209503964d3dd46e3374a3c545cd92e5a0","modified":1501310082294},{"_id":"public/tags/js异步/index.html","hash":"519c37bfc6043fa2fa4caf354ded74979f1f8f88","modified":1501310082294},{"_id":"public/tags/h5/index.html","hash":"b017e0f99d677e17b95aa76a7f879befa550f262","modified":1501310082294},{"_id":"public/tags/RN-android/index.html","hash":"1020fc6b57ca31cd2c25436db6ea46d2ef7a5752","modified":1501310082294},{"_id":"public/tags/redux/index.html","hash":"3ae6003637281ba87f499c83c3f772330e98fd1e","modified":1501310082294},{"_id":"public/tags/高阶组件/index.html","hash":"f461e152673afdb030bdff317aa7a776aa316365","modified":1501310082294},{"_id":"public/tags/setState/index.html","hash":"1f29fd3875d053c0364e243df6d07335a301d110","modified":1501310082294},{"_id":"public/tags/mac/index.html","hash":"530309bcda5eb1f58131d483308e6a39946be50e","modified":1501310082294},{"_id":"public/tags/vim/index.html","hash":"db8c66ed3097d1bcff79eb139aeb6357fd2e6644","modified":1501310082295},{"_id":"public/tags/react-nativem/index.html","hash":"2fb4ecec6b4006bbe10985453d5370e6472267ed","modified":1501310082296},{"_id":"public/tags/autojump/index.html","hash":"2a969e35afd6fe16d019b795730b7a0041f7dd22","modified":1501310082296},{"_id":"public/tags/linux/index.html","hash":"bd172aef46c7e5a70508831cb7690ed1d97872b1","modified":1501310082298},{"_id":"public/tags/es7/index.html","hash":"ffa47915cb3f59d546a813d3d0f89ef58e302cbe","modified":1501310082298},{"_id":"public/tags/blog/index.html","hash":"3331ce258ed8c255dcee5b5e800a7338e9ae92bd","modified":1501310082298},{"_id":"public/tags/api/index.html","hash":"3220e2fed847aea3ae57c244131394d44de8cd95","modified":1501310082299},{"_id":"public/tags/http/index.html","hash":"ceaba2184c553ae908bb1781edddf4282d5a1598","modified":1501310082299},{"_id":"public/tags/python/index.html","hash":"5876d7aa095c360a95407abf600e7092e93a484f","modified":1501310082299},{"_id":"public/CNAME","hash":"72057f81e19837a8e48bd5899d3dcde9b44d6609","modified":1501310082323},{"_id":"public/fonts/PoiretOne-Regular.ttf","hash":"2b186ce205301f7f3abd441f0372b72adcd2aee3","modified":1501310082323},{"_id":"public/fonts/PoiretOne-Regular.eot","hash":"2a4ef0d00fb77d16e37c3da429698b029e7d2d2f","modified":1501310082323},{"_id":"public/fonts/PoiretOne-Regular.woff","hash":"1cebcedde2c52261591bc322b176638798336a24","modified":1501310082324},{"_id":"public/fonts/calligraffitti-regular-webfont.eot","hash":"4c7bcece73621f648fa71d58fa13c28670fed8ca","modified":1501310082324},{"_id":"public/fonts/calligraffitti-regular-webfont.woff","hash":"1364845a3815740c572e29c83fd8d54f1c1ef5de","modified":1501310082324},{"_id":"public/fonts/fontello.eot","hash":"7732065eeaec4614e9548955d9bd30ccd7b149c1","modified":1501310082324},{"_id":"public/fonts/calligraffitti-regular-webfont.woff2","hash":"ba50c427166090361b0dab4c72136c7b451e86d4","modified":1501310082324},{"_id":"public/fonts/fontello.svg","hash":"33a984f4482a5ba5e7bc67d82e8db63cda4e3ae1","modified":1501310082324},{"_id":"public/fonts/fontello.ttf","hash":"e255d37ca14348e9a8532667a757ab552e58caff","modified":1501310082325},{"_id":"public/fonts/fontello.woff","hash":"45737fea847f3942ef405f00ea4df940fbb6bbd9","modified":1501310082325},{"_id":"public/fonts/fontello.woff2","hash":"1dfbc23328582f7cd9bcbe538224f6c762023e43","modified":1501310082325},{"_id":"public/sass/styles.scss","hash":"86ebe05d6a2931dd6fceef1e50c31ca996dc20be","modified":1501310082326},{"_id":"public/sass/component/prev-net.scss","hash":"2a5befab6cef93c9023a548422d5af4ab614f84d","modified":1501310082326},{"_id":"public/2017/06/12/hexo添加自己域名/admin.png","hash":"57afd2230dc5a35fff079c028163feeb02b944ce","modified":1501310082326},{"_id":"public/2017/06/07/js移触屏滑动事件/touchstart_demo.png","hash":"33318f5460706cf7bd874b297e82725283256b99","modified":1501310082326},{"_id":"public/2017/06/15/Immutable-js意义以及使用场所/immutable2.jpg","hash":"86988e0621758220c14f48afffb5448138c8b150","modified":1501310082326},{"_id":"public/images/angelp_avatar.jpeg","hash":"9ec573303de3142e85edc864c52508fbd448b59d","modified":1501310082352},{"_id":"public/images/avatar.jpg","hash":"9ec573303de3142e85edc864c52508fbd448b59d","modified":1501310082353},{"_id":"public/fonts/calligraffitti-regular-webfont.ttf","hash":"4688935c427ae40dcbf16523bc11d9fc10e359b5","modified":1501310082356},{"_id":"public/css/styles.css.map","hash":"8153b0247617810c1333dbd40840975e0b966ecb","modified":1501310082356},{"_id":"public/2017/07/28/javascript异步开源库/promise.png","hash":"433aae15dbf4eed079d4a6280cdffa7d101d4b88","modified":1501310082356},{"_id":"public/2017/07/08/react中setState的使用/this.setState.png","hash":"27974f93740ca4eb5c9d1554b2d2b9b6984c45a4","modified":1501310082356},{"_id":"public/2017/06/05/web前端mac下常用软件/dash-seach.png","hash":"74059b55bdfc9185c3846b4d5e32a67ac7824c0d","modified":1501310082357},{"_id":"public/js/app.js","hash":"a6d6e7fba3d69d0dec2c4d18debe0dc4cc7ab319","modified":1501310082385},{"_id":"public/js/util.js","hash":"8136da2bec1faf5fe3e14fa436f501292fca8c07","modified":1501310082385},{"_id":"public/js/bundle.js","hash":"7da160b15a43ce19273ec85204828bd42628546f","modified":1501310082385},{"_id":"public/js/scroll-spy.js","hash":"81b81362fcd63592045a673b54ce1edb7a6e3028","modified":1501310082385},{"_id":"public/js/zenscroll.js","hash":"bea2a3571555fdae64e8fc56f161f9a4f427b335","modified":1501310082385},{"_id":"public/js/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1501310082385},{"_id":"public/css/styles.css","hash":"c4d6a1f5403cf2fe2674ba82eb2b32b0fd7dfdb8","modified":1501310082385},{"_id":"public/fonts/calligraffitti-regular-webfont.svg","hash":"76e1e4cee6f2b5d596c635631938ee5eb6ab3e67","modified":1501310082385},{"_id":"public/fonts/PoiretOne-Regular.svg","hash":"e21109783f218cb7849b12e867e0b775ce3fadda","modified":1501310082385},{"_id":"public/2017/07/24/react中高阶组件的使用以及技巧/react-hoc.png","hash":"c2ea2a53cec4dbff6436d489d9c156009f52f82c","modified":1501310082387},{"_id":"public/2017/06/10/react使用感受/react.png","hash":"f19ac1e7241b9866970c8b0c387a5f3369f58ffc","modified":1501310082388},{"_id":"public/2017/06/10/开发环境介绍以及博客搭建/hexo-info.png","hash":"0298084aad94297e7f5a1352d21cd4730fe9298e","modified":1501310082388},{"_id":"public/2017/06/14/react系列使用redux/redux-thing-image2.png","hash":"d268066fd336fbac5c0b8a8915a3a853d9b8d839","modified":1501310082388},{"_id":"public/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","hash":"442d137ca0e56d61c9dc4b13ec679eca77d18a52","modified":1501310082413},{"_id":"public/2017/06/14/react系列使用redux/redux-thing-image1.png","hash":"74ec09b58cc5132aa0f23d0d5ca6d219ef5f99f9","modified":1501310082414},{"_id":"public/2017/06/15/Immutable-js意义以及使用场所/immuable.gif","hash":"93c37a476770bf80f4debd367237f8ef0280643c","modified":1501310082422},{"_id":"public/fonts/Lobster-Regular.ttf","hash":"50a84291b7012bfdcf9ff5116d6c7aa3f257f37f","modified":1501310082468},{"_id":"public/fonts/Lobster-Regular.eot","hash":"4f0c85f63beb0d95610317e16f1d4acdd2962eee","modified":1501310082468},{"_id":"public/fonts/Lobster-Regular.woff","hash":"298b80b1c9f694e1a055d62a5d809863c89baf50","modified":1501310082468},{"_id":"public/2017/06/05/web前端mac下常用软件/emacs-example.png","hash":"59f909fb8042b3da0ec9b2667d25e50b9b0db1a4","modified":1501310082469},{"_id":"public/2017/07/26/是时候使用httpie来做你的api接口调试了/httpie.png","hash":"71c229a707657f52734f408f10fb51b4482386ae","modified":1501310082478},{"_id":"public/fonts/Lobster-Regular.svg","hash":"be1cab622c673942fb4d11a23c012227938b4792","modified":1501310082502},{"_id":"public/2017/06/05/web前端mac下常用软件/mac-down.png","hash":"957654bb33880a91d8e817c8284b1ebb233dec41","modified":1501310082505},{"_id":"public/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png","hash":"847b6d5c2e01351a7118a01aed86eae232e74ed3","modified":1501310082528}],"Category":[{"name":"emacs使用记","_id":"cj5ox98sq0009i983q37xbgs9"},{"name":"git","_id":"cj5ox98t0000gi983p6eb6eu1"},{"name":"hexo","_id":"cj5ox98tc000ni983344149mm"},{"name":"javascript","_id":"cj5ox98to000ti983va9a66yc"},{"name":"web前端","_id":"cj5ox98tr0010i983287mchfn"},{"name":"react-native踩坑记","_id":"cj5ox98tw0016i983u3f2ty80"},{"name":"react-native","_id":"cj5ox98tz001ci983n7zlf6nb"},{"name":"blog","_id":"cj5ox98u4001hi983feu27am9"},{"name":"mac","_id":"cj5ox98uc001ni983vff07yj3"},{"name":"react","_id":"cj5ox98ur001vi983s062cc91"},{"name":"emacs","_id":"cj5ox98uu0022i983spn8q80x"},{"name":"redux","_id":"cj5ox98uw0028i983prtk2wdf"},{"name":"mac工具","_id":"cj5ox98ux002di98310z8ihah"}],"Data":[],"Page":[{"title":"categories","date":"2017-06-10T03:24:18.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-10 11:24:18\ntype: \"categories\"\n---\n","updated":"2017-06-10T11:40:38.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj5ox98s00001i98332bue23h","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"category","layout":"category","comments":0,"_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ncomments: false\n---\n","date":"2017-07-27T02:51:45.000Z","updated":"2017-07-27T02:51:45.000Z","path":"category/index.html","_id":"cj5ox98s60003i983lzxq69pi","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n","source":"css/personal-style.css","raw":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n","date":"2017-07-28T08:12:05.000Z","updated":"2017-07-28T08:12:05.000Z","path":"css/personal-style.css","layout":"false","title":"","comments":1,"_id":"cj5ox98sd0005i983nj573vhw","content":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n","site":{"data":{}},"excerpt":"","more":"@font-face {\n  font-family: \"telexregular, Hiragino Sans GB, Microsoft YaHei, sans-serif\";\n  src: url(\"/fonts/Meiryo.eot\");\n  /* IE9 */\n  src: url(\"/fonts/Meiryo.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n  url(\"/fonts/Meiryo.woff\") format(\"woff\"), /* chrome, firefox */\n  url(\"/fonts/Meiryo.ttf\") format(\"truetype\"), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */\n  url(\"/fonts/Meiryo.svg#Meiryo\") format(\"svg\");\n  /* iOS 4.1- */\n  font-style: normal;\n  font-weight: normal;\n}\n\ncode, kbd, pre, samp {\n    font-family: monospace, monospace !important;\n    font-size: 1em;\n}\nhtml{\n    background-color: #f9f9f9 !important;\n}\n.content-home .nav .item a:hover {\n    color: #bb2222;\n}\n.content-home .nav .item a {\n    font-size: 14px;\n    display: inline-block;\n    text-align: center;\n    text-decoration: none;\n    color: #bb2222;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: background-color;\n}\nhtml.page-home {\n    background-color: #f9f9f9;\n}\nhtml.page-archives {\n    background-color: #f9f9f9;\n}\nhtml.page-category {\n    background-color: #f9f9f9;\n}\nhtml.page-post {\n    background-color: #f9f9f9;\n}\n.post-title:hover {\n    color: #bb2222 !important;\n}\n.content {\n    width: 500px;\n    margin: 40px auto 80px;\n    border-left: 2px solid #f9f9f9;\n}\n.list-post .item-year {\n    padding-left: 0px;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n}\n.item-title:before {\n    position: absolute;\n    top: 50%;\n    left: -2px;\n    width: 10px;\n    height: 10px;\n    margin-top: -9px;\n    margin-left: -5px;\n    content: ' ';\n    border-radius: 50%;\n    display: none;\n}\n.item-category-name {\n    position: relative;\n    margin-top: 40px;\n    padding-left: 0px !important;\n}\n.tag-box .tag-list .tag-item,\n.category-box .category-list .category-item {\n    font-size: 12px;\n    line-height: 13px;\n    display: inline-block;\n    height: 10px;\n    margin: 3px 3px !important;\n    padding: 0 3px !important;\n    font-size: 1em;\n    color: rgb(248, 224, 230);\n    border-radius: 0px !important;\n    background: transparent !important;\n}\n.tag-box .tag-list .tag-item:hover,\n.category-box .category-list .category-item:hover {\n    color: rgb(251, 143, 146);\n}\n.tag-title,\n.category-title{\n    display: none;\n}\n.tag-box .tag-list,\n.category-box .category-list {\n    margin-left: 0px !important;\n}\n.toolbox .list-toolbox {\n    position: absolute;\n    top: -13px;\n    left: 46px;\n    display: none;\n    width: 500px;\n}\n.pagination .page-nav .extend:hover {\n    color: #bb2222;\n    background-color: transparent !important;\n}\n.item-category-name item-title item-title-1{\n    color: #333;\n}\n.item-category-name .category-count {\n    font-family: 'calligraffittiregular';\n    font-size: 13px;\n    font-weight: bold;\n}\n.item-year a.text-year {\n    font-family: 'calligraffittiregular';\n    font-size: 16px;\n    /* font-weight: bold; */\n    /* font-weight: bold; */\n    color: #222;\n}\n.item-post .post-title {\n    font-size: 14px;\n    font-weight: normal;\n    position: relative;\n    display: inline-block;\n    -webkit-transition-duration: .5s;\n    transition-duration: .5s;\n    color: #bb2222;\n    -webkit-font-smoothing: antialiased;\n    vertical-align: middle;\n    text-overflow: ellipsis;\n    max-width: 430px;\n    white-space: nowrap;\n    overflow: hidden;\n    transition-propety: background-color;\n}\n@media screen and (min-width: 768px)\n_page-header.scss:56\n.page-header .box-blog-info {\n    display: block;\n    margin-left: -30px;\n}\n.page-nav {\n    text-align: center;\n}\n.breadcrumb {\n    display: none;\n}\n.page-header {\n    margin-bottom: 30px;\n    background-color: #f9f9f9;\n}\n.item-post:before {\n    display: none;\n    position: absolute;\n    top: 50%;\n    left: 1px;\n    width: 4px;\n    height: 4px;\n    margin-top: -4px;\n    margin-left: -4px;\n    content: ' ';\n    border-radius: 50%;\n    background: #ddd;\n}\n.item-title {\n    position: relative;\n    margin-top: 40px;\n}\n/* .item-title.item-title-2:before { */\n/*     background: #bb2222; */\n/*     display: none; */\n/* } */\n.item-post {\n    position: relative;\n    padding-left: 0;\n}\n.item-post .post-date {\n    font-size: 12px;\n    display: inline-block;\n    color: #888;\n    font-weight: bold;\n    margin-right: 2em;\n}\n.pagination .page-nav .page-number:hover, .pagination .page-nav .page-number.current {\n    color: #bb2222;\n    font-size: 15px !important;\n    background-color: transparent;\n}\n.pagination .page-nav .page-number {\n    font-family: 'calligraffittiregular';\n    font-size: 13px !important;\n    font-weight: bolder;\n    line-height: 33px;\n    display: inline-block;\n    width: 28px;\n    height: 28px;\n    margin: auto 6px;\n    text-align: center;\n    color: #444;\n    border-radius: 50%;\n}\n.box-prev-next .icon {\n    color: #bb2222;\n    font-size: 16px;\n    font-weight: bold;\n}\n.box-prev-next a {\n    text-align: center;\n    line-height: 36px;\n    width: 36px;\n    height: 36px;\n    border-radius: 50%;\n    border: 1px solid transparent !important;\n}\n.highlight {\n    border: 1px dashed #ccc;\n}\n.box-prev-next {\n    margin-top: 40px;\n    height: 10px;\n    margin-bottom: 60px !important;\n}\n.article-content a {\n    color: #bb2222;\n}\n.article-content a:hover {\n    text-decoration: underline;\n}\n\n.article-content a:hover {\n    color: #bb2222;\n}\n.box-blog-info{\n    display: none !important;\n}\n.list-toolbox {\n\n}\n.item-toolbox{\n\n}\n.post-header .toolbox {\n    margin-top: -40px;\n    margin-left: -18px;\n    background: transparent !important;\n    -webkit-transition-duration: 0.5s;\n    transition-duration: 0.5s;\n    transition-propety: transform;\n}\n"},{"title":"search","layout":"search","comments":0,"_content":"","source":"search/index.md","raw":"---\ntitle: search\nlayout: search\ncomments: false\n---\n","date":"2017-07-27T02:53:24.000Z","updated":"2017-07-27T02:53:24.000Z","path":"search/index.html","_id":"cj5ox98sn0008i983oyovd1yt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","layout":"tag","comments":0,"_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ncomments: false\n---\n","date":"2017-07-27T02:52:14.000Z","updated":"2017-07-27T02:52:14.000Z","path":"tag/index.html","_id":"cj5ox98sr000bi983qlbckwfw","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-06-05T03:42:40.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-05 11:42:40\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-06-10T11:40:38.000Z","path":"tags/index.html","layout":"page","_id":"cj5ox98sv000ei983sr40l6p5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"写过的一些项目","date":"2017-06-04T07:03:02.000Z","_content":"## 记载一些项目上的坑\n","source":"写过的一些项目/index.md","raw":"---\ntitle: 写过的一些项目\ndate: 2017-06-04 15:03:02\n---\n## 记载一些项目上的坑\n","updated":"2017-06-10T11:40:38.000Z","path":"写过的一些项目/index.html","comments":1,"layout":"page","_id":"cj5ox98t0000hi983ytm4e45a","content":"<h2 id=\"记载一些项目上的坑\"><a href=\"#记载一些项目上的坑\" class=\"headerlink\" title=\"记载一些项目上的坑\"></a>记载一些项目上的坑</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"记载一些项目上的坑\"><a href=\"#记载一些项目上的坑\" class=\"headerlink\" title=\"记载一些项目上的坑\"></a>记载一些项目上的坑</h2>"},{"title":"日记","date":"2017-06-10T03:25:12.000Z","_content":"","source":"日记/index.md","raw":"---\ntitle: 日记\ndate: 2017-06-10 11:25:12\n---\n","updated":"2017-06-10T11:40:38.000Z","path":"日记/index.html","comments":1,"layout":"page","_id":"cj5ox98t7000ji983vv0r7h8e","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JSON数据规范","date":"2017-06-29T09:01:13.000Z","_content":"","source":"_posts/JSON数据规范.md","raw":"---\ntitle: JSON数据规范\ndate: 2017-06-29 17:01:13\ntags:\n---\n","slug":"JSON数据规范","published":1,"updated":"2017-06-29T09:01:13.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98rq0000i983lf1y3ob5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Immutable.js意义以及使用场所","date":"2017-06-15T09:19:56.000Z","_content":"\n### [学习资料地址](https://juejin.im/post/5948985ea0bb9f006bed7472)\n\n    Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n\n<!-- more -->\n\n安装: `npm install immutable`\n\n{% asset_img immuable.gif Immuable  %}\n\n```\nlet foo = {a: {b: 1}};\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b);  // 打印 2\nconsole.log(foo === bar);  //  打印 true\n\n// 使用 immutable.js 后\nimport Immutable from 'immutable';\nfoo = Immutable.fromJS({a: {b: 1}});\nbar = foo.setIn(['a', 'b'], 2);   // 使用 setIn 赋值\nconsole.log(foo.getIn(['a', 'b']));  // 使用 getIn 取值，打印 1\n\nconsole.log(foo === bar);  //  打印 false\n```\n\n先放上官方`README`要解决的  (共享的可变状态是万恶之源)\n\n上面的例子中已经看出来了, , , 着不是react设计初衷,\n\n## Immutable 优点\n\n1. Immutable 降低了 Mutable 带来的复杂度\n\n\t> 可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯\n\n2. 节省内存\n\n\t> Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。\n\n```\nimport { Map} from 'immutable';\nlet a = Map({\n  select: 'users',\n  filter: Map({ name: 'Cam' })\n})\nlet b = a.set('select', 'people');\n\na === b; // false\n\na.get('filter') === b.get('filter'); // true\n\n```\n\n3. Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟\n\n    因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。\n\n4. 并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？\n\n常用api示例:\n\n```\n//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)\nimmutable.Map({name:'danny', age:18})\n\n//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)\nimmutable.List([1,2,3,4,5])\n\n//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)\nimmutable.fromJS([1,2,3,4,5])    //将原生array  --> List\nimmutable.fromJS({name:'danny', age:18})   //将原生object  --> Map\n\n//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)\nimmutableData.toJS();\n\n//查看List或者map大小\nimmutableData.size  或者 immutableData.count()\n\n// is()   判断两个immutable对象是否相等\nimmutable.is(imA, imB);\n\n//merge()  对象合并\nvar imA = immutable.fromJS({a:1,b:2});\nvar imA = immutable.fromJS({c:3});\nvar imC = imA.merge(imB);\nconsole.log(imC.toJS())  //{a:1,b:2,c:3}\n\n//增删改查（所有操作都会返回新的值，不会修改原来值）\nvar immutableData = immutable.fromJS({\n    a:1,\n    b:2，\n    c:{\n        d:3\n    }\n});\nvar data1 = immutableData.get('a') //  data1 = 1\nvar data2 = immutableData.getIn(['c', 'd']) // data2 = 3   getIn用于深层结构访问\nvar data3 = immutableData.set('a' , 2);   // data3中的 a = 2\nvar data4 = immutableData.setIn(['c', 'd'], 4);   //data4中的 d = 4\nvar data5 = immutableData.update('a',function(x){return x+4})   //data5中的 a = 5\nvar data6 = immutableData.updateIn(['c', 'd'],function(x){return x+4})   //data6中的 d = 7\nvar data7 = immutableData.delete('a')   //data7中的 a 不存在\nvar data8 = immutableData.deleteIn(['c', 'd'])   //data8中的 d 不存在\n\n```\n### 我认为最大的缺点就是容易和原生对象混淆\n\n> 就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动`return`新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换\n\n```\nmap.get('key') // Immuable对象取值\nmay.key  //原生对象取值\n```\n\n### 周边信息\n\n两个 immutable 对象可以使用 `===` 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 `false`：\n\n```\nlet map1 = Immutable.Map({a:1, b:1, c:1});\nlet map2 = Immutable.Map({a:1, b:1, c:1});\nmap1 === map2;             // false\n```\n为了直接比较对象的值，immutable.js 提供了 `Immutable.is` 来做『值比较』，结果如下：\n```\nImmutable.is(map1, map2);  // true\n```\n`Immutable.is` 比较的是两个对象的 `hashCode` 或 `valueOf`（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 `hashCode` 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用 `Immutable.is` 来减少 React 重复渲染，提高性能。\n\n与 Object.freeze、const 区别\n\n`Object.freeze` 和 ES6 中新加入的 `const` 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。\n\nCursor 的概念\n\n这个 Cursor 和数据库中的游标是完全不同的概念。\n\n由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。\n\n```\nimport Immutable from 'immutable';\nimport Cursor from 'immutable/contrib/cursor';\n\nlet data = Immutable.fromJS({ a: { b: { c: 1 } } });\n// 让 cursor 指向 { c: 1 }\nlet cursor = Cursor.from(data, ['a', 'b'], newData => {\n  // 当 cursor 或其子 cursor 执行 update 时调用\n  console.log(newData);\n});\n\ncursor.get('c'); // 1\ncursor = cursor.update('c', x => x + 1);\ncursor.get('c'); // 2\n```\n\n### 实践\n\n1. 与 React 搭配使用，Pure Render\n\n熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 `shouldComponentUpdate()`，但它默认返回 `true`，即始终会执行 `render()` 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在 `shouldComponentUpdate()` 中使用使用 deepCopy 和 deepCompare 来避免无必要的 `render()`，但 deepCopy 和 deepCompare 一般都是非常耗性能的。\n\nImmutable 则提供了简洁高效的判断数据是否变化的方法，只需 `===` 和 `is` 比较就能知道是否需要执行 `render()`，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 `shouldComponentUpdate` 是这样的：\n\n前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是\n\n```\nimport { is } from 'immutable';\n\nshouldComponentUpdate: (nextProps = {}, nextState = {}) => {\n  const thisProps = this.props || {}, thisState = this.state || {};\n\n  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||\n      Object.keys(thisState).length !== Object.keys(nextState).length) {\n    return true;\n  }\n\n  for (const key in nextProps) {\n    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) {\n      return true;\n    }\n  }\n\n  for (const key in nextState) {\n    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n> 使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:\n{% asset_img immuable2.gif 使用后效果图  %}\n你也可以借助 `React.addons.PureRenderMixin` 或支持 class 语法的[pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator]() 来实现。\n\nsetState 的一个技巧\n\nReact 建议把 `this.state` 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：\n```\nimport '_' from 'lodash';\n\nconst Component = React.createClass({\n  getInitialState() {\n    return {\n      data: { times: 0 }\n    }\n  },\n  handleAdd() {\n    let data = _.cloneDeep(this.state.data);\n    data.times = data.times + 1;\n    this.setState({ data: data });\n    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。\n    console.log(this.state.data.times);\n  }\n}\n```\n使用 Immutable 后：\n```javaScript\ngetInitialState() {\n    return {\n      data: Map({ times: 0 })\n    }\n  },\n  handleAdd() {\n    this.setState({ data: this.state.data.update('times', v => v + 1) });\n    // 这时的 times 并不会改变\n    console.log(this.state.data.get('times'));\n  }\n\n```\n上面的 `handleAdd` 可以简写成：\n\n```javaScript\nhandleAdd() {\n    this.setState(({data}) => ({\n      data: data.update('times', v => v + 1) })\n    });\n  }\n```\n\n### 与`Redux`配合使用遇到的坑\n先说下`redux`中的单向数据流（View -> Action -> Middleware -> Reducer）, 项目中使用的redux,\n\n由于redux中内置的`combineReducers`和reducer中的`initialState`都会返回一个原生的Object对象, 所以配合`Imuutable`之后就会和原生Object搭配使用,  开发起来很不爽.\n\n幸运的是,  redux中并不排斥使用Immutable, 可以自己重写`combineReducers`或使用[ redux-immutablejs](https://github.com/indexiatech/redux-immutablejs)来提供支持\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n> [写的很不错,  原文地址](https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender)\n","source":"_posts/Immutable-js意义以及使用场所.md","raw":"---\ntitle: Immutable.js意义以及使用场所\ndate: 2017-06-15 17:19:56\ntags:\n    - react\n    - react-native\n    - immutable\n---\n\n### [学习资料地址](https://juejin.im/post/5948985ea0bb9f006bed7472)\n\n    Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n\n<!-- more -->\n\n安装: `npm install immutable`\n\n{% asset_img immuable.gif Immuable  %}\n\n```\nlet foo = {a: {b: 1}};\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b);  // 打印 2\nconsole.log(foo === bar);  //  打印 true\n\n// 使用 immutable.js 后\nimport Immutable from 'immutable';\nfoo = Immutable.fromJS({a: {b: 1}});\nbar = foo.setIn(['a', 'b'], 2);   // 使用 setIn 赋值\nconsole.log(foo.getIn(['a', 'b']));  // 使用 getIn 取值，打印 1\n\nconsole.log(foo === bar);  //  打印 false\n```\n\n先放上官方`README`要解决的  (共享的可变状态是万恶之源)\n\n上面的例子中已经看出来了, , , 着不是react设计初衷,\n\n## Immutable 优点\n\n1. Immutable 降低了 Mutable 带来的复杂度\n\n\t> 可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯\n\n2. 节省内存\n\n\t> Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。\n\n```\nimport { Map} from 'immutable';\nlet a = Map({\n  select: 'users',\n  filter: Map({ name: 'Cam' })\n})\nlet b = a.set('select', 'people');\n\na === b; // false\n\na.get('filter') === b.get('filter'); // true\n\n```\n\n3. Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟\n\n    因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。\n\n4. 并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。\n\n然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？\n\n常用api示例:\n\n```\n//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)\nimmutable.Map({name:'danny', age:18})\n\n//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)\nimmutable.List([1,2,3,4,5])\n\n//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)\nimmutable.fromJS([1,2,3,4,5])    //将原生array  --> List\nimmutable.fromJS({name:'danny', age:18})   //将原生object  --> Map\n\n//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)\nimmutableData.toJS();\n\n//查看List或者map大小\nimmutableData.size  或者 immutableData.count()\n\n// is()   判断两个immutable对象是否相等\nimmutable.is(imA, imB);\n\n//merge()  对象合并\nvar imA = immutable.fromJS({a:1,b:2});\nvar imA = immutable.fromJS({c:3});\nvar imC = imA.merge(imB);\nconsole.log(imC.toJS())  //{a:1,b:2,c:3}\n\n//增删改查（所有操作都会返回新的值，不会修改原来值）\nvar immutableData = immutable.fromJS({\n    a:1,\n    b:2，\n    c:{\n        d:3\n    }\n});\nvar data1 = immutableData.get('a') //  data1 = 1\nvar data2 = immutableData.getIn(['c', 'd']) // data2 = 3   getIn用于深层结构访问\nvar data3 = immutableData.set('a' , 2);   // data3中的 a = 2\nvar data4 = immutableData.setIn(['c', 'd'], 4);   //data4中的 d = 4\nvar data5 = immutableData.update('a',function(x){return x+4})   //data5中的 a = 5\nvar data6 = immutableData.updateIn(['c', 'd'],function(x){return x+4})   //data6中的 d = 7\nvar data7 = immutableData.delete('a')   //data7中的 a 不存在\nvar data8 = immutableData.deleteIn(['c', 'd'])   //data8中的 d 不存在\n\n```\n### 我认为最大的缺点就是容易和原生对象混淆\n\n> 就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动`return`新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换\n\n```\nmap.get('key') // Immuable对象取值\nmay.key  //原生对象取值\n```\n\n### 周边信息\n\n两个 immutable 对象可以使用 `===` 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 `false`：\n\n```\nlet map1 = Immutable.Map({a:1, b:1, c:1});\nlet map2 = Immutable.Map({a:1, b:1, c:1});\nmap1 === map2;             // false\n```\n为了直接比较对象的值，immutable.js 提供了 `Immutable.is` 来做『值比较』，结果如下：\n```\nImmutable.is(map1, map2);  // true\n```\n`Immutable.is` 比较的是两个对象的 `hashCode` 或 `valueOf`（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 `hashCode` 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。\n\n后面会使用 `Immutable.is` 来减少 React 重复渲染，提高性能。\n\n与 Object.freeze、const 区别\n\n`Object.freeze` 和 ES6 中新加入的 `const` 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。\n\nCursor 的概念\n\n这个 Cursor 和数据库中的游标是完全不同的概念。\n\n由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。\n\n```\nimport Immutable from 'immutable';\nimport Cursor from 'immutable/contrib/cursor';\n\nlet data = Immutable.fromJS({ a: { b: { c: 1 } } });\n// 让 cursor 指向 { c: 1 }\nlet cursor = Cursor.from(data, ['a', 'b'], newData => {\n  // 当 cursor 或其子 cursor 执行 update 时调用\n  console.log(newData);\n});\n\ncursor.get('c'); // 1\ncursor = cursor.update('c', x => x + 1);\ncursor.get('c'); // 2\n```\n\n### 实践\n\n1. 与 React 搭配使用，Pure Render\n\n熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 `shouldComponentUpdate()`，但它默认返回 `true`，即始终会执行 `render()` 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。\n\n当然我们也可以在 `shouldComponentUpdate()` 中使用使用 deepCopy 和 deepCompare 来避免无必要的 `render()`，但 deepCopy 和 deepCompare 一般都是非常耗性能的。\n\nImmutable 则提供了简洁高效的判断数据是否变化的方法，只需 `===` 和 `is` 比较就能知道是否需要执行 `render()`，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 `shouldComponentUpdate` 是这样的：\n\n前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是\n\n```\nimport { is } from 'immutable';\n\nshouldComponentUpdate: (nextProps = {}, nextState = {}) => {\n  const thisProps = this.props || {}, thisState = this.state || {};\n\n  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||\n      Object.keys(thisState).length !== Object.keys(nextState).length) {\n    return true;\n  }\n\n  for (const key in nextProps) {\n    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) {\n      return true;\n    }\n  }\n\n  for (const key in nextState) {\n    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n> 使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:\n{% asset_img immuable2.gif 使用后效果图  %}\n你也可以借助 `React.addons.PureRenderMixin` 或支持 class 语法的[pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator]() 来实现。\n\nsetState 的一个技巧\n\nReact 建议把 `this.state` 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：\n```\nimport '_' from 'lodash';\n\nconst Component = React.createClass({\n  getInitialState() {\n    return {\n      data: { times: 0 }\n    }\n  },\n  handleAdd() {\n    let data = _.cloneDeep(this.state.data);\n    data.times = data.times + 1;\n    this.setState({ data: data });\n    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。\n    console.log(this.state.data.times);\n  }\n}\n```\n使用 Immutable 后：\n```javaScript\ngetInitialState() {\n    return {\n      data: Map({ times: 0 })\n    }\n  },\n  handleAdd() {\n    this.setState({ data: this.state.data.update('times', v => v + 1) });\n    // 这时的 times 并不会改变\n    console.log(this.state.data.get('times'));\n  }\n\n```\n上面的 `handleAdd` 可以简写成：\n\n```javaScript\nhandleAdd() {\n    this.setState(({data}) => ({\n      data: data.update('times', v => v + 1) })\n    });\n  }\n```\n\n### 与`Redux`配合使用遇到的坑\n先说下`redux`中的单向数据流（View -> Action -> Middleware -> Reducer）, 项目中使用的redux,\n\n由于redux中内置的`combineReducers`和reducer中的`initialState`都会返回一个原生的Object对象, 所以配合`Imuutable`之后就会和原生Object搭配使用,  开发起来很不爽.\n\n幸运的是,  redux中并不排斥使用Immutable, 可以自己重写`combineReducers`或使用[ redux-immutablejs](https://github.com/indexiatech/redux-immutablejs)来提供支持\n\n上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。\n\n> [写的很不错,  原文地址](https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender)\n","slug":"Immutable-js意义以及使用场所","published":1,"updated":"2017-07-28T04:01:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98s30002i9831aged73f","content":"<h3 id=\"学习资料地址\"><a href=\"#学习资料地址\" class=\"headerlink\" title=\"学习资料地址\"></a><a href=\"https://juejin.im/post/5948985ea0bb9f006bed7472\" target=\"_blank\" rel=\"external\">学习资料地址</a></h3><pre><code>Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n</code></pre><a id=\"more\"></a>\n<p>安装: <code>npm install immutable</code></p>\n<img src=\"/2017/06/15/Immutable-js意义以及使用场所/immuable.gif\" alt=\"Immuable\" title=\"Immuable\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">let foo = &#123;a: &#123;b: 1&#125;&#125;;</div><div class=\"line\">let bar = foo;</div><div class=\"line\">bar.a.b = 2;</div><div class=\"line\">console.log(foo.a.b);  // 打印 2</div><div class=\"line\">console.log(foo === bar);  //  打印 true</div><div class=\"line\"></div><div class=\"line\">// 使用 immutable.js 后</div><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">foo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);</div><div class=\"line\">bar = foo.setIn([&apos;a&apos;, &apos;b&apos;], 2);   // 使用 setIn 赋值</div><div class=\"line\">console.log(foo.getIn([&apos;a&apos;, &apos;b&apos;]));  // 使用 getIn 取值，打印 1</div><div class=\"line\"></div><div class=\"line\">console.log(foo === bar);  //  打印 false</div></pre></td></tr></table></figure>\n<p>先放上官方<code>README</code>要解决的  (共享的可变状态是万恶之源)</p>\n<p>上面的例子中已经看出来了, , , 着不是react设计初衷,</p>\n<h2 id=\"Immutable-优点\"><a href=\"#Immutable-优点\" class=\"headerlink\" title=\"Immutable 优点\"></a>Immutable 优点</h2><ol>\n<li><p>Immutable 降低了 Mutable 带来的复杂度</p>\n<blockquote>\n<p>可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯</p>\n</blockquote>\n</li>\n<li><p>节省内存</p>\n<blockquote>\n<p>Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Map&#125; from &apos;immutable&apos;;</div><div class=\"line\">let a = Map(&#123;</div><div class=\"line\">  select: &apos;users&apos;,</div><div class=\"line\">  filter: Map(&#123; name: &apos;Cam&apos; &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">let b = a.set(&apos;select&apos;, &apos;people&apos;);</div><div class=\"line\"></div><div class=\"line\">a === b; // false</div><div class=\"line\"></div><div class=\"line\">a.get(&apos;filter&apos;) === b.get(&apos;filter&apos;); // true</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</p>\n<p> 因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。</p>\n</li>\n<li><p>并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？</p>\n<p>常用api示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.Map(&#123;name:&apos;danny&apos;, age:18&#125;)</div><div class=\"line\"></div><div class=\"line\">//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.List([1,2,3,4,5])</div><div class=\"line\"></div><div class=\"line\">//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)</div><div class=\"line\">immutable.fromJS([1,2,3,4,5])    //将原生array  --&gt; List</div><div class=\"line\">immutable.fromJS(&#123;name:&apos;danny&apos;, age:18&#125;)   //将原生object  --&gt; Map</div><div class=\"line\"></div><div class=\"line\">//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)</div><div class=\"line\">immutableData.toJS();</div><div class=\"line\"></div><div class=\"line\">//查看List或者map大小</div><div class=\"line\">immutableData.size  或者 immutableData.count()</div><div class=\"line\"></div><div class=\"line\">// is()   判断两个immutable对象是否相等</div><div class=\"line\">immutable.is(imA, imB);</div><div class=\"line\"></div><div class=\"line\">//merge()  对象合并</div><div class=\"line\">var imA = immutable.fromJS(&#123;a:1,b:2&#125;);</div><div class=\"line\">var imA = immutable.fromJS(&#123;c:3&#125;);</div><div class=\"line\">var imC = imA.merge(imB);</div><div class=\"line\">console.log(imC.toJS())  //&#123;a:1,b:2,c:3&#125;</div><div class=\"line\"></div><div class=\"line\">//增删改查（所有操作都会返回新的值，不会修改原来值）</div><div class=\"line\">var immutableData = immutable.fromJS(&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2，</div><div class=\"line\">    c:&#123;</div><div class=\"line\">        d:3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">var data1 = immutableData.get(&apos;a&apos;) //  data1 = 1</div><div class=\"line\">var data2 = immutableData.getIn([&apos;c&apos;, &apos;d&apos;]) // data2 = 3   getIn用于深层结构访问</div><div class=\"line\">var data3 = immutableData.set(&apos;a&apos; , 2);   // data3中的 a = 2</div><div class=\"line\">var data4 = immutableData.setIn([&apos;c&apos;, &apos;d&apos;], 4);   //data4中的 d = 4</div><div class=\"line\">var data5 = immutableData.update(&apos;a&apos;,function(x)&#123;return x+4&#125;)   //data5中的 a = 5</div><div class=\"line\">var data6 = immutableData.updateIn([&apos;c&apos;, &apos;d&apos;],function(x)&#123;return x+4&#125;)   //data6中的 d = 7</div><div class=\"line\">var data7 = immutableData.delete(&apos;a&apos;)   //data7中的 a 不存在</div><div class=\"line\">var data8 = immutableData.deleteIn([&apos;c&apos;, &apos;d&apos;])   //data8中的 d 不存在</div></pre></td></tr></table></figure>\n<h3 id=\"我认为最大的缺点就是容易和原生对象混淆\"><a href=\"#我认为最大的缺点就是容易和原生对象混淆\" class=\"headerlink\" title=\"我认为最大的缺点就是容易和原生对象混淆\"></a>我认为最大的缺点就是容易和原生对象混淆</h3><blockquote>\n<p>就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动<code>return</code>新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.get(&apos;key&apos;) // Immuable对象取值</div><div class=\"line\">may.key  //原生对象取值</div></pre></td></tr></table></figure>\n<h3 id=\"周边信息\"><a href=\"#周边信息\" class=\"headerlink\" title=\"周边信息\"></a>周边信息</h3><p>两个 immutable 对象可以使用 <code>===</code> 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 <code>false</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let map1 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">let map2 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">map1 === map2;             // false</div></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js 提供了 <code>Immutable.is</code> 来做『值比较』，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Immutable.is(map1, map2);  // true</div></pre></td></tr></table></figure></p>\n<p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code>（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用 <code>Immutable.is</code> 来减少 React 重复渲染，提高性能。</p>\n<p>与 Object.freeze、const 区别</p>\n<p><code>Object.freeze</code> 和 ES6 中新加入的 <code>const</code> 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p>\n<p>Cursor 的概念</p>\n<p>这个 Cursor 和数据库中的游标是完全不同的概念。</p>\n<p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">import Cursor from &apos;immutable/contrib/cursor&apos;;</div><div class=\"line\"></div><div class=\"line\">let data = Immutable.fromJS(&#123; a: &#123; b: &#123; c: 1 &#125; &#125; &#125;);</div><div class=\"line\">// 让 cursor 指向 &#123; c: 1 &#125;</div><div class=\"line\">let cursor = Cursor.from(data, [&apos;a&apos;, &apos;b&apos;], newData =&gt; &#123;</div><div class=\"line\">  // 当 cursor 或其子 cursor 执行 update 时调用</div><div class=\"line\">  console.log(newData);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">cursor.get(&apos;c&apos;); // 1</div><div class=\"line\">cursor = cursor.update(&apos;c&apos;, x =&gt; x + 1);</div><div class=\"line\">cursor.get(&apos;c&apos;); // 2</div></pre></td></tr></table></figure>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><ol>\n<li>与 React 搭配使用，Pure Render</li>\n</ol>\n<p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code>，但它默认返回 <code>true</code>，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code>，但 deepCopy 和 deepCompare 一般都是非常耗性能的。</p>\n<p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render()</code>，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：</p>\n<p>前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; is &#125; from &apos;immutable&apos;;</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate: (nextProps = &#123;&#125;, nextState = &#123;&#125;) =&gt; &#123;</div><div class=\"line\">  const thisProps = this.props || &#123;&#125;, thisState = this.state || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||</div><div class=\"line\">      Object.keys(thisState).length !== Object.keys(nextState).length) &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextProps) &#123;</div><div class=\"line\">    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextState) &#123;</div><div class=\"line\">    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:<br><br>你也可以借助 <code>React.addons.PureRenderMixin</code> 或支持 class 语法的<a href=\"\">pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator</a> 来实现。</p>\n</blockquote>\n<p>setState 的一个技巧</p>\n<p>React 建议把 <code>this.state</code> 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &apos;_&apos; from &apos;lodash&apos;;</div><div class=\"line\"></div><div class=\"line\">const Component = React.createClass(&#123;</div><div class=\"line\">  getInitialState() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      data: &#123; times: 0 &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    let data = _.cloneDeep(this.state.data);</div><div class=\"line\">    data.times = data.times + 1;</div><div class=\"line\">    this.setState(&#123; data: data &#125;);</div><div class=\"line\">    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。</div><div class=\"line\">    console.log(this.state.data.times);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 Immutable 后：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: <span class=\"built_in\">Map</span>(&#123; <span class=\"attr\">times</span>: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;);</div><div class=\"line\">    <span class=\"comment\">// 这时的 times 并不会改变</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的 <code>handleAdd</code> 可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"与Redux配合使用遇到的坑\"><a href=\"#与Redux配合使用遇到的坑\" class=\"headerlink\" title=\"与Redux配合使用遇到的坑\"></a>与<code>Redux</code>配合使用遇到的坑</h3><p>先说下<code>redux</code>中的单向数据流（View -&gt; Action -&gt; Middleware -&gt; Reducer）, 项目中使用的redux,</p>\n<p>由于redux中内置的<code>combineReducers</code>和reducer中的<code>initialState</code>都会返回一个原生的Object对象, 所以配合<code>Imuutable</code>之后就会和原生Object搭配使用,  开发起来很不爽.</p>\n<p>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写<code>combineReducers</code>或使用<a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"> redux-immutablejs</a>来提供支持</p>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\" target=\"_blank\" rel=\"external\">写的很不错,  原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"学习资料地址\"><a href=\"#学习资料地址\" class=\"headerlink\" title=\"学习资料地址\"></a><a href=\"https://juejin.im/post/5948985ea0bb9f006bed7472\" target=\"_blank\" rel=\"external\">学习资料地址</a></h3><pre><code>Immutable Data 就是一旦创建，就不能再被更改的数据,对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象,\n</code></pre>","more":"<p>安装: <code>npm install immutable</code></p>\n<img src=\"/2017/06/15/Immutable-js意义以及使用场所/immuable.gif\" alt=\"Immuable\" title=\"Immuable\">\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">let foo = &#123;a: &#123;b: 1&#125;&#125;;</div><div class=\"line\">let bar = foo;</div><div class=\"line\">bar.a.b = 2;</div><div class=\"line\">console.log(foo.a.b);  // 打印 2</div><div class=\"line\">console.log(foo === bar);  //  打印 true</div><div class=\"line\"></div><div class=\"line\">// 使用 immutable.js 后</div><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">foo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);</div><div class=\"line\">bar = foo.setIn([&apos;a&apos;, &apos;b&apos;], 2);   // 使用 setIn 赋值</div><div class=\"line\">console.log(foo.getIn([&apos;a&apos;, &apos;b&apos;]));  // 使用 getIn 取值，打印 1</div><div class=\"line\"></div><div class=\"line\">console.log(foo === bar);  //  打印 false</div></pre></td></tr></table></figure>\n<p>先放上官方<code>README</code>要解决的  (共享的可变状态是万恶之源)</p>\n<p>上面的例子中已经看出来了, , , 着不是react设计初衷,</p>\n<h2 id=\"Immutable-优点\"><a href=\"#Immutable-优点\" class=\"headerlink\" title=\"Immutable 优点\"></a>Immutable 优点</h2><ol>\n<li><p>Immutable 降低了 Mutable 带来的复杂度</p>\n<blockquote>\n<p>可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯</p>\n</blockquote>\n</li>\n<li><p>节省内存</p>\n<blockquote>\n<p>Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; Map&#125; from &apos;immutable&apos;;</div><div class=\"line\">let a = Map(&#123;</div><div class=\"line\">  select: &apos;users&apos;,</div><div class=\"line\">  filter: Map(&#123; name: &apos;Cam&apos; &#125;)</div><div class=\"line\">&#125;)</div><div class=\"line\">let b = a.set(&apos;select&apos;, &apos;people&apos;);</div><div class=\"line\"></div><div class=\"line\">a === b; // false</div><div class=\"line\"></div><div class=\"line\">a.get(&apos;filter&apos;) === b.get(&apos;filter&apos;); // true</div></pre></td></tr></table></figure>\n<ol>\n<li><p>Undo/Redo，Copy/Paste，甚至时间旅行这些功能做起来小菜一碟</p>\n<p> 因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。后面我会提供 Flux 做 Undo 的示例。</p>\n</li>\n<li><p>并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的，并发锁就不需要了。</p>\n</li>\n</ol>\n<p>然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？</p>\n<p>常用api示例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Map()  原生object转Map对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.Map(&#123;name:&apos;danny&apos;, age:18&#125;)</div><div class=\"line\"></div><div class=\"line\">//List()  原生array转List对象 (只会转换第一层，注意和fromJS区别)</div><div class=\"line\">immutable.List([1,2,3,4,5])</div><div class=\"line\"></div><div class=\"line\">//fromJS()   原生js转immutable对象  (深度转换，会将内部嵌套的对象和数组全部转成immutable)</div><div class=\"line\">immutable.fromJS([1,2,3,4,5])    //将原生array  --&gt; List</div><div class=\"line\">immutable.fromJS(&#123;name:&apos;danny&apos;, age:18&#125;)   //将原生object  --&gt; Map</div><div class=\"line\"></div><div class=\"line\">//toJS()  immutable对象转原生js  (深度转换，会将内部嵌套的Map和List全部转换成原生js)</div><div class=\"line\">immutableData.toJS();</div><div class=\"line\"></div><div class=\"line\">//查看List或者map大小</div><div class=\"line\">immutableData.size  或者 immutableData.count()</div><div class=\"line\"></div><div class=\"line\">// is()   判断两个immutable对象是否相等</div><div class=\"line\">immutable.is(imA, imB);</div><div class=\"line\"></div><div class=\"line\">//merge()  对象合并</div><div class=\"line\">var imA = immutable.fromJS(&#123;a:1,b:2&#125;);</div><div class=\"line\">var imA = immutable.fromJS(&#123;c:3&#125;);</div><div class=\"line\">var imC = imA.merge(imB);</div><div class=\"line\">console.log(imC.toJS())  //&#123;a:1,b:2,c:3&#125;</div><div class=\"line\"></div><div class=\"line\">//增删改查（所有操作都会返回新的值，不会修改原来值）</div><div class=\"line\">var immutableData = immutable.fromJS(&#123;</div><div class=\"line\">    a:1,</div><div class=\"line\">    b:2，</div><div class=\"line\">    c:&#123;</div><div class=\"line\">        d:3</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">var data1 = immutableData.get(&apos;a&apos;) //  data1 = 1</div><div class=\"line\">var data2 = immutableData.getIn([&apos;c&apos;, &apos;d&apos;]) // data2 = 3   getIn用于深层结构访问</div><div class=\"line\">var data3 = immutableData.set(&apos;a&apos; , 2);   // data3中的 a = 2</div><div class=\"line\">var data4 = immutableData.setIn([&apos;c&apos;, &apos;d&apos;], 4);   //data4中的 d = 4</div><div class=\"line\">var data5 = immutableData.update(&apos;a&apos;,function(x)&#123;return x+4&#125;)   //data5中的 a = 5</div><div class=\"line\">var data6 = immutableData.updateIn([&apos;c&apos;, &apos;d&apos;],function(x)&#123;return x+4&#125;)   //data6中的 d = 7</div><div class=\"line\">var data7 = immutableData.delete(&apos;a&apos;)   //data7中的 a 不存在</div><div class=\"line\">var data8 = immutableData.deleteIn([&apos;c&apos;, &apos;d&apos;])   //data8中的 d 不存在</div></pre></td></tr></table></figure>\n<h3 id=\"我认为最大的缺点就是容易和原生对象混淆\"><a href=\"#我认为最大的缺点就是容易和原生对象混淆\" class=\"headerlink\" title=\"我认为最大的缺点就是容易和原生对象混淆\"></a>我认为最大的缺点就是容易和原生对象混淆</h3><blockquote>\n<p>就是在开发的过程中,  有时候很你那分清楚是Immutable对象还是原生对象, Immutable中的Map和List虽然对应原生的Object和Array, 使用上还是有很大区别的, 主要还是API的不同带来的. 另外.Immuable每次修改会自动<code>return</code>新的Immutable, 还有就是使用的时候, 需要转换, 这个比较麻烦,  每次需要在和其他库配合的时候都需要转换</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">map.get(&apos;key&apos;) // Immuable对象取值</div><div class=\"line\">may.key  //原生对象取值</div></pre></td></tr></table></figure>\n<h3 id=\"周边信息\"><a href=\"#周边信息\" class=\"headerlink\" title=\"周边信息\"></a>周边信息</h3><p>两个 immutable 对象可以使用 <code>===</code> 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 <code>false</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">let map1 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">let map2 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);</div><div class=\"line\">map1 === map2;             // false</div></pre></td></tr></table></figure>\n<p>为了直接比较对象的值，immutable.js 提供了 <code>Immutable.is</code> 来做『值比较』，结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Immutable.is(map1, map2);  // true</div></pre></td></tr></table></figure></p>\n<p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code>（对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。</p>\n<p>后面会使用 <code>Immutable.is</code> 来减少 React 重复渲染，提高性能。</p>\n<p>与 Object.freeze、const 区别</p>\n<p><code>Object.freeze</code> 和 ES6 中新加入的 <code>const</code> 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p>\n<p>Cursor 的概念</p>\n<p>这个 Cursor 和数据库中的游标是完全不同的概念。</p>\n<p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import Immutable from &apos;immutable&apos;;</div><div class=\"line\">import Cursor from &apos;immutable/contrib/cursor&apos;;</div><div class=\"line\"></div><div class=\"line\">let data = Immutable.fromJS(&#123; a: &#123; b: &#123; c: 1 &#125; &#125; &#125;);</div><div class=\"line\">// 让 cursor 指向 &#123; c: 1 &#125;</div><div class=\"line\">let cursor = Cursor.from(data, [&apos;a&apos;, &apos;b&apos;], newData =&gt; &#123;</div><div class=\"line\">  // 当 cursor 或其子 cursor 执行 update 时调用</div><div class=\"line\">  console.log(newData);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">cursor.get(&apos;c&apos;); // 1</div><div class=\"line\">cursor = cursor.update(&apos;c&apos;, x =&gt; x + 1);</div><div class=\"line\">cursor.get(&apos;c&apos;); // 2</div></pre></td></tr></table></figure>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><ol>\n<li>与 React 搭配使用，Pure Render</li>\n</ol>\n<p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code>，但它默认返回 <code>true</code>，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p>\n<p>当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code>，但 deepCopy 和 deepCompare 一般都是非常耗性能的。</p>\n<p>Immutable 则提供了简洁高效的判断数据是否变化的方法，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render()</code>，而这个操作几乎 0 成本，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：</p>\n<p>前几天在优化redux中的store使用immutable的时候发现一个问题,  那就是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; is &#125; from &apos;immutable&apos;;</div><div class=\"line\"></div><div class=\"line\">shouldComponentUpdate: (nextProps = &#123;&#125;, nextState = &#123;&#125;) =&gt; &#123;</div><div class=\"line\">  const thisProps = this.props || &#123;&#125;, thisState = this.state || &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">  if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||</div><div class=\"line\">      Object.keys(thisState).length !== Object.keys(nextState).length) &#123;</div><div class=\"line\">    return true;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextProps) &#123;</div><div class=\"line\">    if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  for (const key in nextState) &#123;</div><div class=\"line\">    if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;</div><div class=\"line\">      return true;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  return false;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分:<br><br>你也可以借助 <code>React.addons.PureRenderMixin</code> 或支持 class 语法的<a href=\"\">pure-render-decoratorhttps://github.com/felixgirault/pure-render-decorator</a> 来实现。</p>\n</blockquote>\n<p>setState 的一个技巧</p>\n<p>React 建议把 <code>this.state</code> 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &apos;_&apos; from &apos;lodash&apos;;</div><div class=\"line\"></div><div class=\"line\">const Component = React.createClass(&#123;</div><div class=\"line\">  getInitialState() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      data: &#123; times: 0 &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    let data = _.cloneDeep(this.state.data);</div><div class=\"line\">    data.times = data.times + 1;</div><div class=\"line\">    this.setState(&#123; data: data &#125;);</div><div class=\"line\">    // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。</div><div class=\"line\">    console.log(this.state.data.times);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用 Immutable 后：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">getInitialState() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: <span class=\"built_in\">Map</span>(&#123; <span class=\"attr\">times</span>: <span class=\"number\">0</span> &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(&#123; <span class=\"attr\">data</span>: <span class=\"keyword\">this</span>.state.data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;);</div><div class=\"line\">    <span class=\"comment\">// 这时的 times 并不会改变</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.state.data.get(<span class=\"string\">'times'</span>));</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p>上面的 <code>handleAdd</code> 可以简写成：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">handleAdd() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">&#123;data&#125;</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">data</span>: data.update(<span class=\"string\">'times'</span>, v =&gt; v + <span class=\"number\">1</span>) &#125;)</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h3 id=\"与Redux配合使用遇到的坑\"><a href=\"#与Redux配合使用遇到的坑\" class=\"headerlink\" title=\"与Redux配合使用遇到的坑\"></a>与<code>Redux</code>配合使用遇到的坑</h3><p>先说下<code>redux</code>中的单向数据流（View -&gt; Action -&gt; Middleware -&gt; Reducer）, 项目中使用的redux,</p>\n<p>由于redux中内置的<code>combineReducers</code>和reducer中的<code>initialState</code>都会返回一个原生的Object对象, 所以配合<code>Imuutable</code>之后就会和原生Object搭配使用,  开发起来很不爽.</p>\n<p>幸运的是,  redux中并不排斥使用Immutable, 可以自己重写<code>combineReducers</code>或使用<a href=\"https://github.com/indexiatech/redux-immutablejs\" target=\"_blank\" rel=\"external\"> redux-immutablejs</a>来提供支持</p>\n<p>上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/20295971?columnSlug=purerender\" target=\"_blank\" rel=\"external\">写的很不错,  原文地址</a></p>\n</blockquote>"},{"title":"emacs使用company-mode,ycmd,hippie,来完善你的补全功能,以及遇到的坑","date":"2017-06-16T02:57:50.000Z","comments":0,"_content":"\n{% asset_img emacs-ycmd.png my emacs image %}\n\n<!-- more -->\n> 先说一下使用emacs的历程\n\n之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.\n但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换\n毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置[fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)](https://github.com/angelporo/emacs.d)\n\n\n之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,\n你会发现, 自己写的完全没有必要, 因为`github`上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.\n\n对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern\n\n## 框框框的安装\n前提自行安装git, python和以来包 , mac `birew install git build-essential cmake python-dev`\n\n\n`npm install tern -g`\n\n### 安装ycmd server\n\n `git clone https://github.com/Valloric/ycmd`\n \n 下载完整的submodule(时间比较久)\n `git submodule update --init --recursive`\n \n 下载完后进入`ycmd`文件夹编译\n \n ```base\n $ cd ~/ycmd\n $ ./build.py --tern-completer\n ```\n \n### 2. 安装 ycmd client，还有必要的工具\n\n打开Emacs , 命令`M-x list-packages`分别安装 `ycmd, company-ycmd, flycheck-ycmd company-mode`\n\n\n### 配置\n\n```elisp\n;;设置ycmd补全插件\n(set-variable 'ycmd-server-command '(\"python\" \"/Users/angel/ycmd/ycmd\"))\n(setq company-tooltip-limit 8)\n(setq company-idle-delay 0.2)\n(setq company-echo-delay 0)\n(setq company-begin-commands '(self-insert-command))\n(setq company-require-match nil)\n(company-ycmd-setup)\n(add-hook 'after-init-hook 'global-company-mode)\n```\n\n讲上面代码添加到配置文件中...\n\n\t注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n\n### 添加`hippie-extend`\n\nhippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置\n\n安装: `package-install hippie-extend`\n\n```elisp\n(global-set-key (kbd \"M-/\") 'hippie-expand)\n\n(setq hippie-expand-try-functions-list\n      '(try-expand-debbrev\n        try-expand-debbrev-all-buffers\n        try-expand-debbrev-from-kill\n        try-complete-file-name-partially\n        try-complete-file-name\n        try-expand-all-abbrevs\n        try-expand-list\n        try-expand-line\n        try-complete-lisp-symbol-partially\n        try-complete-lisp-symbol))\n```\n上面是我的配置,如果不习惯, 可以自己配置\n\n更换上面`hippie-expand-try-functions-list` 参数就可以\n\n```elisp\ntry-expand-dabbrev                 ; 搜索当前 buffer\ntry-expand-dabbrev-visible         ; 搜索当前可见窗口\ntry-expand-dabbrev-all-buffers     ; 搜索所有 buffer\ntry-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索\ntry-complete-file-name-partially   ; 文件名部分匹配\ntry-complete-file-name             ; 文件名匹配\ntry-expand-all-abbrevs             ; 匹配所有缩写词\ntry-expand-list                    ; 补全一个列表\ntry-expand-line                    ; 补全当前行\ntry-complete-lisp-symbol-partially ; 部分补全 elisp symbol\ntry-complete-lisp-symbol           ; 补全 lisp symbol\n```\n\n\n## 遇到的问题处理对策\n> tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动\n\n- tern 启动之后会在项目目录下创建一个 `.tern-port`文件, 里面的端口和emacs中\n`M-x describe-variabble tern-known-port` 看到的一致.\n\n- `tern-mode`是否启动?\n  `M-x describe-variabel tern-mode`结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)\n\n```base\n$ cd /path/to/project\n$ tern\nListening on port 63935\n```\n\n记住这个端口号，回到 Emacs，手动 `M-x tern-use-server RET 63953` 第二个server可以不填 默认是`127.0.0.1`\n当然最终还是要解决配置问题, 想tern自动启动.\n\n把下面代码放到配置文件中就可以自启动了.\n\n```elisp\n(add-hook 'js-mode-hook\n          '(lambda ()\n             (company-mode 1)\n             (tern-mode 1)\n             (setq company-tooltip-align-annotations t)\n             (add-to-list 'company-backends 'company-tern)))\n```\n\n如果不出现js补全dom的提示 可能是因为跟目录没有 `.tern-project`文件\n然后添加下面代码到`~/.tern-project`\n\n```json\n{\n  \"libs\": [\n    \"browser\",\n    \"jquery\"\n  ],\n  \"plugins\": {\n    \"node\": {}\n  }\n}\n```\n\n所以即使项目目录没有任何配置,  根目录`.tern-project`也会起作用!\n","source":"_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑.md","raw":"---\ntitle: 'emacs使用company-mode,ycmd,hippie,来完善你的补全功能,以及遇到的坑'\ndate: 2017-06-16 10:57:50\ntags:\n    - emacs\n    - emacs自动补全\n    - ycmd\n    - company-mode\n    - hippie\ncategories: \"emacs使用记\"\ncomments: false\n---\n\n{% asset_img emacs-ycmd.png my emacs image %}\n\n<!-- more -->\n> 先说一下使用emacs的历程\n\n之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.\n但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换\n毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置[fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)](https://github.com/angelporo/emacs.d)\n\n\n之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,\n你会发现, 自己写的完全没有必要, 因为`github`上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.\n\n对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern\n\n## 框框框的安装\n前提自行安装git, python和以来包 , mac `birew install git build-essential cmake python-dev`\n\n\n`npm install tern -g`\n\n### 安装ycmd server\n\n `git clone https://github.com/Valloric/ycmd`\n \n 下载完整的submodule(时间比较久)\n `git submodule update --init --recursive`\n \n 下载完后进入`ycmd`文件夹编译\n \n ```base\n $ cd ~/ycmd\n $ ./build.py --tern-completer\n ```\n \n### 2. 安装 ycmd client，还有必要的工具\n\n打开Emacs , 命令`M-x list-packages`分别安装 `ycmd, company-ycmd, flycheck-ycmd company-mode`\n\n\n### 配置\n\n```elisp\n;;设置ycmd补全插件\n(set-variable 'ycmd-server-command '(\"python\" \"/Users/angel/ycmd/ycmd\"))\n(setq company-tooltip-limit 8)\n(setq company-idle-delay 0.2)\n(setq company-echo-delay 0)\n(setq company-begin-commands '(self-insert-command))\n(setq company-require-match nil)\n(company-ycmd-setup)\n(add-hook 'after-init-hook 'global-company-mode)\n```\n\n讲上面代码添加到配置文件中...\n\n\t注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n\n### 添加`hippie-extend`\n\nhippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置\n\n安装: `package-install hippie-extend`\n\n```elisp\n(global-set-key (kbd \"M-/\") 'hippie-expand)\n\n(setq hippie-expand-try-functions-list\n      '(try-expand-debbrev\n        try-expand-debbrev-all-buffers\n        try-expand-debbrev-from-kill\n        try-complete-file-name-partially\n        try-complete-file-name\n        try-expand-all-abbrevs\n        try-expand-list\n        try-expand-line\n        try-complete-lisp-symbol-partially\n        try-complete-lisp-symbol))\n```\n上面是我的配置,如果不习惯, 可以自己配置\n\n更换上面`hippie-expand-try-functions-list` 参数就可以\n\n```elisp\ntry-expand-dabbrev                 ; 搜索当前 buffer\ntry-expand-dabbrev-visible         ; 搜索当前可见窗口\ntry-expand-dabbrev-all-buffers     ; 搜索所有 buffer\ntry-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索\ntry-complete-file-name-partially   ; 文件名部分匹配\ntry-complete-file-name             ; 文件名匹配\ntry-expand-all-abbrevs             ; 匹配所有缩写词\ntry-expand-list                    ; 补全一个列表\ntry-expand-line                    ; 补全当前行\ntry-complete-lisp-symbol-partially ; 部分补全 elisp symbol\ntry-complete-lisp-symbol           ; 补全 lisp symbol\n```\n\n\n## 遇到的问题处理对策\n> tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动\n\n- tern 启动之后会在项目目录下创建一个 `.tern-port`文件, 里面的端口和emacs中\n`M-x describe-variabble tern-known-port` 看到的一致.\n\n- `tern-mode`是否启动?\n  `M-x describe-variabel tern-mode`结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)\n\n```base\n$ cd /path/to/project\n$ tern\nListening on port 63935\n```\n\n记住这个端口号，回到 Emacs，手动 `M-x tern-use-server RET 63953` 第二个server可以不填 默认是`127.0.0.1`\n当然最终还是要解决配置问题, 想tern自动启动.\n\n把下面代码放到配置文件中就可以自启动了.\n\n```elisp\n(add-hook 'js-mode-hook\n          '(lambda ()\n             (company-mode 1)\n             (tern-mode 1)\n             (setq company-tooltip-align-annotations t)\n             (add-to-list 'company-backends 'company-tern)))\n```\n\n如果不出现js补全dom的提示 可能是因为跟目录没有 `.tern-project`文件\n然后添加下面代码到`~/.tern-project`\n\n```json\n{\n  \"libs\": [\n    \"browser\",\n    \"jquery\"\n  ],\n  \"plugins\": {\n    \"node\": {}\n  }\n}\n```\n\n所以即使项目目录没有任何配置,  根目录`.tern-project`也会起作用!\n","slug":"emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑","published":1,"updated":"2017-06-20T08:59:55.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98s90004i98349keom0s","content":"<img src=\"/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png\" alt=\"my emacs image\" title=\"my emacs image\">\n<a id=\"more\"></a>\n<blockquote>\n<p>先说一下使用emacs的历程</p>\n</blockquote>\n<p>之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.<br>但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换<br>毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置<a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)</a></p>\n<p>之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,<br>你会发现, 自己写的完全没有必要, 因为<code>github</code>上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.</p>\n<p>对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern</p>\n<h2 id=\"框框框的安装\"><a href=\"#框框框的安装\" class=\"headerlink\" title=\"框框框的安装\"></a>框框框的安装</h2><p>前提自行安装git, python和以来包 , mac <code>birew install git build-essential cmake python-dev</code></p>\n<p><code>npm install tern -g</code></p>\n<h3 id=\"安装ycmd-server\"><a href=\"#安装ycmd-server\" class=\"headerlink\" title=\"安装ycmd server\"></a>安装ycmd server</h3><p> <code>git clone https://github.com/Valloric/ycmd</code></p>\n<p> 下载完整的submodule(时间比较久)<br> <code>git submodule update --init --recursive</code></p>\n<p> 下载完后进入<code>ycmd</code>文件夹编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/ycmd</div><div class=\"line\">$ ./build.py --tern-completer</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-ycmd-client，还有必要的工具\"><a href=\"#2-安装-ycmd-client，还有必要的工具\" class=\"headerlink\" title=\"2. 安装 ycmd client，还有必要的工具\"></a>2. 安装 ycmd client，还有必要的工具</h3><p>打开Emacs , 命令<code>M-x list-packages</code>分别安装 <code>ycmd, company-ycmd, flycheck-ycmd company-mode</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;;设置ycmd补全插件</div><div class=\"line\">(set-variable &apos;ycmd-server-command &apos;(&quot;python&quot; &quot;/Users/angel/ycmd/ycmd&quot;))</div><div class=\"line\">(setq company-tooltip-limit 8)</div><div class=\"line\">(setq company-idle-delay 0.2)</div><div class=\"line\">(setq company-echo-delay 0)</div><div class=\"line\">(setq company-begin-commands &apos;(self-insert-command))</div><div class=\"line\">(setq company-require-match nil)</div><div class=\"line\">(company-ycmd-setup)</div><div class=\"line\">(add-hook &apos;after-init-hook &apos;global-company-mode)</div></pre></td></tr></table></figure>\n<p>讲上面代码添加到配置文件中…</p>\n<pre><code>注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n</code></pre><h3 id=\"添加hippie-extend\"><a href=\"#添加hippie-extend\" class=\"headerlink\" title=\"添加hippie-extend\"></a>添加<code>hippie-extend</code></h3><p>hippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置</p>\n<p>安装: <code>package-install hippie-extend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(global-set-key (kbd &quot;M-/&quot;) &apos;hippie-expand)</div><div class=\"line\"></div><div class=\"line\">(setq hippie-expand-try-functions-list</div><div class=\"line\">      &apos;(try-expand-debbrev</div><div class=\"line\">        try-expand-debbrev-all-buffers</div><div class=\"line\">        try-expand-debbrev-from-kill</div><div class=\"line\">        try-complete-file-name-partially</div><div class=\"line\">        try-complete-file-name</div><div class=\"line\">        try-expand-all-abbrevs</div><div class=\"line\">        try-expand-list</div><div class=\"line\">        try-expand-line</div><div class=\"line\">        try-complete-lisp-symbol-partially</div><div class=\"line\">        try-complete-lisp-symbol))</div></pre></td></tr></table></figure>\n<p>上面是我的配置,如果不习惯, 可以自己配置</p>\n<p>更换上面<code>hippie-expand-try-functions-list</code> 参数就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">try-expand-dabbrev                 ; 搜索当前 buffer</div><div class=\"line\">try-expand-dabbrev-visible         ; 搜索当前可见窗口</div><div class=\"line\">try-expand-dabbrev-all-buffers     ; 搜索所有 buffer</div><div class=\"line\">try-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索</div><div class=\"line\">try-complete-file-name-partially   ; 文件名部分匹配</div><div class=\"line\">try-complete-file-name             ; 文件名匹配</div><div class=\"line\">try-expand-all-abbrevs             ; 匹配所有缩写词</div><div class=\"line\">try-expand-list                    ; 补全一个列表</div><div class=\"line\">try-expand-line                    ; 补全当前行</div><div class=\"line\">try-complete-lisp-symbol-partially ; 部分补全 elisp symbol</div><div class=\"line\">try-complete-lisp-symbol           ; 补全 lisp symbol</div></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题处理对策\"><a href=\"#遇到的问题处理对策\" class=\"headerlink\" title=\"遇到的问题处理对策\"></a>遇到的问题处理对策</h2><blockquote>\n<p>tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动</p>\n</blockquote>\n<ul>\n<li><p>tern 启动之后会在项目目录下创建一个 <code>.tern-port</code>文件, 里面的端口和emacs中<br><code>M-x describe-variabble tern-known-port</code> 看到的一致.</p>\n</li>\n<li><p><code>tern-mode</code>是否启动?<br><code>M-x describe-variabel tern-mode</code>结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /path/to/project</div><div class=\"line\">$ tern</div><div class=\"line\">Listening on port 63935</div></pre></td></tr></table></figure>\n<p>记住这个端口号，回到 Emacs，手动 <code>M-x tern-use-server RET 63953</code> 第二个server可以不填 默认是<code>127.0.0.1</code><br>当然最终还是要解决配置问题, 想tern自动启动.</p>\n<p>把下面代码放到配置文件中就可以自启动了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(add-hook &apos;js-mode-hook</div><div class=\"line\">          &apos;(lambda ()</div><div class=\"line\">             (company-mode 1)</div><div class=\"line\">             (tern-mode 1)</div><div class=\"line\">             (setq company-tooltip-align-annotations t)</div><div class=\"line\">             (add-to-list &apos;company-backends &apos;company-tern)))</div></pre></td></tr></table></figure>\n<p>如果不出现js补全dom的提示 可能是因为跟目录没有 <code>.tern-project</code>文件<br>然后添加下面代码到<code>~/.tern-project</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"libs\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"browser\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以即使项目目录没有任何配置,  根目录<code>.tern-project</code>也会起作用!</p>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/16/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png\" alt=\"my emacs image\" title=\"my emacs image\">","more":"<blockquote>\n<p>先说一下使用emacs的历程</p>\n</blockquote>\n<p>之前使用vim, 配置github上面有很多, 可以自己配置,  无非就是一些插件, 然后改自己习惯的按键.<br>但是个人对vim还是不习惯,  别以为用了一年的时间,  也许还是因为自己没有真的用好它,  不过在工作中已经很方便了,  唯一不习惯的是模式之间的切换<br>毕竟是一个程序员, 不是做的运维, 因为要不停的写写写,  但是vim好多功能是在normal模式下,  所以需要不停的切换, 很不方便, 于是, 在一个夜黑风高的晚上, 卸载vim安装emacs, 因为用的mac折腾起来还是不费力的, 送上现在emacs的配置<a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">fork的purcell大神的配置(其中添加了自己的layer和配置, 在lisp/init-local.el)</a></p>\n<p>之前使用vim的时候会自己去写配置, 然后添加必要的插件,  去写一些适合自己的按键, 折腾一段时间后,<br>你会发现, 自己写的完全没有必要, 因为<code>github</code>上面有开源的, 写好的配置, 而且还是好几百人或是几千人维护的配置文件,你敢说你自己配置的能和大神配置的好么? 所以, 把那些折腾的时间用来专心写的你的项目或是研究自己喜欢的东西, 这个只是工具. 当然, 现在这么说只是因为爱过.</p>\n<p>对于emacs补全, 我用的ycmd和hippie配合company-mode的方式来, ycmd后端用的tern</p>\n<h2 id=\"框框框的安装\"><a href=\"#框框框的安装\" class=\"headerlink\" title=\"框框框的安装\"></a>框框框的安装</h2><p>前提自行安装git, python和以来包 , mac <code>birew install git build-essential cmake python-dev</code></p>\n<p><code>npm install tern -g</code></p>\n<h3 id=\"安装ycmd-server\"><a href=\"#安装ycmd-server\" class=\"headerlink\" title=\"安装ycmd server\"></a>安装ycmd server</h3><p> <code>git clone https://github.com/Valloric/ycmd</code></p>\n<p> 下载完整的submodule(时间比较久)<br> <code>git submodule update --init --recursive</code></p>\n<p> 下载完后进入<code>ycmd</code>文件夹编译</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/ycmd</div><div class=\"line\">$ ./build.py --tern-completer</div></pre></td></tr></table></figure>\n<h3 id=\"2-安装-ycmd-client，还有必要的工具\"><a href=\"#2-安装-ycmd-client，还有必要的工具\" class=\"headerlink\" title=\"2. 安装 ycmd client，还有必要的工具\"></a>2. 安装 ycmd client，还有必要的工具</h3><p>打开Emacs , 命令<code>M-x list-packages</code>分别安装 <code>ycmd, company-ycmd, flycheck-ycmd company-mode</code></p>\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">;;设置ycmd补全插件</div><div class=\"line\">(set-variable &apos;ycmd-server-command &apos;(&quot;python&quot; &quot;/Users/angel/ycmd/ycmd&quot;))</div><div class=\"line\">(setq company-tooltip-limit 8)</div><div class=\"line\">(setq company-idle-delay 0.2)</div><div class=\"line\">(setq company-echo-delay 0)</div><div class=\"line\">(setq company-begin-commands &apos;(self-insert-command))</div><div class=\"line\">(setq company-require-match nil)</div><div class=\"line\">(company-ycmd-setup)</div><div class=\"line\">(add-hook &apos;after-init-hook &apos;global-company-mode)</div></pre></td></tr></table></figure>\n<p>讲上面代码添加到配置文件中…</p>\n<pre><code>注意上面路径需要绝对路径不能使用`~/ycmd/ycmd`\n</code></pre><h3 id=\"添加hippie-extend\"><a href=\"#添加hippie-extend\" class=\"headerlink\" title=\"添加hippie-extend\"></a>添加<code>hippie-extend</code></h3><p>hippie是一个提示先后顺序设置的插件,所以, 需要你自己的需求来配置</p>\n<p>安装: <code>package-install hippie-extend</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">(global-set-key (kbd &quot;M-/&quot;) &apos;hippie-expand)</div><div class=\"line\"></div><div class=\"line\">(setq hippie-expand-try-functions-list</div><div class=\"line\">      &apos;(try-expand-debbrev</div><div class=\"line\">        try-expand-debbrev-all-buffers</div><div class=\"line\">        try-expand-debbrev-from-kill</div><div class=\"line\">        try-complete-file-name-partially</div><div class=\"line\">        try-complete-file-name</div><div class=\"line\">        try-expand-all-abbrevs</div><div class=\"line\">        try-expand-list</div><div class=\"line\">        try-expand-line</div><div class=\"line\">        try-complete-lisp-symbol-partially</div><div class=\"line\">        try-complete-lisp-symbol))</div></pre></td></tr></table></figure>\n<p>上面是我的配置,如果不习惯, 可以自己配置</p>\n<p>更换上面<code>hippie-expand-try-functions-list</code> 参数就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">try-expand-dabbrev                 ; 搜索当前 buffer</div><div class=\"line\">try-expand-dabbrev-visible         ; 搜索当前可见窗口</div><div class=\"line\">try-expand-dabbrev-all-buffers     ; 搜索所有 buffer</div><div class=\"line\">try-expand-dabbrev-from-kill       ; 从 kill-ring 中搜索</div><div class=\"line\">try-complete-file-name-partially   ; 文件名部分匹配</div><div class=\"line\">try-complete-file-name             ; 文件名匹配</div><div class=\"line\">try-expand-all-abbrevs             ; 匹配所有缩写词</div><div class=\"line\">try-expand-list                    ; 补全一个列表</div><div class=\"line\">try-expand-line                    ; 补全当前行</div><div class=\"line\">try-complete-lisp-symbol-partially ; 部分补全 elisp symbol</div><div class=\"line\">try-complete-lisp-symbol           ; 补全 lisp symbol</div></pre></td></tr></table></figure>\n<h2 id=\"遇到的问题处理对策\"><a href=\"#遇到的问题处理对策\" class=\"headerlink\" title=\"遇到的问题处理对策\"></a>遇到的问题处理对策</h2><blockquote>\n<p>tern是一个补全的后端, 是需要配合emacs的前端来实现的. tern安装之后自己会启动, 如不能自动, 请手动启动</p>\n</blockquote>\n<ul>\n<li><p>tern 启动之后会在项目目录下创建一个 <code>.tern-port</code>文件, 里面的端口和emacs中<br><code>M-x describe-variabble tern-known-port</code> 看到的一致.</p>\n</li>\n<li><p><code>tern-mode</code>是否启动?<br><code>M-x describe-variabel tern-mode</code>结果应该是t. (这一步我的meacs中tern启动后 没有出任何结果, 好奇怪)</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd /path/to/project</div><div class=\"line\">$ tern</div><div class=\"line\">Listening on port 63935</div></pre></td></tr></table></figure>\n<p>记住这个端口号，回到 Emacs，手动 <code>M-x tern-use-server RET 63953</code> 第二个server可以不填 默认是<code>127.0.0.1</code><br>当然最终还是要解决配置问题, 想tern自动启动.</p>\n<p>把下面代码放到配置文件中就可以自启动了.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(add-hook &apos;js-mode-hook</div><div class=\"line\">          &apos;(lambda ()</div><div class=\"line\">             (company-mode 1)</div><div class=\"line\">             (tern-mode 1)</div><div class=\"line\">             (setq company-tooltip-align-annotations t)</div><div class=\"line\">             (add-to-list &apos;company-backends &apos;company-tern)))</div></pre></td></tr></table></figure>\n<p>如果不出现js补全dom的提示 可能是因为跟目录没有 <code>.tern-project</code>文件<br>然后添加下面代码到<code>~/.tern-project</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"libs\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"browser\"</span>,</div><div class=\"line\">    <span class=\"string\">\"jquery\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"attr\">\"plugins\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"node\"</span>: &#123;&#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>所以即使项目目录没有任何配置,  根目录<code>.tern-project</code>也会起作用!</p>"},{"title":"emacs使用笔记","date":"2017-07-04T01:48:00.000Z","_content":"\n记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西\n\n<!-- more -->\n\n- M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；\n- M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；\n- M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；\n- M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。\n\n### emacs 编辑时好用的会快捷键\n\n- `C-t` 命令用来交换两个字母的位置\n- `C-x C-t`这个命令进行交换2行。\n- 使单词首字母大写 `M-c` 来将光标所指向的字母首字母大写\n- 使用命令`M-u` 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)\n","source":"_posts/emacs使用笔记.md","raw":"---\ntitle: emacs使用笔记\ndate: 2017-07-04 09:48:00\ntags:\n    - emacs\n    - emacs API\n---\n\n记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西\n\n<!-- more -->\n\n- M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；\n- M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；\n- M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；\n- M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。\n\n### emacs 编辑时好用的会快捷键\n\n- `C-t` 命令用来交换两个字母的位置\n- `C-x C-t`这个命令进行交换2行。\n- 使单词首字母大写 `M-c` 来将光标所指向的字母首字母大写\n- 使用命令`M-u` 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)\n","slug":"emacs使用笔记","published":1,"updated":"2017-07-26T03:27:33.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98sh0007i983imqbydnk","content":"<p>记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西</p>\n<a id=\"more\"></a>\n<ul>\n<li>M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；</li>\n<li>M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；</li>\n<li>M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；</li>\n<li>M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。</li>\n</ul>\n<h3 id=\"emacs-编辑时好用的会快捷键\"><a href=\"#emacs-编辑时好用的会快捷键\" class=\"headerlink\" title=\"emacs 编辑时好用的会快捷键\"></a>emacs 编辑时好用的会快捷键</h3><ul>\n<li><code>C-t</code> 命令用来交换两个字母的位置</li>\n<li><code>C-x C-t</code>这个命令进行交换2行。</li>\n<li>使单词首字母大写 <code>M-c</code> 来将光标所指向的字母首字母大写</li>\n<li>使用命令<code>M-u</code> 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>记录一些emacs 常用的使用技巧,  老年痴呆的脑子记不住很多东西</p>","more":"<ul>\n<li>M-x eval-last-sexp 使当前 elisp 配置中光标前的那一条语句立刻生效；</li>\n<li>M-x eval-region 使当前 elisp 配置中选中的 region 中的语句立刻生效；</li>\n<li>M-x eval-buffer 使当前的 buffer 中的设置语句立刻生效；</li>\n<li>M-x load-file ~/.emacs 载入 .emacs 文件，从而使其中的设置生效，要生效其它 elisp 文件只需要把 .emacs 文件名换成其它的即可。</li>\n</ul>\n<h3 id=\"emacs-编辑时好用的会快捷键\"><a href=\"#emacs-编辑时好用的会快捷键\" class=\"headerlink\" title=\"emacs 编辑时好用的会快捷键\"></a>emacs 编辑时好用的会快捷键</h3><ul>\n<li><code>C-t</code> 命令用来交换两个字母的位置</li>\n<li><code>C-x C-t</code>这个命令进行交换2行。</li>\n<li>使单词首字母大写 <code>M-c</code> 来将光标所指向的字母首字母大写</li>\n<li>使用命令<code>M-u</code> 将光标所指向字母及其到单词结尾的字母均至为大写字母。(平时写常量的时候, 直接快捷键让其大写就ok了)</li>\n</ul>"},{"title":"git常用的命令","date":"2017-07-27T07:59:12.000Z","_content":"\n好记性不如一个烂笔头\n\n使用`git`快两年了, 一些命令依然是记不住!!!这就尴尬了\n\n想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.\n\n### 记录一些 `git` 命令\n\n检出仓库：$ git clone git://github.com/jquery/jquery.git\n查看远程仓库：$ git remote -v\n添加远程仓库：$ git remote add [name] [url]\n删除远程仓库：$ git remote rm [name]\n修改远程仓库：$ git remote set-url --push [name] [newUrl]\n拉取远程仓库：$ git pull [remoteName] [localBranchName]\n推送远程仓库：$ git push [remoteName] [localBranchName]\n\n如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：\n\n```base\n$git push origin test:master         // 提交本地test分支作为远程的master分支\n$git push origin test:test              // 提交本地test分支作为远程的test分支\n```\n\n### 分支\n查看本地分支：$ git branch\n查看远程分支：$ git branch -r\n创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支\n切换分支：$ git checkout [name]\n创建新分支并立即切换到新分支：$ git checkout -b [name]\n删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并\n创建远程分支(本地分支push到远程)：$ git push origin [name]\n删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] \n\n### 创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\n$git symbolic-ref HEAD refs/heads/[name]\n$rm .git/index\n$git clean -fdx\n\n### 版本`tag`相关操作\n查看版本：$ git tag\n创建版本：$ git tag [name]\n删除版本：$ git tag -d [name]\n查看远程版本：$ git tag -r\n创建远程版本(本地版本push到远程)：$ git push origin [name]\n删除远程版本：$ git push origin :refs/tags/[name]\n合并远程仓库的tag到本地：$ git pull origin --tags\n上传本地tag到远程仓库：$ git push origin --tags\n创建带注释的tag：$ git tag -a [name] -m 'yourMessage'\n\n### Git 常用命令\ngit branch 查看本地所有分支\ngit status 查看当前状态 \ngit commit 提交 \ngit branch -a 查看所有的分支\ngit branch -r 查看本地所有分支\ngit commit -am \"init\" 提交并且加注释 \ngit remote add origin git@192.168.1.119:ndshow\ngit push origin master 将文件给推到服务器上 \ngit remote show origin 显示远程库origin里的资源 \ngit push origin master:develop\ngit push origin master:hb-dev 将本地库与服务器上的库进行关联 \ngit checkout --track origin/dev 切换到远程dev分支\ngit branch -D master develop 删除本地库develop\ngit checkout -b dev 建立一个新的本地分支dev\ngit merge origin/dev 将分支dev与当前分支进行合并\ngit checkout dev 切换到本地dev分支\ngit remote show 查看远程库\ngit add .\ngit rm 文件名(包括路径) 从git中删除指定文件\ngit clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来\ngit config --list 看所有用户\ngit ls-files 看已经被提交的\ngit rm [file name] 删除一个文件\ngit commit -a 提交当前repos的所有的改变\ngit add [file name] 添加一个文件到git index\ngit commit -v 当你用－v参数的时候可以看commit的差异\ngit commit -m \"This is the message describing the commit\" 添加commit信息\ngit commit -a -a是代表add，把所有的change加到git index里然后再commit\ngit commit -a -v 一般提交命令\ngit log 看你commit的日志\ngit diff 查看尚未暂存的更新\ngit rm a.a 移除文件(从暂存区和工作区中删除)\ngit rm --cached a.a 移除文件(只从暂存区中删除)\ngit commit -m \"remove\" 移除文件(从Git中删除)\ngit rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)\ngit diff --cached 或 $ git diff --staged 查看尚未提交的更新\ngit stash push 将文件给push到一个临时空间中\ngit stash pop 将文件从临时空间pop下来\n---------------------------------------------------------\ngit remote add origin git@github.com:username/Hello-World.git\n`git push origin master` 将本地项目给提交到服务器中\n-----------------------------------------------------------\n`git pull` 本地与服务器端同步\n-----------------------------------------------------------------\ngit push (远程仓库名) (分支名) 将本地分支推送到服务器上去。\ngit push origin serverfix:awesomebranch\n------------------------------------------------------------------\ngit fetch 相当于是从远程获取最新版本到本地，不会自动merge\ngit commit -a -m \"log_message\" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：\ngit branch branch_0.1 master 从主分支master创建branch_0.1分支\ngit branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0\ngit checkout branch_1.0/master 切换到branch_1.0/master分支\n","source":"_posts/git常用的命令.md","raw":"---\ntitle: git常用的命令\ndate: 2017-07-27 15:59:12\ncategories: \"git\"\ntags:\n    - git\n---\n\n好记性不如一个烂笔头\n\n使用`git`快两年了, 一些命令依然是记不住!!!这就尴尬了\n\n想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.\n\n### 记录一些 `git` 命令\n\n检出仓库：$ git clone git://github.com/jquery/jquery.git\n查看远程仓库：$ git remote -v\n添加远程仓库：$ git remote add [name] [url]\n删除远程仓库：$ git remote rm [name]\n修改远程仓库：$ git remote set-url --push [name] [newUrl]\n拉取远程仓库：$ git pull [remoteName] [localBranchName]\n推送远程仓库：$ git push [remoteName] [localBranchName]\n\n如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：\n\n```base\n$git push origin test:master         // 提交本地test分支作为远程的master分支\n$git push origin test:test              // 提交本地test分支作为远程的test分支\n```\n\n### 分支\n查看本地分支：$ git branch\n查看远程分支：$ git branch -r\n创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支\n切换分支：$ git checkout [name]\n创建新分支并立即切换到新分支：$ git checkout -b [name]\n删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项\n合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并\n创建远程分支(本地分支push到远程)：$ git push origin [name]\n删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] \n\n### 创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\n$git symbolic-ref HEAD refs/heads/[name]\n$rm .git/index\n$git clean -fdx\n\n### 版本`tag`相关操作\n查看版本：$ git tag\n创建版本：$ git tag [name]\n删除版本：$ git tag -d [name]\n查看远程版本：$ git tag -r\n创建远程版本(本地版本push到远程)：$ git push origin [name]\n删除远程版本：$ git push origin :refs/tags/[name]\n合并远程仓库的tag到本地：$ git pull origin --tags\n上传本地tag到远程仓库：$ git push origin --tags\n创建带注释的tag：$ git tag -a [name] -m 'yourMessage'\n\n### Git 常用命令\ngit branch 查看本地所有分支\ngit status 查看当前状态 \ngit commit 提交 \ngit branch -a 查看所有的分支\ngit branch -r 查看本地所有分支\ngit commit -am \"init\" 提交并且加注释 \ngit remote add origin git@192.168.1.119:ndshow\ngit push origin master 将文件给推到服务器上 \ngit remote show origin 显示远程库origin里的资源 \ngit push origin master:develop\ngit push origin master:hb-dev 将本地库与服务器上的库进行关联 \ngit checkout --track origin/dev 切换到远程dev分支\ngit branch -D master develop 删除本地库develop\ngit checkout -b dev 建立一个新的本地分支dev\ngit merge origin/dev 将分支dev与当前分支进行合并\ngit checkout dev 切换到本地dev分支\ngit remote show 查看远程库\ngit add .\ngit rm 文件名(包括路径) 从git中删除指定文件\ngit clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来\ngit config --list 看所有用户\ngit ls-files 看已经被提交的\ngit rm [file name] 删除一个文件\ngit commit -a 提交当前repos的所有的改变\ngit add [file name] 添加一个文件到git index\ngit commit -v 当你用－v参数的时候可以看commit的差异\ngit commit -m \"This is the message describing the commit\" 添加commit信息\ngit commit -a -a是代表add，把所有的change加到git index里然后再commit\ngit commit -a -v 一般提交命令\ngit log 看你commit的日志\ngit diff 查看尚未暂存的更新\ngit rm a.a 移除文件(从暂存区和工作区中删除)\ngit rm --cached a.a 移除文件(只从暂存区中删除)\ngit commit -m \"remove\" 移除文件(从Git中删除)\ngit rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)\ngit diff --cached 或 $ git diff --staged 查看尚未提交的更新\ngit stash push 将文件给push到一个临时空间中\ngit stash pop 将文件从临时空间pop下来\n---------------------------------------------------------\ngit remote add origin git@github.com:username/Hello-World.git\n`git push origin master` 将本地项目给提交到服务器中\n-----------------------------------------------------------\n`git pull` 本地与服务器端同步\n-----------------------------------------------------------------\ngit push (远程仓库名) (分支名) 将本地分支推送到服务器上去。\ngit push origin serverfix:awesomebranch\n------------------------------------------------------------------\ngit fetch 相当于是从远程获取最新版本到本地，不会自动merge\ngit commit -a -m \"log_message\" (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：\ngit branch branch_0.1 master 从主分支master创建branch_0.1分支\ngit branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0\ngit checkout branch_1.0/master 切换到branch_1.0/master分支\n","slug":"git常用的命令","published":1,"updated":"2017-07-27T09:29:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98sr000ai983rhx2o8uw","content":"<p>好记性不如一个烂笔头</p>\n<p>使用<code>git</code>快两年了, 一些命令依然是记不住!!!这就尴尬了</p>\n<p>想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.</p>\n<h3 id=\"记录一些-git-命令\"><a href=\"#记录一些-git-命令\" class=\"headerlink\" title=\"记录一些 git 命令\"></a>记录一些 <code>git</code> 命令</h3><p>检出仓库：$ git clone git://github.com/jquery/jquery.git<br>查看远程仓库：$ git remote -v<br>添加远程仓库：$ git remote add [name] [url]<br>删除远程仓库：$ git remote rm [name]<br>修改远程仓库：$ git remote set-url –push [name] [newUrl]<br>拉取远程仓库：$ git pull [remoteName] [localBranchName]<br>推送远程仓库：$ git push [remoteName] [localBranchName]</p>\n<p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git push origin test:master         // 提交本地test分支作为远程的master分支</div><div class=\"line\">$git push origin test:test              // 提交本地test分支作为远程的test分支</div></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>查看本地分支：$ git branch<br>查看远程分支：$ git branch -r<br>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支<br>切换分支：$ git checkout [name]<br>创建新分支并立即切换到新分支：$ git checkout -b [name]<br>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项<br>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并<br>创建远程分支(本地分支push到远程)：$ git push origin [name]<br>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </p>\n<h3 id=\"创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\"><a href=\"#创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\" class=\"headerlink\" title=\"创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\"></a>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</h3><p>$git symbolic-ref HEAD refs/heads/[name]<br>$rm .git/index<br>$git clean -fdx</p>\n<h3 id=\"版本tag相关操作\"><a href=\"#版本tag相关操作\" class=\"headerlink\" title=\"版本tag相关操作\"></a>版本<code>tag</code>相关操作</h3><p>查看版本：$ git tag<br>创建版本：$ git tag [name]<br>删除版本：$ git tag -d [name]<br>查看远程版本：$ git tag -r<br>创建远程版本(本地版本push到远程)：$ git push origin [name]<br>删除远程版本：$ git push origin :refs/tags/[name]<br>合并远程仓库的tag到本地：$ git pull origin –tags<br>上传本地tag到远程仓库：$ git push origin –tags<br>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</p>\n<h3 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h3><p>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看本地所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中</p>\n<h2 id=\"git-stash-pop-将文件从临时空间pop下来\"><a href=\"#git-stash-pop-将文件从临时空间pop下来\" class=\"headerlink\" title=\"git stash pop 将文件从临时空间pop下来\"></a>git stash pop 将文件从临时空间pop下来</h2><p>git remote add origin git@github.com:username/Hello-World.git</p>\n<h2 id=\"git-push-origin-master-将本地项目给提交到服务器中\"><a href=\"#git-push-origin-master-将本地项目给提交到服务器中\" class=\"headerlink\" title=\"git push origin master 将本地项目给提交到服务器中\"></a><code>git push origin master</code> 将本地项目给提交到服务器中</h2><h2 id=\"git-pull-本地与服务器端同步\"><a href=\"#git-pull-本地与服务器端同步\" class=\"headerlink\" title=\"git pull 本地与服务器端同步\"></a><code>git pull</code> 本地与服务器端同步</h2><p>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</p>\n<h2 id=\"git-push-origin-serverfix-awesomebranch\"><a href=\"#git-push-origin-serverfix-awesomebranch\" class=\"headerlink\" title=\"git push origin serverfix:awesomebranch\"></a>git push origin serverfix:awesomebranch</h2><p>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好记性不如一个烂笔头</p>\n<p>使用<code>git</code>快两年了, 一些命令依然是记不住!!!这就尴尬了</p>\n<p>想这些个来来回回使用,  但是还都的不好记的,  还是写下来比较好.</p>\n<h3 id=\"记录一些-git-命令\"><a href=\"#记录一些-git-命令\" class=\"headerlink\" title=\"记录一些 git 命令\"></a>记录一些 <code>git</code> 命令</h3><p>检出仓库：$ git clone git://github.com/jquery/jquery.git<br>查看远程仓库：$ git remote -v<br>添加远程仓库：$ git remote add [name] [url]<br>删除远程仓库：$ git remote rm [name]<br>修改远程仓库：$ git remote set-url –push [name] [newUrl]<br>拉取远程仓库：$ git pull [remoteName] [localBranchName]<br>推送远程仓库：$ git push [remoteName] [localBranchName]</p>\n<p>如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$git push origin test:master         // 提交本地test分支作为远程的master分支</div><div class=\"line\">$git push origin test:test              // 提交本地test分支作为远程的test分支</div></pre></td></tr></table></figure>\n<h3 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h3><p>查看本地分支：$ git branch<br>查看远程分支：$ git branch -r<br>创建本地分支：$ git branch [name] —-注意新分支创建后不会自动切换为当前分支<br>切换分支：$ git checkout [name]<br>创建新分支并立即切换到新分支：$ git checkout -b [name]<br>删除分支：$ git branch -d [name] —- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项<br>合并分支：$ git merge [name] —-将名称为[name]的分支与当前分支合并<br>创建远程分支(本地分支push到远程)：$ git push origin [name]<br>删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </p>\n<h3 id=\"创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\"><a href=\"#创建空的分支：-执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔\" class=\"headerlink\" title=\"创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)\"></a>创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</h3><p>$git symbolic-ref HEAD refs/heads/[name]<br>$rm .git/index<br>$git clean -fdx</p>\n<h3 id=\"版本tag相关操作\"><a href=\"#版本tag相关操作\" class=\"headerlink\" title=\"版本tag相关操作\"></a>版本<code>tag</code>相关操作</h3><p>查看版本：$ git tag<br>创建版本：$ git tag [name]<br>删除版本：$ git tag -d [name]<br>查看远程版本：$ git tag -r<br>创建远程版本(本地版本push到远程)：$ git push origin [name]<br>删除远程版本：$ git push origin :refs/tags/[name]<br>合并远程仓库的tag到本地：$ git pull origin –tags<br>上传本地tag到远程仓库：$ git push origin –tags<br>创建带注释的tag：$ git tag -a [name] -m ‘yourMessage’</p>\n<h3 id=\"Git-常用命令\"><a href=\"#Git-常用命令\" class=\"headerlink\" title=\"Git 常用命令\"></a>Git 常用命令</h3><p>git branch 查看本地所有分支<br>git status 查看当前状态<br>git commit 提交<br>git branch -a 查看所有的分支<br>git branch -r 查看本地所有分支<br>git commit -am “init” 提交并且加注释<br>git remote add origin git@192.168.1.119:ndshow<br>git push origin master 将文件给推到服务器上<br>git remote show origin 显示远程库origin里的资源<br>git push origin master:develop<br>git push origin master:hb-dev 将本地库与服务器上的库进行关联<br>git checkout –track origin/dev 切换到远程dev分支<br>git branch -D master develop 删除本地库develop<br>git checkout -b dev 建立一个新的本地分支dev<br>git merge origin/dev 将分支dev与当前分支进行合并<br>git checkout dev 切换到本地dev分支<br>git remote show 查看远程库<br>git add .<br>git rm 文件名(包括路径) 从git中删除指定文件<br>git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来<br>git config –list 看所有用户<br>git ls-files 看已经被提交的<br>git rm [file name] 删除一个文件<br>git commit -a 提交当前repos的所有的改变<br>git add [file name] 添加一个文件到git index<br>git commit -v 当你用－v参数的时候可以看commit的差异<br>git commit -m “This is the message describing the commit” 添加commit信息<br>git commit -a -a是代表add，把所有的change加到git index里然后再commit<br>git commit -a -v 一般提交命令<br>git log 看你commit的日志<br>git diff 查看尚未暂存的更新<br>git rm a.a 移除文件(从暂存区和工作区中删除)<br>git rm –cached a.a 移除文件(只从暂存区中删除)<br>git commit -m “remove” 移除文件(从Git中删除)<br>git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)<br>git diff –cached 或 $ git diff –staged 查看尚未提交的更新<br>git stash push 将文件给push到一个临时空间中</p>\n<h2 id=\"git-stash-pop-将文件从临时空间pop下来\"><a href=\"#git-stash-pop-将文件从临时空间pop下来\" class=\"headerlink\" title=\"git stash pop 将文件从临时空间pop下来\"></a>git stash pop 将文件从临时空间pop下来</h2><p>git remote add origin git@github.com:username/Hello-World.git</p>\n<h2 id=\"git-push-origin-master-将本地项目给提交到服务器中\"><a href=\"#git-push-origin-master-将本地项目给提交到服务器中\" class=\"headerlink\" title=\"git push origin master 将本地项目给提交到服务器中\"></a><code>git push origin master</code> 将本地项目给提交到服务器中</h2><h2 id=\"git-pull-本地与服务器端同步\"><a href=\"#git-pull-本地与服务器端同步\" class=\"headerlink\" title=\"git pull 本地与服务器端同步\"></a><code>git pull</code> 本地与服务器端同步</h2><p>git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</p>\n<h2 id=\"git-push-origin-serverfix-awesomebranch\"><a href=\"#git-push-origin-serverfix-awesomebranch\" class=\"headerlink\" title=\"git push origin serverfix:awesomebranch\"></a>git push origin serverfix:awesomebranch</h2><p>git fetch 相当于是从远程获取最新版本到本地，不会自动merge<br>git commit -a -m “log_message” (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：<br>git branch branch_0.1 master 从主分支master创建branch_0.1分支<br>git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0<br>git checkout branch_1.0/master 切换到branch_1.0/master分支</p>\n"},{"title":"hexo添加自己域名","date":"2017-06-12T02:09:35.000Z","comments":0,"_content":"\n### 折腾由来:\n> 前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.\n> 进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了[angely.me](angely.me)恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB\n\n<!-- more -->\n\n## 然后解析域名, 地址`userName.github.io`, 通过CNAME方式解析, 看起来是这样的\n{% asset_img admin.png 解析之后图解 %}\n\n## 自己域名有了, 开始配置\n\n直接修改config\n\n```coffeescript\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://angely.me/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\nroot字段配置不正确会导致blog静态文件download 404\n\n\n\n> 给项目 github pages 添加CNAME文件, 内容就是自己域名,`angely.me`\n> 因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后`hexo d -g`到github项目内\n\n```base\n➜ touch CNAME\n➜ vim CNAME\n➜ ga .\n➜ gcm '提交commint 备注'\n➜ git push origin master\n```\n\nga -> git add\ngcm -> git commint -m\n","source":"_posts/hexo添加自己域名.md","raw":"---\ntitle: hexo添加自己域名\ndate: 2017-06-12 10:09:35\ncategories: \"hexo\"\ntags:\n    - hexo\n    - next主题\ncomments: false\n---\n\n### 折腾由来:\n> 前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.\n> 进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了[angely.me](angely.me)恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB\n\n<!-- more -->\n\n## 然后解析域名, 地址`userName.github.io`, 通过CNAME方式解析, 看起来是这样的\n{% asset_img admin.png 解析之后图解 %}\n\n## 自己域名有了, 开始配置\n\n直接修改config\n\n```coffeescript\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://angely.me/\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n```\nroot字段配置不正确会导致blog静态文件download 404\n\n\n\n> 给项目 github pages 添加CNAME文件, 内容就是自己域名,`angely.me`\n> 因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后`hexo d -g`到github项目内\n\n```base\n➜ touch CNAME\n➜ vim CNAME\n➜ ga .\n➜ gcm '提交commint 备注'\n➜ git push origin master\n```\n\nga -> git add\ngcm -> git commint -m\n","slug":"hexo添加自己域名","published":1,"updated":"2017-06-12T02:42:17.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98su000ci9836d360g0c","content":"<h3 id=\"折腾由来\"><a href=\"#折腾由来\" class=\"headerlink\" title=\"折腾由来:\"></a>折腾由来:</h3><blockquote>\n<p>前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.<br>进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了<a href=\"angely.me\">angely.me</a>恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\"><a href=\"#然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\" class=\"headerlink\" title=\"然后解析域名, 地址userName.github.io, 通过CNAME方式解析, 看起来是这样的\"></a>然后解析域名, 地址<code>userName.github.io</code>, 通过CNAME方式解析, 看起来是这样的</h2><img src=\"/2017/06/12/hexo添加自己域名/admin.png\" alt=\"解析之后图解\" title=\"解析之后图解\">\n<h2 id=\"自己域名有了-开始配置\"><a href=\"#自己域名有了-开始配置\" class=\"headerlink\" title=\"自己域名有了, 开始配置\"></a>自己域名有了, 开始配置</h2><p>直接修改config</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http:<span class=\"regexp\">//</span>angely.me/</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year<span class=\"regexp\">/:month/</span>:day<span class=\"regexp\">/:title/</span></div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n<p>root字段配置不正确会导致blog静态文件download 404</p>\n<blockquote>\n<p>给项目 github pages 添加CNAME文件, 内容就是自己域名,<code>angely.me</code><br>因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后<code>hexo d -g</code>到github项目内</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ touch CNAME</div><div class=\"line\">➜ vim CNAME</div><div class=\"line\">➜ ga .</div><div class=\"line\">➜ gcm &apos;提交commint 备注&apos;</div><div class=\"line\">➜ git push origin master</div></pre></td></tr></table></figure>\n<p>ga -&gt; git add<br>gcm -&gt; git commint -m</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"折腾由来\"><a href=\"#折腾由来\" class=\"headerlink\" title=\"折腾由来:\"></a>折腾由来:</h3><blockquote>\n<p>前几天搭建了自己的git pages 博客,  虽然没有什么技术含量, 但是源于人的折腾精神, 不由的就在里面写东西.<br>进去blog必须要通过github进入, 太麻烦, 就在万网上面找好点的域名, blog当然是.me结尾的合适一点, 然后选中了<a href=\"angely.me\">angely.me</a>恩, 这样对我自身形象很贴(zi)切(lian), 想也没有想直接拿下, 首年13RMB</p>\n</blockquote>","more":"<h2 id=\"然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\"><a href=\"#然后解析域名-地址userName-github-io-通过CNAME方式解析-看起来是这样的\" class=\"headerlink\" title=\"然后解析域名, 地址userName.github.io, 通过CNAME方式解析, 看起来是这样的\"></a>然后解析域名, 地址<code>userName.github.io</code>, 通过CNAME方式解析, 看起来是这样的</h2><img src=\"/2017/06/12/hexo添加自己域名/admin.png\" alt=\"解析之后图解\" title=\"解析之后图解\">\n<h2 id=\"自己域名有了-开始配置\"><a href=\"#自己域名有了-开始配置\" class=\"headerlink\" title=\"自己域名有了, 开始配置\"></a>自己域名有了, 开始配置</h2><p>直接修改config</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># URL</span></div><div class=\"line\"><span class=\"comment\">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></div><div class=\"line\">url: http:<span class=\"regexp\">//</span>angely.me/</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year<span class=\"regexp\">/:month/</span>:day<span class=\"regexp\">/:title/</span></div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure>\n<p>root字段配置不正确会导致blog静态文件download 404</p>\n<blockquote>\n<p>给项目 github pages 添加CNAME文件, 内容就是自己域名,<code>angely.me</code><br>因为hexo内容都会把source文件编译到public, so 直接给source文件夹添加CNAME文件然后<code>hexo d -g</code>到github项目内</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ touch CNAME</div><div class=\"line\">➜ vim CNAME</div><div class=\"line\">➜ ga .</div><div class=\"line\">➜ gcm &apos;提交commint 备注&apos;</div><div class=\"line\">➜ git push origin master</div></pre></td></tr></table></figure>\n<p>ga -&gt; git add<br>gcm -&gt; git commint -m</p>"},{"title":"js中的观察者模式示例以及使用","date":"2017-07-26T07:08:51.000Z","_content":"\n### 介绍\n\n观察者模式，也叫订阅-发布模式。\n顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,\n这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。\n<!-- more -->\n今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,\n\n订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,\n发布, 就是把缓存在数组中的那写函数列表执行.\n具体看代码\n\n<!-- more -->\n\n```javascript\n/*\n最终, 我们需要的操作的数据应该是:\n{\n    eventType: [fn, fn, fn...]\n}\n*/\nclass Event {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n    console.log(this.eventList);\n  }\n\n  trigger (key) {\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.map(n => fns[i]());\n  }\n}\n\nlet test = new EVent();\ntest.listen('loginSouccess', () => console.log('登出成功, 拿到用户数据'));\ntest.listen('loginSouccess', () => console.log('再次登录'));\ntest.trigger('loginSouccess');// 订阅需要触发的事件\n```\n\n在listen()之后打印出来的event\n```base\n[object Object] {\n  loginSouccess: [function () {\nreturn window.runnerWindow.proxyConsole.log('登出成功, 拿到用户数据');\n}]\n}\n```\n我来简单试一下上面这段代码.\nlisten方法就是订阅(缓存), tergger方法就是发布(执行)\n这就是最简单的一个订阅-发布者模式.\n\n明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子\n\n现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.\n那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口\n\n1. login登录接口.\n2. 根据登录接口返回的id, 调取头像接口.\n3. 更具登录接口返回的id, 调取消息列表接口.\n\n一般情况下:\n```javascript\n$.ajax({\n  url:'http://ajax.login.com',\n  dataType:'json',\n  success:function(data){\n    getAvatar(data.id);\n    getMsg(data.id);\n    ....\n  }\n});\n```\n这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数\n\n添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,\n\n这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。\n\n如何解耦 ? 就是利用订阅发布模式.\n我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。\n\n具体代码实现在文章最后, 如果看不懂,  可以回到这里\n\n应为使用的es6语法,  所以直接, 哪里需要哪里`import`就可以愉快的使用了,\n\n### 发布-订阅没问题了,  现在看看取消订阅\n\n直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,\n\n```javascript\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n```\n\n我们要做的就是把remove方法放到Event对象中\n```javascript\nclass Login {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n  }\n\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      console.log('0',this.eventList);\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n  trigger (key) {\n    console.log(this.eventList);\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.forEach((n,i) => fns[i]());\n  }\n}\n\nfunction loginSouccess () {console.log('登录成功')}\nfunction loginSouccess2 () {console.log('再次登录')}\nlet test = new Login();\ntest.listen('loginSouccess', loginSouccess);\ntest.listen('loginSouccess', loginSouccess2);\ntest.remove('loginSouccess',loginSouccess2);\ntest.trigger('loginSouccess');\n```\n\n[这里是发布订阅模式的多种是现](https://msdn.microsoft.com/en-us/magazine/hh201955.aspx)\n\n### 代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n### 深入理解\n\n这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码...\n\n还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,\n\n需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。\n\n监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)\n\n用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。\n\nwhile循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。\n\n而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。\n\n监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。\n\n监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。\n\nsocket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。\n\n比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？\n\nsocket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。\n\n> [设计模式总的几种简单示例](https://zhuanlan.zhihu.com/p/24980136)\n> [原文地址](https://zhuanlan.zhihu.com/p/24453252)\n","source":"_posts/js中的观察者模式示例以及使用.md","raw":"---\ntitle: js中的观察者模式示例以及使用\ndate: 2017-07-26 15:08:51\ntags:\n    - javascript\n    - 观察者模式\n    - es6\n---\n\n### 介绍\n\n观察者模式，也叫订阅-发布模式。\n顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,\n这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。\n<!-- more -->\n今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,\n\n订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,\n发布, 就是把缓存在数组中的那写函数列表执行.\n具体看代码\n\n<!-- more -->\n\n```javascript\n/*\n最终, 我们需要的操作的数据应该是:\n{\n    eventType: [fn, fn, fn...]\n}\n*/\nclass Event {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n    console.log(this.eventList);\n  }\n\n  trigger (key) {\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.map(n => fns[i]());\n  }\n}\n\nlet test = new EVent();\ntest.listen('loginSouccess', () => console.log('登出成功, 拿到用户数据'));\ntest.listen('loginSouccess', () => console.log('再次登录'));\ntest.trigger('loginSouccess');// 订阅需要触发的事件\n```\n\n在listen()之后打印出来的event\n```base\n[object Object] {\n  loginSouccess: [function () {\nreturn window.runnerWindow.proxyConsole.log('登出成功, 拿到用户数据');\n}]\n}\n```\n我来简单试一下上面这段代码.\nlisten方法就是订阅(缓存), tergger方法就是发布(执行)\n这就是最简单的一个订阅-发布者模式.\n\n明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子\n\n现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.\n那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口\n\n1. login登录接口.\n2. 根据登录接口返回的id, 调取头像接口.\n3. 更具登录接口返回的id, 调取消息列表接口.\n\n一般情况下:\n```javascript\n$.ajax({\n  url:'http://ajax.login.com',\n  dataType:'json',\n  success:function(data){\n    getAvatar(data.id);\n    getMsg(data.id);\n    ....\n  }\n});\n```\n这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数\n\n添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,\n\n这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。\n\n如何解耦 ? 就是利用订阅发布模式.\n我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。\n\n具体代码实现在文章最后, 如果看不懂,  可以回到这里\n\n应为使用的es6语法,  所以直接, 哪里需要哪里`import`就可以愉快的使用了,\n\n### 发布-订阅没问题了,  现在看看取消订阅\n\n直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,\n\n```javascript\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n```\n\n我们要做的就是把remove方法放到Event对象中\n```javascript\nclass Login {\n  constructor () {\n    this.eventList = {};\n  }\n\n  listen (key, fn) {\n    if (!this.eventList[key]) {\n      // 对象中eventList\n      this.eventList[key] = [];\n    }\n    this.eventList[key].push(fn);\n  }\n\n  remove ( key, fn) {\n    let fns = this.eventList[key];\n    if (!fns) {\n      return false;\n    }\n    if (!fn) {\n      // 如果没有回调, 表示取消此key下所有方法\n      fns && (fns.length = 0); // 快速清空数组\n    }else{\n      //取消指定的方法\n      // 此时fns只是this.eventList[key]的引用,\n      // 实际要删除this.eventList[key]下的方法\n      console.log('0',this.eventList);\n      fns.forEach( (n, i) => {\n        if (fns[i] == fn) {\n          fns.splice(i, 1);\n        }\n      });\n    }\n  }\n  trigger (key) {\n    console.log(this.eventList);\n    let fns = this.eventList[key]; //获取到一组数组\n    if (!fns || fns.length === 0 ) {\n      // 对应key的函数,  反悔\n      return false;\n    }\n    fns.forEach((n,i) => fns[i]());\n  }\n}\n\nfunction loginSouccess () {console.log('登录成功')}\nfunction loginSouccess2 () {console.log('再次登录')}\nlet test = new Login();\ntest.listen('loginSouccess', loginSouccess);\ntest.listen('loginSouccess', loginSouccess2);\ntest.remove('loginSouccess',loginSouccess2);\ntest.trigger('loginSouccess');\n```\n\n[这里是发布订阅模式的多种是现](https://msdn.microsoft.com/en-us/magazine/hh201955.aspx)\n\n### 代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n### 深入理解\n\n这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码...\n\n还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,\n\n需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。\n\n监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)\n\n用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。\n\nwhile循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。\n\n而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。\n\n监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。\n\n监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。\n\nsocket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。\n\n比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？\n\nsocket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。\n\n> [设计模式总的几种简单示例](https://zhuanlan.zhihu.com/p/24980136)\n> [原文地址](https://zhuanlan.zhihu.com/p/24453252)\n","slug":"js中的观察者模式示例以及使用","published":1,"updated":"2017-07-28T08:27:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98sx000fi983ksyjuxev","content":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>观察者模式，也叫订阅-发布模式。<br>顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,<br>这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。<br><a id=\"more\"></a><br>今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,</p>\n<p>订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,<br>发布, 就是把缓存在数组中的那写函数列表执行.<br>具体看代码</p>\n<!-- more -->\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">最终, 我们需要的操作的数据应该是:</div><div class=\"line\">&#123;</div><div class=\"line\">    eventType: [fn, fn, fn...]</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> EVent();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功, 拿到用户数据'</span>));</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>));</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);<span class=\"comment\">// 订阅需要触发的事件</span></div></pre></td></tr></table></figure>\n<p>在listen()之后打印出来的event<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[object Object] &#123;</div><div class=\"line\">  loginSouccess: [function () &#123;</div><div class=\"line\">return window.runnerWindow.proxyConsole.log(&apos;登出成功, 拿到用户数据&apos;);</div><div class=\"line\">&#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我来简单试一下上面这段代码.<br>listen方法就是订阅(缓存), tergger方法就是发布(执行)<br>这就是最简单的一个订阅-发布者模式.</p>\n<p>明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子</p>\n<p>现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.<br>那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口</p>\n<ol>\n<li>login登录接口.</li>\n<li>根据登录接口返回的id, 调取头像接口.</li>\n<li>更具登录接口返回的id, 调取消息列表接口.</li>\n</ol>\n<p>一般情况下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">'http://ajax.login.com'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>:<span class=\"string\">'json'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    getAvatar(data.id);</div><div class=\"line\">    getMsg(data.id);</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数</p>\n<p>添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,</p>\n<p>这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。</p>\n<p>如何解耦 ? 就是利用订阅发布模式.<br>我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。</p>\n<p>具体代码实现在文章最后, 如果看不懂,  可以回到这里</p>\n<p>应为使用的es6语法,  所以直接, 哪里需要哪里<code>import</code>就可以愉快的使用了,</p>\n<h3 id=\"发布-订阅没问题了-现在看看取消订阅\"><a href=\"#发布-订阅没问题了-现在看看取消订阅\" class=\"headerlink\" title=\"发布-订阅没问题了,  现在看看取消订阅\"></a>发布-订阅没问题了,  现在看看取消订阅</h3><p>直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove ( key, fn) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">    fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">    <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">    <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">    fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">        fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要做的就是把remove方法放到Event对象中<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  remove ( key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">      fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">      <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">      <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'0'</span>,<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">      fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">          fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.forEach(<span class=\"function\">(<span class=\"params\">n,i</span>) =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess2</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>)&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Login();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess);</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess2);</div><div class=\"line\">test.remove(<span class=\"string\">'loginSouccess'</span>,loginSouccess2);</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://msdn.microsoft.com/en-us/magazine/hh201955.aspx\" target=\"_blank\" rel=\"external\">这里是发布订阅模式的多种是现</a></p>\n<h3 id=\"代码总汇\"><a href=\"#代码总汇\" class=\"headerlink\" title=\"代码总汇\"></a>代码总汇</h3><p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h3 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h3><p>这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码…</p>\n<p>还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,</p>\n<p>需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。</p>\n<p>监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)</p>\n<p>用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。</p>\n<p>while循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。</p>\n<p>而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。</p>\n<p>监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。</p>\n<p>监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。</p>\n<p>socket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。</p>\n<p>比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？</p>\n<p>socket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24980136\" target=\"_blank\" rel=\"external\">设计模式总的几种简单示例</a><br><a href=\"https://zhuanlan.zhihu.com/p/24453252\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>观察者模式，也叫订阅-发布模式。<br>顾名思义, 就是订阅一些功能,  然后在合适的实际发布出来,<br>这个模式听名字感觉非常抽象、难以理解，而且网上有很多混淆视听的解释，会把人搞的晕头转向不知所措。<br>","more":"<br>今天用代码来和直白的文字来说一下这个非常抽象,  难以理解, 而且在网上很多混淆视听的理解,</p>\n<p>订阅, 就是吧几个函数推入数组中代用,  听明白了,  是数组,<br>发布, 就是把缓存在数组中的那写函数列表执行.<br>具体看代码</p>\n<!-- more -->\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">最终, 我们需要的操作的数据应该是:</div><div class=\"line\">&#123;</div><div class=\"line\">    eventType: [fn, fn, fn...]</div><div class=\"line\">&#125;</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Event</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.map(<span class=\"function\"><span class=\"params\">n</span> =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> EVent();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'登出成功, 拿到用户数据'</span>));</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, () =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>));</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);<span class=\"comment\">// 订阅需要触发的事件</span></div></pre></td></tr></table></figure>\n<p>在listen()之后打印出来的event<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">[object Object] &#123;</div><div class=\"line\">  loginSouccess: [function () &#123;</div><div class=\"line\">return window.runnerWindow.proxyConsole.log(&apos;登出成功, 拿到用户数据&apos;);</div><div class=\"line\">&#125;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>我来简单试一下上面这段代码.<br>listen方法就是订阅(缓存), tergger方法就是发布(执行)<br>这就是最简单的一个订阅-发布者模式.</p>\n<p>明白这些之后估计你就会想的, 这种模式哪里使用呢? 举个栗子</p>\n<p>现在前端领域, 基本全都是单页面, 使用的都是ajax异步请求.<br>那么 ajax请求有一个很闹心的问题,  就是层级回调, 一个页面, 需要调用三个数据接口</p>\n<ol>\n<li>login登录接口.</li>\n<li>根据登录接口返回的id, 调取头像接口.</li>\n<li>更具登录接口返回的id, 调取消息列表接口.</li>\n</ol>\n<p>一般情况下:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.ajax(&#123;</div><div class=\"line\">  <span class=\"attr\">url</span>:<span class=\"string\">'http://ajax.login.com'</span>,</div><div class=\"line\">  <span class=\"attr\">dataType</span>:<span class=\"string\">'json'</span>,</div><div class=\"line\">  <span class=\"attr\">success</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    getAvatar(data.id);</div><div class=\"line\">    getMsg(data.id);</div><div class=\"line\">    ....</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>这样写是没有问题, 就是那天需求改了,  需要添加接口, 需要success会掉中添加一个函数</p>\n<p>添加函数能解决还是好的, 有的人直接在success回调里面继续请求ajax这样的代码,</p>\n<p>这样, 代码就变成一大坨油煎粑粑, 这种写法叫造粪模式，百分百的造出垃圾来。因为耦合性太大，接口调用都成了拴在一条绳子上的蚂蚱，一扯就是一坨。</p>\n<p>如何解耦 ? 就是利用订阅发布模式.<br>我们可以在getAvatar方法中, 订阅 (listen) login接口,  而一旦login接口走到success回调，我们就发布（trigger）一下即可。</p>\n<p>具体代码实现在文章最后, 如果看不懂,  可以回到这里</p>\n<p>应为使用的es6语法,  所以直接, 哪里需要哪里<code>import</code>就可以愉快的使用了,</p>\n<h3 id=\"发布-订阅没问题了-现在看看取消订阅\"><a href=\"#发布-订阅没问题了-现在看看取消订阅\" class=\"headerlink\" title=\"发布-订阅没问题了,  现在看看取消订阅\"></a>发布-订阅没问题了,  现在看看取消订阅</h3><p>直接上代码,  相信感兴趣的朋友, 代码看起来更容易一点,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">remove ( key, fn) &#123;</div><div class=\"line\">  <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">    <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">    fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">    <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">    <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">    fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">        fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们要做的就是把remove方法放到Event对象中<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Login</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span> () &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList = &#123;&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  listen (key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.eventList[key]) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对象中eventList</span></div><div class=\"line\">      <span class=\"keyword\">this</span>.eventList[key] = [];</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">this</span>.eventList[key].push(fn);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  remove ( key, fn) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key];</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!fn) &#123;</div><div class=\"line\">      <span class=\"comment\">// 如果没有回调, 表示取消此key下所有方法</span></div><div class=\"line\">      fns &amp;&amp; (fns.length = <span class=\"number\">0</span>); <span class=\"comment\">// 快速清空数组</span></div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"comment\">//取消指定的方法</span></div><div class=\"line\">      <span class=\"comment\">// 此时fns只是this.eventList[key]的引用,</span></div><div class=\"line\">      <span class=\"comment\">// 实际要删除this.eventList[key]下的方法</span></div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'0'</span>,<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">      fns.forEach( <span class=\"function\">(<span class=\"params\">n, i</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (fns[i] == fn) &#123;</div><div class=\"line\">          fns.splice(i, <span class=\"number\">1</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  trigger (key) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.eventList);</div><div class=\"line\">    <span class=\"keyword\">let</span> fns = <span class=\"keyword\">this</span>.eventList[key]; <span class=\"comment\">//获取到一组数组</span></div><div class=\"line\">    <span class=\"keyword\">if</span> (!fns || fns.length === <span class=\"number\">0</span> ) &#123;</div><div class=\"line\">      <span class=\"comment\">// 对应key的函数,  反悔</span></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    fns.forEach(<span class=\"function\">(<span class=\"params\">n,i</span>) =&gt;</span> fns[i]());</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'登录成功'</span>)&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loginSouccess2</span> (<span class=\"params\"></span>) </span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'再次登录'</span>)&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> test = <span class=\"keyword\">new</span> Login();</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess);</div><div class=\"line\">test.listen(<span class=\"string\">'loginSouccess'</span>, loginSouccess2);</div><div class=\"line\">test.remove(<span class=\"string\">'loginSouccess'</span>,loginSouccess2);</div><div class=\"line\">test.trigger(<span class=\"string\">'loginSouccess'</span>);</div></pre></td></tr></table></figure></p>\n<p><a href=\"https://msdn.microsoft.com/en-us/magazine/hh201955.aspx\" target=\"_blank\" rel=\"external\">这里是发布订阅模式的多种是现</a></p>\n<h3 id=\"代码总汇\"><a href=\"#代码总汇\" class=\"headerlink\" title=\"代码总汇\"></a>代码总汇</h3><p><a class=\"jsbin-embed\" href=\"http://jsbin.com/hoqijiwula/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h3 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h3><p>这样子看下里观察者模式是不是也没有那么难,  设计模式用的时间就了,  在重构代码的时候脑子里面有这个东西,  自然而然你就写出了容易维护的代码…</p>\n<p>还有一种更普遍的订阅发布模式, 就是javascirpt中的事件,  浏览器中的事件系统, 用户在触发事件的时候就就发生了发布然后触发,</p>\n<p>需要明确的一点就是: 订阅发布不等于监听, 很多人聊起这个模式，都会不经意的蹦出监听这个字眼，因为观察者么，观察和监听概念上差不多，这对初学者很容易造成理解上的混乱。</p>\n<p>监听是啥？那你知道盯梢吧？电视上大侦探破案，都会穿个大衣戴个礼帽，然后紧紧跟在嫌疑人屁股后面，无论嫌疑人吃饭逛街还是上厕所，他都形影不离的跟着他，一直盯着他，直到盯出破绽为止。(这个栗子很形象吧)</p>\n<p>用监听的方式实现我们的ajax回调问题，就是用while循环或setInterval函数。</p>\n<p>while循环就是设定一个初始状态位，然后通过不断的循环来“监听”login接口的数据到了没有？到了的话，我才跳出循环，这才是监听，具体应该叫“阻塞监听”，因为会让浏览器阻塞在while这里无法动弹。</p>\n<p>而setInterval的方式，是每隔一段时间过来瞅两眼，看看犯罪嫌疑人还在不在？这种方式不算实时监听，如果时间间隔太长，犯罪嫌疑人从眼皮溜走的概率非常大。这种方式，我们姑且叫它“时段监听”吧。</p>\n<p>监听的方式非常消耗资源，虽然也可以达到目的，但资源开销实在太大,很容易搞死浏览器，所以一般不推荐使用。</p>\n<p>监听的实用价值，其实是socket，这个也给大家科普一下。在前端领域属于html5的新式武器，叫websocket。</p>\n<p>socket的方式，就是专门开辟一条双向通道(客户端和服务端)来实时获取内容。这才是真实意义上的实时监听。</p>\n<p>比如我们做一个页面，内嵌了股票趋势图。这个毫不夸张的说，真的是每秒钟几十万上下啊！setInterval的方式会把你的客户全坑惨的；而while循环的方式也不行，因为页面除了股票图，还有其他内容，你阻塞在股票图上不往下显示了么？</p>\n<p>socket的方式还是非常好用的，感兴趣的童鞋可以回去查查使用方法，非常简单。不过因为浏览器兼容问题，支持的还不是很多，故使用场景较低，但这个解决问题的思路大家还是要掌握的。</p>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/24980136\" target=\"_blank\" rel=\"external\">设计模式总的几种简单示例</a><br><a href=\"https://zhuanlan.zhihu.com/p/24453252\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>"},{"title":"mac下更新node方法","date":"2017-07-25T10:04:30.000Z","_content":"\n千万别使用`brew upgrade node`来升级`node`\n\n<!-- more -->\n\n第一步，先查看本机node.js版本：\n\n`$ node -v`\n\n第二步，清除node.js的cache：\n\n`$ sudo npm cache clean -f`\n\n第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 \"n\"\n\n`$ sudo npm install -g n`\n\n第四步，安装最新版本的node.js\n\n`$ sudo n stable`\n\n第五步，再次查看本机的node.js版本：\n\n`$ node -v`\n","source":"_posts/mac下更新node和npm.md","raw":"---\ntitle: mac下更新node方法\ndate: 2017-07-25 18:04:30\ntags:\n    - node\n---\n\n千万别使用`brew upgrade node`来升级`node`\n\n<!-- more -->\n\n第一步，先查看本机node.js版本：\n\n`$ node -v`\n\n第二步，清除node.js的cache：\n\n`$ sudo npm cache clean -f`\n\n第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 \"n\"\n\n`$ sudo npm install -g n`\n\n第四步，安装最新版本的node.js\n\n`$ sudo n stable`\n\n第五步，再次查看本机的node.js版本：\n\n`$ node -v`\n","slug":"mac下更新node和npm","published":1,"updated":"2017-07-26T01:13:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98t6000ii983xqz807u2","content":"<p>千万别使用<code>brew upgrade node</code>来升级<code>node</code></p>\n<a id=\"more\"></a>\n<p>第一步，先查看本机node.js版本：</p>\n<p><code>$ node -v</code></p>\n<p>第二步，清除node.js的cache：</p>\n<p><code>$ sudo npm cache clean -f</code></p>\n<p>第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 “n”</p>\n<p><code>$ sudo npm install -g n</code></p>\n<p>第四步，安装最新版本的node.js</p>\n<p><code>$ sudo n stable</code></p>\n<p>第五步，再次查看本机的node.js版本：</p>\n<p><code>$ node -v</code></p>\n","site":{"data":{}},"excerpt":"<p>千万别使用<code>brew upgrade node</code>来升级<code>node</code></p>","more":"<p>第一步，先查看本机node.js版本：</p>\n<p><code>$ node -v</code></p>\n<p>第二步，清除node.js的cache：</p>\n<p><code>$ sudo npm cache clean -f</code></p>\n<p>第三步，安装 n 工具，这个工具是专门用来管理node.js版本的，别怀疑这个工具的名字，是他是他就是他，他的名字就是 “n”</p>\n<p><code>$ sudo npm install -g n</code></p>\n<p>第四步，安装最新版本的node.js</p>\n<p><code>$ sudo n stable</code></p>\n<p>第五步，再次查看本机的node.js版本：</p>\n<p><code>$ node -v</code></p>"},{"title":"javascript中异步执行的方法以及异步的开源库介绍","date":"2017-07-28T14:33:59.000Z","_content":"## 异步执行方法\n写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下`javascript`中的异步\n\n```base\nA: 嘿，哥们儿，快点！\nB: 我要三分钟，你先等着，完了叫你~\nA: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~\nC: 嗯！\n...\n```\n<!-- more -->\n\n由于 `javascript` 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.\n好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  `javascirpt`执行模式分为两种: 同步 or 异步\n\n所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.\n\n比如我们经常用到的`ajax`\n\n    接下来就说一下js中经常使用异步的几种方法\n\n### 1. 回调函数\n\n这是个最基本的方法就是吧方法通过回调函数来传入函数, \n\n假设这个有两个方法\n```\nf1();\nf2();\n```\nf1()是一个比较耗时的任务, 可以重构f1, 吧`f2`当做参数传入`f1`\n\n```javascript\nfunction f1(callback){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　callback();\n　　　　}, 1000);\n　　}\n\nf1(f2); //执行代码\n\n```\n上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.\n\n### 2. 事件监听\n\n这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. \n\n```javascript\n// 这个jQuery的事件写法, 也是浏览器中的事件写法\nf1.on('down', f2); // 这里是f1绑定了事件, 回调是f2;\n// 就是当f1发生`down`时间之后就执行f2方法\n```\n接着看监听时间\n```javascript\nlet f1 = () => {\n    setTimeout( () => {\n        f1.trigger('down'); // 粗发`down`事件, 从而开始执行f2.\n    }, 1000);\n}\n```\n这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现[模块化](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n### 3. 发布 / 订阅\n请移驾到这篇, 专门介绍观察者模式 [这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样](http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/)(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)\n\n这个不多说,  放一个`jQuery`一个插件的栗子\n\n```\n    jQuery.subscribe(\"down\", f2); // 订阅down事件\n```\n\n```\n　　function f1(){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　jQuery.publish(\"done\"); // 发布down事件\n　　　　}, 1000);\n　　}\n```\n\n## 4. Promise\n`Promise`在js里面很重要,在promise之前需要看看异步的操作流程控制,\n也就是异步操作多了,  我们应该怎么去处理他的流程;\n\n## 异步操作的流程控制\n如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化\n\n```javascript\nfunction async(arg, callback) {\n    console.log(`参数为${arg}, 2秒后反悔结果`);\n    setTimeout(() => { callback(arg * 2); }, 2000);\n}\n```\n\n`async`函数是个异步函数, 每次2秒后才能执行完毕.\n\n```javascript\nfunction final (value) {\n    console.log(`完成: ${value}`);\n}\n// async函数全部执行完毕才能执行final\n```\n如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数\n```javascript\nasync(1, function(value){\n  async(value, function(value){\n    async(value, function(value){\n      async(value, function(value){\n          async(value, function(value){\n          // 全部执行完了.\n          async(value, final);\n        });\n      });\n    });\n  });\n});\n```\n全部在回调中执行....是不是狠难看明白, 之后会很难维护\n\n### 1. 异步中的串行执行\n我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。\n```\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nfunction series(item) {\n  if(item) {\n    async( item, function(result) {\n      results.push(result);\n      // 返回调用自身\n      return series(items.shift());\n    });\n  } else {\n    return final(results);\n  }\n}\n// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。\nseries(items.shift());\n```\n上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。\n\n### 2. 并行执行\n流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nitems.forEach(function(item) {\n  async(item, function(result){\n    results.push(result);\n    if(results.length == items.length) {\n      // 全部执行完毕\n      final(results);\n    }\n  })\n});\n```\n上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。\n\n并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。\n\n### 3. 并行余串行的结合\n所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。\n\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nlet running = 0;\nlet limit = 2;\n\nfunction launcher() {\n  while(running < limit && items.length > 0) {\n    let item = items.shift();\n    async(item, function(result) {\n      results.push(result);\n      running--;\n      if(items.length > 0) {\n        launcher();\n      } else if(running == 0) {\n        final(results);\n      }\n    });\n    running++;\n  }\n}\n\nlauncher();\n```\n上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。\n\n并行和串行执行代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n## 4. Promise 对象\n\n这个比较复杂[先付上mdn地址](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n{% asset_img promise.png 官方的这个图我认识很容易看懂 %}\n\n想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)\n\n\n不难看出, `promise` 类似一个协议.通过这个协议来操作你的业务逻辑代码,\npromise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据\n它的链式调用可以让你的代码更容易阅读,\n\n```javascript\nf1().then(f2)\n    .catch(f3)\n// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑\n```\n\n修改f1代码\n\n```javascript\n　　let f1 = () => {\n　　　　var dfd = $.Deferred();\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　dfd.resolve();\n　　　　}, 500);\n　　　　return dfd.promise;\n　　}\n```\n\n最终在`javascript`中异步函数使用`Async/Await` [请移驾到这篇](http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/)\n\n## 今天介绍3种`javascript`异步开源库\n\n- jQuery Deferred\n- Q.js\n- Koajs\n\n### jQuery中的`Deferred`对象\n\n因为现在很少使用jQuery, 所以不怎么使用这个, [阮老师写的文章](http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html)\n\n`jQuery`版本在1.5.0以上就可以使用这个对象了\n\n### Q.js\n\n[附上文档](http://documentup.com/kriskowal/q/)\n同样支持遵循 [Promises/A+](https://promisesaplus.com/#point-1)\n`q.js`比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健\n\n```javascript\n// 看看这个回调地狱\nstep1(function (value1) {\n    step2(value1, function(value2) {\n        step3(value2, function(value3) {\n            step4(value3, function(value4) {\n                // Do something with value4\n            });\n        });\n    });\n});\n```\n\n使用`Qjs`之后的代码\n\n```javascript\nQ.fcall(promisedStep1)\n.then(promisedStep2)\n.then(promisedStep3)\n.then(promisedStep4)\n.then(function (value4) {\n    // Do something with value4\n})\n.catch(function (error) {\n    // Handle any error from all above steps\n})\n.done();\n```\n\n### `Koajs`\n\n[github](https://github.com/koajs/koa)\n[中文官网](http://koa.bootcss.com/)\n","source":"_posts/javascript异步开源库.md","raw":"---\ntitle: javascript中异步执行的方法以及异步的开源库介绍\ndate: 2017-07-28 22:33:59\ncategories: \"javascript\"\ntags:\n    - js异步\n    - javascript\n---\n## 异步执行方法\n写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下`javascript`中的异步\n\n```base\nA: 嘿，哥们儿，快点！\nB: 我要三分钟，你先等着，完了叫你~\nA: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~\nC: 嗯！\n...\n```\n<!-- more -->\n\n由于 `javascript` 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.\n好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  `javascirpt`执行模式分为两种: 同步 or 异步\n\n所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.\n\n比如我们经常用到的`ajax`\n\n    接下来就说一下js中经常使用异步的几种方法\n\n### 1. 回调函数\n\n这是个最基本的方法就是吧方法通过回调函数来传入函数, \n\n假设这个有两个方法\n```\nf1();\nf2();\n```\nf1()是一个比较耗时的任务, 可以重构f1, 吧`f2`当做参数传入`f1`\n\n```javascript\nfunction f1(callback){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　callback();\n　　　　}, 1000);\n　　}\n\nf1(f2); //执行代码\n\n```\n上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.\n\n### 2. 事件监听\n\n这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. \n\n```javascript\n// 这个jQuery的事件写法, 也是浏览器中的事件写法\nf1.on('down', f2); // 这里是f1绑定了事件, 回调是f2;\n// 就是当f1发生`down`时间之后就执行f2方法\n```\n接着看监听时间\n```javascript\nlet f1 = () => {\n    setTimeout( () => {\n        f1.trigger('down'); // 粗发`down`事件, 从而开始执行f2.\n    }, 1000);\n}\n```\n这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现[模块化](http://www.ruanyifeng.com/blog/2012/10/javascript_module.html)\n缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。\n\n### 3. 发布 / 订阅\n请移驾到这篇, 专门介绍观察者模式 [这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样](http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/)(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)\n\n这个不多说,  放一个`jQuery`一个插件的栗子\n\n```\n    jQuery.subscribe(\"down\", f2); // 订阅down事件\n```\n\n```\n　　function f1(){\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　jQuery.publish(\"done\"); // 发布down事件\n　　　　}, 1000);\n　　}\n```\n\n## 4. Promise\n`Promise`在js里面很重要,在promise之前需要看看异步的操作流程控制,\n也就是异步操作多了,  我们应该怎么去处理他的流程;\n\n## 异步操作的流程控制\n如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化\n\n```javascript\nfunction async(arg, callback) {\n    console.log(`参数为${arg}, 2秒后反悔结果`);\n    setTimeout(() => { callback(arg * 2); }, 2000);\n}\n```\n\n`async`函数是个异步函数, 每次2秒后才能执行完毕.\n\n```javascript\nfunction final (value) {\n    console.log(`完成: ${value}`);\n}\n// async函数全部执行完毕才能执行final\n```\n如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数\n```javascript\nasync(1, function(value){\n  async(value, function(value){\n    async(value, function(value){\n      async(value, function(value){\n          async(value, function(value){\n          // 全部执行完了.\n          async(value, final);\n        });\n      });\n    });\n  });\n});\n```\n全部在回调中执行....是不是狠难看明白, 之后会很难维护\n\n### 1. 异步中的串行执行\n我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。\n```\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nfunction series(item) {\n  if(item) {\n    async( item, function(result) {\n      results.push(result);\n      // 返回调用自身\n      return series(items.shift());\n    });\n  } else {\n    return final(results);\n  }\n}\n// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。\nseries(items.shift());\n```\n上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。\n\n### 2. 并行执行\n流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nitems.forEach(function(item) {\n  async(item, function(result){\n    results.push(result);\n    if(results.length == items.length) {\n      // 全部执行完毕\n      final(results);\n    }\n  })\n});\n```\n上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。\n\n并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。\n\n### 3. 并行余串行的结合\n所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。\n\n```javascript\nlet items = [ 1, 2, 3, 4, 5, 6 ];\nlet results = [];\nlet running = 0;\nlet limit = 2;\n\nfunction launcher() {\n  while(running < limit && items.length > 0) {\n    let item = items.shift();\n    async(item, function(result) {\n      results.push(result);\n      running--;\n      if(items.length > 0) {\n        launcher();\n      } else if(running == 0) {\n        final(results);\n      }\n    });\n    running++;\n  }\n}\n\nlauncher();\n```\n上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。\n\n并行和串行执行代码总汇\n\n<a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script>\n\n## 4. Promise 对象\n\n这个比较复杂[先付上mdn地址](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n{% asset_img promise.png 官方的这个图我认识很容易看懂 %}\n\n想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)\n\n\n不难看出, `promise` 类似一个协议.通过这个协议来操作你的业务逻辑代码,\npromise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据\n它的链式调用可以让你的代码更容易阅读,\n\n```javascript\nf1().then(f2)\n    .catch(f3)\n// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑\n```\n\n修改f1代码\n\n```javascript\n　　let f1 = () => {\n　　　　var dfd = $.Deferred();\n　　　　setTimeout(function () {\n　　　　　　// f1的任务代码\n　　　　　　dfd.resolve();\n　　　　}, 500);\n　　　　return dfd.promise;\n　　}\n```\n\n最终在`javascript`中异步函数使用`Async/Await` [请移驾到这篇](http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/)\n\n## 今天介绍3种`javascript`异步开源库\n\n- jQuery Deferred\n- Q.js\n- Koajs\n\n### jQuery中的`Deferred`对象\n\n因为现在很少使用jQuery, 所以不怎么使用这个, [阮老师写的文章](http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html)\n\n`jQuery`版本在1.5.0以上就可以使用这个对象了\n\n### Q.js\n\n[附上文档](http://documentup.com/kriskowal/q/)\n同样支持遵循 [Promises/A+](https://promisesaplus.com/#point-1)\n`q.js`比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健\n\n```javascript\n// 看看这个回调地狱\nstep1(function (value1) {\n    step2(value1, function(value2) {\n        step3(value2, function(value3) {\n            step4(value3, function(value4) {\n                // Do something with value4\n            });\n        });\n    });\n});\n```\n\n使用`Qjs`之后的代码\n\n```javascript\nQ.fcall(promisedStep1)\n.then(promisedStep2)\n.then(promisedStep3)\n.then(promisedStep4)\n.then(function (value4) {\n    // Do something with value4\n})\n.catch(function (error) {\n    // Handle any error from all above steps\n})\n.done();\n```\n\n### `Koajs`\n\n[github](https://github.com/koajs/koa)\n[中文官网](http://koa.bootcss.com/)\n","slug":"javascript异步开源库","published":1,"updated":"2017-07-28T09:44:29.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98tb000mi983rhm8cdxd","content":"<h2 id=\"异步执行方法\"><a href=\"#异步执行方法\" class=\"headerlink\" title=\"异步执行方法\"></a>异步执行方法</h2><p>写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下<code>javascript</code>中的异步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A: 嘿，哥们儿，快点！</div><div class=\"line\">B: 我要三分钟，你先等着，完了叫你~</div><div class=\"line\">A: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~</div><div class=\"line\">C: 嗯！</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>由于 <code>javascript</code> 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.<br>好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  <code>javascirpt</code>执行模式分为两种: 同步 or 异步</p>\n<p>所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.</p>\n<p>比如我们经常用到的<code>ajax</code></p>\n<pre><code>接下来就说一下js中经常使用异步的几种方法\n</code></pre><h3 id=\"1-回调函数\"><a href=\"#1-回调函数\" class=\"headerlink\" title=\"1. 回调函数\"></a>1. 回调函数</h3><p>这是个最基本的方法就是吧方法通过回调函数来传入函数, </p>\n<p>假设这个有两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1();</div><div class=\"line\">f2();</div></pre></td></tr></table></figure></p>\n<p>f1()是一个比较耗时的任务, 可以重构f1, 吧<code>f2</code>当做参数传入<code>f1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　callback();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">f1(f2); <span class=\"comment\">//执行代码</span></div></pre></td></tr></table></figure>\n<p>上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.</p>\n<h3 id=\"2-事件监听\"><a href=\"#2-事件监听\" class=\"headerlink\" title=\"2. 事件监听\"></a>2. 事件监听</h3><p>这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个jQuery的事件写法, 也是浏览器中的事件写法</span></div><div class=\"line\">f1.on(<span class=\"string\">'down'</span>, f2); <span class=\"comment\">// 这里是f1绑定了事件, 回调是f2;</span></div><div class=\"line\"><span class=\"comment\">// 就是当f1发生`down`时间之后就执行f2方法</span></div></pre></td></tr></table></figure>\n<p>接着看监听时间<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        f1.trigger(<span class=\"string\">'down'</span>); <span class=\"comment\">// 粗发`down`事件, 从而开始执行f2.</span></div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现<a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"external\">模块化</a><br>缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h3 id=\"3-发布-订阅\"><a href=\"#3-发布-订阅\" class=\"headerlink\" title=\"3. 发布 / 订阅\"></a>3. 发布 / 订阅</h3><p>请移驾到这篇, 专门介绍观察者模式 <a href=\"http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/\">这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样</a>(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)</p>\n<p>这个不多说,  放一个<code>jQuery</code>一个插件的栗子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.subscribe(&quot;down&quot;, f2); // 订阅down事件</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　function f1()&#123;</div><div class=\"line\">　　　　setTimeout(function () &#123;</div><div class=\"line\">　　　　　　// f1的任务代码</div><div class=\"line\">　　　　　　jQuery.publish(&quot;done&quot;); // 发布down事件</div><div class=\"line\">　　　　&#125;, 1000);</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-Promise\"><a href=\"#4-Promise\" class=\"headerlink\" title=\"4. Promise\"></a>4. Promise</h2><p><code>Promise</code>在js里面很重要,在promise之前需要看看异步的操作流程控制,<br>也就是异步操作多了,  我们应该怎么去处理他的流程;</p>\n<h2 id=\"异步操作的流程控制\"><a href=\"#异步操作的流程控制\" class=\"headerlink\" title=\"异步操作的流程控制\"></a>异步操作的流程控制</h2><p>如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async</span>(<span class=\"params\">arg, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`参数为<span class=\"subst\">$&#123;arg&#125;</span>, 2秒后反悔结果`</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; callback(arg * <span class=\"number\">2</span>); &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>async</code>函数是个异步函数, 每次2秒后才能执行完毕.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">final</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`完成: <span class=\"subst\">$&#123;value&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// async函数全部执行完毕才能执行final</span></div></pre></td></tr></table></figure>\n<p>如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>(<span class=\"number\">1</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 全部执行完了.</span></div><div class=\"line\">          <span class=\"keyword\">async</span>(value, final);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>全部在回调中执行….是不是狠难看明白, 之后会很难维护</p>\n<h3 id=\"1-异步中的串行执行\"><a href=\"#1-异步中的串行执行\" class=\"headerlink\" title=\"1. 异步中的串行执行\"></a>1. 异步中的串行执行</h3><p>我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let items = [ 1, 2, 3, 4, 5, 6 ];</div><div class=\"line\">let results = [];</div><div class=\"line\">function series(item) &#123;</div><div class=\"line\">  if(item) &#123;</div><div class=\"line\">    async( item, function(result) &#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      // 返回调用自身</div><div class=\"line\">      return series(items.shift());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    return final(results);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</div><div class=\"line\">series(items.shift());</div></pre></td></tr></table></figure></p>\n<p>上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。</p>\n<h3 id=\"2-并行执行\"><a href=\"#2-并行执行\" class=\"headerlink\" title=\"2. 并行执行\"></a>2. 并行执行</h3><p>流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\">items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">    results.push(result);</div><div class=\"line\">    <span class=\"keyword\">if</span>(results.length == items.length) &#123;</div><div class=\"line\">      <span class=\"comment\">// 全部执行完毕</span></div><div class=\"line\">      final(results);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。</p>\n<p>并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。</p>\n<h3 id=\"3-并行余串行的结合\"><a href=\"#3-并行余串行的结合\" class=\"headerlink\" title=\"3. 并行余串行的结合\"></a>3. 并行余串行的结合</h3><p>所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\"><span class=\"keyword\">let</span> running = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> limit = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">launcher</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span>(running &lt; limit &amp;&amp; items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> item = items.shift();</div><div class=\"line\">    <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      running--;</div><div class=\"line\">      <span class=\"keyword\">if</span>(items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        launcher();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(running == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        final(results);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    running++;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">launcher();</div></pre></td></tr></table></figure>\n<p>上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。</p>\n<p>并行和串行执行代码总汇</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h2 id=\"4-Promise-对象\"><a href=\"#4-Promise-对象\" class=\"headerlink\" title=\"4. Promise 对象\"></a>4. Promise 对象</h2><p>这个比较复杂<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">先付上mdn地址</a></p>\n<img src=\"/2017/07/28/javascript异步开源库/promise.png\" alt=\"官方的这个图我认识很容易看懂\" title=\"官方的这个图我认识很容易看懂\">\n<p>想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)</p>\n<p>不难看出, <code>promise</code> 类似一个协议.通过这个协议来操作你的业务逻辑代码,<br>promise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据<br>它的链式调用可以让你的代码更容易阅读,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1().then(f2)</div><div class=\"line\">    .catch(f3)</div><div class=\"line\"><span class=\"comment\">// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑</span></div></pre></td></tr></table></figure>\n<p>修改f1代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> dfd = $.Deferred();</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　dfd.resolve();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">500</span>);</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> dfd.promise;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>最终在<code>javascript</code>中异步函数使用<code>Async/Await</code> <a href=\"http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/\">请移驾到这篇</a></p>\n<h2 id=\"今天介绍3种javascript异步开源库\"><a href=\"#今天介绍3种javascript异步开源库\" class=\"headerlink\" title=\"今天介绍3种javascript异步开源库\"></a>今天介绍3种<code>javascript</code>异步开源库</h2><ul>\n<li>jQuery Deferred</li>\n<li>Q.js</li>\n<li>Koajs</li>\n</ul>\n<h3 id=\"jQuery中的Deferred对象\"><a href=\"#jQuery中的Deferred对象\" class=\"headerlink\" title=\"jQuery中的Deferred对象\"></a>jQuery中的<code>Deferred</code>对象</h3><p>因为现在很少使用jQuery, 所以不怎么使用这个, <a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\" target=\"_blank\" rel=\"external\">阮老师写的文章</a></p>\n<p><code>jQuery</code>版本在1.5.0以上就可以使用这个对象了</p>\n<h3 id=\"Q-js\"><a href=\"#Q-js\" class=\"headerlink\" title=\"Q.js\"></a>Q.js</h3><p><a href=\"http://documentup.com/kriskowal/q/\" target=\"_blank\" rel=\"external\">附上文档</a><br>同样支持遵循 <a href=\"https://promisesaplus.com/#point-1\" target=\"_blank\" rel=\"external\">Promises/A+</a><br><code>q.js</code>比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 看看这个回调地狱</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">    step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">        step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">            step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用<code>Qjs</code>之后的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q.fcall(promisedStep1)</div><div class=\"line\">.then(promisedStep2)</div><div class=\"line\">.then(promisedStep3)</div><div class=\"line\">.then(promisedStep4)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from all above steps</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.done();</div></pre></td></tr></table></figure>\n<h3 id=\"Koajs\"><a href=\"#Koajs\" class=\"headerlink\" title=\"Koajs\"></a><code>Koajs</code></h3><p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"external\">github</a><br><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"external\">中文官网</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"异步执行方法\"><a href=\"#异步执行方法\" class=\"headerlink\" title=\"异步执行方法\"></a>异步执行方法</h2><p>写前端这么久,  也没有好好的梳理一下异步的一些东西, 今天就蹭着说异步开源库 也顺便简单说一下<code>javascript</code>中的异步</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">A: 嘿，哥们儿，快点！</div><div class=\"line\">B: 我要三分钟，你先等着，完了叫你~</div><div class=\"line\">A: 好的，记得叫我啊~ 你（C）也等着吧，完了叫你~</div><div class=\"line\">C: 嗯！</div><div class=\"line\">...</div></pre></td></tr></table></figure>","more":"<p>由于 <code>javascript</code> 的执行环境是单线程,  所以只能一次执行一个task, 所以后面的任务只能干等着.<br>好处是实现起来想对比较简单, 执行环境想对单纯; 坏处就是如果任务繁重, 那么后面会等候很长时间, 整个程序执行时间就会想对长 这样就会导致浏览器处于假死状态, 为了解决这个问题,  <code>javascirpt</code>执行模式分为两种: 同步 or 异步</p>\n<p>所以在js中异步执行是非常重要的,  应该在写的时候, 耗时的任务都应该异步执行, 这样可以避免浏览器假死, 和用户体验.</p>\n<p>比如我们经常用到的<code>ajax</code></p>\n<pre><code>接下来就说一下js中经常使用异步的几种方法\n</code></pre><h3 id=\"1-回调函数\"><a href=\"#1-回调函数\" class=\"headerlink\" title=\"1. 回调函数\"></a>1. 回调函数</h3><p>这是个最基本的方法就是吧方法通过回调函数来传入函数, </p>\n<p>假设这个有两个方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1();</div><div class=\"line\">f2();</div></pre></td></tr></table></figure></p>\n<p>f1()是一个比较耗时的任务, 可以重构f1, 吧<code>f2</code>当做参数传入<code>f1</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\">callback</span>)</span>&#123;</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　callback();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">　　&#125;</div><div class=\"line\"></div><div class=\"line\">f1(f2); <span class=\"comment\">//执行代码</span></div></pre></td></tr></table></figure>\n<p>上面这种方式就是吧同步转变成异步的执行,这种方法比较简单,  也更容易理解,  在开发过程中如果回调函数使用遍地开花, 就会引起回调地狱,  如果不对代码做很好的注释,  后期根本看不懂.</p>\n<h3 id=\"2-事件监听\"><a href=\"#2-事件监听\" class=\"headerlink\" title=\"2. 事件监听\"></a>2. 事件监听</h3><p>这种是采用事件驱动, 任务的执行不取决于代码的顺序, 而是取决于事件的触发. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 这个jQuery的事件写法, 也是浏览器中的事件写法</span></div><div class=\"line\">f1.on(<span class=\"string\">'down'</span>, f2); <span class=\"comment\">// 这里是f1绑定了事件, 回调是f2;</span></div><div class=\"line\"><span class=\"comment\">// 就是当f1发生`down`时间之后就执行f2方法</span></div></pre></td></tr></table></figure>\n<p>接着看监听时间<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    setTimeout( <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        f1.trigger(<span class=\"string\">'down'</span>); <span class=\"comment\">// 粗发`down`事件, 从而开始执行f2.</span></div><div class=\"line\">    &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这种方法的优点是可以绑定多个事件 , 也比较容易理解,  也有利于实现<a href=\"http://www.ruanyifeng.com/blog/2012/10/javascript_module.html\" target=\"_blank\" rel=\"external\">模块化</a><br>缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p>\n<h3 id=\"3-发布-订阅\"><a href=\"#3-发布-订阅\" class=\"headerlink\" title=\"3. 发布 / 订阅\"></a>3. 发布 / 订阅</h3><p>请移驾到这篇, 专门介绍观察者模式 <a href=\"http://angely.me/2017/07/26/js%E4%B8%AD%E7%9A%84%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E7%A4%BA%E4%BE%8B%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8/\">这里是发布订阅模式, 和事件驱动很相似, 应该说基本一样</a>(只不过粗发的一个是用户操作自动, 一个是使用代码手动触发)</p>\n<p>这个不多说,  放一个<code>jQuery</code>一个插件的栗子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">jQuery.subscribe(&quot;down&quot;, f2); // 订阅down事件</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　function f1()&#123;</div><div class=\"line\">　　　　setTimeout(function () &#123;</div><div class=\"line\">　　　　　　// f1的任务代码</div><div class=\"line\">　　　　　　jQuery.publish(&quot;done&quot;); // 发布down事件</div><div class=\"line\">　　　　&#125;, 1000);</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"4-Promise\"><a href=\"#4-Promise\" class=\"headerlink\" title=\"4. Promise\"></a>4. Promise</h2><p><code>Promise</code>在js里面很重要,在promise之前需要看看异步的操作流程控制,<br>也就是异步操作多了,  我们应该怎么去处理他的流程;</p>\n<h2 id=\"异步操作的流程控制\"><a href=\"#异步操作的流程控制\" class=\"headerlink\" title=\"异步操作的流程控制\"></a>异步操作的流程控制</h2><p>如果很多个异步操作的时候, 就会存在一个流程控制的问题, 先执行那个, 后执行那个, 这个是需要我们在写的时候就必须规定好的, 也就是异步操作的同步化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">async</span>(<span class=\"params\">arg, callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`参数为<span class=\"subst\">$&#123;arg&#125;</span>, 2秒后反悔结果`</span>);</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; callback(arg * <span class=\"number\">2</span>); &#125;, <span class=\"number\">2000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>async</code>函数是个异步函数, 每次2秒后才能执行完毕.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">final</span> (<span class=\"params\">value</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`完成: <span class=\"subst\">$&#123;value&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// async函数全部执行完毕才能执行final</span></div></pre></td></tr></table></figure>\n<p>如果有好多个异步函数, 需要全部完成后, 才能执行之后的task.现在 就比如前面需要执行6次async才能执行final函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">async</span>(<span class=\"number\">1</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"keyword\">async</span>(value, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>)</span>&#123;</div><div class=\"line\">          <span class=\"comment\">// 全部执行完了.</span></div><div class=\"line\">          <span class=\"keyword\">async</span>(value, final);</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>全部在回调中执行….是不是狠难看明白, 之后会很难维护</p>\n<h3 id=\"1-异步中的串行执行\"><a href=\"#1-异步中的串行执行\" class=\"headerlink\" title=\"1. 异步中的串行执行\"></a>1. 异步中的串行执行</h3><p>我们可以编写一个流程控制函数，让它来控制异步任务，一个任务完成以后，再执行另一个。这就叫串行执行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">let items = [ 1, 2, 3, 4, 5, 6 ];</div><div class=\"line\">let results = [];</div><div class=\"line\">function series(item) &#123;</div><div class=\"line\">  if(item) &#123;</div><div class=\"line\">    async( item, function(result) &#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      // 返回调用自身</div><div class=\"line\">      return series(items.shift());</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    return final(results);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">// Array.prototype.shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</div><div class=\"line\">series(items.shift());</div></pre></td></tr></table></figure></p>\n<p>上面代码中，函数series就是串行函数，它会依次执行异步任务，所有任务都完成后，才会执行final函数。items数组保存每一个异步任务的参数，results数组保存每一个异步任务的运行结果。</p>\n<h3 id=\"2-并行执行\"><a href=\"#2-并行执行\" class=\"headerlink\" title=\"2. 并行执行\"></a>2. 并行执行</h3><p>流程控制函数也可以是并行执行，即所有异步任务同时执行，等到全部完成以后，才执行final函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\">items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;</div><div class=\"line\">    results.push(result);</div><div class=\"line\">    <span class=\"keyword\">if</span>(results.length == items.length) &#123;</div><div class=\"line\">      <span class=\"comment\">// 全部执行完毕</span></div><div class=\"line\">      final(results);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面代码中，forEach方法会同时发起6个异步任务，等到它们全部完成以后，才会执行final函数。</p>\n<p>并行执行的好处是效率较高，比起串行执行一次只能执行一个任务，较为节约时间。但是问题在于如果并行的任务较多，很容易耗尽系统资源，拖慢运行速度。因此有了第三种流程控制方式。</p>\n<h3 id=\"3-并行余串行的结合\"><a href=\"#3-并行余串行的结合\" class=\"headerlink\" title=\"3. 并行余串行的结合\"></a>3. 并行余串行的结合</h3><p>所谓并行与串行的结合，就是设置一个门槛，每次最多只能并行执行n个异步任务。这样就避免了过分占用系统资源。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> items = [ <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span> ];</div><div class=\"line\"><span class=\"keyword\">let</span> results = [];</div><div class=\"line\"><span class=\"keyword\">let</span> running = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">let</span> limit = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">launcher</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">while</span>(running &lt; limit &amp;&amp; items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> item = items.shift();</div><div class=\"line\">    <span class=\"keyword\">async</span>(item, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>) </span>&#123;</div><div class=\"line\">      results.push(result);</div><div class=\"line\">      running--;</div><div class=\"line\">      <span class=\"keyword\">if</span>(items.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        launcher();</div><div class=\"line\">      &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(running == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">        final(results);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    running++;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">launcher();</div></pre></td></tr></table></figure>\n<p>上面代码中，最多只能同时运行两个异步任务。变量running记录当前正在运行的任务数，只要低于门槛值，就再启动一个新的任务，如果等于0，就表示所有任务都执行完了，这时就执行final函数。</p>\n<p>并行和串行执行代码总汇</p>\n<p><a class=\"jsbin-embed\" href=\"http://jsbin.com/fofopob/embed?js,console\" target=\"_blank\" rel=\"external\">JS Bin on jsbin.com</a><script src=\"http://static.jsbin.com/js/embed.min.js?4.0.4\"></script></p>\n<h2 id=\"4-Promise-对象\"><a href=\"#4-Promise-对象\" class=\"headerlink\" title=\"4. Promise 对象\"></a>4. Promise 对象</h2><p>这个比较复杂<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"external\">先付上mdn地址</a></p>\n<img src=\"/2017/07/28/javascript异步开源库/promise.png\" alt=\"官方的这个图我认识很容易看懂\" title=\"官方的这个图我认识很容易看懂\">\n<p>想了好久也不知道怎么描述它.(简单点说就是处理异步请求。。我们经常会做些承诺，如果我赢了你就嫁给我，如果输了我就嫁给你之类的诺言。这就是promise的中文含义。一个诺言，一个成功，一个失败。)</p>\n<p>不难看出, <code>promise</code> 类似一个协议.通过这个协议来操作你的业务逻辑代码,<br>promise 本质上是分离了异步数据获取和业务逻辑，从而让开发人员能专注于一个事物，而不必同时考虑业务和数据<br>它的链式调用可以让你的代码更容易阅读,</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">f1().then(f2)</div><div class=\"line\">    .catch(f3)</div><div class=\"line\"><span class=\"comment\">// 这样写异步代码是不是觉得很优雅, 同样也很容易修改业务逻辑</span></div></pre></td></tr></table></figure>\n<p>修改f1代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"keyword\">let</span> f1 = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> dfd = $.Deferred();</div><div class=\"line\">　　　　setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">　　　　　　<span class=\"comment\">// f1的任务代码</span></div><div class=\"line\">　　　　　　dfd.resolve();</div><div class=\"line\">　　　　&#125;, <span class=\"number\">500</span>);</div><div class=\"line\">　　　　<span class=\"keyword\">return</span> dfd.promise;</div><div class=\"line\">　　&#125;</div></pre></td></tr></table></figure>\n<p>最终在<code>javascript</code>中异步函数使用<code>Async/Await</code> <a href=\"http://angely.me/2017/06/14/%E4%BD%93%E9%AA%8Ces7%E4%B8%AD%E7%9A%84Async-Await%E6%9D%A5%E5%A4%84%E7%90%86%E5%BC%82%E6%AD%A5/\">请移驾到这篇</a></p>\n<h2 id=\"今天介绍3种javascript异步开源库\"><a href=\"#今天介绍3种javascript异步开源库\" class=\"headerlink\" title=\"今天介绍3种javascript异步开源库\"></a>今天介绍3种<code>javascript</code>异步开源库</h2><ul>\n<li>jQuery Deferred</li>\n<li>Q.js</li>\n<li>Koajs</li>\n</ul>\n<h3 id=\"jQuery中的Deferred对象\"><a href=\"#jQuery中的Deferred对象\" class=\"headerlink\" title=\"jQuery中的Deferred对象\"></a>jQuery中的<code>Deferred</code>对象</h3><p>因为现在很少使用jQuery, 所以不怎么使用这个, <a href=\"http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html\" target=\"_blank\" rel=\"external\">阮老师写的文章</a></p>\n<p><code>jQuery</code>版本在1.5.0以上就可以使用这个对象了</p>\n<h3 id=\"Q-js\"><a href=\"#Q-js\" class=\"headerlink\" title=\"Q.js\"></a>Q.js</h3><p><a href=\"http://documentup.com/kriskowal/q/\" target=\"_blank\" rel=\"external\">附上文档</a><br>同样支持遵循 <a href=\"https://promisesaplus.com/#point-1\" target=\"_blank\" rel=\"external\">Promises/A+</a><br><code>q.js</code>比其他两个相对要成熟一点, 因为他出现的时间较早, 代码也很稳健</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 看看这个回调地狱</span></div><div class=\"line\">step1(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value1</span>) </span>&#123;</div><div class=\"line\">    step2(value1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value2</span>) </span>&#123;</div><div class=\"line\">        step3(value2, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value3</span>) </span>&#123;</div><div class=\"line\">            step4(value3, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">                <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>使用<code>Qjs</code>之后的代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q.fcall(promisedStep1)</div><div class=\"line\">.then(promisedStep2)</div><div class=\"line\">.then(promisedStep3)</div><div class=\"line\">.then(promisedStep4)</div><div class=\"line\">.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value4</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Do something with value4</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// Handle any error from all above steps</span></div><div class=\"line\">&#125;)</div><div class=\"line\">.done();</div></pre></td></tr></table></figure>\n<h3 id=\"Koajs\"><a href=\"#Koajs\" class=\"headerlink\" title=\"Koajs\"></a><code>Koajs</code></h3><p><a href=\"https://github.com/koajs/koa\" target=\"_blank\" rel=\"external\">github</a><br><a href=\"http://koa.bootcss.com/\" target=\"_blank\" rel=\"external\">中文官网</a></p>"},{"title":"js移触屏滑动事件","date":"2017-06-07T01:22:00.000Z","type":"categories","_content":"\n主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件\n\n## 介绍\n\n- touchstart: 手指放到屏幕上时触发\n- touchmove: 手指在屏幕上滑动式触发\n- touchend: 手指离开屏幕时触发\n- touchcancel: 系统取消touch事件的时候粗发\n\n如果有偏差请到 这里查看详细[javascritp mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches)\n\n<!-- more -->\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // Invoke the appropriate handler depending on thew\n  // number of touch points.\n  switch (e.touches.length) {\n    case 1: handle_one_touch(e); break;\n    case 2: handle_two_touches(e); break;\n    case 3: handle_three_touches(e); break;\n    default: console.log(\"Not supported\"); break;\n  }\n},\nfalse);\n```\n\n### 具体说一下触发后生成的event事件 通过回调传递过去\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // e.touches 当前屏幕上所有手指的列表\n  // e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches\n  // e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches\n  // 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：\n  // clientX / clientY:      触摸点相对浏览器窗口的位置\n  // pageX / pageY:       触摸点相对于页面的位置\n  // screenX  /  screenY:    触摸点相对于屏幕的位置\n  // identifier:        touch对象的ID\n}\n }, false);\n```\n\n具体事件看来下, 接下来就做一个小小的demo来加深下理解\n\n### html结构\n\n```html\n<div id=\"common_wrap\" class=\"common-wrap\">\n    <h4 class=\"common-kit__h4\">在区域内向左右滑动</h4>\n        <!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 -->\n        <ul class=\"common-kit__list\" id=\"mask\" style=\"left:0px\">\n            <li><a href=\"javascript:;\">111</a></li>\n            <li><a href=\"javascript:;\">222</a></li>\n            <li><a href=\"javascript:;\">333</a></li>\n            <li><a href=\"javascript:;\">444</a></li>\n            <li><a href=\"javascript:;\">555</a></li>\n            <li><a href=\"javascript:;\">666</a></li>\n        </ul>\n</div>\n```\n\n### 具体样式实现代码\n\n```css\n.common-wrap{\n    width: 100%;\n    height: 105px;\n    border-bottom: 8px solid #eee;\n}\n.common-kit__h4{\n    font-size: 14px;\n    margin-top: 17px;\n    margin-left: 8px;\n    letter-spacing: 0.2px;\n}\n.common-kit{\n    width: 100%;\n    position: relative;\n}\n.common-kit__list{\n    width: 558px;\n    position: absolute;\n    margin-top: 10px;\n    height: 80px;\n}\n.common-kit__list li{\n    position: relative;\n    list-style: none;\n    width: 80px;\n    height: 80px;\n    background-color: #eee;\n    float: left;\n    margin-left: 13px;\n}\n.common-kit__list li a{\n    text-decoration: none;\n    font-size: 12px;\n    position: absolute;\n    top:50%;\n    transform:translateY(-50%);\n    text-align: center;\n    padding: 0px 12px;\n}\n.common-kit__list li:first-child{\n    margin-left: 8px;\n}\n```\n\n### js代码实现以及注释原理\n\n```javascript\nfunction slidecommonkit(){\n\n    const mask = document.getElementById('mask');\n    const common_kit__list=document.querySelector('.common-kit__list');\n    const startPosition, endPosition, deltaX, deltaY, moveLength;\n    let commonkitLeft;\n\n    /*手指按下瞬间触发touchstart事件*/\n    mask.addEventListener('touchstart', e => {\n        commonkitLeft=parseInt(common_kit__list.style.left);\n        const touch = e.targetTouches[0];  //targetTouches位于当前DOM元素上的手指动作的列表\n        startPosition = {   //取屏幕上第一个手指相对于页面的坐标\n            x: touch.pageX,\n            y: touch.pageY\n        }\n    });\n\n    /*手指移动触发touchmove事件*/\n    mask.addEventListener('touchmove', function (e) {\n        var touch = e.targetTouches[0];\n        endPosition = {\n            x: touch.pageX,\n            y: touch.pageY\n        }\n\n        deltaX = endPosition.x - startPosition.x;   //移动到最后的坐标x - 开始时的坐标x\n        moveLength = Math.abs(deltaX);   //获得移动的x方向的距离\n\n        /*向左移动的函数*/\n        var swipeLeft=function(){\n            if( deltaX<(-30) ){   //这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动\n\n                if(Math.abs(commonkitLeft)+moveLength > ( common_kit__list.offsetWidth-window.innerWidth ) ){   //判断临界值\n                    common_kit__list.style.left=window.innerWidth-common_kit__list.offsetWidth+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft-moveLength+'px';  //上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）\n                }\n            }\n        }\n        swipeLeft();   //执行该函数\n\n        /*向右移动的函数*/\n        var swipeRight=function(){\n            if( deltaX>30 ){\n                /*主要是逻辑*/\n                if( commonkitLeft + moveLength > 0  ){\n                    common_kit__list.style.left=0+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft+moveLength+'px';\n                }\n            }\n        }\n        swipeRight();\n\n    });\n\n};\n\nslidecommonkit();\n```\n","source":"_posts/js移触屏滑动事件.md","raw":"---\ntitle: js移触屏滑动事件\ndate: 2017-06-07 09:22:00\ncategories: web前端\ntags:\n  - h5\ntype: \"categories\"\n---\n\n主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件\n\n## 介绍\n\n- touchstart: 手指放到屏幕上时触发\n- touchmove: 手指在屏幕上滑动式触发\n- touchend: 手指离开屏幕时触发\n- touchcancel: 系统取消touch事件的时候粗发\n\n如果有偏差请到 这里查看详细[javascritp mdn](https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches)\n\n<!-- more -->\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // Invoke the appropriate handler depending on thew\n  // number of touch points.\n  switch (e.touches.length) {\n    case 1: handle_one_touch(e); break;\n    case 2: handle_two_touches(e); break;\n    case 3: handle_three_touches(e); break;\n    default: console.log(\"Not supported\"); break;\n  }\n},\nfalse);\n```\n\n### 具体说一下触发后生成的event事件 通过回调传递过去\n\n```javascript\nsomeElement.addEventListener('touchstart', e => {\n  // e.touches 当前屏幕上所有手指的列表\n  // e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches\n  // e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches\n  // 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：\n  // clientX / clientY:      触摸点相对浏览器窗口的位置\n  // pageX / pageY:       触摸点相对于页面的位置\n  // screenX  /  screenY:    触摸点相对于屏幕的位置\n  // identifier:        touch对象的ID\n}\n }, false);\n```\n\n具体事件看来下, 接下来就做一个小小的demo来加深下理解\n\n### html结构\n\n```html\n<div id=\"common_wrap\" class=\"common-wrap\">\n    <h4 class=\"common-kit__h4\">在区域内向左右滑动</h4>\n        <!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 -->\n        <ul class=\"common-kit__list\" id=\"mask\" style=\"left:0px\">\n            <li><a href=\"javascript:;\">111</a></li>\n            <li><a href=\"javascript:;\">222</a></li>\n            <li><a href=\"javascript:;\">333</a></li>\n            <li><a href=\"javascript:;\">444</a></li>\n            <li><a href=\"javascript:;\">555</a></li>\n            <li><a href=\"javascript:;\">666</a></li>\n        </ul>\n</div>\n```\n\n### 具体样式实现代码\n\n```css\n.common-wrap{\n    width: 100%;\n    height: 105px;\n    border-bottom: 8px solid #eee;\n}\n.common-kit__h4{\n    font-size: 14px;\n    margin-top: 17px;\n    margin-left: 8px;\n    letter-spacing: 0.2px;\n}\n.common-kit{\n    width: 100%;\n    position: relative;\n}\n.common-kit__list{\n    width: 558px;\n    position: absolute;\n    margin-top: 10px;\n    height: 80px;\n}\n.common-kit__list li{\n    position: relative;\n    list-style: none;\n    width: 80px;\n    height: 80px;\n    background-color: #eee;\n    float: left;\n    margin-left: 13px;\n}\n.common-kit__list li a{\n    text-decoration: none;\n    font-size: 12px;\n    position: absolute;\n    top:50%;\n    transform:translateY(-50%);\n    text-align: center;\n    padding: 0px 12px;\n}\n.common-kit__list li:first-child{\n    margin-left: 8px;\n}\n```\n\n### js代码实现以及注释原理\n\n```javascript\nfunction slidecommonkit(){\n\n    const mask = document.getElementById('mask');\n    const common_kit__list=document.querySelector('.common-kit__list');\n    const startPosition, endPosition, deltaX, deltaY, moveLength;\n    let commonkitLeft;\n\n    /*手指按下瞬间触发touchstart事件*/\n    mask.addEventListener('touchstart', e => {\n        commonkitLeft=parseInt(common_kit__list.style.left);\n        const touch = e.targetTouches[0];  //targetTouches位于当前DOM元素上的手指动作的列表\n        startPosition = {   //取屏幕上第一个手指相对于页面的坐标\n            x: touch.pageX,\n            y: touch.pageY\n        }\n    });\n\n    /*手指移动触发touchmove事件*/\n    mask.addEventListener('touchmove', function (e) {\n        var touch = e.targetTouches[0];\n        endPosition = {\n            x: touch.pageX,\n            y: touch.pageY\n        }\n\n        deltaX = endPosition.x - startPosition.x;   //移动到最后的坐标x - 开始时的坐标x\n        moveLength = Math.abs(deltaX);   //获得移动的x方向的距离\n\n        /*向左移动的函数*/\n        var swipeLeft=function(){\n            if( deltaX<(-30) ){   //这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动\n\n                if(Math.abs(commonkitLeft)+moveLength > ( common_kit__list.offsetWidth-window.innerWidth ) ){   //判断临界值\n                    common_kit__list.style.left=window.innerWidth-common_kit__list.offsetWidth+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft-moveLength+'px';  //上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）\n                }\n            }\n        }\n        swipeLeft();   //执行该函数\n\n        /*向右移动的函数*/\n        var swipeRight=function(){\n            if( deltaX>30 ){\n                /*主要是逻辑*/\n                if( commonkitLeft + moveLength > 0  ){\n                    common_kit__list.style.left=0+'px';\n                }else{\n                    common_kit__list.style.left=commonkitLeft+moveLength+'px';\n                }\n            }\n        }\n        swipeRight();\n\n    });\n\n};\n\nslidecommonkit();\n```\n","slug":"js移触屏滑动事件","published":1,"updated":"2017-07-26T01:58:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98tg000oi983cac5t1sm","content":"<p>主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>touchstart: 手指放到屏幕上时触发</li>\n<li>touchmove: 手指在屏幕上滑动式触发</li>\n<li>touchend: 手指离开屏幕时触发</li>\n<li>touchcancel: 系统取消touch事件的时候粗发</li>\n</ul>\n<p>如果有偏差请到 这里查看详细<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches\" target=\"_blank\" rel=\"external\">javascritp mdn</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Invoke the appropriate handler depending on thew</span></div><div class=\"line\">  <span class=\"comment\">// number of touch points.</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (e.touches.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: handle_one_touch(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: handle_two_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: handle_three_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not supported\"</span>); <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"具体说一下触发后生成的event事件-通过回调传递过去\"><a href=\"#具体说一下触发后生成的event事件-通过回调传递过去\" class=\"headerlink\" title=\"具体说一下触发后生成的event事件 通过回调传递过去\"></a>具体说一下触发后生成的event事件 通过回调传递过去</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// e.touches 当前屏幕上所有手指的列表</span></div><div class=\"line\">  <span class=\"comment\">// e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：</span></div><div class=\"line\">  <span class=\"comment\">// clientX / clientY:      触摸点相对浏览器窗口的位置</span></div><div class=\"line\">  <span class=\"comment\">// pageX / pageY:       触摸点相对于页面的位置</span></div><div class=\"line\">  <span class=\"comment\">// screenX  /  screenY:    触摸点相对于屏幕的位置</span></div><div class=\"line\">  <span class=\"comment\">// identifier:        touch对象的ID</span></div><div class=\"line\">&#125;</div><div class=\"line\"> &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>具体事件看来下, 接下来就做一个小小的demo来加深下理解</p>\n<h3 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"common_wrap\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__h4\"</span>&gt;</span>在区域内向左右滑动<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__list\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mask\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"left:0px\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>555<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"具体样式实现代码\"><a href=\"#具体样式实现代码\" class=\"headerlink\" title=\"具体样式实现代码\"></a>具体样式实现代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.common-wrap</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">105px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">8px</span> solid <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__h4</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">17px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">558px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"js代码实现以及注释原理\"><a href=\"#js代码实现以及注释原理\" class=\"headerlink\" title=\"js代码实现以及注释原理\"></a>js代码实现以及注释原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slidecommonkit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> mask = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mask'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> common_kit__list=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.common-kit__list'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> startPosition, endPosition, deltaX, deltaY, moveLength;</div><div class=\"line\">    <span class=\"keyword\">let</span> commonkitLeft;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指按下瞬间触发touchstart事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">        commonkitLeft=<span class=\"built_in\">parseInt</span>(common_kit__list.style.left);</div><div class=\"line\">        <span class=\"keyword\">const</span> touch = e.targetTouches[<span class=\"number\">0</span>];  <span class=\"comment\">//targetTouches位于当前DOM元素上的手指动作的列表</span></div><div class=\"line\">        startPosition = &#123;   <span class=\"comment\">//取屏幕上第一个手指相对于页面的坐标</span></div><div class=\"line\">            x: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指移动触发touchmove事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touch = e.targetTouches[<span class=\"number\">0</span>];</div><div class=\"line\">        endPosition = &#123;</div><div class=\"line\">            <span class=\"attr\">x</span>: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        deltaX = endPosition.x - startPosition.x;   <span class=\"comment\">//移动到最后的坐标x - 开始时的坐标x</span></div><div class=\"line\">        moveLength = <span class=\"built_in\">Math</span>.abs(deltaX);   <span class=\"comment\">//获得移动的x方向的距离</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向左移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeLeft=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&lt;(<span class=\"number\">-30</span>) )&#123;   <span class=\"comment\">//这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(commonkitLeft)+moveLength &gt; ( common_kit__list.offsetWidth-<span class=\"built_in\">window</span>.innerWidth ) )&#123;   <span class=\"comment\">//判断临界值</span></div><div class=\"line\">                    common_kit__list.style.left=<span class=\"built_in\">window</span>.innerWidth-common_kit__list.offsetWidth+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft-moveLength+<span class=\"string\">'px'</span>;  <span class=\"comment\">//上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeLeft();   <span class=\"comment\">//执行该函数</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向右移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeRight=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&gt;<span class=\"number\">30</span> )&#123;</div><div class=\"line\">                <span class=\"comment\">/*主要是逻辑*/</span></div><div class=\"line\">                <span class=\"keyword\">if</span>( commonkitLeft + moveLength &gt; <span class=\"number\">0</span>  )&#123;</div><div class=\"line\">                    common_kit__list.style.left=<span class=\"number\">0</span>+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft+moveLength+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeRight();</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">slidecommonkit();</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>主要说一下移动端中算是经常用到的几个事件, 手机端写了好多, 一直都懒得去写滑动的一些功能组件, 今天有时间研究一下touch事件</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>touchstart: 手指放到屏幕上时触发</li>\n<li>touchmove: 手指在屏幕上滑动式触发</li>\n<li>touchend: 手指离开屏幕时触发</li>\n<li>touchcancel: 系统取消touch事件的时候粗发</li>\n</ul>\n<p>如果有偏差请到 这里查看详细<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/TouchEvent/touches\" target=\"_blank\" rel=\"external\">javascritp mdn</a></p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// Invoke the appropriate handler depending on thew</span></div><div class=\"line\">  <span class=\"comment\">// number of touch points.</span></div><div class=\"line\">  <span class=\"keyword\">switch</span> (e.touches.length) &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>: handle_one_touch(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>: handle_two_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>: handle_three_touches(e); <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Not supported\"</span>); <span class=\"keyword\">break</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;,</div><div class=\"line\"><span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"具体说一下触发后生成的event事件-通过回调传递过去\"><a href=\"#具体说一下触发后生成的event事件-通过回调传递过去\" class=\"headerlink\" title=\"具体说一下触发后生成的event事件 通过回调传递过去\"></a>具体说一下触发后生成的event事件 通过回调传递过去</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">someElement.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">  <span class=\"comment\">// e.touches 当前屏幕上所有手指的列表</span></div><div class=\"line\">  <span class=\"comment\">// e.targetTouches 当前dom元素上手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// e.changedTouches 涉及当前事件的手指的列表，尽量使用这个代替touches</span></div><div class=\"line\">  <span class=\"comment\">// 这些列表里的每次触摸由touch对象组成，touch对象里包含着触摸信息，主要属性如下：</span></div><div class=\"line\">  <span class=\"comment\">// clientX / clientY:      触摸点相对浏览器窗口的位置</span></div><div class=\"line\">  <span class=\"comment\">// pageX / pageY:       触摸点相对于页面的位置</span></div><div class=\"line\">  <span class=\"comment\">// screenX  /  screenY:    触摸点相对于屏幕的位置</span></div><div class=\"line\">  <span class=\"comment\">// identifier:        touch对象的ID</span></div><div class=\"line\">&#125;</div><div class=\"line\"> &#125;, <span class=\"literal\">false</span>);</div></pre></td></tr></table></figure>\n<p>具体事件看来下, 接下来就做一个小小的demo来加深下理解</p>\n<h3 id=\"html结构\"><a href=\"#html结构\" class=\"headerlink\" title=\"html结构\"></a>html结构</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"common_wrap\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-wrap\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h4</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__h4\"</span>&gt;</span>在区域内向左右滑动<span class=\"tag\">&lt;/<span class=\"name\">h4</span>&gt;</span></div><div class=\"line\">        <span class=\"comment\">&lt;!-- 这里让li左浮动, 然后ul定位设置为absolute 这样就可以改变ul中的left值来移动ul的位置 --&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"common-kit__list\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"mask\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"left:0px\"</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>111<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>222<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>333<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>444<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>555<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"具体样式实现代码\"><a href=\"#具体样式实现代码\" class=\"headerlink\" title=\"具体样式实现代码\"></a>具体样式实现代码</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.common-wrap</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">105px</span>;</div><div class=\"line\">    <span class=\"attribute\">border-bottom</span>: <span class=\"number\">8px</span> solid <span class=\"number\">#eee</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__h4</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">14px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">17px</span>;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">    <span class=\"attribute\">letter-spacing</span>: <span class=\"number\">0.2px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">558px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">    <span class=\"attribute\">list-style</span>: none;</div><div class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">80px</span>;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#eee</span>;</div><div class=\"line\">    <span class=\"attribute\">float</span>: left;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">text-decoration</span>: none;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">12px</span>;</div><div class=\"line\">    <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">    <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>;</div><div class=\"line\">    <span class=\"attribute\">transform</span>:<span class=\"built_in\">translateY</span>(-50%);</div><div class=\"line\">    <span class=\"attribute\">text-align</span>: center;</div><div class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0px</span> <span class=\"number\">12px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.common-kit__list</span> <span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">:first-child</span>&#123;</div><div class=\"line\">    <span class=\"attribute\">margin-left</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"js代码实现以及注释原理\"><a href=\"#js代码实现以及注释原理\" class=\"headerlink\" title=\"js代码实现以及注释原理\"></a>js代码实现以及注释原理</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">slidecommonkit</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">const</span> mask = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'mask'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> common_kit__list=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.common-kit__list'</span>);</div><div class=\"line\">    <span class=\"keyword\">const</span> startPosition, endPosition, deltaX, deltaY, moveLength;</div><div class=\"line\">    <span class=\"keyword\">let</span> commonkitLeft;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指按下瞬间触发touchstart事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchstart'</span>, e =&gt; &#123;</div><div class=\"line\">        commonkitLeft=<span class=\"built_in\">parseInt</span>(common_kit__list.style.left);</div><div class=\"line\">        <span class=\"keyword\">const</span> touch = e.targetTouches[<span class=\"number\">0</span>];  <span class=\"comment\">//targetTouches位于当前DOM元素上的手指动作的列表</span></div><div class=\"line\">        startPosition = &#123;   <span class=\"comment\">//取屏幕上第一个手指相对于页面的坐标</span></div><div class=\"line\">            x: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/*手指移动触发touchmove事件*/</span></div><div class=\"line\">    mask.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> touch = e.targetTouches[<span class=\"number\">0</span>];</div><div class=\"line\">        endPosition = &#123;</div><div class=\"line\">            <span class=\"attr\">x</span>: touch.pageX,</div><div class=\"line\">            <span class=\"attr\">y</span>: touch.pageY</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        deltaX = endPosition.x - startPosition.x;   <span class=\"comment\">//移动到最后的坐标x - 开始时的坐标x</span></div><div class=\"line\">        moveLength = <span class=\"built_in\">Math</span>.abs(deltaX);   <span class=\"comment\">//获得移动的x方向的距离</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向左移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeLeft=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&lt;(<span class=\"number\">-30</span>) )&#123;   <span class=\"comment\">//这里以30作为判断是否触发、如果deltaX小于-30，说明向左移动</span></div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(commonkitLeft)+moveLength &gt; ( common_kit__list.offsetWidth-<span class=\"built_in\">window</span>.innerWidth ) )&#123;   <span class=\"comment\">//判断临界值</span></div><div class=\"line\">                    common_kit__list.style.left=<span class=\"built_in\">window</span>.innerWidth-common_kit__list.offsetWidth+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft-moveLength+<span class=\"string\">'px'</span>;  <span class=\"comment\">//上一次的left值-移动的距离（由于距离是正数，而向左移动left值是负数，所以用-）</span></div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeLeft();   <span class=\"comment\">//执行该函数</span></div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">/*向右移动的函数*/</span></div><div class=\"line\">        <span class=\"keyword\">var</span> swipeRight=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>( deltaX&gt;<span class=\"number\">30</span> )&#123;</div><div class=\"line\">                <span class=\"comment\">/*主要是逻辑*/</span></div><div class=\"line\">                <span class=\"keyword\">if</span>( commonkitLeft + moveLength &gt; <span class=\"number\">0</span>  )&#123;</div><div class=\"line\">                    common_kit__list.style.left=<span class=\"number\">0</span>+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">                    common_kit__list.style.left=commonkitLeft+moveLength+<span class=\"string\">'px'</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        swipeRight();</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">slidecommonkit();</div></pre></td></tr></table></figure>"},{"title":"react-native中android环境问题","date":"2017-06-13T02:37:51.000Z","comments":0,"_content":"\n### react-native 中android环境总是报错\n\n记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制\n\n<!-- more -->\n\n具体问题之后解释\n\n```base\n* What went wrong:\nA problem occurred evaluating project ':app'.\n> java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 11.564 secs\nCould not install the app on the device, read the error above for details.\nMake sure you have an Android emulator running or a device connected and have\nset up your Android development environment:\nhttps://facebook.github.io/react-native/docs/android-setup.html\n```\n\n### 解决办法\n\n> 项目主要针对自己环境解决对应bug, 如果不知道, 请run `react-native run-android debug`来查看具体出错原因\n> 由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了\n\n\n```javascritp\nandroid: {\n    compileSdkVersion 23\n    buildToolsVersion \"25.0.0\"\n    ...\n}\n```\n","source":"_posts/react-native中android环境问题.md","raw":"---\ntitle: react-native中android环境问题\ndate: 2017-06-13 10:37:51\ntags:\n  - react-native\n  - RN-android\ncategories: \"react-native踩坑记\"\ncomments: false\n---\n\n### react-native 中android环境总是报错\n\n记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制\n\n<!-- more -->\n\n具体问题之后解释\n\n```base\n* What went wrong:\nA problem occurred evaluating project ':app'.\n> java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\n\nBUILD FAILED\n\nTotal time: 11.564 secs\nCould not install the app on the device, read the error above for details.\nMake sure you have an Android emulator running or a device connected and have\nset up your Android development environment:\nhttps://facebook.github.io/react-native/docs/android-setup.html\n```\n\n### 解决办法\n\n> 项目主要针对自己环境解决对应bug, 如果不知道, 请run `react-native run-android debug`来查看具体出错原因\n> 由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了\n\n\n```javascritp\nandroid: {\n    compileSdkVersion 23\n    buildToolsVersion \"25.0.0\"\n    ...\n}\n```\n","slug":"react-native中android环境问题","published":1,"updated":"2017-07-26T01:59:51.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98to000qi983a5dwhygn","content":"<h3 id=\"react-native-中android环境总是报错\"><a href=\"#react-native-中android环境总是报错\" class=\"headerlink\" title=\"react-native 中android环境总是报错\"></a>react-native 中android环境总是报错</h3><p>记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制</p>\n<a id=\"more\"></a>\n<p>具体问题之后解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* What went wrong:</div><div class=\"line\">A problem occurred evaluating project &apos;:app&apos;.</div><div class=\"line\">&gt; java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0</div><div class=\"line\"></div><div class=\"line\">* Try:</div><div class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class=\"line\"></div><div class=\"line\">BUILD FAILED</div><div class=\"line\"></div><div class=\"line\">Total time: 11.564 secs</div><div class=\"line\">Could not install the app on the device, read the error above for details.</div><div class=\"line\">Make sure you have an Android emulator running or a device connected and have</div><div class=\"line\">set up your Android development environment:</div><div class=\"line\">https://facebook.github.io/react-native/docs/android-setup.html</div></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><blockquote>\n<p>项目主要针对自己环境解决对应bug, 如果不知道, 请run <code>react-native run-android debug</code>来查看具体出错原因<br>由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android: &#123;</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    buildToolsVersion &quot;25.0.0&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"react-native-中android环境总是报错\"><a href=\"#react-native-中android环境总是报错\" class=\"headerlink\" title=\"react-native 中android环境总是报错\"></a>react-native 中android环境总是报错</h3><p>记得之前使用linux的时候搭建android环境就不太好弄, PATH里面总是会有版本差别问题, 这次使用mac也没有避免, 只是这次问题貌似比上次复制</p>","more":"<p>具体问题之后解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">* What went wrong:</div><div class=\"line\">A problem occurred evaluating project &apos;:app&apos;.</div><div class=\"line\">&gt; java.lang.UnsupportedClassVersionError: com/android/build/gradle/AppPlugin : Unsupported major.minor version 52.0</div><div class=\"line\"></div><div class=\"line\">* Try:</div><div class=\"line\">Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.</div><div class=\"line\"></div><div class=\"line\">BUILD FAILED</div><div class=\"line\"></div><div class=\"line\">Total time: 11.564 secs</div><div class=\"line\">Could not install the app on the device, read the error above for details.</div><div class=\"line\">Make sure you have an Android emulator running or a device connected and have</div><div class=\"line\">set up your Android development environment:</div><div class=\"line\">https://facebook.github.io/react-native/docs/android-setup.html</div></pre></td></tr></table></figure>\n<h3 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h3><blockquote>\n<p>项目主要针对自己环境解决对应bug, 如果不知道, 请run <code>react-native run-android debug</code>来查看具体出错原因<br>由于环境中使用的java8 , 可能在build的时候buildToolsVersion版本使用之前的23不行, 所以修改成下面的样子就可以运行了</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">android: &#123;</div><div class=\"line\">    compileSdkVersion 23</div><div class=\"line\">    buildToolsVersion &quot;25.0.0&quot;</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"react-native地区选择器","date":"2017-06-22T03:34:16.000Z","_content":"","source":"_posts/react-native地区选择器.md","raw":"---\ntitle: react-native地区选择器\ndate: 2017-06-22 11:34:16\ntags:\n---\n","slug":"react-native地区选择器","published":1,"updated":"2017-06-22T03:34:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98tp000ui983u5w1zj8b","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"react-native开发中常见的坑","date":"2017-06-29T02:45:26.000Z","_content":"\n\n### [前人总结](http://www.jianshu.com/p/98c8f2a970eb)\n","source":"_posts/react-native开发中常见的坑.md","raw":"---\ntitle: react-native开发中常见的坑\ndate: 2017-06-29 10:45:26\ntags:\n---\n\n\n### [前人总结](http://www.jianshu.com/p/98c8f2a970eb)\n","slug":"react-native开发中常见的坑","published":1,"updated":"2017-06-29T02:45:56.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98tq000xi983he0rdr68","content":"<h3 id=\"前人总结\"><a href=\"#前人总结\" class=\"headerlink\" title=\"前人总结\"></a><a href=\"http://www.jianshu.com/p/98c8f2a970eb\" target=\"_blank\" rel=\"external\">前人总结</a></h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前人总结\"><a href=\"#前人总结\" class=\"headerlink\" title=\"前人总结\"></a><a href=\"http://www.jianshu.com/p/98c8f2a970eb\" target=\"_blank\" rel=\"external\">前人总结</a></h3>"},{"title":"react-redux小型项目感受","date":"2017-06-06T01:25:43.000Z","_content":"\n## 前言\n\n> 前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的\n> 后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的\n\n<!-- more -->\n","source":"_posts/react-redux小型项目感受.md","raw":"---\ntitle: react-redux小型项目感受\ndate: 2017-06-06 09:25:43\ntags:\n  - react\n  - redux\n---\n\n## 前言\n\n> 前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的\n> 后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的\n\n<!-- more -->\n","slug":"react-redux小型项目感受","published":1,"updated":"2017-06-10T11:40:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98tr0011i983c2kjxluf","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的<br>后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的</p>\n</blockquote>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>前段时间网上做了一个外包的活, 很简单, 就是一个微信投票系统, 具体业务就不说了, 这点职业道德还是需要有的<br>后端使用nodejs, 然后使用express, 前端就是react, redux, ui组件配合微信官方给的一套, 虽然简陋, 但是做出来也是很大方的</p>\n</blockquote>","more":""},{"title":"react中高阶组件的使用以及技巧","date":"2017-07-24T08:33:04.000Z","_content":"\n{% asset_img react-hoc.png 高阶组件 %}\n\n[写的不错, 先转载, 之后在写自己的学习成果](https://zhuanlan.zhihu.com/p/27434557)\n\n<!-- more -->\n","source":"_posts/react中高阶组件的使用以及技巧.md","raw":"---\ntitle: react中高阶组件的使用以及技巧\ndate: 2017-07-24 16:33:04\ntags:\n    - react-native\n    - react\n    - 高阶组件\n---\n\n{% asset_img react-hoc.png 高阶组件 %}\n\n[写的不错, 先转载, 之后在写自己的学习成果](https://zhuanlan.zhihu.com/p/27434557)\n\n<!-- more -->\n","slug":"react中高阶组件的使用以及技巧","published":1,"updated":"2017-07-24T08:37:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98ts0012i983ey55cdpb","content":"<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/react-hoc.png\" alt=\"高阶组件\" title=\"高阶组件\">\n<p><a href=\"https://zhuanlan.zhihu.com/p/27434557\" target=\"_blank\" rel=\"external\">写的不错, 先转载, 之后在写自己的学习成果</a></p>\n<a id=\"more\"></a>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/07/24/react中高阶组件的使用以及技巧/react-hoc.png\" alt=\"高阶组件\" title=\"高阶组件\">\n<p><a href=\"https://zhuanlan.zhihu.com/p/27434557\" target=\"_blank\" rel=\"external\">写的不错, 先转载, 之后在写自己的学习成果</a></p>","more":""},{"title":"react-native构建踩坑","date":"2017-06-09T06:10:59.000Z","_content":"\n## react-native run-ios 构建失败\n\n> 记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.\n> 在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题\n\n<!-- more -->\n\n构建错误信息\n\n```base\n** BUILD FAILED **\n\n\nThe following commands produced analyzer issues:\n\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c\n(2 commands with analyzer issues)\n\nThe following build commands failed:\n    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh\n(1 failure)\n\nInstalling build/Build/Products/Debug-iphonesimulator/temp.app\nAn error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):\nFailed to install the requested application\nAn application bundle was not found at the provided path.\nProvide a valid path to the desired application bundle.\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n\nCommand failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n```\n\n当前版本\n> 查看package.jsonn\n\n```json\n\"react\": \"16.0.0-alpha.12\",\n\"react-native\": \"0.45.0\"\n```\n\n> 把node-modules rm之后 把package.json改成下面版本就可以了\n\n```json\n \"dependencies\": {\n     \"react\": \"16.0.0-alpha.6\",\n     \"react-native\": \"0.44.3\"\n }\n```\n\n之后再`yarn install`\n","source":"_posts/react-native构建踩坑.md","raw":"---\ntitle: react-native构建踩坑\ndate: 2017-06-09 14:10:59\ntags:\n  - react-native\ncategories: react-native\n---\n\n## react-native run-ios 构建失败\n\n> 记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.\n> 在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题\n\n<!-- more -->\n\n构建错误信息\n\n```base\n** BUILD FAILED **\n\n\nThe following commands produced analyzer issues:\n\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c\n    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c\n(2 commands with analyzer issues)\n\nThe following build commands failed:\n    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh\n(1 failure)\n\nInstalling build/Build/Products/Debug-iphonesimulator/temp.app\nAn error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):\nFailed to install the requested application\nAn application bundle was not found at the provided path.\nProvide a valid path to the desired application bundle.\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n\nCommand failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist\nPrint: Entry, \":CFBundleIdentifier\", Does Not Exist\n```\n\n当前版本\n> 查看package.jsonn\n\n```json\n\"react\": \"16.0.0-alpha.12\",\n\"react-native\": \"0.45.0\"\n```\n\n> 把node-modules rm之后 把package.json改成下面版本就可以了\n\n```json\n \"dependencies\": {\n     \"react\": \"16.0.0-alpha.6\",\n     \"react-native\": \"0.44.3\"\n }\n```\n\n之后再`yarn install`\n","slug":"react-native构建踩坑","published":1,"updated":"2017-06-12T09:28:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98tt0015i983jqolq3k1","content":"<h2 id=\"react-native-run-ios-构建失败\"><a href=\"#react-native-run-ios-构建失败\" class=\"headerlink\" title=\"react-native run-ios 构建失败\"></a>react-native run-ios 构建失败</h2><blockquote>\n<p>记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.<br>在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>构建错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">** BUILD FAILED **</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">The following commands produced analyzer issues:</div><div class=\"line\"></div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c</div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c</div><div class=\"line\">(2 commands with analyzer issues)</div><div class=\"line\"></div><div class=\"line\">The following build commands failed:</div><div class=\"line\">    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh</div><div class=\"line\">(1 failure)</div><div class=\"line\"></div><div class=\"line\">Installing build/Build/Products/Debug-iphonesimulator/temp.app</div><div class=\"line\">An error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):</div><div class=\"line\">Failed to install the requested application</div><div class=\"line\">An application bundle was not found at the provided path.</div><div class=\"line\">Provide a valid path to the desired application bundle.</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div><div class=\"line\"></div><div class=\"line\">Command failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div></pre></td></tr></table></figure>\n<p>当前版本</p>\n<blockquote>\n<p>查看package.jsonn</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"react\": \"16.0.0-alpha.12\",</div><div class=\"line\">\"react-native\": \"0.45.0\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把node-modules rm之后 把package.json改成下面版本就可以了</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"react\": \"16.0.0-alpha.6\",</div><div class=\"line\">    \"react-native\": \"0.44.3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后再<code>yarn install</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"react-native-run-ios-构建失败\"><a href=\"#react-native-run-ios-构建失败\" class=\"headerlink\" title=\"react-native run-ios 构建失败\"></a>react-native run-ios 构建失败</h2><blockquote>\n<p>记得昨天项目好好的,  今天run-ios的时候就不行了,  然后重新init之后还是不行.<br>在网上各种查找相似的问题,  最终无果, 自己猜想估计是版本问题</p>\n</blockquote>","more":"<p>构建错误信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">** BUILD FAILED **</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">The following commands produced analyzer issues:</div><div class=\"line\"></div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/YGNodeList.c</div><div class=\"line\">    Analyze /Users/lcz/workspace/APP/temp/node_modules/react-native/ReactCommon/yoga/yoga/Yoga.c</div><div class=\"line\">(2 commands with analyzer issues)</div><div class=\"line\"></div><div class=\"line\">The following build commands failed:</div><div class=\"line\">    PhaseScriptExecution Install\\ Third\\ Party /Users/lcz/workspace/APP/temp/ios/build/Build/Intermediates/React.build/Debug-iphonesimulator/double-conversion.build/Script-190EE32F1E6A43DE00A8543A.sh</div><div class=\"line\">(1 failure)</div><div class=\"line\"></div><div class=\"line\">Installing build/Build/Products/Debug-iphonesimulator/temp.app</div><div class=\"line\">An error was encountered processing the command (domain=NSPOSIXErrorDomain, code=2):</div><div class=\"line\">Failed to install the requested application</div><div class=\"line\">An application bundle was not found at the provided path.</div><div class=\"line\">Provide a valid path to the desired application bundle.</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div><div class=\"line\"></div><div class=\"line\">Command failed: /usr/libexec/PlistBuddy -c Print:CFBundleIdentifier build/Build/Products/Debug-iphonesimulator/temp.app/Info.plist</div><div class=\"line\">Print: Entry, &quot;:CFBundleIdentifier&quot;, Does Not Exist</div></pre></td></tr></table></figure>\n<p>当前版本</p>\n<blockquote>\n<p>查看package.jsonn</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"react\": \"16.0.0-alpha.12\",</div><div class=\"line\">\"react-native\": \"0.45.0\"</div></pre></td></tr></table></figure>\n<blockquote>\n<p>把node-modules rm之后 把package.json改成下面版本就可以了</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"dependencies\": &#123;</div><div class=\"line\">    \"react\": \"16.0.0-alpha.6\",</div><div class=\"line\">    \"react-native\": \"0.44.3\"</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>之后再<code>yarn install</code></p>"},{"title":"react中setState的使用","date":"2017-07-08T08:29:38.000Z","_content":"\n## 我认为`this.setState`是react中最常用的API了.\n\n如果不明白`this.setState`是什么, [请移驾官网查看具体api](https://facebook.github.io/react/)\n\n<!-- more -->\n\n```javascript\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>Seconds Elapsed: {this.state.secondsElapsed}</div>\n    );\n  }\n}\n\nReactDOM.render(<Timer />, mountNode);\n```\n\n先看看`this.setState`是干什么的\n\n{% asset_img this.setState.png setState流程图 %}\n\n这里有必要说一下, `this.setState`是异步调用,\n如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数\n\n\n\n","source":"_posts/react中setState的使用.md","raw":"---\ntitle: react中setState的使用\ndate: 2017-07-08 16:29:38\ntags:\n    - react\n    - setState\n---\n\n## 我认为`this.setState`是react中最常用的API了.\n\n如果不明白`this.setState`是什么, [请移驾官网查看具体api](https://facebook.github.io/react/)\n\n<!-- more -->\n\n```javascript\nclass Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {secondsElapsed: 0};\n  }\n\n  tick() {\n    this.setState((prevState) => ({\n      secondsElapsed: prevState.secondsElapsed + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>Seconds Elapsed: {this.state.secondsElapsed}</div>\n    );\n  }\n}\n\nReactDOM.render(<Timer />, mountNode);\n```\n\n先看看`this.setState`是干什么的\n\n{% asset_img this.setState.png setState流程图 %}\n\n这里有必要说一下, `this.setState`是异步调用,\n如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数\n\n\n\n","slug":"react中setState的使用","published":1,"updated":"2017-07-10T06:57:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98tx0017i983re3r5cvv","content":"<h2 id=\"我认为this-setState是react中最常用的API了\"><a href=\"#我认为this-setState是react中最常用的API了\" class=\"headerlink\" title=\"我认为this.setState是react中最常用的API了.\"></a>我认为<code>this.setState</code>是react中最常用的API了.</h2><p>如果不明白<code>this.setState</code>是什么, <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">请移驾官网查看具体api</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">secondsElapsed</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  tick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">secondsElapsed</span>: prevState.secondsElapsed + <span class=\"number\">1</span></div><div class=\"line\">    &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<p>先看看<code>this.setState</code>是干什么的</p>\n<img src=\"/2017/07/08/react中setState的使用/this.setState.png\" alt=\"setState流程图\" title=\"setState流程图\">\n<p>这里有必要说一下, <code>this.setState</code>是异步调用,<br>如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"我认为this-setState是react中最常用的API了\"><a href=\"#我认为this-setState是react中最常用的API了\" class=\"headerlink\" title=\"我认为this.setState是react中最常用的API了.\"></a>我认为<code>this.setState</code>是react中最常用的API了.</h2><p>如果不明白<code>this.setState</code>是什么, <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">请移驾官网查看具体api</a></p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Timer</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">constructor</span>(props) &#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(props);</div><div class=\"line\">    <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">secondsElapsed</span>: <span class=\"number\">0</span>&#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  tick() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setState(<span class=\"function\">(<span class=\"params\">prevState</span>) =&gt;</span> (&#123;</div><div class=\"line\">      <span class=\"attr\">secondsElapsed</span>: prevState.secondsElapsed + <span class=\"number\">1</span></div><div class=\"line\">    &#125;));</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentDidMount() &#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.interval = setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> <span class=\"keyword\">this</span>.tick(), <span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillUnmount() &#123;</div><div class=\"line\">    clearInterval(<span class=\"keyword\">this</span>.interval);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (</div><div class=\"line\">      <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Seconds Elapsed: &#123;this.state.secondsElapsed&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Timer</span> /&gt;</span>, mountNode);</span></div></pre></td></tr></table></figure>\n<p>先看看<code>this.setState</code>是干什么的</p>\n<img src=\"/2017/07/08/react中setState的使用/this.setState.png\" alt=\"setState流程图\" title=\"setState流程图\">\n<p>这里有必要说一下, <code>this.setState</code>是异步调用,<br>如果想要使用不同执行, 它的第二个参数是回调函数, 列队到达执行完修改state中状态后执行回调函数</p>"},{"title":"react使用感受","date":"2017-06-10T08:23:21.000Z","comments":0,"_content":"\n{% asset_img react.png react 官网 %}\n\n<!-- more -->\n\n## react感受\n\n记得刚开始接触[react](https://facebook.github.io/react/)的时候还是在前年那时候react版本还在零点几,\ngithub上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下...\n现在想起来也挺庆幸能认识上个工作的同事.[送上github传送门](https://github.com/yuffiy)(也是现在的同事)\n\n> 当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习\n> qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽\n\n### webpack打包\n\n这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,\n需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多[]()webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.\n顺便插一句:\n\n> 编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.\n\nwebpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看<<慕课网>>里面的webpack视屏, 讲的很清晰\n\n### react state和props的设计\n\n#### state和props的区别\n\n下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议\n\n> 每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。\n> 所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.\n> props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量\n\nreact刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能\n父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境\n\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理。\n> 之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo\n> 好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解\n\n### 附上官网counter案例\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n> 后续 -> react配合redux开发手机端页面感受\n","source":"_posts/react使用感受.md","raw":"---\ntitle: react使用感受\ndate: 2017-06-10 16:23:21\ntags:\ncategories: \"blog\"\ncomments: false\n---\n\n{% asset_img react.png react 官网 %}\n\n<!-- more -->\n\n## react感受\n\n记得刚开始接触[react](https://facebook.github.io/react/)的时候还是在前年那时候react版本还在零点几,\ngithub上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下...\n现在想起来也挺庆幸能认识上个工作的同事.[送上github传送门](https://github.com/yuffiy)(也是现在的同事)\n\n> 当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习\n> qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽\n\n### webpack打包\n\n这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,\n需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多[]()webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.\n顺便插一句:\n\n> 编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.\n\nwebpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看<<慕课网>>里面的webpack视屏, 讲的很清晰\n\n### react state和props的设计\n\n#### state和props的区别\n\n下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议\n\n> 每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。\n> 所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.\n> props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量\n\nreact刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能\n父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境\n\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理。\n> 之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo\n> 好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解\n\n### 附上官网counter案例\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n> 后续 -> react配合redux开发手机端页面感受\n","slug":"react使用感受","published":1,"updated":"2017-06-14T01:30:44.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98ty001bi98337kasz2u","content":"<img src=\"/2017/06/10/react使用感受/react.png\" alt=\"react 官网\" title=\"react 官网\">\n<a id=\"more\"></a>\n<h2 id=\"react感受\"><a href=\"#react感受\" class=\"headerlink\" title=\"react感受\"></a>react感受</h2><p>记得刚开始接触<a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">react</a>的时候还是在前年那时候react版本还在零点几,<br>github上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下…<br>现在想起来也挺庆幸能认识上个工作的同事.<a href=\"https://github.com/yuffiy\" target=\"_blank\" rel=\"external\">送上github传送门</a>(也是现在的同事)</p>\n<blockquote>\n<p>当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习<br>qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽</p>\n</blockquote>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,<br>需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多<a href=\"\"></a>webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.<br>顺便插一句:</p>\n<blockquote>\n<p>编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.</p>\n</blockquote>\n<p>webpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看&lt;&lt;慕课网&gt;&gt;里面的webpack视屏, 讲的很清晰</p>\n<h3 id=\"react-state和props的设计\"><a href=\"#react-state和props的设计\" class=\"headerlink\" title=\"react state和props的设计\"></a>react state和props的设计</h3><h4 id=\"state和props的区别\"><a href=\"#state和props的区别\" class=\"headerlink\" title=\"state和props的区别\"></a>state和props的区别</h4><p>下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议</p>\n<blockquote>\n<p>每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。<br>所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.<br>props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量</p>\n</blockquote>\n<p>react刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能<br>父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。<br>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解</p>\n</blockquote>\n<h3 id=\"附上官网counter案例\"><a href=\"#附上官网counter案例\" class=\"headerlink\" title=\"附上官网counter案例\"></a>附上官网counter案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>后续 -&gt; react配合redux开发手机端页面感受</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/10/react使用感受/react.png\" alt=\"react 官网\" title=\"react 官网\">","more":"<h2 id=\"react感受\"><a href=\"#react感受\" class=\"headerlink\" title=\"react感受\"></a>react感受</h2><p>记得刚开始接触<a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"external\">react</a>的时候还是在前年那时候react版本还在零点几,<br>github上面的star也是在3w左右, 随着时间的变化和react社区的活跃, 现在star已经马上到6.9w了, 可见react的发展之快, 当初还是angular的天下…<br>现在想起来也挺庆幸能认识上个工作的同事.<a href=\"https://github.com/yuffiy\" target=\"_blank\" rel=\"external\">送上github传送门</a>(也是现在的同事)</p>\n<blockquote>\n<p>当初自己是在官网上看的资料,  学习一个东西无非就是上官网, 或者看大佬做的视屏, 或者论坛里面看帖子学习<br>qq群就算了吧!那里都是装X的, 也不是看东西的地方, 只能是聊起天来比较爽</p>\n</blockquote>\n<h3 id=\"webpack打包\"><a href=\"#webpack打包\" class=\"headerlink\" title=\"webpack打包\"></a>webpack打包</h3><p>这块我认为还是很重要的, react, vue, angular比较起来学习成本高, 很大一部分就在打包上面,<br>需要掌握写nodejs和 webpack 打包工具, 初学者看起来可能会有点头晕, 不过加以理解, 还是不难的, 网上也有很多<a href=\"\"></a>webpack的教程, 以及一些优化教程, 英语水平好的话可以直接看官网, 可以少走不少弯路.<br>顺便插一句:</p>\n<blockquote>\n<p>编程写到一定瓶颈了, 一定是英语阅读能力拖后退,  so Study English hard.</p>\n</blockquote>\n<p>webpack打包工具配置好, 这时候才是真正开心编写代码的时候,其中打包还涉及到单页面和多页面的区别, 还有就是全局变量控制错误处理, 单页面需要react-router来通过路由的方式来操作页面的切换, 多页面需要对打包性能优化做一定的处理,  如果学习起来困难可以看看&lt;&lt;慕课网&gt;&gt;里面的webpack视屏, 讲的很清晰</p>\n<h3 id=\"react-state和props的设计\"><a href=\"#react-state和props的设计\" class=\"headerlink\" title=\"react state和props的设计\"></a>react state和props的设计</h3><h4 id=\"state和props的区别\"><a href=\"#state和props的区别\" class=\"headerlink\" title=\"state和props的区别\"></a>state和props的区别</h4><p>下面的感受是结合自己写 函数式柯里化 悟出来的, 讲的不对的希望自己给予建议</p>\n<blockquote>\n<p>每一个State组件都可以拥有自己的state，state与props的区别在于state只存在于组件的内部。state可以用来确定一个元素的view状态。<br>所以在设计的时候state尽可能的来控制view的状态, 就如函数内部使用闭包之后的局部变量 .这样组件与组件之间就不会有太多的交际, 但是组合成高阶组件之后props看起来也很清晰.<br>props则是由父组件 或者 实例化 的时候传递进去的可变参数, 就如通过传 输传递到函数内部的全局变量</p>\n</blockquote>\n<p>react刚开始写的时候会觉得component中的state不能在其他component中使用, 如果使用同一个state还需要同能回调函数传递它们两个组件的功能父组件, 因为react数据流设计初衷(单项数据流)只能<br>父元素向子元素 所以就出现了这种回调地域的写法,  自从使用redux才解决了这个回调地域的困境</p>\n<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。<br>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解</p>\n</blockquote>\n<h3 id=\"附上官网counter案例\"><a href=\"#附上官网counter案例\" class=\"headerlink\" title=\"附上官网counter案例\"></a>附上官网counter案例</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>后续 -&gt; react配合redux开发手机端页面感受</p>\n</blockquote>"},{"title":"web前端mac下常用软件","date":"2017-06-05T06:36:50.000Z","_content":"\n{% asset_img emacs-example.png 主力开发编辑器(emacs) %}\n\n<!-- more -->\n说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,\n然后心里想的总是在折腾工具都把时间浪费了,\n那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,\n(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro\n\n## 进入正题\n\n### 所有软件都提供官网, 如果没有, 下载安装很简单\n`brew install package`或者`brew cask install package`就能download到本机, 前提条件是要安装brew包管理器\n\n### [brew](https://brew.sh) mac下的包管理器, 就如ubuntu里面的get-get\n命令行使用[itern2](https://iterm2.com)   [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示\n\n{% asset_img mac-down.png macdown %}\n\n虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,\n\n### 程序员必不可少dash\n\n> 各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api\n> 主要用法是配合alfred(小帽子)来使用,那叫一个酸爽\n\n{% asset_img dash-seach.png dash search API %}\n","source":"_posts/web前端mac下常用软件.md","raw":"---\ntitle: web前端mac下常用软件\ndate: 2017-06-05 14:36:50\ncategories: mac\ntags:\n  - mac\n---\n\n{% asset_img emacs-example.png 主力开发编辑器(emacs) %}\n\n<!-- more -->\n说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,\n然后心里想的总是在折腾工具都把时间浪费了,\n那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,\n(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro\n\n## 进入正题\n\n### 所有软件都提供官网, 如果没有, 下载安装很简单\n`brew install package`或者`brew cask install package`就能download到本机, 前提条件是要安装brew包管理器\n\n### [brew](https://brew.sh) mac下的包管理器, 就如ubuntu里面的get-get\n命令行使用[itern2](https://iterm2.com)   [oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示\n\n{% asset_img mac-down.png macdown %}\n\n虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,\n\n### 程序员必不可少dash\n\n> 各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api\n> 主要用法是配合alfred(小帽子)来使用,那叫一个酸爽\n\n{% asset_img dash-seach.png dash search API %}\n","slug":"web前端mac下常用软件","published":1,"updated":"2017-07-26T01:57:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98u0001di9836gghagum","content":"<img src=\"/2017/06/05/web前端mac下常用软件/emacs-example.png\" alt=\"主力开发编辑器(emacs)\" title=\"主力开发编辑器(emacs)\">\n<a id=\"more\"></a>\n<p>说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,<br>然后心里想的总是在折腾工具都把时间浪费了,<br>那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,<br>(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro</p>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><h3 id=\"所有软件都提供官网-如果没有-下载安装很简单\"><a href=\"#所有软件都提供官网-如果没有-下载安装很简单\" class=\"headerlink\" title=\"所有软件都提供官网, 如果没有, 下载安装很简单\"></a>所有软件都提供官网, 如果没有, 下载安装很简单</h3><p><code>brew install package</code>或者<code>brew cask install package</code>就能download到本机, 前提条件是要安装brew包管理器</p>\n<h3 id=\"brew-mac下的包管理器-就如ubuntu里面的get-get\"><a href=\"#brew-mac下的包管理器-就如ubuntu里面的get-get\" class=\"headerlink\" title=\"brew mac下的包管理器, 就如ubuntu里面的get-get\"></a><a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">brew</a> mac下的包管理器, 就如ubuntu里面的get-get</h3><p>命令行使用<a href=\"https://iterm2.com\" target=\"_blank\" rel=\"external\">itern2</a>   <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a>还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示</p>\n<img src=\"/2017/06/05/web前端mac下常用软件/mac-down.png\" alt=\"macdown\" title=\"macdown\">\n<p>虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,</p>\n<h3 id=\"程序员必不可少dash\"><a href=\"#程序员必不可少dash\" class=\"headerlink\" title=\"程序员必不可少dash\"></a>程序员必不可少dash</h3><blockquote>\n<p>各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api<br>主要用法是配合alfred(小帽子)来使用,那叫一个酸爽</p>\n</blockquote>\n<img src=\"/2017/06/05/web前端mac下常用软件/dash-seach.png\" alt=\"dash search API\" title=\"dash search API\">\n","site":{"data":{}},"excerpt":"<img src=\"/2017/06/05/web前端mac下常用软件/emacs-example.png\" alt=\"主力开发编辑器(emacs)\" title=\"主力开发编辑器(emacs)\">","more":"<p>说下工作环境,  之前公司给配的pc,  当然, 就理所应当的安装了win, 因为自己写代码那会还是用vim来编写代码, 可是vim中的plugin总是出现各种各样的环境问题,  还都是一些路径问题,  操蛋的win,<br>然后心里想的总是在折腾工具都把时间浪费了,<br>那时候就心里萌发出了把自己macbookair带公司用的想法, 可是当时心里还有点说服不了自己, 然后一周后和女朋友说了感受, 她还挺觉得这样做是对的. 现在想起来还真的很感谢她,  不然自己都走不出这一步,<br>(捂脸)自己是有多纠(kou)结(bi),  光想的自己东西给公司用, 没有想的所有的牺牲都是给将来带来方便, 现在也深刻体会到了. 建议前端小伙伴使用mac, 一定会给你带来惊喜. 将来在开帖子说下为什么没有选macbookpro</p>\n<h2 id=\"进入正题\"><a href=\"#进入正题\" class=\"headerlink\" title=\"进入正题\"></a>进入正题</h2><h3 id=\"所有软件都提供官网-如果没有-下载安装很简单\"><a href=\"#所有软件都提供官网-如果没有-下载安装很简单\" class=\"headerlink\" title=\"所有软件都提供官网, 如果没有, 下载安装很简单\"></a>所有软件都提供官网, 如果没有, 下载安装很简单</h3><p><code>brew install package</code>或者<code>brew cask install package</code>就能download到本机, 前提条件是要安装brew包管理器</p>\n<h3 id=\"brew-mac下的包管理器-就如ubuntu里面的get-get\"><a href=\"#brew-mac下的包管理器-就如ubuntu里面的get-get\" class=\"headerlink\" title=\"brew mac下的包管理器, 就如ubuntu里面的get-get\"></a><a href=\"https://brew.sh\" target=\"_blank\" rel=\"external\">brew</a> mac下的包管理器, 就如ubuntu里面的get-get</h3><p>命令行使用<a href=\"https://iterm2.com\" target=\"_blank\" rel=\"external\">itern2</a>   <a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"external\">oh-my-zsh</a>还有一些其他插件, 这个可以自己在github上找自己需要的, 就如mysql提示</p>\n<img src=\"/2017/06/05/web前端mac下常用软件/mac-down.png\" alt=\"macdown\" title=\"macdown\">\n<p>虽然自己写前端, 但是还需要开一些服务和操作文件夹, theme也比较多,</p>\n<h3 id=\"程序员必不可少dash\"><a href=\"#程序员必不可少dash\" class=\"headerlink\" title=\"程序员必不可少dash\"></a>程序员必不可少dash</h3><blockquote>\n<p>各种语言文档都能查到, 唯一缺点就是English, 没办法, 谁叫自己当初没有好好学习, 看起来有点困哪, 时间不紧迫会用dash search api<br>主要用法是配合alfred(小帽子)来使用,那叫一个酸爽</p>\n</blockquote>\n<img src=\"/2017/06/05/web前端mac下常用软件/dash-seach.png\" alt=\"dash search API\" title=\"dash search API\">"},{"title":"react系列使用redux","date":"2017-06-14T01:50:15.000Z","comments":0,"_content":"\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理,\nredux 出现是时间并不长, 是有flux发展而来\n\n### 设计动机\n\n目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。\n\n<!-- more -->\n\n### 查看文档\n\n之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档\n好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.\n\n### 使用原则\n\n> Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，\n> 主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初\n> 学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。\n\n1. Single source of truth\n\n 单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.\n \n2. State is read-only\n \n 状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). \n\n3. Changes are made with pure functions\n \n 在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。\n\n> 附上官网经典案例 counter\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。\n\n\n## redux 状态管理的流程\n\n- action是用户触发或程序触发的一个普通对象\n\n- reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)\n\n- store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)\n\n{% asset_img redux-thing-image1.png redux流程 %}\n\n上图可以简单的看出redux的改变 状态 . action -> reducer -> 新store -> ui更新\n\n下面是具体的实例:\n\n{% asset_img redux-thing-image2.png redux登录具体流程 %}\n\nstore用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。\n\n> [原文地址](http://www.jianshu.com/p/2c43860b0532)\n","source":"_posts/react系列使用redux.md","raw":"---\ntitle: react系列使用redux\ndate: 2017-06-14 09:50:15\ntags:\n  - redux\n  - react\ncategories: \"react\"\ncomments: false\n---\n\n## redux\n附上[中文文档](http://cn.redux.js.org/index.html)\n\n> Redux 是 JavaScript 状态容器，提供可预测化的状态管理,\nredux 出现是时间并不长, 是有flux发展而来\n\n### 设计动机\n\n目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。\n\n<!-- more -->\n\n### 查看文档\n\n之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档\n好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.\n\n### 使用原则\n\n> Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，\n> 主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初\n> 学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。\n\n1. Single source of truth\n\n 单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.\n \n2. State is read-only\n \n 状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). \n\n3. Changes are made with pure functions\n \n 在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。\n\n> 附上官网经典案例 counter\n\n```javascript\nimport { createStore } from 'redux';\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n  case 'INCREMENT':\n    return state + 1;\n  case 'DECREMENT':\n    return state - 1;\n  default:\n    return state;\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter);\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() =>\n  console.log(store.getState())\n);\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' });\n// 1\nstore.dispatch({ type: 'INCREMENT' });\n// 2\nstore.dispatch({ type: 'DECREMENT' });\n// 1\n```\n\n在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。\n\n\n## redux 状态管理的流程\n\n- action是用户触发或程序触发的一个普通对象\n\n- reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)\n\n- store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)\n\n{% asset_img redux-thing-image1.png redux流程 %}\n\n上图可以简单的看出redux的改变 状态 . action -> reducer -> 新store -> ui更新\n\n下面是具体的实例:\n\n{% asset_img redux-thing-image2.png redux登录具体流程 %}\n\nstore用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。\n\n> [原文地址](http://www.jianshu.com/p/2c43860b0532)\n","slug":"react系列使用redux","published":1,"updated":"2017-06-14T07:10:35.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98u3001fi9833f0q7jdk","content":"<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理,<br>redux 出现是时间并不长, 是有flux发展而来</p>\n</blockquote>\n<h3 id=\"设计动机\"><a href=\"#设计动机\" class=\"headerlink\" title=\"设计动机\"></a>设计动机</h3><p>目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。</p>\n<a id=\"more\"></a>\n<h3 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h3><p>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.</p>\n<h3 id=\"使用原则\"><a href=\"#使用原则\" class=\"headerlink\" title=\"使用原则\"></a>使用原则</h3><blockquote>\n<p>Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，<br>主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初<br>学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。</p>\n</blockquote>\n<ol>\n<li><p>Single source of truth</p>\n<p>单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.</p>\n</li>\n<li><p>State is read-only</p>\n<p>状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). </p>\n</li>\n<li><p>Changes are made with pure functions</p>\n<p>在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>附上官网经典案例 counter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。</p>\n<h2 id=\"redux-状态管理的流程\"><a href=\"#redux-状态管理的流程\" class=\"headerlink\" title=\"redux 状态管理的流程\"></a>redux 状态管理的流程</h2><ul>\n<li><p>action是用户触发或程序触发的一个普通对象</p>\n</li>\n<li><p>reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)</p>\n</li>\n<li><p>store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)</p>\n</li>\n</ul>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image1.png\" alt=\"redux流程\" title=\"redux流程\">\n<p>上图可以简单的看出redux的改变 状态 . action -&gt; reducer -&gt; 新store -&gt; ui更新</p>\n<p>下面是具体的实例:</p>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image2.png\" alt=\"redux登录具体流程\" title=\"redux登录具体流程\">\n<p>store用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/2c43860b0532\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"redux\"><a href=\"#redux\" class=\"headerlink\" title=\"redux\"></a>redux</h2><p>附上<a href=\"http://cn.redux.js.org/index.html\" target=\"_blank\" rel=\"external\">中文文档</a></p>\n<blockquote>\n<p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理,<br>redux 出现是时间并不长, 是有flux发展而来</p>\n</blockquote>\n<h3 id=\"设计动机\"><a href=\"#设计动机\" class=\"headerlink\" title=\"设计动机\"></a>设计动机</h3><p>目前单页面应用越来越多, 而且需要维护的状态也越来越复杂，诸如维护数据更新、UI更新、本地数据存储等这些都是我们在js应用常常需要处理的情景，当然这里多数都会涉及到异步处理。而redux本身就是为了解决这些问题，而是将所有的变化进行统一流程处理，会使我们的程序状态变化清晰可见。redux最终目的就是让状态(state)变化变得可预测。</p>","more":"<h3 id=\"查看文档\"><a href=\"#查看文档\" class=\"headerlink\" title=\"查看文档\"></a>查看文档</h3><p>之前刚开始看redux的时候, 我脑子里面想的就是这东西怎么这样子,  第一次看的时候感觉只明白了counter demo, 希望各位大佬们可以耐心的看文档<br>好吧, 最终 ! 我看了不下5遍才看的明白, 源码相当精剪, 其中有中间件这个概念, 看过node express的应该对中间件比较了解.</p>\n<h3 id=\"使用原则\"><a href=\"#使用原则\" class=\"headerlink\" title=\"使用原则\"></a>使用原则</h3><blockquote>\n<p>Redux里的强硬规则与设计不少，大部份都会与FP(函数式程序开发)、改进原本的Flux架构设计有关。Redux官网文档上的三大基本原则，<br>主要是因为有可能怕初学者不理解Redux中的一些限制或设计，所以先写出来说明，这里面也说明了Redux的设计原理基础是如何，所以强烈建议所有的初<br>学者一定要彻底地理解这三大原则中的意义，多看几遍，对日后的学习会很有帮助。以下分别说明，主要以原文的标题与内容说明，尽可以说明的比较清楚些。</p>\n</blockquote>\n<ol>\n<li><p>Single source of truth</p>\n<p>单一数据来源, 整个应用的state，存储在唯一一个object中，同时也只有一个store用于存储这个object.</p>\n</li>\n<li><p>State is read-only</p>\n<p>状态是只读的, 唯一能改变state的方法, 就是触发action操作, action是用来描述正在发生的事件的一个对象. (action是一个对象, 其中不可或缺的是type属性). </p>\n</li>\n<li><p>Changes are made with pure functions</p>\n<p>在改变state tree 用到action，同时也需要编写对应的reducers才能完成state改变操作。</p>\n</li>\n</ol>\n<blockquote>\n<p>附上官网经典案例 counter</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123; createStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">'redux'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * 这是一个 reducer，形式为 (state, action) =&gt; state 的纯函数。</div><div class=\"line\"> * 描述了 action 如何把 state 转变成下一个 state。</div><div class=\"line\"> *</div><div class=\"line\"> * state 的形式取决于你，可以是基本类型、数组、对象、</div><div class=\"line\"> * 甚至是 Immutable.js 生成的数据结构。惟一的要点是</div><div class=\"line\"> * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。</div><div class=\"line\"> *</div><div class=\"line\"> * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)</div><div class=\"line\"> * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">counter</span>(<span class=\"params\">state = <span class=\"number\">0</span>, action</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">switch</span> (action.type) &#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'INCREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state + <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">'DECREMENT'</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state - <span class=\"number\">1</span>;</div><div class=\"line\">  <span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"keyword\">return</span> state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 创建 Redux store 来存放应用的状态。</span></div><div class=\"line\"><span class=\"comment\">// API 是 &#123; subscribe, dispatch, getState &#125;。</span></div><div class=\"line\"><span class=\"keyword\">let</span> store = createStore(counter);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 可以手动订阅更新，也可以事件绑定到视图层。</span></div><div class=\"line\">store.subscribe(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(store.getState())</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 改变内部 state 惟一方法是 dispatch 一个 action。</span></div><div class=\"line\"><span class=\"comment\">// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'INCREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 2</span></div><div class=\"line\">store.dispatch(&#123; <span class=\"attr\">type</span>: <span class=\"string\">'DECREMENT'</span> &#125;);</div><div class=\"line\"><span class=\"comment\">// 1</span></div></pre></td></tr></table></figure>\n<p>在上面的三原则中，我们看到了store, action, reducer这些词，那就先说说redux是怎么进行应用状态(state)维护管理的呢。</p>\n<h2 id=\"redux-状态管理的流程\"><a href=\"#redux-状态管理的流程\" class=\"headerlink\" title=\"redux 状态管理的流程\"></a>redux 状态管理的流程</h2><ul>\n<li><p>action是用户触发或程序触发的一个普通对象</p>\n</li>\n<li><p>reducers是更具action操作来做出不同的数据响应, 返回一个新的state. (务必有返回state, 返回的state就是store的结果)</p>\n</li>\n<li><p>store 最终的值就是有reducers来确定的 . (一个store是一个对象, reducer会改变tore中的某些值)</p>\n</li>\n</ul>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image1.png\" alt=\"redux流程\" title=\"redux流程\">\n<p>上图可以简单的看出redux的改变 状态 . action -&gt; reducer -&gt; 新store -&gt; ui更新</p>\n<p>下面是具体的实例:</p>\n<img src=\"/2017/06/14/react系列使用redux/redux-thing-image2.png\" alt=\"redux登录具体流程\" title=\"redux登录具体流程\">\n<p>store用于维护状态的容器，包括了应用的多个状态，比如说用户是否登录、用户信息、用户任务等等。action是一个普通对象，用于指明是哪种操作，这样才能在reducers中进行识别。而众多reducer是负责返回新的state的函数。在实际应用中，你需要将store或store的某个值绑定到界面，这样更新store的时候，该页面可以监听到值的更新，然后进行一些页面更新操作/跳转操作等。</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/2c43860b0532\" target=\"_blank\" rel=\"external\">原文地址</a></p>\n</blockquote>"},{"title":"vim转移emacs的艰辛路程","date":"2017-06-04T09:54:47.000Z","_content":"# 工欲善其事, 必先利其器\n\n> 大道理不用多讲\n<!-- more -->\n\n## vim和emacs相比ide优点缺点(想对而论)\n\n> 使用之前建议把`Caps Lock`和`control`替换\n\n- 100%linux装机率,没有GUI的服务器编辑器首选\n- 学习曲线高\n- 速度快\n- 效率高\n- vimscript太蹩脚,\n- 使用python写插件,\n- 可以帮助乌干达贫困儿童\n- 长时间编写, 来回模式切换(个人不喜欢)\n\n而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)\n\n因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%\n\n## vim简单介绍\n\n> Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。\n\n## 简单使用\n\n[推荐配置](https://github.com/SpaceVim/SpaceVim)\n\nvim有3中模式,\n\n- `normal`所有快捷键发出指令需要在normal模式下, 除非自己添加`insert`模式配置\n- `inster`插入模式, 编写代码\n- `visual` 模式, 文本的选择\n\n[懒人,别人写的快捷键博客](http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html);\n{% asset_img vim_key_help.png vim键位查询 %}\n\n### vim使用`python`来写你的vim插件\n\n> 注意!!! python电脑版本一定要和vim支持的版本相同`:h python` 查看vim支持版本 `:!command` 用来执行base命令\n\nvim执行python命令直接`:python print \"这里是输入内容\"`\n\n如果在`vimrc`里面使用python来扩展功能.下面是格式\n\n```\npy[thon] << {endmarker}\n{script}\n{endmarker}\n```\n\ndemo:\n\n```python\nfunction! Foo()\npython << EOF\nclass Foo_demo:\n    def __init__(self):\n        print 'Foo_demo init'\nFoo_demo()\nEOF\nendfunction\n```\n\n想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用`:source path_to_script/script_demo.vim` 然后`:call Foo()`来执行\n\n[python扩展vim插件原文](https://segmentfault.com/a/1190000000756107)\n\n## emacs简单介绍\n\n> Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。\nEMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。\n自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。\n\nEmac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展\n\n## emacs 使用\n\n### 优缺点\n\n- 效率高\n- 社区牛人多\n- 速度快\n- 学习曲线高\n- lisp强大的语言支持\n- 不能资助乌干达贫困儿童\n- 相比vim不需要切换模式\n- 每个buffer可以选用单个mode, 互相不冲突\n\n[推荐使用配置(容易上手些)](https://github.com/syl20bnr/spacemacs)\n\n[个人使用配置](https://github.com/angelporo/emacs.d)\n\nemacs使用介绍就比vim简单多了,\n如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,\n\nemacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,\n\n具体使用查看手册`C-h k f b`\n\n[常用快捷键,](http://blog.csdn.net/CherylNatsu/article/details/6536959)\n\n内置帮助手册\n\n`Ctrl-h i m emacs`就可以调出详细的Emacs使用手册;\n`Ctrl-h i m emacs lisp intro` 可以调出Emacs Lisp入门教程；\n`Ctrl-h i m elisp` 可以调出完整的elisp编程手册。\n\n## vim和emacs使用上感受以及不同\n\n在使用vim和emacs之前一直用的`sublime text` 这里说下感受,\n相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己`sublime`配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.\n\n最终逼着自己使用vim,最终自己写过一套配置, 可是在看了`github`大神开源的配置后, 想也没想`fork`过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨`油煎粑粑`)\n\n前车之鉴: 最好使用大神开源配置, 少走弯路\n\n> vim更适合修改网管, emacs才是更适合长时间的编码\n\n所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心\n","source":"_posts/vim转移emacs的艰辛路程.md","raw":"---\ntitle: vim转移emacs的艰辛路程\ndate: 2017-06-04 17:54:47\ntags:\n    - vim\n    - emacs\ncategories: emacs\n---\n# 工欲善其事, 必先利其器\n\n> 大道理不用多讲\n<!-- more -->\n\n## vim和emacs相比ide优点缺点(想对而论)\n\n> 使用之前建议把`Caps Lock`和`control`替换\n\n- 100%linux装机率,没有GUI的服务器编辑器首选\n- 学习曲线高\n- 速度快\n- 效率高\n- vimscript太蹩脚,\n- 使用python写插件,\n- 可以帮助乌干达贫困儿童\n- 长时间编写, 来回模式切换(个人不喜欢)\n\n而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)\n\n因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%\n\n## vim简单介绍\n\n> Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。\n\n## 简单使用\n\n[推荐配置](https://github.com/SpaceVim/SpaceVim)\n\nvim有3中模式,\n\n- `normal`所有快捷键发出指令需要在normal模式下, 除非自己添加`insert`模式配置\n- `inster`插入模式, 编写代码\n- `visual` 模式, 文本的选择\n\n[懒人,别人写的快捷键博客](http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html);\n{% asset_img vim_key_help.png vim键位查询 %}\n\n### vim使用`python`来写你的vim插件\n\n> 注意!!! python电脑版本一定要和vim支持的版本相同`:h python` 查看vim支持版本 `:!command` 用来执行base命令\n\nvim执行python命令直接`:python print \"这里是输入内容\"`\n\n如果在`vimrc`里面使用python来扩展功能.下面是格式\n\n```\npy[thon] << {endmarker}\n{script}\n{endmarker}\n```\n\ndemo:\n\n```python\nfunction! Foo()\npython << EOF\nclass Foo_demo:\n    def __init__(self):\n        print 'Foo_demo init'\nFoo_demo()\nEOF\nendfunction\n```\n\n想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用`:source path_to_script/script_demo.vim` 然后`:call Foo()`来执行\n\n[python扩展vim插件原文](https://segmentfault.com/a/1190000000756107)\n\n## emacs简单介绍\n\n> Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。\nEMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。\n自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。\n\nEmac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展\n\n## emacs 使用\n\n### 优缺点\n\n- 效率高\n- 社区牛人多\n- 速度快\n- 学习曲线高\n- lisp强大的语言支持\n- 不能资助乌干达贫困儿童\n- 相比vim不需要切换模式\n- 每个buffer可以选用单个mode, 互相不冲突\n\n[推荐使用配置(容易上手些)](https://github.com/syl20bnr/spacemacs)\n\n[个人使用配置](https://github.com/angelporo/emacs.d)\n\nemacs使用介绍就比vim简单多了,\n如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,\n\nemacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,\n\n具体使用查看手册`C-h k f b`\n\n[常用快捷键,](http://blog.csdn.net/CherylNatsu/article/details/6536959)\n\n内置帮助手册\n\n`Ctrl-h i m emacs`就可以调出详细的Emacs使用手册;\n`Ctrl-h i m emacs lisp intro` 可以调出Emacs Lisp入门教程；\n`Ctrl-h i m elisp` 可以调出完整的elisp编程手册。\n\n## vim和emacs使用上感受以及不同\n\n在使用vim和emacs之前一直用的`sublime text` 这里说下感受,\n相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己`sublime`配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.\n\n最终逼着自己使用vim,最终自己写过一套配置, 可是在看了`github`大神开源的配置后, 想也没想`fork`过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨`油煎粑粑`)\n\n前车之鉴: 最好使用大神开源配置, 少走弯路\n\n> vim更适合修改网管, emacs才是更适合长时间的编码\n\n所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心\n","slug":"vim转移emacs的艰辛路程","published":1,"updated":"2017-07-07T09:20:11.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98u5001ii983x7xoao5m","content":"<h1 id=\"工欲善其事-必先利其器\"><a href=\"#工欲善其事-必先利其器\" class=\"headerlink\" title=\"工欲善其事, 必先利其器\"></a>工欲善其事, 必先利其器</h1><blockquote>\n<p>大道理不用多讲<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"vim和emacs相比ide优点缺点-想对而论\"><a href=\"#vim和emacs相比ide优点缺点-想对而论\" class=\"headerlink\" title=\"vim和emacs相比ide优点缺点(想对而论)\"></a>vim和emacs相比ide优点缺点(想对而论)</h2><blockquote>\n<p>使用之前建议把<code>Caps Lock</code>和<code>control</code>替换</p>\n</blockquote>\n<ul>\n<li>100%linux装机率,没有GUI的服务器编辑器首选</li>\n<li>学习曲线高</li>\n<li>速度快</li>\n<li>效率高</li>\n<li>vimscript太蹩脚,</li>\n<li>使用python写插件,</li>\n<li>可以帮助乌干达贫困儿童</li>\n<li>长时间编写, 来回模式切换(个人不喜欢)</li>\n</ul>\n<p>而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)</p>\n<p>因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%</p>\n<h2 id=\"vim简单介绍\"><a href=\"#vim简单介绍\" class=\"headerlink\" title=\"vim简单介绍\"></a>vim简单介绍</h2><blockquote>\n<p>Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。</p>\n</blockquote>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><a href=\"https://github.com/SpaceVim/SpaceVim\" target=\"_blank\" rel=\"external\">推荐配置</a></p>\n<p>vim有3中模式,</p>\n<ul>\n<li><code>normal</code>所有快捷键发出指令需要在normal模式下, 除非自己添加<code>insert</code>模式配置</li>\n<li><code>inster</code>插入模式, 编写代码</li>\n<li><code>visual</code> 模式, 文本的选择</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html\" target=\"_blank\" rel=\"external\">懒人,别人写的快捷键博客</a>;<br><img src=\"/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png\" alt=\"vim键位查询\" title=\"vim键位查询\"></p>\n<h3 id=\"vim使用python来写你的vim插件\"><a href=\"#vim使用python来写你的vim插件\" class=\"headerlink\" title=\"vim使用python来写你的vim插件\"></a>vim使用<code>python</code>来写你的vim插件</h3><blockquote>\n<p>注意!!! python电脑版本一定要和vim支持的版本相同<code>:h python</code> 查看vim支持版本 <code>:!command</code> 用来执行base命令</p>\n</blockquote>\n<p>vim执行python命令直接<code>:python print &quot;这里是输入内容&quot;</code></p>\n<p>如果在<code>vimrc</code>里面使用python来扩展功能.下面是格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">py[thon] &lt;&lt; &#123;endmarker&#125;</div><div class=\"line\">&#123;script&#125;</div><div class=\"line\">&#123;endmarker&#125;</div></pre></td></tr></table></figure>\n<p>demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function! Foo()</div><div class=\"line\">python &lt;&lt; EOF</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo_demo</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Foo_demo init'</span></div><div class=\"line\">Foo_demo()</div><div class=\"line\">EOF</div><div class=\"line\">endfunction</div></pre></td></tr></table></figure>\n<p>想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用<code>:source path_to_script/script_demo.vim</code> 然后<code>:call Foo()</code>来执行</p>\n<p><a href=\"https://segmentfault.com/a/1190000000756107\" target=\"_blank\" rel=\"external\">python扩展vim插件原文</a></p>\n<h2 id=\"emacs简单介绍\"><a href=\"#emacs简单介绍\" class=\"headerlink\" title=\"emacs简单介绍\"></a>emacs简单介绍</h2><blockquote>\n<p>Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。<br>EMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。<br>自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。</p>\n</blockquote>\n<p>Emac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展</p>\n<h2 id=\"emacs-使用\"><a href=\"#emacs-使用\" class=\"headerlink\" title=\"emacs 使用\"></a>emacs 使用</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>效率高</li>\n<li>社区牛人多</li>\n<li>速度快</li>\n<li>学习曲线高</li>\n<li>lisp强大的语言支持</li>\n<li>不能资助乌干达贫困儿童</li>\n<li>相比vim不需要切换模式</li>\n<li>每个buffer可以选用单个mode, 互相不冲突</li>\n</ul>\n<p><a href=\"https://github.com/syl20bnr/spacemacs\" target=\"_blank\" rel=\"external\">推荐使用配置(容易上手些)</a></p>\n<p><a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">个人使用配置</a></p>\n<p>emacs使用介绍就比vim简单多了,<br>如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,</p>\n<p>emacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,</p>\n<p>具体使用查看手册<code>C-h k f b</code></p>\n<p><a href=\"http://blog.csdn.net/CherylNatsu/article/details/6536959\" target=\"_blank\" rel=\"external\">常用快捷键,</a></p>\n<p>内置帮助手册</p>\n<p><code>Ctrl-h i m emacs</code>就可以调出详细的Emacs使用手册;<br><code>Ctrl-h i m emacs lisp intro</code> 可以调出Emacs Lisp入门教程；<br><code>Ctrl-h i m elisp</code> 可以调出完整的elisp编程手册。</p>\n<h2 id=\"vim和emacs使用上感受以及不同\"><a href=\"#vim和emacs使用上感受以及不同\" class=\"headerlink\" title=\"vim和emacs使用上感受以及不同\"></a>vim和emacs使用上感受以及不同</h2><p>在使用vim和emacs之前一直用的<code>sublime text</code> 这里说下感受,<br>相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己<code>sublime</code>配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.</p>\n<p>最终逼着自己使用vim,最终自己写过一套配置, 可是在看了<code>github</code>大神开源的配置后, 想也没想<code>fork</code>过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨<code>油煎粑粑</code>)</p>\n<p>前车之鉴: 最好使用大神开源配置, 少走弯路</p>\n<blockquote>\n<p>vim更适合修改网管, emacs才是更适合长时间的编码</p>\n</blockquote>\n<p>所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"工欲善其事-必先利其器\"><a href=\"#工欲善其事-必先利其器\" class=\"headerlink\" title=\"工欲善其事, 必先利其器\"></a>工欲善其事, 必先利其器</h1><blockquote>\n<p>大道理不用多讲<br>","more":"</p>\n</blockquote>\n<h2 id=\"vim和emacs相比ide优点缺点-想对而论\"><a href=\"#vim和emacs相比ide优点缺点-想对而论\" class=\"headerlink\" title=\"vim和emacs相比ide优点缺点(想对而论)\"></a>vim和emacs相比ide优点缺点(想对而论)</h2><blockquote>\n<p>使用之前建议把<code>Caps Lock</code>和<code>control</code>替换</p>\n</blockquote>\n<ul>\n<li>100%linux装机率,没有GUI的服务器编辑器首选</li>\n<li>学习曲线高</li>\n<li>速度快</li>\n<li>效率高</li>\n<li>vimscript太蹩脚,</li>\n<li>使用python写插件,</li>\n<li>可以帮助乌干达贫困儿童</li>\n<li>长时间编写, 来回模式切换(个人不喜欢)</li>\n</ul>\n<p>而emacs是用LISP和c混合编程的，c编写内核(30%)，LISP接口(70%)</p>\n<p>因为vim底层使用c写的, vimscript占到了30%, 所以发挥的作用也只有30%</p>\n<h2 id=\"vim简单介绍\"><a href=\"#vim简单介绍\" class=\"headerlink\" title=\"vim简单介绍\"></a>vim简单介绍</h2><blockquote>\n<p>Vim是一个类似于Vi的文本编辑器，不过在Vi的基础上增加了很多新的特性，Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了Slashdot Beanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线， 总的来看， Vim和Emacs同样都是非常优秀的文本编辑器。Vim(和Vi)一个最大的优势在于它最常用的命令都是简单的字符，这比起使用复杂的控制组合键要快得多，而且也解放了手指的大量工作，学习使用这些命令的时间很快。</p>\n</blockquote>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><a href=\"https://github.com/SpaceVim/SpaceVim\" target=\"_blank\" rel=\"external\">推荐配置</a></p>\n<p>vim有3中模式,</p>\n<ul>\n<li><code>normal</code>所有快捷键发出指令需要在normal模式下, 除非自己添加<code>insert</code>模式配置</li>\n<li><code>inster</code>插入模式, 编写代码</li>\n<li><code>visual</code> 模式, 文本的选择</li>\n</ul>\n<p><a href=\"http://www.cnblogs.com/Zjmainstay/articles/vim_quickkey.html\" target=\"_blank\" rel=\"external\">懒人,别人写的快捷键博客</a>;<br><img src=\"/2017/06/04/vim转移emacs的艰辛路程/vim_key_help.png\" alt=\"vim键位查询\" title=\"vim键位查询\"></p>\n<h3 id=\"vim使用python来写你的vim插件\"><a href=\"#vim使用python来写你的vim插件\" class=\"headerlink\" title=\"vim使用python来写你的vim插件\"></a>vim使用<code>python</code>来写你的vim插件</h3><blockquote>\n<p>注意!!! python电脑版本一定要和vim支持的版本相同<code>:h python</code> 查看vim支持版本 <code>:!command</code> 用来执行base命令</p>\n</blockquote>\n<p>vim执行python命令直接<code>:python print &quot;这里是输入内容&quot;</code></p>\n<p>如果在<code>vimrc</code>里面使用python来扩展功能.下面是格式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">py[thon] &lt;&lt; &#123;endmarker&#125;</div><div class=\"line\">&#123;script&#125;</div><div class=\"line\">&#123;endmarker&#125;</div></pre></td></tr></table></figure>\n<p>demo:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">function! Foo()</div><div class=\"line\">python &lt;&lt; EOF</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo_demo</span>:</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">print</span> <span class=\"string\">'Foo_demo init'</span></div><div class=\"line\">Foo_demo()</div><div class=\"line\">EOF</div><div class=\"line\">endfunction</div></pre></td></tr></table></figure>\n<p>想要在vim内部使用上面的函数, 需要在在vim内把需要执行的文件导入, 然后才能使用<code>:source path_to_script/script_demo.vim</code> 然后<code>:call Foo()</code>来执行</p>\n<p><a href=\"https://segmentfault.com/a/1190000000756107\" target=\"_blank\" rel=\"external\">python扩展vim插件原文</a></p>\n<h2 id=\"emacs简单介绍\"><a href=\"#emacs简单介绍\" class=\"headerlink\" title=\"emacs简单介绍\"></a>emacs简单介绍</h2><blockquote>\n<p>Emacs，著名的集成开发环境和文本编辑器。Emacs被公认为是最受专业程序员喜爱的代码编辑器之一，另外一个vim。<br>EMACS，即Editor MACroS（编辑器宏）的缩写，最初由Richard Stallman(理查德·马修·斯托曼)于1975年在MIT协同Guy Steele共同完成。这一创意的灵感来源于TECMAC和TMACS，它们是由Guy Steele、Dave Moon、Richard Greenblatt、Charles Frankston等人编写的宏文本编辑器。<br>自诞生以来，Emacs演化出了众多分支，其中使用最广泛的两种是：1984年由Richard Stallman发起并由他维护至今的GNU Emacs，以及1991年发起的XEmacs。XEmacs是GNU Emacs的分支，至今仍保持着相当的兼容性。</p>\n</blockquote>\n<p>Emac使用Emacs Lisp，这种有着极强扩展性的编程语言，从而实现了包括编程、编译乃至网络浏览等等功能的扩展</p>\n<h2 id=\"emacs-使用\"><a href=\"#emacs-使用\" class=\"headerlink\" title=\"emacs 使用\"></a>emacs 使用</h2><h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><ul>\n<li>效率高</li>\n<li>社区牛人多</li>\n<li>速度快</li>\n<li>学习曲线高</li>\n<li>lisp强大的语言支持</li>\n<li>不能资助乌干达贫困儿童</li>\n<li>相比vim不需要切换模式</li>\n<li>每个buffer可以选用单个mode, 互相不冲突</li>\n</ul>\n<p><a href=\"https://github.com/syl20bnr/spacemacs\" target=\"_blank\" rel=\"external\">推荐使用配置(容易上手些)</a></p>\n<p><a href=\"https://github.com/angelporo/emacs.d\" target=\"_blank\" rel=\"external\">个人使用配置</a></p>\n<p>emacs使用介绍就比vim简单多了,<br>如果你折腾过vim, 使用meacs来说前期会很好受, 但是, emacs的学习曲线越来越难,</p>\n<p>emacs只有一种inster模式,相比vim来说, 所以, emacs所有的快捷键只能在插入下来完成, 那么, 快捷键数量就多了要比vim多一点,</p>\n<p>具体使用查看手册<code>C-h k f b</code></p>\n<p><a href=\"http://blog.csdn.net/CherylNatsu/article/details/6536959\" target=\"_blank\" rel=\"external\">常用快捷键,</a></p>\n<p>内置帮助手册</p>\n<p><code>Ctrl-h i m emacs</code>就可以调出详细的Emacs使用手册;<br><code>Ctrl-h i m emacs lisp intro</code> 可以调出Emacs Lisp入门教程；<br><code>Ctrl-h i m elisp</code> 可以调出完整的elisp编程手册。</p>\n<h2 id=\"vim和emacs使用上感受以及不同\"><a href=\"#vim和emacs使用上感受以及不同\" class=\"headerlink\" title=\"vim和emacs使用上感受以及不同\"></a>vim和emacs使用上感受以及不同</h2><p>在使用vim和emacs之前一直用的<code>sublime text</code> 这里说下感受,<br>相率确实高了不少, 因为sublime底层使用python写的,当时对python也不是很了解,更没有时间来学习另一种语言 而且对自己<code>sublime</code>配置不满意, 自己设置了一些快捷键还是没有达到预期的效果, 之后一气之下就卸载了.</p>\n<p>最终逼着自己使用vim,最终自己写过一套配置, 可是在看了<code>github</code>大神开源的配置后, 想也没想<code>fork</code>过来做二次修改, 果断把自己配置删除掉, (看了大神的配置自己的就是一坨<code>油煎粑粑</code>)</p>\n<p>前车之鉴: 最好使用大神开源配置, 少走弯路</p>\n<blockquote>\n<p>vim更适合修改网管, emacs才是更适合长时间的编码</p>\n</blockquote>\n<p>所有操作使用快捷键, 可以更好的使自己专注一件事情,而不会被一些繁琐的操作分心</p>"},{"title":"优雅的设计redux中的store的state树","date":"2017-06-15T07:04:08.000Z","comments":0,"_content":"\n## 如何优雅的设计redux的store中的state树\n\n使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?\n是这个问题估计让我思考了好就才想到问题的关键处.\nstate树按页面规划 还是按照数据库中的表划分\n\n<!-- more -->\n\n### 按照页面划分\n\n是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.\n\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　　 profile: {\n　　 },\n    list: {\n    },\n　　 edit: {\n　　 },\n    home: {\n    }\n  }\n}\n```\n- 优点\n\n模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)\n\n- 缺点\n\n\t\t但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.\n这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。\n\n\t解决方法:\n\n\t1. 每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)\n\n\t2. 编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)\n\n\t\t具体操作:  当数据源保存成功后`发布`一个全局事件, 在依赖这个数据源的地方`订阅`这个事件, 在订阅的函数里面指定一个保存store的action\n\n\t3. 编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变\n\n    可以看看[RxJS](https://github.com/Reactive-Extensions/RxJS)\n\n\t4. 列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看[normalizr](https://github.com/paularmstrong/normalizr)\n\n#### 同时使用react组件中的state和redux中store中的state\n\n> 注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。\n\n### 按照数据库中的表划分,比如想下面这样init 你的store\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　  companies: {\n    },\n    users: {\n    },\n    events: {\n    }\n  }\n}\n```\n\n> 这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。\n\n\t所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n\n在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.\n\n如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.\n\n如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下\n\nredux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。\n\n参考:\n\n> [http://www.jianshu.com/p/f3911358ebcb](http://www.jianshu.com/p/f3911358ebcb)\n\n> [https://www.zhihu.com/question/47995437?sort=created](https://www.zhihu.com/question/47995437?sort=created)\n\n> [https://www.zhihu.com/question/50888321](https://www.zhihu.com/question/50888321)\n","source":"_posts/优雅的设计redux中的store的state树.md","raw":"---\ntitle: 优雅的设计redux中的store的state树\ndate: 2017-06-15 15:04:08\ntags:\n  - redux\n  - react\n  - react-nativem\ncategories: \"redux\"\ncomments: false\n---\n\n## 如何优雅的设计redux的store中的state树\n\n使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?\n是这个问题估计让我思考了好就才想到问题的关键处.\nstate树按页面规划 还是按照数据库中的表划分\n\n<!-- more -->\n\n### 按照页面划分\n\n是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.\n\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　　 profile: {\n　　 },\n    list: {\n    },\n　　 edit: {\n　　 },\n    home: {\n    }\n  }\n}\n```\n- 优点\n\n模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)\n\n- 缺点\n\n\t\t但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.\n这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。\n\n\t解决方法:\n\n\t1. 每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)\n\n\t2. 编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)\n\n\t\t具体操作:  当数据源保存成功后`发布`一个全局事件, 在依赖这个数据源的地方`订阅`这个事件, 在订阅的函数里面指定一个保存store的action\n\n\t3. 编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变\n\n    可以看看[RxJS](https://github.com/Reactive-Extensions/RxJS)\n\n\t4. 列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看[normalizr](https://github.com/paularmstrong/normalizr)\n\n#### 同时使用react组件中的state和redux中store中的state\n\n> 注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。\n\n### 按照数据库中的表划分,比如想下面这样init 你的store\n\n```javascript\nmodule.exports = function() {\n  return {\n    common: {\n      isFetching: false\n    },\n　  companies: {\n    },\n    users: {\n    },\n    events: {\n    }\n  }\n}\n```\n\n> 这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。\n\n\t所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n\n在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.\n\n如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.\n\n如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下\n\nredux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。\n\n参考:\n\n> [http://www.jianshu.com/p/f3911358ebcb](http://www.jianshu.com/p/f3911358ebcb)\n\n> [https://www.zhihu.com/question/47995437?sort=created](https://www.zhihu.com/question/47995437?sort=created)\n\n> [https://www.zhihu.com/question/50888321](https://www.zhihu.com/question/50888321)\n","slug":"优雅的设计redux中的store的state树","published":1,"updated":"2017-07-28T05:46:45.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98u9001ki983cozxla03","content":"<h2 id=\"如何优雅的设计redux的store中的state树\"><a href=\"#如何优雅的设计redux的store中的state树\" class=\"headerlink\" title=\"如何优雅的设计redux的store中的state树\"></a>如何优雅的设计redux的store中的state树</h2><p>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?<br>是这个问题估计让我思考了好就才想到问题的关键处.<br>state树按页面规划 还是按照数据库中的表划分</p>\n<a id=\"more\"></a>\n<h3 id=\"按照页面划分\"><a href=\"#按照页面划分\" class=\"headerlink\" title=\"按照页面划分\"></a>按照页面划分</h3><p>是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">profile</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">list</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">edit</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点</li>\n</ul>\n<p>模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)</p>\n<ul>\n<li><p>缺点</p>\n<pre><code>但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n</code></pre><p>假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.<br>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。</p>\n<p>  解决方法:</p>\n<ol>\n<li><p>每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)</p>\n</li>\n<li><p>编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)</p>\n<p> 具体操作:  当数据源保存成功后<code>发布</code>一个全局事件, 在依赖这个数据源的地方<code>订阅</code>这个事件, 在订阅的函数里面指定一个保存store的action</p>\n</li>\n<li><p>编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变</p>\n<p>可以看看<a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a></p>\n</li>\n<li><p>列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看<a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"external\">normalizr</a></p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"同时使用react组件中的state和redux中store中的state\"><a href=\"#同时使用react组件中的state和redux中store中的state\" class=\"headerlink\" title=\"同时使用react组件中的state和redux中store中的state\"></a>同时使用react组件中的state和redux中store中的state</h4><blockquote>\n<p>注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。</p>\n</blockquote>\n<h3 id=\"按照数据库中的表划分-比如想下面这样init-你的store\"><a href=\"#按照数据库中的表划分-比如想下面这样init-你的store\" class=\"headerlink\" title=\"按照数据库中的表划分,比如想下面这样init 你的store\"></a>按照数据库中的表划分,比如想下面这样init 你的store</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　  <span class=\"attr\">companies</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">users</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。</p>\n</blockquote>\n<pre><code>所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n</code></pre><p>在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.</p>\n<p>如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.</p>\n<p>如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下</p>\n<p>redux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。</p>\n<p>参考:</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/f3911358ebcb\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f3911358ebcb</a></p>\n<p><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/47995437?sort=created</a></p>\n<p><a href=\"https://www.zhihu.com/question/50888321\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/50888321</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"如何优雅的设计redux的store中的state树\"><a href=\"#如何优雅的设计redux的store中的state树\" class=\"headerlink\" title=\"如何优雅的设计redux的store中的state树\"></a>如何优雅的设计redux的store中的state树</h2><p>使用redux几个月的时间, 估计最大的问题就是怎么设计store才是合理的?<br>是这个问题估计让我思考了好就才想到问题的关键处.<br>state树按页面规划 还是按照数据库中的表划分</p>","more":"<h3 id=\"按照页面划分\"><a href=\"#按照页面划分\" class=\"headerlink\" title=\"按照页面划分\"></a>按照页面划分</h3><p>是把每个页面当成一个业务模块, 实际上这也是非常流行的一种做法, 很多公司就是这样子做的, 可以像下面这样初始化你的store, 适合多页面开发使用.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">profile</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">list</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">　　 <span class=\"attr\">edit</span>: &#123;</div><div class=\"line\">　　 &#125;,</div><div class=\"line\">    <span class=\"attr\">home</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>优点</li>\n</ul>\n<p>模块之间互相独立,  不会互相影响, 每个页面维护自己的reducer, 由于模块中需要展示的东西不多所以数据量不是很大,使用起来很方便, 不太需要其他数据的缓存数据, 比较符合redux的设计(并不是用来做一个前端数据库)</p>\n<ul>\n<li><p>缺点</p>\n<pre><code>但这种方法有个致命的缺点，就是store中数据的同步问题和冗余问题。\n</code></pre><p>假如一个列表页面的数据依赖于另一个编辑页面的操作，在编辑页面，改变了数据.<br>这时候数据库里面的数据已经被改变了，但这时候列表页面和编辑页面的state是独立的，列表页面state节点下的数据并没有改变，退回到列表展示页，数据并不会发生变化，这就有问题了，而且同一份数据出现在多个节点下，也会有数据冗余的问题。</p>\n<p>  解决方法:</p>\n<ol>\n<li><p>每次进入列表页面去数据库刷新store  (如果你做的是一个用户端App显然不会这么干，只可能在第一次进入的时候才会载入数据，第二次应该就不会发请求了，立即从store中拿出缓存数据，否则性能和体验太差，PC端后台倒是无所谓)</p>\n</li>\n<li><p>编辑完保存后dispatch一个或多个action，去改变所有依赖到这条数据的页面的state (相对还是比较可靠的办法，前提是依赖的页面很少，如果是一个庞大的系统，每次新增加一个页面，你就需要去修改派发action的代码，太麻烦了，除非建立一个完备的事件系统，所有依赖到这条数据的页面都监听一个事件，只要一编辑，就触发所有的事件，更新自己的state节点)</p>\n<p> 具体操作:  当数据源保存成功后<code>发布</code>一个全局事件, 在依赖这个数据源的地方<code>订阅</code>这个事件, 在订阅的函数里面指定一个保存store的action</p>\n</li>\n<li><p>编辑完后除了更新数据库中的数据，在前端这边什么都不做，返回列表页，先取出缓存数据展示，等到页面DidMount之后悄悄发一个请求，不要出loading图，检查一下数据是否被更新过，如果是，拉取最新数据并更新store，如果不是，那就不变</p>\n<p>可以看看<a href=\"https://github.com/Reactive-Extensions/RxJS\" target=\"_blank\" rel=\"external\">RxJS</a></p>\n</li>\n<li><p>列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看列表页和编辑页共用一个state数据节点，列表页只存必要显示的字段，点击进入编辑页，根据列表页的记录id读取更详细的信息，编辑保存完成后，更新到这个state节点（这种方法其实采用的就是按数据库表划分的办法，统一数据源，关于统一数据源格式，可以看一看<a href=\"https://github.com/paularmstrong/normalizr\" target=\"_blank\" rel=\"external\">normalizr</a></p>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"同时使用react组件中的state和redux中store中的state\"><a href=\"#同时使用react组件中的state和redux中store中的state\" class=\"headerlink\" title=\"同时使用react组件中的state和redux中store中的state\"></a>同时使用react组件中的state和redux中store中的state</h4><blockquote>\n<p>注意：没有人告诉过你，用了redux必须通篇要用store中的state，redux作者也没有这么讲过，比较好的做法是结合react组件自己的state和store中的state一起使用。</p>\n</blockquote>\n<h3 id=\"按照数据库中的表划分-比如想下面这样init-你的store\"><a href=\"#按照数据库中的表划分-比如想下面这样init-你的store\" class=\"headerlink\" title=\"按照数据库中的表划分,比如想下面这样init 你的store\"></a>按照数据库中的表划分,比如想下面这样init 你的store</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">    <span class=\"attr\">common</span>: &#123;</div><div class=\"line\">      <span class=\"attr\">isFetching</span>: <span class=\"literal\">false</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">　  <span class=\"attr\">companies</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">users</span>: &#123;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">events</span>: &#123;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这种方法可能比较适合单页应用，把store当成数据库使，增删改查都维护这一个store，作为前端数据源，保证前端数据源和后端数据库同步，并且保证了操作的及时反馈，适合对用户体验要求较高的场景，缺点就是前端不像后端，除了model数据，还有业务数据，临时状态数据，不能简单的用数据库的思路去设计store，如果是这样，那么为什么不用前端数据库呢？为啥还要用redux来多此一举，redux本质上是用来管理数据状态的。</p>\n</blockquote>\n<pre><code>所以, 我认为还是需要按照页面来划分, 但是应该和数据库划分表结合起来\n</code></pre><p>在此之前, 应该分清楚那些数据是放在store中, 如果是零时数据不需要做缓存, 我们应该用react自己的state去维护状态, 而不是放在redux中的store中.</p>\n<p>如果该数据需要缓存, 缓存只被一个页面所依赖, 那么就放到依赖页面的state中.</p>\n<p>如果该数据需要做缓存,并且不是被一个页面所依赖, 那么我们就把该数据提取出来, 放到一个公共state节点下</p>\n<p>redux作者的意思大概就是，对于store中的state树，躺着用，站着用，跪着用，想怎么用怎么用，并没有明确规定必须怎么用，只要自己用的舒服，解决你自己的特殊场景就可以了。</p>\n<p>参考:</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/f3911358ebcb\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/f3911358ebcb</a></p>\n<p><a href=\"https://www.zhihu.com/question/47995437?sort=created\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/47995437?sort=created</a></p>\n<p><a href=\"https://www.zhihu.com/question/50888321\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/50888321</a></p>\n</blockquote>"},{"title":"使用jest来做javascript的单元测试","date":"2017-07-26T02:49:16.000Z","_content":"","source":"_posts/使用jest来做javascript的单元测试.md","raw":"---\ntitle: 使用jest来做javascript的单元测试\ndate: 2017-07-26 10:49:16\ntags:\n---\n","slug":"使用jest来做javascript的单元测试","published":1,"updated":"2017-07-26T02:49:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98um001oi983bu88gjjx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"使用autojump一键到达你要得路径","date":"2017-07-29T02:49:39.000Z","_content":"\n### 安装\n\n安装 `brew install autojump`\n\n因为使用的是`zsh`和`term2` 所以需要在`~/.zshrc`内添加`autojump` 作为插件来使用.\n\n看起来是这样子:\n```base\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git bundler osx)\nplugins=(autojump)\n```\n还需要添加`[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] && . ~/.autojump/etc/profile.d/autojump.zsh`同样到`~/.zshrc`\n\n\n## 使用\n\n`j` 是 `autojump` 封装好的命令,  在你 `cd` 之后它就会在它的数据库内写入地址链接,  然后在使用`jc`的时候检索数据库,  到你指定的目录. ( 模糊搜索 )\n","source":"_posts/使用autojump一键到达你要得路径.md","raw":"---\ntitle: 使用autojump一键到达你要得路径\ndate: 2017-07-29 10:49:39\ntags:\n    - autojump\n    - mac\n    - linux\ncategories: \"mac工具\"\n---\n\n### 安装\n\n安装 `brew install autojump`\n\n因为使用的是`zsh`和`term2` 所以需要在`~/.zshrc`内添加`autojump` 作为插件来使用.\n\n看起来是这样子:\n```base\n# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)\n# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/\n# Example format: plugins=(rails git textmate ruby lighthouse)\n# Add wisely, as too many plugins slow down shell startup.\nplugins=(git bundler osx)\nplugins=(autojump)\n```\n还需要添加`[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] && . ~/.autojump/etc/profile.d/autojump.zsh`同样到`~/.zshrc`\n\n\n## 使用\n\n`j` 是 `autojump` 封装好的命令,  在你 `cd` 之后它就会在它的数据库内写入地址链接,  然后在使用`jc`的时候检索数据库,  到你指定的目录. ( 模糊搜索 )\n","slug":"使用autojump一键到达你要得路径","published":1,"updated":"2017-07-29T06:04:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98up001ri983lx37xjk7","content":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装 <code>brew install autojump</code></p>\n<p>因为使用的是<code>zsh</code>和<code>term2</code> 所以需要在<code>~/.zshrc</code>内添加<code>autojump</code> 作为插件来使用.</p>\n<p>看起来是这样子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</div><div class=\"line\"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</div><div class=\"line\"># Example format: plugins=(rails git textmate ruby lighthouse)</div><div class=\"line\"># Add wisely, as too many plugins slow down shell startup.</div><div class=\"line\">plugins=(git bundler osx)</div><div class=\"line\">plugins=(autojump)</div></pre></td></tr></table></figure></p>\n<p>还需要添加<code>[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh</code>同样到<code>~/.zshrc</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>j</code> 是 <code>autojump</code> 封装好的命令,  在你 <code>cd</code> 之后它就会在它的数据库内写入地址链接,  然后在使用<code>jc</code>的时候检索数据库,  到你指定的目录. ( 模糊搜索 )</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>安装 <code>brew install autojump</code></p>\n<p>因为使用的是<code>zsh</code>和<code>term2</code> 所以需要在<code>~/.zshrc</code>内添加<code>autojump</code> 作为插件来使用.</p>\n<p>看起来是这样子:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</div><div class=\"line\"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</div><div class=\"line\"># Example format: plugins=(rails git textmate ruby lighthouse)</div><div class=\"line\"># Add wisely, as too many plugins slow down shell startup.</div><div class=\"line\">plugins=(git bundler osx)</div><div class=\"line\">plugins=(autojump)</div></pre></td></tr></table></figure></p>\n<p>还需要添加<code>[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh</code>同样到<code>~/.zshrc</code></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>j</code> 是 <code>autojump</code> 封装好的命令,  在你 <code>cd</code> 之后它就会在它的数据库内写入地址链接,  然后在使用<code>jc</code>的时候检索数据库,  到你指定的目录. ( 模糊搜索 )</p>\n"},{"title":"体验es7中的Async / Await来处理异步","date":"2017-06-14T11:21:56.000Z","comments":0,"_content":"\n\n## 体验下es6对异步的最终解决方案\n> 阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解\n\n### 直接上例子\n\nAsync/Await 应该是目前最简单的异步方案\n下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子\n\n<!-- more -->\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            resolve()\n        }, time);\n    })\n}\n\nlet start = async function () {\n    //这里使用起来像同步代码那样直观\n    console.log('start');\n    await sleep(3000);\n    console.log('end')\n};\n\nstart();\n```\n\n控制台先输出 `start`, 等候3秒后, 输出了 `end` .\n\n## 基本规则\n\n1. async 表示 异步函数,  await只能用在异步函数里面.\n\n2. `await` 表示在这里 `等待promise返回结果` , 在继续执行下面的.\n\n3. `await` 后面跟着的 `应该是一个promise对象` (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)\n\n## 获得返回值\n\n`await`等待的虽然是promise对象, 但不必写 `.then(function() {...})`, 直接就可以得到返回值.\n\n```javascript\n\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            //  return 'ok'\n            resolve('ok');\n        }, time);\n    })\n}\n\nlet start = async function () {\n    let result = await sleep(3000);\n    console.log(result); // 'ok'\n}\n```\n\n上面是一些正确的处理逻辑\n下面接着看怎么捕捉错误\n\n## 捕捉错误\n\n既然 `.then(function () {...})`不写了,  那么 `.catch(function () {...})`也需要写,\n可以直接使用`try catch`语法来捕捉错误\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); //这里得到一个返回错误\n        //所以一下代码不会执行\n        console.log('end');\n    } catch( e ){\n        console.log(e); //这里捕捉错误 'e'\n    }\n}\n```\n\n## 循环多个`await`\n\nawait 写起来有种写同步代码, 所以可以理所当然的卸载`for`循环里面, 不必当心以往需要`闭包`才能解决的问题\n\n```javascript\n...省略以上代码\n\nlet start = async function () {\n    for(let i = 1; i <= 10; i++ ){\n        console.log(`当前是第${i}次等待...`);\n        await sleep(1000;)\n    }\n};\n```\n\n指的注意的是,  `await`必须在`async函数的上下文中, 也就是await需要在async函数环境中`.\n\n```javascript\n...省略以上代码\n\nlet oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n// 错误示范\noneToTen.forEach(function (item) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); // error!! await只能在async函数中运行\n})\n\n// 正确示范\nfor(let item of oneToten) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); //正确,  for循环的上下文还在async函数中\n}\n```\n","source":"_posts/体验es7中的Async-Await来处理异步.md","raw":"---\ntitle: 体验es7中的Async / Await来处理异步\ndate: 2017-06-14 19:21:56\ntags:\n    - es7\n    - javascript\ncategories: 'javascript'\ncomments: false\n---\n\n\n## 体验下es6对异步的最终解决方案\n> 阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解\n\n### 直接上例子\n\nAsync/Await 应该是目前最简单的异步方案\n下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子\n\n<!-- more -->\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            resolve()\n        }, time);\n    })\n}\n\nlet start = async function () {\n    //这里使用起来像同步代码那样直观\n    console.log('start');\n    await sleep(3000);\n    console.log('end')\n};\n\nstart();\n```\n\n控制台先输出 `start`, 等候3秒后, 输出了 `end` .\n\n## 基本规则\n\n1. async 表示 异步函数,  await只能用在异步函数里面.\n\n2. `await` 表示在这里 `等待promise返回结果` , 在继续执行下面的.\n\n3. `await` 后面跟着的 `应该是一个promise对象` (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)\n\n## 获得返回值\n\n`await`等待的虽然是promise对象, 但不必写 `.then(function() {...})`, 直接就可以得到返回值.\n\n```javascript\n\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            //  return 'ok'\n            resolve('ok');\n        }, time);\n    })\n}\n\nlet start = async function () {\n    let result = await sleep(3000);\n    console.log(result); // 'ok'\n}\n```\n\n上面是一些正确的处理逻辑\n下面接着看怎么捕捉错误\n\n## 捕捉错误\n\n既然 `.then(function () {...})`不写了,  那么 `.catch(function () {...})`也需要写,\n可以直接使用`try catch`语法来捕捉错误\n\n```javascript\nlet sleep = function (time) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n            // 模拟出错了，返回 ‘error’\n            reject('error');\n        }, time);\n    })\n};\n\nlet start = async function () {\n    try {\n        console.log('start');\n        await sleep(3000); //这里得到一个返回错误\n        //所以一下代码不会执行\n        console.log('end');\n    } catch( e ){\n        console.log(e); //这里捕捉错误 'e'\n    }\n}\n```\n\n## 循环多个`await`\n\nawait 写起来有种写同步代码, 所以可以理所当然的卸载`for`循环里面, 不必当心以往需要`闭包`才能解决的问题\n\n```javascript\n...省略以上代码\n\nlet start = async function () {\n    for(let i = 1; i <= 10; i++ ){\n        console.log(`当前是第${i}次等待...`);\n        await sleep(1000;)\n    }\n};\n```\n\n指的注意的是,  `await`必须在`async函数的上下文中, 也就是await需要在async函数环境中`.\n\n```javascript\n...省略以上代码\n\nlet oneToTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n\n// 错误示范\noneToTen.forEach(function (item) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); // error!! await只能在async函数中运行\n})\n\n// 正确示范\nfor(let item of oneToten) {\n    console.log(`当前是第${item}次等待...`);\n    await sleep(1000); //正确,  for循环的上下文还在async函数中\n}\n```\n","slug":"体验es7中的Async-Await来处理异步","published":1,"updated":"2017-07-11T08:01:57.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98uq001ui983etmy7e3f","content":"<h2 id=\"体验下es6对异步的最终解决方案\"><a href=\"#体验下es6对异步的最终解决方案\" class=\"headerlink\" title=\"体验下es6对异步的最终解决方案\"></a>体验下es6对异步的最终解决方案</h2><blockquote>\n<p>阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解</p>\n</blockquote>\n<h3 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h3><p>Async/Await 应该是目前最简单的异步方案<br>下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            resolve()</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用起来像同步代码那样直观</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">start();</div></pre></td></tr></table></figure>\n<p>控制台先输出 <code>start</code>, 等候3秒后, 输出了 <code>end</code> .</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><ol>\n<li><p>async 表示 异步函数,  await只能用在异步函数里面.</p>\n</li>\n<li><p><code>await</code> 表示在这里 <code>等待promise返回结果</code> , 在继续执行下面的.</p>\n</li>\n<li><p><code>await</code> 后面跟着的 <code>应该是一个promise对象</code> (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)</p>\n</li>\n</ol>\n<h2 id=\"获得返回值\"><a href=\"#获得返回值\" class=\"headerlink\" title=\"获得返回值\"></a>获得返回值</h2><p><code>await</code>等待的虽然是promise对象, 但不必写 <code>.then(function() {...})</code>, 直接就可以得到返回值.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//  return 'ok'</span></div><div class=\"line\">            resolve(<span class=\"string\">'ok'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 'ok'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面是一些正确的处理逻辑<br>下面接着看怎么捕捉错误</p>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>既然 <code>.then(function () {...})</code>不写了,  那么 <code>.catch(function () {...})</code>也需要写,<br>可以直接使用<code>try catch</code>语法来捕捉错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 模拟出错了，返回 ‘error’</span></div><div class=\"line\">            reject(<span class=\"string\">'error'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>); <span class=\"comment\">//这里得到一个返回错误</span></div><div class=\"line\">        <span class=\"comment\">//所以一下代码不会执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span>( e )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">//这里捕捉错误 'e'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个<code>await</code></h2><p>await 写起来有种写同步代码, 所以可以理所当然的卸载<code>for</code>循环里面, 不必当心以往需要<code>闭包</code>才能解决的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;i&#125;</span>次等待...`</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>指的注意的是,  <code>await</code>必须在<code>async函数的上下文中, 也就是await需要在async函数环境中</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> oneToTen = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误示范</span></div><div class=\"line\">oneToTen.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// error!! await只能在async函数中运行</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确示范</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> oneToten) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">//正确,  for循环的上下文还在async函数中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"体验下es6对异步的最终解决方案\"><a href=\"#体验下es6对异步的最终解决方案\" class=\"headerlink\" title=\"体验下es6对异步的最终解决方案\"></a>体验下es6对异步的最终解决方案</h2><blockquote>\n<p>阅读之前, 希望对promise和es6(ECMA2015)了解, 会更容易理解</p>\n</blockquote>\n<h3 id=\"直接上例子\"><a href=\"#直接上例子\" class=\"headerlink\" title=\"直接上例子\"></a>直接上例子</h3><p>Async/Await 应该是目前最简单的异步方案<br>下面这个例子就是要实现一个暂停功能, 输入N毫秒, 则停顿N毫秒后才继续执行的例子</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            resolve()</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//这里使用起来像同步代码那样直观</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">start();</div></pre></td></tr></table></figure>\n<p>控制台先输出 <code>start</code>, 等候3秒后, 输出了 <code>end</code> .</p>\n<h2 id=\"基本规则\"><a href=\"#基本规则\" class=\"headerlink\" title=\"基本规则\"></a>基本规则</h2><ol>\n<li><p>async 表示 异步函数,  await只能用在异步函数里面.</p>\n</li>\n<li><p><code>await</code> 表示在这里 <code>等待promise返回结果</code> , 在继续执行下面的.</p>\n</li>\n<li><p><code>await</code> 后面跟着的 <code>应该是一个promise对象</code> (当然, 反悔其他的也没有关系, 只是会立即执行, 不过那样子就没有异步的意义了)</p>\n</li>\n</ol>\n<h2 id=\"获得返回值\"><a href=\"#获得返回值\" class=\"headerlink\" title=\"获得返回值\"></a>获得返回值</h2><p><code>await</code>等待的虽然是promise对象, 但不必写 <code>.then(function() {...})</code>, 直接就可以得到返回值.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">//  return 'ok'</span></div><div class=\"line\">            resolve(<span class=\"string\">'ok'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// 'ok'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面是一些正确的处理逻辑<br>下面接着看怎么捕捉错误</p>\n<h2 id=\"捕捉错误\"><a href=\"#捕捉错误\" class=\"headerlink\" title=\"捕捉错误\"></a>捕捉错误</h2><p>既然 <code>.then(function () {...})</code>不写了,  那么 <code>.catch(function () {...})</code>也需要写,<br>可以直接使用<code>try catch</code>语法来捕捉错误</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> sleep = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">time</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 模拟出错了，返回 ‘error’</span></div><div class=\"line\">            reject(<span class=\"string\">'error'</span>);</div><div class=\"line\">        &#125;, time);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'start'</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">3000</span>); <span class=\"comment\">//这里得到一个返回错误</span></div><div class=\"line\">        <span class=\"comment\">//所以一下代码不会执行</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'end'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">catch</span>( e )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(e); <span class=\"comment\">//这里捕捉错误 'e'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"循环多个await\"><a href=\"#循环多个await\" class=\"headerlink\" title=\"循环多个await\"></a>循环多个<code>await</code></h2><p>await 写起来有种写同步代码, 所以可以理所当然的卸载<code>for</code>循环里面, 不必当心以往需要<code>闭包</code>才能解决的问题</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> start = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++ )&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;i&#125;</span>次等待...`</span>);</div><div class=\"line\">        <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>指的注意的是,  <code>await</code>必须在<code>async函数的上下文中, 也就是await需要在async函数环境中</code>.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">...省略以上代码</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> oneToTen = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>];</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 错误示范</span></div><div class=\"line\">oneToTen.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">// error!! await只能在async函数中运行</span></div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 正确示范</span></div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> oneToten) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`当前是第<span class=\"subst\">$&#123;item&#125;</span>次等待...`</span>);</div><div class=\"line\">    <span class=\"keyword\">await</span> sleep(<span class=\"number\">1000</span>); <span class=\"comment\">//正确,  for循环的上下文还在async函数中</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"hexo博客搭建以及个人开发环境","comments":0,"_content":"\n## hexo分分钟搭建博客\n\n### [官方传送门](https://hexo.io/zh-cn/)\n\n因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想\n\n{% asset_img hexo-info.png hexo intro %}\n\n<!-- more -->\n\n### 本地安装\n当然node和npm是必须的,\n\n```base\n➜ npm install hexo-cli -g\n➜ hexo init blog\n➜ cd blog\n➜ npm install\n➜ hexo server\n```\n\n本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞\n\n### 选择喜欢的主题, 个人倾向 [Hexo Next](http://theme-next.iissnan.com/)这个主题\n\n安装在`themes`文件夹内, 修改配置文件`_config.ycm`\n具体配置可以查看官网说明\n\n具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof\n\n配置github pages\n\n```coffeescript\ndeploy:\n  type: git\n  repo: 'https://github.com/username/projectName'\n  branch: [branshName]\n  message: \"{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n```\n\n上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称\n\n\n## tags类型\n\n```\ntags:\n  - tag1\n  - tag2\ncategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n### 添加标签\n\n`hexo new page tags`\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```coffeescript\ntitle: tags\ndate: 2017-06-01 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n### 添加分类\n\n`hexo new page categories`\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n\n## 部署\n配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run```hexo g -d```部署到自己的github就可以了\n\n然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok\n","source":"_posts/开发环境介绍以及博客搭建.md","raw":"---\ntitle: hexo博客搭建以及个人开发环境\ntags:\n    - blog\n    - hexo\ncategories: \"blog\"\ncomments: false\n---\n\n## hexo分分钟搭建博客\n\n### [官方传送门](https://hexo.io/zh-cn/)\n\n因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想\n\n{% asset_img hexo-info.png hexo intro %}\n\n<!-- more -->\n\n### 本地安装\n当然node和npm是必须的,\n\n```base\n➜ npm install hexo-cli -g\n➜ hexo init blog\n➜ cd blog\n➜ npm install\n➜ hexo server\n```\n\n本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞\n\n### 选择喜欢的主题, 个人倾向 [Hexo Next](http://theme-next.iissnan.com/)这个主题\n\n安装在`themes`文件夹内, 修改配置文件`_config.ycm`\n具体配置可以查看官网说明\n\n具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof\n\n配置github pages\n\n```coffeescript\ndeploy:\n  type: git\n  repo: 'https://github.com/username/projectName'\n  branch: [branshName]\n  message: \"{{ now('YYYY-MM-DD HH:mm:ss') }}\"\n```\n\n上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称\n\n\n## tags类型\n\n```\ntags:\n  - tag1\n  - tag2\ncategories: xxx\n```\n冒号后面要有空格\n应该在 ---之上，---下面是页面内容\n令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开\n\n### 添加标签\n\n`hexo new page tags`\n确认站点配置文件里有tag_dir: tags\n确认主题配置文件里有tags: /tags\n编辑站点的source/tags/index.md，添加\n\n```coffeescript\ntitle: tags\ndate: 2017-06-01 06:49:50\ntype: \"tags\"\ncomments: false\n```\n\n### 添加分类\n\n`hexo new page categories`\n确认站点配置文件里有category_dir: categories\n确认主题配置文件里有categories: /categories\n编辑站点的source/categories/index.md，添加\n\n```\ntitle: categories\ndate: 2015-10-20 06:49:50\ntype: \"categories\"\ncomments: false\n```\n\n## 部署\n配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run```hexo g -d```部署到自己的github就可以了\n\n然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok\n","slug":"开发环境介绍以及博客搭建","published":1,"date":"2017-06-10T11:40:38.000Z","updated":"2017-07-26T01:53:56.000Z","layout":"post","photos":[],"link":"","_id":"cj5ox98ur001xi983lwvre3rj","content":"<h2 id=\"hexo分分钟搭建博客\"><a href=\"#hexo分分钟搭建博客\" class=\"headerlink\" title=\"hexo分分钟搭建博客\"></a>hexo分分钟搭建博客</h2><h3 id=\"官方传送门\"><a href=\"#官方传送门\" class=\"headerlink\" title=\"官方传送门\"></a><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方传送门</a></h3><p>因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想</p>\n<img src=\"/2017/06/10/开发环境介绍以及博客搭建/hexo-info.png\" alt=\"hexo intro\" title=\"hexo intro\">\n<a id=\"more\"></a>\n<h3 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h3><p>当然node和npm是必须的,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ npm install hexo-cli -g</div><div class=\"line\">➜ hexo init blog</div><div class=\"line\">➜ cd blog</div><div class=\"line\">➜ npm install</div><div class=\"line\">➜ hexo server</div></pre></td></tr></table></figure>\n<p>本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞</p>\n<h3 id=\"选择喜欢的主题-个人倾向-Hexo-Next这个主题\"><a href=\"#选择喜欢的主题-个人倾向-Hexo-Next这个主题\" class=\"headerlink\" title=\"选择喜欢的主题, 个人倾向 Hexo Next这个主题\"></a>选择喜欢的主题, 个人倾向 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Hexo Next</a>这个主题</h3><p>安装在<code>themes</code>文件夹内, 修改配置文件<code>_config.ycm</code><br>具体配置可以查看官网说明</p>\n<p>具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof</p>\n<p>配置github pages</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: <span class=\"string\">'https://github.com/username/projectName'</span></div><div class=\"line\">  branch: [branshName]</div><div class=\"line\">  message: <span class=\"string\">\"&#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;\"</span></div></pre></td></tr></table></figure>\n<p>上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称</p>\n<h2 id=\"tags类型\"><a href=\"#tags类型\" class=\"headerlink\" title=\"tags类型\"></a>tags类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><p><code>hexo new page tags</code><br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2017-06-01 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p><code>hexo new page categories</code><br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run<code>hexo g -d</code>部署到自己的github就可以了</p>\n<p>然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"hexo分分钟搭建博客\"><a href=\"#hexo分分钟搭建博客\" class=\"headerlink\" title=\"hexo分分钟搭建博客\"></a>hexo分分钟搭建博客</h2><h3 id=\"官方传送门\"><a href=\"#官方传送门\" class=\"headerlink\" title=\"官方传送门\"></a><a href=\"https://hexo.io/zh-cn/\" target=\"_blank\" rel=\"external\">官方传送门</a></h3><p>因为自己搞的是前端,  所以选择用node来搞, 对markdown也很喜欢, 然后用的hexo来写自己的博客, 写一些自己所用到的技术 和 生活中的琐碎感想</p>\n<img src=\"/2017/06/10/开发环境介绍以及博客搭建/hexo-info.png\" alt=\"hexo intro\" title=\"hexo intro\">","more":"<h3 id=\"本地安装\"><a href=\"#本地安装\" class=\"headerlink\" title=\"本地安装\"></a>本地安装</h3><p>当然node和npm是必须的,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">➜ npm install hexo-cli -g</div><div class=\"line\">➜ hexo init blog</div><div class=\"line\">➜ cd blog</div><div class=\"line\">➜ npm install</div><div class=\"line\">➜ hexo server</div></pre></td></tr></table></figure>\n<p>本地安装好之后, 然后就是配置github了.新建一个项目, 然后设置 git pages 记得之前分支只能用gh-pages 不知道什么时候就开放了这个限制,不得不给github点个赞</p>\n<h3 id=\"选择喜欢的主题-个人倾向-Hexo-Next这个主题\"><a href=\"#选择喜欢的主题-个人倾向-Hexo-Next这个主题\" class=\"headerlink\" title=\"选择喜欢的主题, 个人倾向 Hexo Next这个主题\"></a>选择喜欢的主题, 个人倾向 <a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">Hexo Next</a>这个主题</h3><p>安装在<code>themes</code>文件夹内, 修改配置文件<code>_config.ycm</code><br>具体配置可以查看官网说明</p>\n<p>具体说一下github pages的配置, 因为按照官网的配置改了好几次都没有成功, 原来是应为合适不正确, 也没有具体指出对象typeof</p>\n<p>配置github pages</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: <span class=\"string\">'https://github.com/username/projectName'</span></div><div class=\"line\">  branch: [branshName]</div><div class=\"line\">  message: <span class=\"string\">\"&#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;\"</span></div></pre></td></tr></table></figure>\n<p>上面分别 username, projectName, branshName 替换成你自己的github账户和项目名称, 分支名称</p>\n<h2 id=\"tags类型\"><a href=\"#tags类型\" class=\"headerlink\" title=\"tags类型\"></a>tags类型</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">tags:</div><div class=\"line\">  - tag1</div><div class=\"line\">  - tag2</div><div class=\"line\">categories: xxx</div></pre></td></tr></table></figure>\n<p>冒号后面要有空格<br>应该在 —之上，—下面是页面内容<br>令：要添加tags和categories页面；且主题的配置文件和站点的配置文件tags和categories的注释要打开</p>\n<h3 id=\"添加标签\"><a href=\"#添加标签\" class=\"headerlink\" title=\"添加标签\"></a>添加标签</h3><p><code>hexo new page tags</code><br>确认站点配置文件里有tag_dir: tags<br>确认主题配置文件里有tags: /tags<br>编辑站点的source/tags/index.md，添加</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: tags</div><div class=\"line\">date: 2017-06-01 06:49:50</div><div class=\"line\">type: &quot;tags&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h3 id=\"添加分类\"><a href=\"#添加分类\" class=\"headerlink\" title=\"添加分类\"></a>添加分类</h3><p><code>hexo new page categories</code><br>确认站点配置文件里有category_dir: categories<br>确认主题配置文件里有categories: /categories<br>编辑站点的source/categories/index.md，添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: categories</div><div class=\"line\">date: 2015-10-20 06:49:50</div><div class=\"line\">type: &quot;categories&quot;</div><div class=\"line\">comments: false</div></pre></td></tr></table></figure>\n<h2 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h2><p>配置好之后就可以哐哐哐的写起来了,  感觉良好 然后 在项目根目录run<code>hexo g -d</code>部署到自己的github就可以了</p>\n<p>然后去github里面的setting查看博客地址, 有兴趣的伙伴可以自己申请一个自己的域名用CNAME的方式来解析, 之后博客分支根目录新建CNAME文件, 无后缀名, 里面把你域名写进去(不带www). 恩, ok</p>"},{"title":"是时候使用httpie来做你的api接口调试了","date":"2017-07-26T02:43:54.000Z","_content":"\n{% asset_img httpie.png curl和httpie的代码高亮 %}\n\n<!-- more -->\n\n> [首先附上官方文档](https://github.com/jkbrzt/httpie)\n\n## `httpie` 是有`python`写的,  所以,  你电脑里面必须有`python`\n\n请提前get http协议相关知识\n\n至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试\n\n这里安装使用python的包管理器\n\n`pip install httpie`\n\n我电脑是mac,  所以我就使用了`brew install httpie` 最终效果一样\n\n## 这里说一下基本的操作\n\n```\n模拟提交表单 -f\nhttp -f POST serverPath.php username=name\n\n显示详细的请求\nhttp -v yhz.me\n\n只显示Header\nhttp -h yhz.me\n\n只显示Body\nhttp -b yhz.me\n\n下载文件\nhttp -d yhz.me\n\n请求删除的方法\nhttp DELETE yhz.me\n\n传递JSON数据请求(默认就是JSON数据请求)\nhttp PUT yhz.me name=nate password=nate_password\n\n如果JSON数据存在不是字符串则用:=分隔，例如\nhttp PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:='[\"a\", \"b\"]'\n\n模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8\nhttp --form POST yhz.me name='nate'\n模拟Form的上传, Content-Type: multipart/form-data\nhttp -f POST example.com/jobs name='John Smith' file@~/test.pdf\n\n修改请求头, 使用:分隔\nhttp yhz.me  User-Agent:Yhz/1.0  'Cookie:a=b;b=c'  Referer:http://yhz.me/\n\n认证\nhttp -a username:password yhz.me\nhttp --auth-type=digest -a username:password yhz.me\n\n使用http代理\nhttp --proxy=http:http://192.168.1.100:8060 yhz.me\nhttp --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me\n```\n\n基本上可以应付你工作中所有的http请求了,\n它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多\n\n> [写的更详细的在这里](https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/)\n","source":"_posts/是时候使用httpie来做你的api接口调试了.md","raw":"---\ntitle: 是时候使用httpie来做你的api接口调试了\ndate: 2017-07-26 10:43:54\ntag:\n    - api\n    - http\n    - python\n---\n\n{% asset_img httpie.png curl和httpie的代码高亮 %}\n\n<!-- more -->\n\n> [首先附上官方文档](https://github.com/jkbrzt/httpie)\n\n## `httpie` 是有`python`写的,  所以,  你电脑里面必须有`python`\n\n请提前get http协议相关知识\n\n至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试\n\n这里安装使用python的包管理器\n\n`pip install httpie`\n\n我电脑是mac,  所以我就使用了`brew install httpie` 最终效果一样\n\n## 这里说一下基本的操作\n\n```\n模拟提交表单 -f\nhttp -f POST serverPath.php username=name\n\n显示详细的请求\nhttp -v yhz.me\n\n只显示Header\nhttp -h yhz.me\n\n只显示Body\nhttp -b yhz.me\n\n下载文件\nhttp -d yhz.me\n\n请求删除的方法\nhttp DELETE yhz.me\n\n传递JSON数据请求(默认就是JSON数据请求)\nhttp PUT yhz.me name=nate password=nate_password\n\n如果JSON数据存在不是字符串则用:=分隔，例如\nhttp PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:='[\"a\", \"b\"]'\n\n模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8\nhttp --form POST yhz.me name='nate'\n模拟Form的上传, Content-Type: multipart/form-data\nhttp -f POST example.com/jobs name='John Smith' file@~/test.pdf\n\n修改请求头, 使用:分隔\nhttp yhz.me  User-Agent:Yhz/1.0  'Cookie:a=b;b=c'  Referer:http://yhz.me/\n\n认证\nhttp -a username:password yhz.me\nhttp --auth-type=digest -a username:password yhz.me\n\n使用http代理\nhttp --proxy=http:http://192.168.1.100:8060 yhz.me\nhttp --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me\n```\n\n基本上可以应付你工作中所有的http请求了,\n它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多\n\n> [写的更详细的在这里](https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/)\n","slug":"是时候使用httpie来做你的api接口调试了","published":1,"updated":"2017-07-28T08:28:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj5ox98us0021i9833q6f60it","content":"<img src=\"/2017/07/26/是时候使用httpie来做你的api接口调试了/httpie.png\" alt=\"curl和httpie的代码高亮\" title=\"curl和httpie的代码高亮\">\n<a id=\"more\"></a>\n<blockquote>\n<p><a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"external\">首先附上官方文档</a></p>\n</blockquote>\n<h2 id=\"httpie-是有python写的-所以-你电脑里面必须有python\"><a href=\"#httpie-是有python写的-所以-你电脑里面必须有python\" class=\"headerlink\" title=\"httpie 是有python写的,  所以,  你电脑里面必须有python\"></a><code>httpie</code> 是有<code>python</code>写的,  所以,  你电脑里面必须有<code>python</code></h2><p>请提前get http协议相关知识</p>\n<p>至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试</p>\n<p>这里安装使用python的包管理器</p>\n<p><code>pip install httpie</code></p>\n<p>我电脑是mac,  所以我就使用了<code>brew install httpie</code> 最终效果一样</p>\n<h2 id=\"这里说一下基本的操作\"><a href=\"#这里说一下基本的操作\" class=\"headerlink\" title=\"这里说一下基本的操作\"></a>这里说一下基本的操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">模拟提交表单 -f</div><div class=\"line\">http -f POST serverPath.php username=name</div><div class=\"line\"></div><div class=\"line\">显示详细的请求</div><div class=\"line\">http -v yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Header</div><div class=\"line\">http -h yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Body</div><div class=\"line\">http -b yhz.me</div><div class=\"line\"></div><div class=\"line\">下载文件</div><div class=\"line\">http -d yhz.me</div><div class=\"line\"></div><div class=\"line\">请求删除的方法</div><div class=\"line\">http DELETE yhz.me</div><div class=\"line\"></div><div class=\"line\">传递JSON数据请求(默认就是JSON数据请求)</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password</div><div class=\"line\"></div><div class=\"line\">如果JSON数据存在不是字符串则用:=分隔，例如</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:=&apos;[&quot;a&quot;, &quot;b&quot;]&apos;</div><div class=\"line\"></div><div class=\"line\">模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8</div><div class=\"line\">http --form POST yhz.me name=&apos;nate&apos;</div><div class=\"line\">模拟Form的上传, Content-Type: multipart/form-data</div><div class=\"line\">http -f POST example.com/jobs name=&apos;John Smith&apos; file@~/test.pdf</div><div class=\"line\"></div><div class=\"line\">修改请求头, 使用:分隔</div><div class=\"line\">http yhz.me  User-Agent:Yhz/1.0  &apos;Cookie:a=b;b=c&apos;  Referer:http://yhz.me/</div><div class=\"line\"></div><div class=\"line\">认证</div><div class=\"line\">http -a username:password yhz.me</div><div class=\"line\">http --auth-type=digest -a username:password yhz.me</div><div class=\"line\"></div><div class=\"line\">使用http代理</div><div class=\"line\">http --proxy=http:http://192.168.1.100:8060 yhz.me</div><div class=\"line\">http --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me</div></pre></td></tr></table></figure>\n<p>基本上可以应付你工作中所有的http请求了,<br>它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多</p>\n<blockquote>\n<p><a href=\"https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"external\">写的更详细的在这里</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<img src=\"/2017/07/26/是时候使用httpie来做你的api接口调试了/httpie.png\" alt=\"curl和httpie的代码高亮\" title=\"curl和httpie的代码高亮\">","more":"<blockquote>\n<p><a href=\"https://github.com/jkbrzt/httpie\" target=\"_blank\" rel=\"external\">首先附上官方文档</a></p>\n</blockquote>\n<h2 id=\"httpie-是有python写的-所以-你电脑里面必须有python\"><a href=\"#httpie-是有python写的-所以-你电脑里面必须有python\" class=\"headerlink\" title=\"httpie 是有python写的,  所以,  你电脑里面必须有python\"></a><code>httpie</code> 是有<code>python</code>写的,  所以,  你电脑里面必须有<code>python</code></h2><p>请提前get http协议相关知识</p>\n<p>至于它是做什么的,  这个不难知道,  百度下就可以了,  我常用他来做api接口的调试</p>\n<p>这里安装使用python的包管理器</p>\n<p><code>pip install httpie</code></p>\n<p>我电脑是mac,  所以我就使用了<code>brew install httpie</code> 最终效果一样</p>\n<h2 id=\"这里说一下基本的操作\"><a href=\"#这里说一下基本的操作\" class=\"headerlink\" title=\"这里说一下基本的操作\"></a>这里说一下基本的操作</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">模拟提交表单 -f</div><div class=\"line\">http -f POST serverPath.php username=name</div><div class=\"line\"></div><div class=\"line\">显示详细的请求</div><div class=\"line\">http -v yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Header</div><div class=\"line\">http -h yhz.me</div><div class=\"line\"></div><div class=\"line\">只显示Body</div><div class=\"line\">http -b yhz.me</div><div class=\"line\"></div><div class=\"line\">下载文件</div><div class=\"line\">http -d yhz.me</div><div class=\"line\"></div><div class=\"line\">请求删除的方法</div><div class=\"line\">http DELETE yhz.me</div><div class=\"line\"></div><div class=\"line\">传递JSON数据请求(默认就是JSON数据请求)</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password</div><div class=\"line\"></div><div class=\"line\">如果JSON数据存在不是字符串则用:=分隔，例如</div><div class=\"line\">http PUT yhz.me name=nate password=nate_password age:=28 a:=true streets:=&apos;[&quot;a&quot;, &quot;b&quot;]&apos;</div><div class=\"line\"></div><div class=\"line\">模拟Form的Post请求, Content-Type: application/x-www-form-urlencoded; charset=utf-8</div><div class=\"line\">http --form POST yhz.me name=&apos;nate&apos;</div><div class=\"line\">模拟Form的上传, Content-Type: multipart/form-data</div><div class=\"line\">http -f POST example.com/jobs name=&apos;John Smith&apos; file@~/test.pdf</div><div class=\"line\"></div><div class=\"line\">修改请求头, 使用:分隔</div><div class=\"line\">http yhz.me  User-Agent:Yhz/1.0  &apos;Cookie:a=b;b=c&apos;  Referer:http://yhz.me/</div><div class=\"line\"></div><div class=\"line\">认证</div><div class=\"line\">http -a username:password yhz.me</div><div class=\"line\">http --auth-type=digest -a username:password yhz.me</div><div class=\"line\"></div><div class=\"line\">使用http代理</div><div class=\"line\">http --proxy=http:http://192.168.1.100:8060 yhz.me</div><div class=\"line\">http --proxy=http:http://user:pass@192.168.1.100:8060 yhz.me</div></pre></td></tr></table></figure>\n<p>基本上可以应付你工作中所有的http请求了,<br>它比curl返回的数据更有好, 代码高亮很喜欢, 使用起来也简单很多</p>\n<blockquote>\n<p><a href=\"https://xin053.github.io/2016/08/15/httpie%E4%BA%BA%E6%80%A7%E5%8C%96curl%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/\" target=\"_blank\" rel=\"external\">写的更详细的在这里</a></p>\n</blockquote>"}],"PostAsset":[{"_id":"source/_posts/emacs使用company-mode-ycmd-hippie-来完善你的补全功能-以及遇到的坑/emacs-ycmd.png","slug":"emacs-ycmd.png","post":"cj5ox98s90004i98349keom0s","modified":1,"renderable":0},{"_id":"source/_posts/react系列使用redux/redux-thing-image1.png","slug":"redux-thing-image1.png","post":"cj5ox98u3001fi9833f0q7jdk","modified":1,"renderable":0},{"_id":"source/_posts/Immutable-js意义以及使用场所/immuable.gif","slug":"immuable.gif","post":"cj5ox98s30002i9831aged73f","modified":1,"renderable":0},{"_id":"source/_posts/hexo添加自己域名/admin.png","post":"cj5ox98su000ci9836d360g0c","slug":"admin.png","modified":1,"renderable":1},{"_id":"source/_posts/javascript异步开源库/promise.png","post":"cj5ox98tb000mi983rhm8cdxd","slug":"promise.png","modified":1,"renderable":1},{"_id":"source/_posts/js移触屏滑动事件/touchstart_demo.png","post":"cj5ox98tg000oi983cac5t1sm","slug":"touchstart_demo.png","modified":1,"renderable":1},{"_id":"source/_posts/react中高阶组件的使用以及技巧/react-hoc.png","post":"cj5ox98ts0012i983ey55cdpb","slug":"react-hoc.png","modified":1,"renderable":1},{"_id":"source/_posts/react中setState的使用/this.setState.png","post":"cj5ox98tx0017i983re3r5cvv","slug":"this.setState.png","modified":1,"renderable":1},{"_id":"source/_posts/react使用感受/react.png","post":"cj5ox98ty001bi98337kasz2u","slug":"react.png","modified":1,"renderable":1},{"_id":"source/_posts/vim转移emacs的艰辛路程/vim_key_help.png","slug":"vim_key_help.png","post":"cj5ox98u5001ii983x7xoao5m","modified":1,"renderable":0},{"_id":"source/_posts/开发环境介绍以及博客搭建/hexo-info.png","post":"cj5ox98ur001xi983lwvre3rj","slug":"hexo-info.png","modified":1,"renderable":1},{"_id":"source/_posts/是时候使用httpie来做你的api接口调试了/httpie.png","slug":"httpie.png","post":"cj5ox98us0021i9833q6f60it","modified":1,"renderable":0},{"_id":"source/_posts/Immutable-js意义以及使用场所/immutable2.jpg","post":"cj5ox98s30002i9831aged73f","slug":"immutable2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/react系列使用redux/redux-thing-image2.png","post":"cj5ox98u3001fi9833f0q7jdk","slug":"redux-thing-image2.png","modified":1,"renderable":1},{"_id":"source/_posts/web前端mac下常用软件/dash-seach.png","post":"cj5ox98u0001di9836gghagum","slug":"dash-seach.png","modified":1,"renderable":1},{"_id":"source/_posts/web前端mac下常用软件/emacs-example.png","slug":"emacs-example.png","post":"cj5ox98u0001di9836gghagum","modified":1,"renderable":0},{"_id":"source/_posts/web前端mac下常用软件/mac-down.png","slug":"mac-down.png","post":"cj5ox98u0001di9836gghagum","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cj5ox98s90004i98349keom0s","category_id":"cj5ox98sq0009i983q37xbgs9","_id":"cj5ox98tb000li983ihjetykp"},{"post_id":"cj5ox98sr000ai983rhx2o8uw","category_id":"cj5ox98t0000gi983p6eb6eu1","_id":"cj5ox98to000ri983f5ibelan"},{"post_id":"cj5ox98su000ci9836d360g0c","category_id":"cj5ox98tc000ni983344149mm","_id":"cj5ox98tr000yi983ws31m86m"},{"post_id":"cj5ox98tb000mi983rhm8cdxd","category_id":"cj5ox98to000ti983va9a66yc","_id":"cj5ox98tt0014i9835zysfh4y"},{"post_id":"cj5ox98tg000oi983cac5t1sm","category_id":"cj5ox98tr0010i983287mchfn","_id":"cj5ox98ty001ai983idzq90rd"},{"post_id":"cj5ox98to000qi983a5dwhygn","category_id":"cj5ox98tw0016i983u3f2ty80","_id":"cj5ox98u4001gi983zgup9bh8"},{"post_id":"cj5ox98tt0015i983jqolq3k1","category_id":"cj5ox98tz001ci983n7zlf6nb","_id":"cj5ox98uc001li983w9kzxpxn"},{"post_id":"cj5ox98ty001bi98337kasz2u","category_id":"cj5ox98u4001hi983feu27am9","_id":"cj5ox98uq001si9831db9x0b4"},{"post_id":"cj5ox98u0001di9836gghagum","category_id":"cj5ox98uc001ni983vff07yj3","_id":"cj5ox98us0020i983ykn71juw"},{"post_id":"cj5ox98uq001ui983etmy7e3f","category_id":"cj5ox98to000ti983va9a66yc","_id":"cj5ox98uv0024i983c0b1w983"},{"post_id":"cj5ox98ur001xi983lwvre3rj","category_id":"cj5ox98u4001hi983feu27am9","_id":"cj5ox98uv0027i983x60cb4vc"},{"post_id":"cj5ox98u3001fi9833f0q7jdk","category_id":"cj5ox98ur001vi983s062cc91","_id":"cj5ox98uw002ai9837y7ufytu"},{"post_id":"cj5ox98u5001ii983x7xoao5m","category_id":"cj5ox98uu0022i983spn8q80x","_id":"cj5ox98ux002ci983te1g4ash"},{"post_id":"cj5ox98u9001ki983cozxla03","category_id":"cj5ox98uw0028i983prtk2wdf","_id":"cj5ox98uy002fi983whp2xvmu"},{"post_id":"cj5ox98up001ri983lx37xjk7","category_id":"cj5ox98ux002di98310z8ihah","_id":"cj5ox98uz002ji983e93ruze0"}],"PostTag":[{"post_id":"cj5ox98s30002i9831aged73f","tag_id":"cj5ox98se0006i983dlk4iyo6","_id":"cj5ox98to000si983e08v5c70"},{"post_id":"cj5ox98s30002i9831aged73f","tag_id":"cj5ox98sv000di983zsujcxg9","_id":"cj5ox98tq000vi983ahkseugm"},{"post_id":"cj5ox98s30002i9831aged73f","tag_id":"cj5ox98t8000ki983aslnkt1d","_id":"cj5ox98tr000zi983yknvcoar"},{"post_id":"cj5ox98tt0015i983jqolq3k1","tag_id":"cj5ox98sv000di983zsujcxg9","_id":"cj5ox98ty0019i983228wyo7b"},{"post_id":"cj5ox98s90004i98349keom0s","tag_id":"cj5ox98tn000pi983ex0zky63","_id":"cj5ox98uc001mi983cycu2zff"},{"post_id":"cj5ox98s90004i98349keom0s","tag_id":"cj5ox98tq000wi983mem6iudj","_id":"cj5ox98up001pi983axwgku36"},{"post_id":"cj5ox98s90004i98349keom0s","tag_id":"cj5ox98tt0013i9832ui0kzp6","_id":"cj5ox98uq001ti98388j3y26y"},{"post_id":"cj5ox98s90004i98349keom0s","tag_id":"cj5ox98tx0018i983axdoyfhe","_id":"cj5ox98ur001wi983fsyvzk93"},{"post_id":"cj5ox98s90004i98349keom0s","tag_id":"cj5ox98u3001ei983h4yqgsu2","_id":"cj5ox98us001zi983rmtpb6uy"},{"post_id":"cj5ox98sh0007i983imqbydnk","tag_id":"cj5ox98tn000pi983ex0zky63","_id":"cj5ox98uv0023i983raiklwpj"},{"post_id":"cj5ox98sh0007i983imqbydnk","tag_id":"cj5ox98up001qi983cga8je42","_id":"cj5ox98uv0026i9839j4va0rj"},{"post_id":"cj5ox98sr000ai983rhx2o8uw","tag_id":"cj5ox98us001yi9832ktchckb","_id":"cj5ox98uw0029i983hc6m8ter"},{"post_id":"cj5ox98su000ci9836d360g0c","tag_id":"cj5ox98uv0025i983eocyzjf5","_id":"cj5ox98uy002gi98391tqxg6a"},{"post_id":"cj5ox98su000ci9836d360g0c","tag_id":"cj5ox98uw002bi98392j7msxn","_id":"cj5ox98uy002hi9835gfchre5"},{"post_id":"cj5ox98sx000fi983ksyjuxev","tag_id":"cj5ox98ux002ei983khujcqt9","_id":"cj5ox98uz002mi983pc3oy32a"},{"post_id":"cj5ox98sx000fi983ksyjuxev","tag_id":"cj5ox98uy002ii9830beb5aej","_id":"cj5ox98v0002ni983caav14kb"},{"post_id":"cj5ox98sx000fi983ksyjuxev","tag_id":"cj5ox98uz002ki983j738z3dz","_id":"cj5ox98v0002pi983t4mi0eaw"},{"post_id":"cj5ox98t6000ii983xqz807u2","tag_id":"cj5ox98uz002li983dv1iap9i","_id":"cj5ox98v0002qi983r77gz80l"},{"post_id":"cj5ox98tb000mi983rhm8cdxd","tag_id":"cj5ox98v0002oi983x4py148h","_id":"cj5ox98v2002ti98302z8ap81"},{"post_id":"cj5ox98tb000mi983rhm8cdxd","tag_id":"cj5ox98ux002ei983khujcqt9","_id":"cj5ox98v2002ui983vmlfxgch"},{"post_id":"cj5ox98tg000oi983cac5t1sm","tag_id":"cj5ox98v2002si983zj3lzg71","_id":"cj5ox98v3002wi983lc8akuov"},{"post_id":"cj5ox98to000qi983a5dwhygn","tag_id":"cj5ox98sv000di983zsujcxg9","_id":"cj5ox98v4002yi983nawcquoa"},{"post_id":"cj5ox98to000qi983a5dwhygn","tag_id":"cj5ox98v2002vi98393p7u60p","_id":"cj5ox98v4002zi9839fqziwjp"},{"post_id":"cj5ox98tr0011i983c2kjxluf","tag_id":"cj5ox98se0006i983dlk4iyo6","_id":"cj5ox98v50031i983lbwmcaob"},{"post_id":"cj5ox98tr0011i983c2kjxluf","tag_id":"cj5ox98v3002xi983hd7d511f","_id":"cj5ox98v50032i983gv7njnyu"},{"post_id":"cj5ox98ts0012i983ey55cdpb","tag_id":"cj5ox98sv000di983zsujcxg9","_id":"cj5ox98v60034i9839eu6iggk"},{"post_id":"cj5ox98ts0012i983ey55cdpb","tag_id":"cj5ox98se0006i983dlk4iyo6","_id":"cj5ox98v60035i983lh1ttfrh"},{"post_id":"cj5ox98ts0012i983ey55cdpb","tag_id":"cj5ox98v40030i983jugltn7i","_id":"cj5ox98v70037i9836lqpvnb8"},{"post_id":"cj5ox98tx0017i983re3r5cvv","tag_id":"cj5ox98se0006i983dlk4iyo6","_id":"cj5ox98v70038i983vq2jpkif"},{"post_id":"cj5ox98tx0017i983re3r5cvv","tag_id":"cj5ox98v50033i983qworc6ty","_id":"cj5ox98v7003ai983pl9e5o9z"},{"post_id":"cj5ox98u0001di9836gghagum","tag_id":"cj5ox98v70036i983qpzzqt45","_id":"cj5ox98v7003bi9838b93v57i"},{"post_id":"cj5ox98u3001fi9833f0q7jdk","tag_id":"cj5ox98v3002xi983hd7d511f","_id":"cj5ox98v8003di983kjxiv5it"},{"post_id":"cj5ox98u3001fi9833f0q7jdk","tag_id":"cj5ox98se0006i983dlk4iyo6","_id":"cj5ox98v8003ei983b4zfb3l9"},{"post_id":"cj5ox98u5001ii983x7xoao5m","tag_id":"cj5ox98v7003ci983nemaw0tc","_id":"cj5ox98v8003gi983x16asgyt"},{"post_id":"cj5ox98u5001ii983x7xoao5m","tag_id":"cj5ox98tn000pi983ex0zky63","_id":"cj5ox98v8003hi983sye80624"},{"post_id":"cj5ox98u9001ki983cozxla03","tag_id":"cj5ox98v3002xi983hd7d511f","_id":"cj5ox98v9003ki983rfzg4va0"},{"post_id":"cj5ox98u9001ki983cozxla03","tag_id":"cj5ox98se0006i983dlk4iyo6","_id":"cj5ox98v9003li9836p7icqf1"},{"post_id":"cj5ox98u9001ki983cozxla03","tag_id":"cj5ox98v8003ii983yn1emnc1","_id":"cj5ox98v9003ni983t2c23jwu"},{"post_id":"cj5ox98up001ri983lx37xjk7","tag_id":"cj5ox98v8003ji9837qaqzgke","_id":"cj5ox98vb003qi9836z1m62ll"},{"post_id":"cj5ox98up001ri983lx37xjk7","tag_id":"cj5ox98v70036i983qpzzqt45","_id":"cj5ox98vb003ri983ss6w9p2u"},{"post_id":"cj5ox98up001ri983lx37xjk7","tag_id":"cj5ox98va003oi983i4o2596z","_id":"cj5ox98vc003ti983y4fegde7"},{"post_id":"cj5ox98uq001ui983etmy7e3f","tag_id":"cj5ox98va003pi983u8xif47n","_id":"cj5ox98vc003vi9838grhh7dv"},{"post_id":"cj5ox98uq001ui983etmy7e3f","tag_id":"cj5ox98ux002ei983khujcqt9","_id":"cj5ox98vc003wi983ijgycqty"},{"post_id":"cj5ox98ur001xi983lwvre3rj","tag_id":"cj5ox98vc003ui9831iskjafr","_id":"cj5ox98vg003zi9834pnl0d04"},{"post_id":"cj5ox98ur001xi983lwvre3rj","tag_id":"cj5ox98uv0025i983eocyzjf5","_id":"cj5ox98vg0040i983e6xhudg1"},{"post_id":"cj5ox98us0021i9833q6f60it","tag_id":"cj5ox98vf003yi983x4lkgh9v","_id":"cj5ox98vh0043i983vj60ppzf"},{"post_id":"cj5ox98us0021i9833q6f60it","tag_id":"cj5ox98vg0041i983198vfveb","_id":"cj5ox98vh0044i983ijl4nen4"},{"post_id":"cj5ox98us0021i9833q6f60it","tag_id":"cj5ox98vg0042i9831qtzbh4q","_id":"cj5ox98vh0045i983zkaoj73q"}],"Tag":[{"name":"react","_id":"cj5ox98se0006i983dlk4iyo6"},{"name":"react-native","_id":"cj5ox98sv000di983zsujcxg9"},{"name":"immutable","_id":"cj5ox98t8000ki983aslnkt1d"},{"name":"emacs","_id":"cj5ox98tn000pi983ex0zky63"},{"name":"emacs自动补全","_id":"cj5ox98tq000wi983mem6iudj"},{"name":"ycmd","_id":"cj5ox98tt0013i9832ui0kzp6"},{"name":"company-mode","_id":"cj5ox98tx0018i983axdoyfhe"},{"name":"hippie","_id":"cj5ox98u3001ei983h4yqgsu2"},{"name":"emacs API","_id":"cj5ox98up001qi983cga8je42"},{"name":"git","_id":"cj5ox98us001yi9832ktchckb"},{"name":"hexo","_id":"cj5ox98uv0025i983eocyzjf5"},{"name":"next主题","_id":"cj5ox98uw002bi98392j7msxn"},{"name":"javascript","_id":"cj5ox98ux002ei983khujcqt9"},{"name":"观察者模式","_id":"cj5ox98uy002ii9830beb5aej"},{"name":"es6","_id":"cj5ox98uz002ki983j738z3dz"},{"name":"node","_id":"cj5ox98uz002li983dv1iap9i"},{"name":"js异步","_id":"cj5ox98v0002oi983x4py148h"},{"name":"h5","_id":"cj5ox98v2002si983zj3lzg71"},{"name":"RN-android","_id":"cj5ox98v2002vi98393p7u60p"},{"name":"redux","_id":"cj5ox98v3002xi983hd7d511f"},{"name":"高阶组件","_id":"cj5ox98v40030i983jugltn7i"},{"name":"setState","_id":"cj5ox98v50033i983qworc6ty"},{"name":"mac","_id":"cj5ox98v70036i983qpzzqt45"},{"name":"vim","_id":"cj5ox98v7003ci983nemaw0tc"},{"name":"react-nativem","_id":"cj5ox98v8003ii983yn1emnc1"},{"name":"autojump","_id":"cj5ox98v8003ji9837qaqzgke"},{"name":"linux","_id":"cj5ox98va003oi983i4o2596z"},{"name":"es7","_id":"cj5ox98va003pi983u8xif47n"},{"name":"blog","_id":"cj5ox98vc003ui9831iskjafr"},{"name":"api","_id":"cj5ox98vf003yi983x4lkgh9v"},{"name":"http","_id":"cj5ox98vg0041i983198vfveb"},{"name":"python","_id":"cj5ox98vg0042i9831qtzbh4q"}]}}